<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CepheusSun</title>
  <subtitle>CepheusSun的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://CepheusSun.github.io/"/>
  <updated>2017-05-24T03:24:35.000Z</updated>
  <id>https://CepheusSun.github.io/</id>
  
  <author>
    <name>CepheusSun</name>
    <email>cd_sunyang@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Swift Syntax Cheat Codes</title>
    <link href="https://CepheusSun.github.io/Swift%20Syntax%20Cheat%20Codes.html"/>
    <id>https://CepheusSun.github.io/Swift Syntax Cheat Codes.html</id>
    <published>2017-05-23T16:05:23.000Z</published>
    <updated>2017-05-24T03:24:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章主要介绍一些很常见的语法。</p>
<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">() -&gt; <span class="type">Void</span></div></pre></td></tr></table></figure>
<p>也叫做 <code>匿名函数</code>。闭包是自包含的函数代码块，可以在代码中被传递和使用。在 <code>C</code> 和 <code>OC</code> 中有 <code>block</code> 与之对应。</p>
<p>如果你之前就有 iOS 开发经验, 你肯定看到过 UIView 动画的 API</p>
<a id="more"></a>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">animate</span>(<span class="title">withDuration</span> <span class="title">duration</span>: <span class="title">NSTimeInterval</span>,</div><div class="line"> <span class="title">animations</span>: @<span class="title">escaping</span>() -&gt; <span class="title">Void</span>)</span></div></pre></td></tr></table></figure>
<p><code>animations</code>就是动画的参数。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="type">UIView</span>.animate(withDuration: <span class="number">10.0</span>, animations: &#123;</div><div class="line">    button.alpha = <span class="number">0</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p><code>animationWithDuration</code> 方法就会使用这个闭包做一件事情:让button慢慢的消失。</p>
<h3 id="尾随闭包"><a href="#尾随闭包" class="headerlink" title="尾随闭包"></a>尾随闭包</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="type">UIView</span>.animate(withDuration: <span class="number">10.0</span>) &#123; </div><div class="line">    button.alpha = <span class="number">0</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这是 Swift 的特性之一, 这样可以节省一些没什么必要存在的代码。看这段的代码, 跟上面的代码调用的是同一个 API, 只是这段代码使用了更简洁的语法。</p>
<p>因为 <code>animate</code> 这个方法的最后一个参数是一个闭包—<strong>尾随闭包</strong>。尾随闭包允许我们在编码的时候省略掉最后的参数名, 并让他从参数列表那个括号里面移出来。这样会让代码更优雅简洁。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">say</span><span class="params">(<span class="number">_</span> message: String, completion: @escaping <span class="params">()</span></span></span> -&gt; <span class="type">Void</span>) &#123;</div><div class="line">    <span class="built_in">print</span>(message)</div><div class="line">    completion()</div><div class="line">&#125;</div><div class="line"><span class="comment">// 没有使用尾随闭包</span></div><div class="line">say(<span class="string">"Hello"</span>, completion: &#123;</div><div class="line">    <span class="comment">// prints: "Hello" </span></div><div class="line">    <span class="comment">// Do some other stuff</span></div><div class="line">&#125;)</div><div class="line"><span class="comment">// 使用了尾随闭包</span></div><div class="line">say(<span class="string">"Hello"</span>) &#123;</div><div class="line">    <span class="comment">// prints: "Hello"</span></div><div class="line">    <span class="comment">// Do some other stuff</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typealias</span></div></pre></td></tr></table></figure>
<p>类型别名是一个很有用的小工具, 能尽可能少的减少重复代码。看下面的例子:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">dance</span><span class="params">(<span class="keyword">do</span>:<span class="params">(Int, String, Double)</span></span></span> -&gt; (<span class="type">Int</span>, <span class="type">String</span>, <span class="type">Double</span>)) &#123;&#125;</div></pre></td></tr></table></figure>
<p>这段代码的功能其实很简单, 但是如果在其他方法中也需要传递这个闭包的话, 我们就应该记住这个闭包, 并且保证在任何我们使用它的地方都是一致的, 不然编译器可能就不高兴了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">dance</span><span class="params">(<span class="keyword">do</span>: <span class="params">(Int, String, Double)</span></span></span> -&gt; (<span class="type">Int</span>, <span class="type">String</span>, <span class="type">Double</span>)) &#123; &#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">sing</span><span class="params">(<span class="keyword">do</span>: <span class="params">(Int, String, Double)</span></span></span> -&gt; (<span class="type">Int</span>, <span class="type">String</span>, <span class="type">Double</span>)) &#123; &#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">act</span><span class="params">(<span class="keyword">do</span>: <span class="params">(Int, String, Double)</span></span></span> -&gt; (<span class="type">Int</span>, <span class="type">String</span>, <span class="type">Double</span>)) &#123; &#125;</div></pre></td></tr></table></figure>
<p>但是如果某个时刻我们需要修改一下这个闭包。这就尴尬了, 上面三个方法都需要去修改。 这就是使用<strong>类型别名</strong>的场景。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typealias</span> <span class="type">TripleThreat</span> = (<span class="type">Int</span>, <span class="type">String</span>, <span class="type">Double</span>) -&gt; (<span class="type">Int</span>, <span class="type">String</span>, <span class="type">Double</span>)</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">dance</span><span class="params">(dance: TripleThreat)</span></span> &#123; &#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">act</span><span class="params">(act: TripleThreat)</span></span> &#123; &#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">sing</span><span class="params">(sing: TripleThreat)</span></span> &#123; &#125;</div></pre></td></tr></table></figure>
<p>这样写的话, 只要我们需要修改这个闭包的时候, 就只需要修改一个地方了。</p>
<p><strong>喜闻乐见的类型别名</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">typealias Void = ()</div><div class="line">typealias NSTimeInterval = Double</div></pre></td></tr></table></figure>
<h3 id="参数名缩写"><a href="#参数名缩写" class="headerlink" title="参数名缩写"></a>参数名缩写</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$<span class="number">0</span>,$<span class="number">1</span>,$<span class="number">2</span></div></pre></td></tr></table></figure>
<p>一个闭包内有参数的情况下, 你可以在闭包定义中省略参数列表，并且对应参数名称缩写的类型会 通过函数类型进行推断。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">say</span><span class="params">(<span class="number">_</span> message: String, completion: <span class="params">(<span class="number">_</span> goodbye: String)</span></span></span> -&gt; <span class="type">Void</span>) &#123;</div><div class="line">    <span class="built_in">print</span>(message)</div><div class="line">    completion(<span class="string">"Goodbye"</span>)</div><div class="line">&#125;</div><div class="line">...</div><div class="line">say(<span class="string">"Hi"</span>) &#123; (goodbye: <span class="type">String</span>) -&gt; <span class="type">Void</span> <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(goodbye)</div><div class="line">&#125;</div><div class="line"><span class="comment">// prints: "Hi"</span></div><div class="line"><span class="comment">// prints: "Goodbye"</span></div></pre></td></tr></table></figure>
<p>这个例子中，这个尾随闭包有一个 <code>String</code> 类型的 <code>goodbye</code> 参数。Xcode 会自动把它放在一个元组里面。用 <code>in</code> 来表示参数、返回值的结束。并另起一行来实现我们想要的功能。当这个闭包很小的时候，这样写就显得代码非常的冗长了。我们来改造一下段代码。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(goodbye: <span class="type">String</span>) -&gt; <span class="type">Void</span> <span class="keyword">in</span></div></pre></td></tr></table></figure>
<p>这段代码完全没有必要写出来。使用参数名缩写就好了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">say(<span class="string">"Hi"</span>) &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line"><span class="comment">// prints: "Hi"</span></div><div class="line"><span class="comment">// prints: "Goodbye"</span></div></pre></td></tr></table></figure>
<p>你看, 这样写完全省略掉了闭包的参数还有返回值声明的代码。因为在这个场景中，我们完全没有必要使用参数名。每个参数都按照声明的顺序命名好了。这么简单, 直接放在一行代码里就可以了。</p>
<p>如果有不止一个参数的时候应该怎么弄呢？我也不想解释了, 直接看下面的代码: </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(goodbye: <span class="type">String</span>, name: <span class="type">String</span>, age: <span class="type">Int</span>) -&gt; <span class="type">Void</span> <span class="keyword">in</span></div><div class="line"><span class="comment">// $0: goodbye</span></div><div class="line"><span class="comment">// $1: name</span></div><div class="line"><span class="comment">// $2: age</span></div></pre></td></tr></table></figure>
<h3 id="返回-Self"><a href="#返回-Self" class="headerlink" title="返回 Self"></a>返回 Self</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-&gt; <span class="type">Self</span></div></pre></td></tr></table></figure>
<p>Swift2.0 带来的一大堆操作符(map, flatmap), 这些操作符更给力的是让我们能够使用 <code>.</code> 语法链式的调用一系列方法。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[<span class="number">1</span> , <span class="number">2</span>, <span class="number">3</span>, <span class="literal">nil</span>, <span class="number">5</span>]</div><div class="line">    .flatMap &#123;$<span class="number">0</span>&#125;    <span class="comment">// 移除空</span></div><div class="line">    .<span class="built_in">filter</span> &#123;$<span class="number">0</span> &lt; <span class="number">3</span>&#125; <span class="comment">// 过滤大于2的值</span></div><div class="line">    .<span class="built_in">map</span> &#123;$<span class="number">0</span> * <span class="number">100</span>&#125;  <span class="comment">// 每个值放大100倍</span></div><div class="line"><span class="comment">// [100, 200]</span></div></pre></td></tr></table></figure>
<p>这样太优雅了, 既可读又易于理解。</p>
<p>假设我们为<code>String</code>建一个扩展, 在字符串的本身上执行一些操作, 而不使函数返回 <code>Void</code> 而是他自己.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// extension UIView</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">with</span><span class="params">(backgroundColor: UIColor)</span></span> -&gt; <span class="type">Self</span> &#123;</div><div class="line">    backgroundColor = color</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">with</span><span class="params">(cornerRadius: CGFloat)</span></span> -&gt; <span class="type">Self</span> &#123;</div><div class="line">    layer.cornerRadius = <span class="number">3</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> view = <span class="type">UIView</span>(frame: <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="number">10</span>, height: <span class="number">10</span>))</div><div class="line">          .with(backgroundColor: .black)</div><div class="line">          .with(cornerRadius: <span class="number">3</span>)</div></pre></td></tr></table></figure>
<h3 id="That’s-it"><a href="#That’s-it" class="headerlink" title="That’s it!"></a>That’s it!</h3><p><a href="https://medium.com/swift-programming/swift-syntax-cheat-codes-9ce4ab4bc82e">原文地址</a></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>我是一名来自中国的 iOS 程序员, 对技术有着浓厚的兴趣, 在学习的过程中, 发现了很多来自国外的优秀博客。为了更好的学习这些文章, 产生了将这些文章翻译成中文的想法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章主要介绍一些很常见的语法。&lt;/p&gt;
&lt;h3 id=&quot;闭包&quot;&gt;&lt;a href=&quot;#闭包&quot; class=&quot;headerlink&quot; title=&quot;闭包&quot;&gt;&lt;/a&gt;闭包&lt;/h3&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;() -&amp;gt; &lt;span class=&quot;type&quot;&gt;Void&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;也叫做 &lt;code&gt;匿名函数&lt;/code&gt;。闭包是自包含的函数代码块，可以在代码中被传递和使用。在 &lt;code&gt;C&lt;/code&gt; 和 &lt;code&gt;OC&lt;/code&gt; 中有 &lt;code&gt;block&lt;/code&gt; 与之对应。&lt;/p&gt;
&lt;p&gt;如果你之前就有 iOS 开发经验, 你肯定看到过 UIView 动画的 API&lt;/p&gt;
    
    </summary>
    
      <category term="Swift" scheme="https://CepheusSun.github.io/categories/Swift/"/>
    
    
      <category term="iOS" scheme="https://CepheusSun.github.io/tags/iOS/"/>
    
      <category term="Swift" scheme="https://CepheusSun.github.io/tags/Swift/"/>
    
      <category term="翻译" scheme="https://CepheusSun.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>Picking the right way of failing in Swift</title>
    <link href="https://CepheusSun.github.io/Picking%20the%20right%20way%20of%20failing%20in%20Swift.html"/>
    <id>https://CepheusSun.github.io/Picking the right way of failing in Swift.html</id>
    <published>2017-05-20T04:37:45.000Z</published>
    <updated>2017-05-20T04:37:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>Swift 的一大特色就是编译安全。这使得我们开发者能够更容易的编写出可预测性的代码, 并且能勾减少运行时错误的发生。但是, 在实际的情况中, 错误发生的原因是千奇百怪的。</p>
<p>我们今天来看一下如果正确的去处理各类错误, 以及我们有什么工具来做这件事情。上一篇文章研究了如何处理 <code>non-optional</code>。 在那篇文章中我使用 <code>guard</code> + <code>preconditionFailure()</code> 代替了强制解包。</p>
<p>之后很多人都在问 <code>preconditionFailure()</code> 和 <code>assert()</code> 有什么区别。 在这篇文章中。我们再仔细的看看这些语言特性。最重要的是在什么情况下使用哪一种？</p>
<a id="more"></a>
<h3 id="Let’s-start-with-a-list"><a href="#Let’s-start-with-a-list" class="headerlink" title="Let’s start with a list"></a>Let’s start with a list</h3><p>我先把我知道的所有异常处理方法列举出来。</p>
<ul>
<li><strong>返回 <code>nil</code> 或者是一个 error 枚举值</strong>, 最简单的异常处理机制就是直接在发生错误的方法中返回 <code>nil</code> 或者是 <code>.error</code>(使用了一个枚举来做为返回值类型的时候)。这中做法在很多的场景中都是有效的, 但是如果任何情况下都这么干的话。可能会导致你代码中的 API 编的非常繁琐。也会带来一些逻辑的错误。</li>
<li><strong>抛出错误信息</strong>, 这要求在处理潜在的错误是使用<code>do</code>、<code>try</code>、<code>catch</code> 语句。另外如果使用 <code>try？</code>错误会被忽略掉。</li>
<li><strong>使用断言 <code>assert()</code> 和 <code>assertionFailure()</code></strong>, 来确定这个表达式是不是成立。默认情况下, 在 Debug 环境下会导致异常的抛出。在 release 下一场会被忽略。所以无法保证这个断言在出发的时候, 程序会立马停止。所以这种模式也可以被理解运行时警告。</li>
<li><strong>使用 <code>precondition()</code> 和 <code>preconditionFailure()</code></strong>来代替断言。跟断义最大的区别就是它们在任何情况下都会发生, 可以确保在发生异常的时候程序会立马停止。</li>
<li><strong>调用 <code>fataError()</code></strong>, 这个函数在 Xcode 自动生成的 <code>init(coder:)</code> 中大概都看到过。只要这个方法被调用就会立马杀掉当前进程。</li>
<li><strong>调用 <code>exit()</code></strong>, 使用这个代码直接结束进程。这在命令行还有脚本中是非常有效的方法。</li>
</ul>
<h3 id="是否可恢复"><a href="#是否可恢复" class="headerlink" title="是否可恢复"></a>是否可恢复</h3><p>这个异常发生之后程序还能否从异常中恢复是选择异常处理方式的重要因素。</p>
<p>比如说。我们向服务器发强请求, 然后得到了错误的请求结果。这种情况无论我们是多么牛逼的程序员, 我们使用了多么强大的服务器基本上肯定都会发生。把这种异常看作是致命异常或者是不可恢复的异常可能就不对了。这种场景中, 我们希望的可能就是给用户展示一些错误信息就可以了。</p>
<p>既然这样, 在这种场景中, 选择什么样的方法来处理异常呢？如果你仔细看了上面的列表, 我们其实可以把这些按照是否可恢复归位两类:</p>
<p><strong>可恢复的</strong></p>
<ul>
<li>返回 <code>nil</code> 或者一个 <code>error</code> 枚举值。</li>
<li>抛出错误信息。</li>
</ul>
<p><strong>不可恢复的</strong></p>
<ul>
<li>assert()</li>
<li>precondition()</li>
<li>fatalError()</li>
<li>exit()</li>
</ul>
<p>既然我们处理的是一个异步的任务, 返回 <code>nil</code> 或者 <code>error</code> 枚举值就是最好的选择了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataLoader</span> </span>&#123;</div><div class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Result</span> </span>&#123;</div><div class="line">        <span class="keyword">case</span> success(<span class="type">Data</span>)</div><div class="line">        <span class="keyword">case</span> failure(<span class="type">Error</span>?)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">loadData</span><span class="params">(from url: URL, completionHandler: @escaping <span class="params">(Result)</span></span></span> -&gt; <span class="type">Void</span>) &#123;</div><div class="line">        <span class="keyword">let</span> task = <span class="type">URLSession</span>.shared.dataTask(with: url) &#123;</div><div class="line">            data, response, error <span class="keyword">in</span></div><div class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> data = data <span class="keyword">else</span> &#123;</div><div class="line">                completionHandler(.failure(error))</div><div class="line">                <span class="keyword">return</span></div><div class="line">            &#125;</div><div class="line">            completionHandler(.success(data))</div><div class="line">        &#125;</div><div class="line">        task.resume()</div><div class="line">    &#125;   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果任务是同步的, 抛出错误应该是最好的方法了。毕竟 API 也是这样设计的。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringFormatter</span> </span>&#123;</div><div class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Error</span>: <span class="title">Swift</span>.<span class="title">Error</span> </span>&#123;</div><div class="line">        <span class="keyword">case</span> emptyString</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">format</span><span class="params">(<span class="number">_</span> string:String)</span></span> <span class="keyword">throws</span> -&gt; <span class="type">String</span> &#123;</div><div class="line">        <span class="keyword">guard</span> !string.isEmpty <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="type">Error</span>.emptyString</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> string.replacingOccurrences(of: <span class="string">"\n"</span>, with: <span class="string">" "</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在有些情况下, 错误是不可恢复的。比如说, 我们需要在程序启动的时候加载配置文件。如果这个配置文件丢失了, 这会把程序带入未定义的状态中。所以这种情况下 crash 可能就要比让程序就运行好得多了。这种情况下, 使用更强的并且不可恢复的方法来让程序崩溃会是更合适的。</p>
<p>在这个例子中, 使用 <code>preconditionFailure()</code> 来停止运行。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">guard</span> <span class="keyword">let</span> config = <span class="type">FileLoader</span>().loadFile(name: <span class="string">"Config.json"</span>) <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">preconditionFailure</span>(<span class="string">"Failed to load config file"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="程序错误和运行错误"><a href="#程序错误和运行错误" class="headerlink" title="程序错误和运行错误"></a>程序错误和运行错误</h3><p>另外一个重要的标准是:异常的发生原因是逻辑还是配置, 或者说这个错误是不是程序流程中合法的部分。基本上判断的标准就是这个错误的原因是因为程序员还是外部因素。</p>
<p>为了减少麻烦, 可能你更愿意使用不可恢复的方法来处理各类错误。这样你就不用写各种代码来处理各种特殊情况了, 并且如果测试做得好的话, 这些错误就能够早的被捕获到了。</p>
<p>比如。 我们在做一个界面, 需要一个 <code>viewModel</code> 在使用之前跟他做好绑定。这个 <code>viewModel</code> 在我们的代码中是一个 <code>optional</code> 类型, 但是我们又不希望每次使用的时候都要强制解包。我们也不希望在这个 <code>viewmodel</code> 莫名其妙消失的时候程序在生产环境中崩溃。使用断言在 <code>debug</code> 下获得错误信息就足够了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DetailView</span>: <span class="title">UIView</span> </span>&#123;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ViewModel</span> </span>&#123;</div><div class="line">        <span class="keyword">var</span> title: <span class="type">String</span></div><div class="line">        <span class="keyword">var</span> subtitle: <span class="type">String</span></div><div class="line">        <span class="keyword">var</span> action: <span class="type">String</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> viewModel: <span class="type">ViewModel</span>?</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> titleLabel = <span class="type">UILabel</span>()</div><div class="line">    <span class="keyword">let</span> subtitleLabel = <span class="type">UILabel</span>()</div><div class="line">    <span class="keyword">let</span> actionButton = <span class="type">UIButton</span>()</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didMoveToSuperview</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didMoveToSuperview()</div><div class="line">        </div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> viewModel = viewModel <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">assertionFailure</span>(<span class="string">"No view model assigned to DetailView."</span>)</div><div class="line">            <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        titleLabel.text = viewModel.title</div><div class="line">        subtitleLabel.text = viewModel.subtitle</div><div class="line">        actionButton.setTitle(viewModel.action, <span class="keyword">for</span>: .normal)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>需要注意的是: 我们必须在上面的 <code>guard</code> 表达式中 <code>return</code>, 不然在 <code>release</code> 条件下 <code>assertFailure()</code> 也没什么作用。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>我希望这篇文章有助于让你理解到各种异常处理方法的区别。我的建议是不要只是专注于技术, 而是要在不同的场景中尝试使用不同的方法。一般情况下, 我更建议大家尽量在程序出错的时候恢复过来, 除非异常是致命的, 都不要影响用户体验。</p>
<p>另外 <code>print(error)</code> 并不是一个异常处理机制。</p>
<p>Thanks for reading! 🚀</p>
<h3 id="That’s-it"><a href="#That’s-it" class="headerlink" title="That’s it!"></a>That’s it!</h3><p><a href="https://medium.com/@johnsundell/picking-the-right-way-of-failing-in-swift-e89125a6b5b5">原文地址</a></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>我是一名来自中国的 iOS 程序员, 对技术有着浓厚的兴趣, 在学习的过程中, 发现了很多来自国外的优秀博客。为了更好的学习这些文章, 产生了将这些文章翻译成中文的想法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Swift 的一大特色就是编译安全。这使得我们开发者能够更容易的编写出可预测性的代码, 并且能勾减少运行时错误的发生。但是, 在实际的情况中, 错误发生的原因是千奇百怪的。&lt;/p&gt;
&lt;p&gt;我们今天来看一下如果正确的去处理各类错误, 以及我们有什么工具来做这件事情。上一篇文章研究了如何处理 &lt;code&gt;non-optional&lt;/code&gt;。 在那篇文章中我使用 &lt;code&gt;guard&lt;/code&gt; + &lt;code&gt;preconditionFailure()&lt;/code&gt; 代替了强制解包。&lt;/p&gt;
&lt;p&gt;之后很多人都在问 &lt;code&gt;preconditionFailure()&lt;/code&gt; 和 &lt;code&gt;assert()&lt;/code&gt; 有什么区别。 在这篇文章中。我们再仔细的看看这些语言特性。最重要的是在什么情况下使用哪一种？&lt;/p&gt;
    
    </summary>
    
      <category term="Swift" scheme="https://CepheusSun.github.io/categories/Swift/"/>
    
    
      <category term="iOS" scheme="https://CepheusSun.github.io/tags/iOS/"/>
    
      <category term="Swift" scheme="https://CepheusSun.github.io/tags/Swift/"/>
    
      <category term="翻译" scheme="https://CepheusSun.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>Using lazy properties in Swift</title>
    <link href="https://CepheusSun.github.io/Using%20lazy%20properties%20in%20Swift.html"/>
    <id>https://CepheusSun.github.io/Using lazy properties in Swift.html</id>
    <published>2017-05-20T04:36:45.000Z</published>
    <updated>2017-05-20T04:37:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>懒加载属于让你可以在需要的时候才初始化, 而不是在初始化这个对象的时候就必须要。懒加载可以用来避免 optional 的使用, 当某个属性的初始化耗费很多资源的时候会提升性能。当然使用懒加载也能让对象的初始化方法看起来很清爽, 因为某些设置会在这个对象的生命周期中被推迟。</p>
<p>这周我们来学习一下 Swift 中懒加载的定义, 以及使用。</p>
<a id="more"></a>
<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>定义一个懒加载属性最简单的办法就是在 <code>var</code> 前加一个 <code>lazy</code> 关键字, 并且还要给 出默认的值。这个默认值会在这个属性被第一次访问的时候被指定, 也就是说在这个对象的初始化方法中这个就不需要再去初始化这个属性了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileLoader</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="built_in">lazy</span> <span class="keyword">var</span> cahce = <span class="type">Cache</span>&lt;<span class="type">File</span>&gt;()</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">loadFile</span><span class="params">(name name: String)</span></span> <span class="keyword">throws</span> -&gt; <span class="type">File</span> &#123;</div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> cachedFile = cahce[name] &#123;</div><div class="line">            <span class="keyword">return</span> cachedFile</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">let</span> file = <span class="keyword">try</span> loadFileFromDisk(fileName: name)</div><div class="line">        cahce[name] = file</div><div class="line">        <span class="keyword">return</span> file</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用工厂方法"><a href="#使用工厂方法" class="headerlink" title="使用工厂方法"></a>使用工厂方法</h3><p>有些时候我们可能需要在这个属性在懒加载的时候设置一些东西, 只是简单的使用它的初始化方法可能就没有那么方便了。这种情况下, 更方便的方法是把这个属性的初始化代理给一个工厂方法。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Scene</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="built_in">lazy</span> <span class="keyword">var</span> eventManager: <span class="type">EventManager</span> = <span class="keyword">self</span>.makeEventManager()</div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">makeEventManager</span><span class="params">()</span></span> -&gt; <span class="type">EventManager</span>&#123;</div><div class="line">        <span class="keyword">let</span> manager = <span class="type">EventManager</span>()</div><div class="line">        <span class="keyword">return</span> manager</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果你不希望你的类里面全是各种 <code>make..()</code> 这类工厂方法, 你可以把这些方法放在一个专门的 <code>extension</code> 中</p>
<h3 id="使用自执行闭包"><a href="#使用自执行闭包" class="headerlink" title="使用自执行闭包"></a>使用自执行闭包</h3><p>除了使用工厂方法来返回这个属性值以外, 你也可以选择在这个属性声明的地方通过一个自执行的闭包来出初始化这个属性。我们看看上面这个情况, 我们应该怎么做吧！</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="built_in">lazy</span> <span class="keyword">var</span> eventManager: <span class="type">EventManager</span> = &#123;</div><div class="line">   <span class="keyword">let</span> manager = <span class="type">EventManager</span>()</div><div class="line">    <span class="keyword">return</span> manager</div><div class="line">&#125;()</div></pre></td></tr></table></figure>
<p>这要做有一个好处: 让这个属性的在同一个地方声明和设置。当然阅读这些代码可能会比较不爽。特别是在这个属性的设置需要很长的代码的时候。我自己的规则是当这个属性的初始化方法只有两三行代码的时候。就是使用这样的方法来初始化懒加载属性。</p>
<h3 id="使用静态工厂方法"><a href="#使用静态工厂方法" class="headerlink" title="使用静态工厂方法"></a>使用静态工厂方法</h3><p>对于那些设置起来更复杂属性, 把这些代码放到其他的类中, 会是更好的办法。这么做, 可以让这个类更加专注于它自己的职责, 让这个类不至于那么复杂。当然这也可以在不使用子类的条件下, 在多个类中共享代码。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="built_in">lazy</span> <span class="keyword">var</span> actionButton: <span class="type">UIButton</span> = <span class="type">ViewFactory</span>.makeActionButton()</div></pre></td></tr></table></figure>
<p>在这个例子中, <code>ViewFactory</code> 这个类包含了这个 <code>controller</code> 中所有控件的初始化方法。不用引入更多的类, 也不用让继承树变复杂。如果我们希望在另外一个 <code>controller</code> 中使用这个按钮, 也只需要调用同一个 API 就好了 <code>ViewFactory.makeActionButton()</code></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>可能有人会问, 有没有什么大一统的方法来使用懒加载呢？ 个人认为没有. 写代码就是这样, 选择最合适的方法来处理不同的业务需求才是最正确的做法。而且我自己也在日常开发中使用上面所有的方法。</p>
<p>Twitter 又一个问题: 使用不同的方法, 对编译时间有什么影响呢？我做了一些基本的测试, 并没有发现这其中有什么差别。当然这也跟这个懒加载属性有关。</p>
<p>Thanks for reading! 🚀</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;懒加载属于让你可以在需要的时候才初始化, 而不是在初始化这个对象的时候就必须要。懒加载可以用来避免 optional 的使用, 当某个属性的初始化耗费很多资源的时候会提升性能。当然使用懒加载也能让对象的初始化方法看起来很清爽, 因为某些设置会在这个对象的生命周期中被推迟。&lt;/p&gt;
&lt;p&gt;这周我们来学习一下 Swift 中懒加载的定义, 以及使用。&lt;/p&gt;
    
    </summary>
    
      <category term="Swift" scheme="https://CepheusSun.github.io/categories/Swift/"/>
    
    
      <category term="iOS" scheme="https://CepheusSun.github.io/tags/iOS/"/>
    
      <category term="Swift" scheme="https://CepheusSun.github.io/tags/Swift/"/>
    
      <category term="翻译" scheme="https://CepheusSun.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>Protocol Oriented Programming View in Swift 3</title>
    <link href="https://CepheusSun.github.io/Protocol%20Oriented%20Programming%20View%20in%20Swift%203.html"/>
    <id>https://CepheusSun.github.io/Protocol Oriented Programming View in Swift 3.html</id>
    <published>2017-05-14T09:28:23.000Z</published>
    <updated>2017-05-14T09:28:46.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>学习如何在不创建一大堆类的前提下做按钮、label、图片的动画。</p>
</blockquote>
<p>掌握了足够的知识而不去使用它, 就像你长了满口的牙齿, 但是成天都喝牛奶一样。 掌握了足够的理论知识, 在项目中怎么使用 POP 呢？🤔</p>
<a id="more"></a>
<h3 id="What-I-think-you-will-learn"><a href="#What-I-think-you-will-learn" class="headerlink" title="What I think you will learn"></a>What I think you will learn</h3><p>使用协议让 UI 组件做动画。也会用传统的方法来更 POP 比较。😎</p>
<h4 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h4><p>这个 demo 叫 “Welcome to My House Party”。 我写这个app 来验证你是否被邀请。你得输入你的邀请码。<strong>这个 app 没有逻辑相关的东西，按下这个按钮之后, 上面的控件都会动起来</strong> 界面上有4个组件会动。 <code>passcodeTextField</code>、<code>loginButton</code>、<code>errorMessageLabel</code>、<code>profileImageView</code>.</p>
<p>一共有两种动画类型 </p>
<ol>
<li>Buzzing </li>
<li>Popping</li>
</ol>
<center><br><img src="https://cdn-images-1.medium.com/max/1600/1*uN6sB588ehZIivOmmAsLPg.gif" alt=""><br></center>

<p>不要担心跟不上，只需要跟着节奏往下走就行了。如果你没信心了，滑到最后面，把 Demo 下下来, 直接看代码就行了。</p>
<h4 id="Things-Back-Then"><a href="#Things-Back-Then" class="headerlink" title="Things Back Then"></a>Things Back Then</h4><p>要真正掌握在实际情况中 POP 的魔力，我们先比较一下传统的写法。你可能会创造两个子类然后给她添加一个方法。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuzzableButton</span>: <span class="title">UIButton</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">buzz</span><span class="params">()</span></span> &#123;<span class="comment">// Animation Logic&#125;</span></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuzzableLabel</span>: <span class="title">UILabel</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">buzz</span><span class="params">()</span></span> &#123;<span class="comment">// Animation Logic&#125;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后让他动起来，当你点击这个按钮</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> errorMessageLabel: <span class="type">BuzzableLabel</span>!</div><div class="line"><span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> loginButton: <span class="type">BuzzableButton</span>!</div><div class="line"></div><div class="line"><span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">didtapLoginButton</span><span class="params">(<span class="number">_</span> sender: UIButton)</span></span> &#123;</div><div class="line">    errorMessageLabel.buzz()</div><div class="line">    loginButton.buzz()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>你看到我们重复了几次相同的事情了吗？ 动画的逻辑至少都需要5行代码。既然用 extension 是更好的办法。 UILabel 和 UIButton 都继承了 UIView。 我们可以这样。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIView</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">buzz</span><span class="params">()</span></span> &#123; <span class="comment">// Animation Logic &#125;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在 <code>BuzzableButton</code> 还有 <code>BuzzableLabel</code> 都有 <code>buzz</code> 这个方法了。 现在我们就没有重复了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuzzableButton</span>: <span class="title">UIButton</span> </span>&#123;&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuzzableLabel</span>: <span class="title">UILabel</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> errorMessageLabel: <span class="type">BuzzableLabel</span>!</div><div class="line"><span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> loginButton: <span class="type">BuzzableButton</span>!</div><div class="line"></div><div class="line"><span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">didTapLoginButton</span><span class="params">(<span class="number">_</span> sender: UIButton)</span></span> &#123;</div><div class="line"> errorMessageLabel.buzz()</div><div class="line"> loginButton.buzz() </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Okay-then-why-POP-🤔"><a href="#Okay-then-why-POP-🤔" class="headerlink" title="Okay, then why POP? 🤔"></a>Okay, then why POP? 🤔</h4><p>你应该也看见了那个写着 “Please enter valid code 😂” 的<code>errorMessageLabel</code> 还有另外一个动画。她先是出现然后在消失。所以, 之前的方法是怎么样的呢？</p>
<p>有两个方法来做这件事情。首先你需要再给 <code>UIView</code> 添加一个方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// Extend UIView</div><div class="line">extension UIView &#123;</div><div class="line">    func buzz() &#123; // Animation Logic&#125;</div><div class="line">    func pop() &#123; // UILable Animation Logic &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但是如果我们给 UIView 添加了这个方法。这个方法在其他的组件上也有了。包括他的子类 <code>UILabel</code>。 我们继承了没有必要的方法。这些组件也莫名其妙的变的很臃肿了。</p>
<p>还有一个方法是给 <code>UILabel</code> 添加一个子类，</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Subclass UILabel</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuzzableLabel</span>: <span class="title">UILabel</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pop</span><span class="params">()</span></span> &#123; <span class="comment">// UILabel Animation Logic &#125;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这也能实现。但是可能我们还需要把这个类的名字改一下，然它更直观一点.换成 <code>BuzzablePoppableLabel</code> 吧！</p>
<p>如果你想给这个 Label 添加更多的方法。为了让这个 Label 更直观的表达它的作用，可能名字又得改了 <code>BuzzablePoppableFlashableDopeFancyLovelyLabel</code> 这显然非常的不可持续。</p>
<h3 id="Protocol-Oriented-Programming"><a href="#Protocol-Oriented-Programming" class="headerlink" title="Protocol Oriented Programming"></a>Protocol Oriented Programming</h3><p>用子类来实现就是这样的。选择我们先写一个协议吧！ Buzzing</p>
<p>因为动画的代码都比较长，我没有在这里写出来。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Buzzable</span> </span>&#123;&#125;</div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Buzzable</span> <span class="title">where</span> <span class="title">Self</span>: <span class="title">UIview</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">buzz</span><span class="params">()</span></span> &#123; <span class="comment">// Animation Logic&#125;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>只要遵守了这个协议的 UI 组件就都有 Buzz 这个方法了。与 extension 不同的是，只有遵守的这个协议才会有这个方法。并且我是用了 <code>where Self: UIView</code> 来声明这个协议只能被 UIView 及其子类遵守。</p>
<p>既然这样，我们就先给 <code>loginButton</code>, <code>passcodeTextField</code>, <code>errorMessageLabel</code>、<code>profileImageView</code> 加上这个协议吧。<br>对了，还有 pop</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Poppable</span> </span>&#123;&#125;</div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Poppable</span> <span class="title">where</span> <span class="title">Self</span>: <span class="title">UIView</span> </span>&#123;</div><div class="line"> <span class="function"><span class="keyword">func</span> <span class="title">pop</span><span class="params">()</span></span> &#123; <span class="comment">// Pop Animation Logic &#125;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>好了现在可以开始写了</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuzzableTextField</span>: <span class="title">UITextField</span>, <span class="title">Buzzable</span> </span>&#123;&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuzzableButton</span>: <span class="title">UIButton</span>, <span class="title">Buzzable</span> </span>&#123;&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuzzableImageView</span>: <span class="title">UIImageView</span>, <span class="title">Buzzable</span> </span>&#123;&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuzzablePoppableLabel</span>: <span class="title">UILabel</span>, <span class="title">Buzzable</span>, <span class="title">Poppable</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line">  <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> passcodTextField: <span class="type">BuzzableTextField</span>!</div><div class="line">  <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> loginButton: <span class="type">BuzzableButton</span>!</div><div class="line">  <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> errorMessageLabel: <span class="type">BuzzablePoppableLabel</span>!</div><div class="line">  <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> profileImageView: <span class="type">BuzzableImageView</span>!</div><div class="line">  </div><div class="line">  <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">didTabLoginButton</span><span class="params">(<span class="number">_</span> sender: UIButton)</span></span> &#123;</div><div class="line">    passcodTextField.buzz()</div><div class="line">    loginButton.buzz()</div><div class="line">    errorMessageLabel.buzz()</div><div class="line">    errorMessageLabel.pop()</div><div class="line">    profileImageView.buzz()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最方便的事情是我们都不需要使用子类就可能给任何的 UI 组件添加 pop 这个方法了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">class MyImageView: UIImageVIew, Buzzable, Poppable</div></pre></td></tr></table></figure>
<p>现在，类的名称就可以变的更加的灵活了。因为你已经知道了这些协议的方法，并且这些协议也描述了这些类，所以也不用 <code>MyBuzzablePoppableProfileImage</code> 了。</p>
<ul>
<li>没有子类</li>
<li>类名更灵活</li>
<li>更 Swifty</li>
</ul>
<p><a href="https://github.com/CepheusSun/Translate/tree/master/demos/Protocol%20Oriented%20Programming%20View%20in%20Swift%203">SourceCode</a></p>
<h3 id="That’s-it"><a href="#That’s-it" class="headerlink" title="That’s it!"></a>That’s it!</h3><p><a href="https://blog.bobthedeveloper.io/protocol-oriented-programming-view-in-swift-3-8bcb3305c427">原文地址</a></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>我是一名来自中国的 iOS 程序员, 对技术有着浓厚的兴趣, 在学习的过程中, 发现了很多来自国外的优秀博客。为了更好的学习这些文章, 产生了将这些文章翻译成中文的想法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;学习如何在不创建一大堆类的前提下做按钮、label、图片的动画。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;掌握了足够的知识而不去使用它, 就像你长了满口的牙齿, 但是成天都喝牛奶一样。 掌握了足够的理论知识, 在项目中怎么使用 POP 呢？🤔&lt;/p&gt;
    
    </summary>
    
      <category term="POP" scheme="https://CepheusSun.github.io/categories/POP/"/>
    
    
      <category term="iOS" scheme="https://CepheusSun.github.io/tags/iOS/"/>
    
      <category term="Swift" scheme="https://CepheusSun.github.io/tags/Swift/"/>
    
      <category term="翻译" scheme="https://CepheusSun.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="POP" scheme="https://CepheusSun.github.io/tags/POP/"/>
    
  </entry>
  
  <entry>
    <title>Introduction to Protocol Oriented Programming in Swift</title>
    <link href="https://CepheusSun.github.io/Introduction%20to%20Protocol%20Oriented%20Programming%20in%20Swift.html"/>
    <id>https://CepheusSun.github.io/Introduction to Protocol Oriented Programming in Swift.html</id>
    <published>2017-05-13T16:05:23.000Z</published>
    <updated>2017-05-13T16:07:48.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>OOP is okay, but could’ve been better</p>
</blockquote>
<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>即使你还不知道 Class 和 Struct 基本的区别, 你也可以看这个文章。都知道 Struct 不能继承, 但是, 为什么呢？</p>
<p>如果你还不知道上面这个问题的答案, 花两分钟时间读一下下面这段代码。这些代码是写在 playground 上的</p>
<a id="more"></a>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HumanClass</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> name: <span class="type">String</span></div><div class="line">    <span class="keyword">init</span>(name: <span class="type">String</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.name = name</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> classHuman = <span class="type">HumanClass</span>(name: <span class="string">"Bob"</span>)</div><div class="line"><span class="comment">// "Bob"</span></div><div class="line">classHuman.name</div><div class="line"><span class="comment">// Created a "copied" object</span></div><div class="line"><span class="keyword">var</span> newClassHuman = classHuman</div><div class="line">newClassHuman.name = <span class="string">"Bobby"</span></div><div class="line">classHuman.name <span class="comment">//"Bobby"</span></div></pre></td></tr></table></figure>
<p>等我们改变 <code>newClassHuman</code> 的 <code>name</code> 属性为 <code>“Bobby”</code> 之后, <code>classHuman</code> 的 <code>name</code> 属性也变成 <code>“Bobby”</code> 了。</p>
<p>我们再看看 Struct </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">HumanStruct</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> name: <span class="type">String</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> humanStruct = <span class="type">HumanStruct</span>(name: <span class="string">"Bob"</span>)</div><div class="line"><span class="keyword">var</span> newHumanStruct = humanStruct</div><div class="line">newHumanStruct.name = <span class="string">"Bobby"</span></div><div class="line">humanStruct.name  <span class="comment">// "Bobby"</span></div></pre></td></tr></table></figure>
<p>看出来区别了吗？ 改变复制出来的 <code>newHumanStruct</code> 的 <code>name</code> 属性比呢没有改变原始的 <code>humanStruct</code> 的 <code>name</code> 属性。</p>
<p>对于 Class 来说, 这样的复制出来的对象, 和原来的对象都指向的是内存中的同一个对象。对任何一个对象的改变, 都会改变其他的对象(引用类型)。 对于 Struct 来说, 在传递和赋值的时候会创造一个新的对象(值类型)</p>
<p><a href="https://www.youtube.com/watch?v=MNnfUwzJ4ig">这里有一个介绍这个概念的视频</a></p>
<h3 id="Bye-OOP"><a href="#Bye-OOP" class="headerlink" title="Bye OOP"></a>Bye OOP</h3><p>你可能会比较好奇为什么我讲了半天跟面向协议编程没关系的东西。在我开始将 POP 对比 OOP 的优势之前， 你得理解引用类型和值类型的区别。</p>
<p>这里有一些毋庸置疑的 OOP 的优势, 也是劣势。</p>
<ol>
<li>创建一个子类, 这个子类会继承一些并不需要的属性和方法。这会让这个子类变的臃肿。</li>
<li>当你有很多的继承关系的时候, 找到各个类之间的关系, 就变的比较困难了。</li>
<li>当对象指向的内存中的同一块地址的时候, 如果对其中一个进行了修改, 所有的都会变。</li>
</ol>
<p>顺便看一下 UIKit 中的 OOP 吧</p>
<center><br><img src="https://cdn-images-1.medium.com/max/1600/1*hjEXB3PGUOSbxet0qUJRNA.png" alt=""><br>2015 WWDC_Hideous Structure<br></center>

<p>如果你是刚进苹果的工程师, 你能够搞定这些东西吗？我们在使用它的时候总觉的会比较混乱。</p>
<p>有人说 OOP 是一个让你的代码变的想意大利面那样乱的模块化方案。如果你想要更多吐槽 OOP 的内容. <a href="https://content.pivotal.io/blog/all-evidence-points-to-oop-being-bullshit">这儿</a><a href="https://krakendev.io/blog/subclassing-can-suck-and-heres-why">这儿</a><a href="http://www.smashcompany.com/technology/object-oriented-programming-is-an-expensive-disaster-which-must-end">这儿</a><a href="https://www.leaseweb.com/labs/2015/08/object-oriented-programming-is-exceptionally-bad/">还有这儿</a></p>
<h3 id="Welcome-POP"><a href="#Welcome-POP" class="headerlink" title="Welcome POP"></a>Welcome POP</h3><p>你可能已经猜到了, POP 的基础不是类, 而是值类型变量。没有引用，不像刚刚看到的金字塔结构。 POP 喜欢扁平的, 没那么多嵌套关系的代码。</p>
<p>只是吓你一下啦, 下面我们看看苹果爸爸的官方定义。</p>
<blockquote>
<p>“A protocol defines a blueprint of methods, properties… The protocol can then be adopted by a class, structure, or enumeration” — Apple</p>
<p>协议定义了方法属性的蓝图, 协议可以被类、结构体、还有枚举实现。</p>
</blockquote>
<h3 id="Getting-Real-with-POP"><a href="#Getting-Real-with-POP" class="headerlink" title="Getting Real with POP"></a>Getting Real with POP</h3><p>首先我们设计一下 human 这个东西。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Human</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> name: <span class="type">String</span> &#123;<span class="keyword">get</span> <span class="keyword">set</span>&#125;</div><div class="line">    <span class="keyword">var</span> race: <span class="type">String</span> &#123;<span class="keyword">get</span> <span class="keyword">set</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">sayHi</span><span class="params">()</span></span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这个协议中, 我没有申明 <code>drinking</code>. 它只是声明一些一定存在的东西。现在先不要纠结 <code>{get set}</code>. 它只是表明你可以给这个属性赋值也可以取值。先不要担心, 除非你要使用计算属性。</p>
<p>我们在定义一个韩国人 🇰🇷 结构体, 来实现这个协议。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Korean</span>: <span class="title">Human</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> name: <span class="type">String</span> = <span class="string">"Bob Lee"</span></div><div class="line">    <span class="keyword">var</span> race: <span class="type">String</span> = <span class="string">"Asian"</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">sayHi</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"Hi, I'm <span class="subst">\(name)</span>"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>只要这个结构体遵守了这个协议，它就必须要实现这个协议中的多有方法和属性。如果没有的话 Xcode 就会报错😡</p>
<p>只要是遵守了这个蓝图。你就可以做其他任何事情了, 盖一座长城也没关系。</p>
<p>我们在来实现一个美国人 🇺🇸</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Korean</span>: <span class="title">Human</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> name: <span class="type">String</span> = <span class="string">"Joe Smith"</span></div><div class="line">    <span class="keyword">var</span> race: <span class="type">String</span> = <span class="string">"White"</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">sayHi</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"Hi, I'm <span class="subst">\(name)</span>"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>很酷吧！ 不需要用那些 <code>init</code> <code>override</code> 关键字。 开始感兴趣了吗？</p>
<p><a href="https://www.youtube.com/watch?v=lyzcERHGH_8&amp;t=2s&amp;list=PL8btZwalbjYm5xDXDURW9u86vCtRKaHML&amp;index=1">Intro to Protocol Lesson</a></p>
<h3 id="Protocol-Inheritance"><a href="#Protocol-Inheritance" class="headerlink" title="Protocol Inheritance"></a>Protocol Inheritance</h3><p>如果你想要一个 <code>superman</code> 的协议。这个协议也需要遵守 <code>Human</code> 这个协议呢？</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">SuperHuman</span>: <span class="title">Human</span> </span>&#123;</div><div class="line"> <span class="keyword">var</span> canFly: <span class="type">Bool</span> &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125; </div><div class="line"> <span class="function"><span class="keyword">func</span> <span class="title">punch</span><span class="params">()</span></span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在如果你有一个遵守了 <code>SuperMan</code> 这个协议的类或者结构体的话，这个类也必须实现 <code>Human</code> 这个协议中的方法。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SuperSaiyan</span>: <span class="title">SuperMan</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> name: <span class="type">String</span> = <span class="string">"Goku"</span></div><div class="line">    <span class="keyword">var</span> race: <span class="type">String</span> = <span class="string">"Asian"</span></div><div class="line">    <span class="keyword">var</span> canFly: <span class="type">Bool</span> = <span class="literal">true</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">sayHi</span><span class="params">()</span></span> &#123; <span class="built_in">print</span>(<span class="string">"Hi, I'm <span class="subst">\(name)</span>"</span>) &#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">punch</span><span class="params">()</span></span> &#123; <span class="built_in">print</span>(<span class="string">"Puuooookkk"</span>) &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当然你也可以遵守多个协议。就可以实现多继承了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Example</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Example</span>: <span class="title">ProtocolOne</span>, <span class="title">ProtocolTwo</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>
<h3 id="Protocol-Extension"><a href="#Protocol-Extension" class="headerlink" title="Protocol Extension"></a>Protocol Extension</h3><p>下面才是协议最强大的特性了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Super Animal speaks English</span></div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">SuperAnimal</span> </span>&#123;</div><div class="line"> <span class="function"><span class="keyword">func</span> <span class="title">speakEnglish</span><span class="params">()</span></span> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>给这个协议加一个 <code>Extension</code></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">SuperAnimal</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">speakEnglish</span><span class="params">()</span></span> &#123; <span class="built_in">print</span>(<span class="string">"I speak English, pretty cool, huh?"</span>)&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在再创建一个遵守这个协议的类</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Donkey</span>: <span class="title">SuperAnimal</span> </span>&#123;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> ramon = <span class="type">Donkey</span>()</div><div class="line">ramon.speakEnglish()</div><div class="line"><span class="comment">//  "I speak English, pretty cool, huh?"</span></div></pre></td></tr></table></figure>
<p>如果你使用了 <code>Extension</code> 就可以给这个协议添加默认的实现和属性值了。这样不爽吗？</p>
<h3 id="Protocol-as-Type-Last"><a href="#Protocol-as-Type-Last" class="headerlink" title="Protocol as Type(Last)"></a>Protocol as Type(Last)</h3><p>如果我跟你说我能在一个数组中同时放一个对象和一个结构体呢？😮</p>
<p>我要用袋鼠打架求偶来写一个 demo 了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Fightable</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">legKick</span><span class="params">()</span></span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">StructKangaroo</span>: <span class="title">Fightable</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">legKick</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"Puuook"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassKangroo</span>: <span class="title">Fightable</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">legKick</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"Pakkkk"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后初始化俩袋鼠出来</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> structKangroo = <span class="type">StructKangaroo</span>()</div><div class="line"><span class="keyword">let</span> classKangroo = <span class="type">ClassKangroo</span>()</div></pre></td></tr></table></figure>
<p>现在就可以把他们放在一个数组中了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> kangaroos: [<span class="type">Fightable</span>] = [structKang, classKang]</div></pre></td></tr></table></figure>
<p>难以置信吧！ 再看看</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> kang <span class="keyword">in</span> kangaroos &#123; </div><div class="line"> kang.legKick() </div><div class="line">&#125;</div><div class="line"><span class="comment">// "Puuook"</span></div><div class="line"><span class="comment">// "Pakkkk"</span></div></pre></td></tr></table></figure>
<p>这很爽吧！ 想象在 OOP 中我们怎么实现这个东西呢？</p>
<h3 id="That’s-it"><a href="#That’s-it" class="headerlink" title="That’s it!"></a>That’s it!</h3><p><a href="https://blog.bobthedeveloper.io/protocol-oriented-programming-view-in-swift-3-8bcb3305c427">原文地址</a></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>我是一名来自中国的 iOS 程序员, 对技术有着浓厚的兴趣, 在学习的过程中, 发现了很多来自国外的优秀博客。为了更好的学习这些文章, 产生了将这些文章翻译成中文的想法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;OOP is okay, but could’ve been better&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;&lt;p&gt;即使你还不知道 Class 和 Struct 基本的区别, 你也可以看这个文章。都知道 Struct 不能继承, 但是, 为什么呢？&lt;/p&gt;
&lt;p&gt;如果你还不知道上面这个问题的答案, 花两分钟时间读一下下面这段代码。这些代码是写在 playground 上的&lt;/p&gt;
    
    </summary>
    
      <category term="POP" scheme="https://CepheusSun.github.io/categories/POP/"/>
    
    
      <category term="iOS" scheme="https://CepheusSun.github.io/tags/iOS/"/>
    
      <category term="Swift" scheme="https://CepheusSun.github.io/tags/Swift/"/>
    
      <category term="翻译" scheme="https://CepheusSun.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="POP" scheme="https://CepheusSun.github.io/tags/POP/"/>
    
  </entry>
  
  <entry>
    <title>RxSwift MVVM API Manual 📃</title>
    <link href="https://CepheusSun.github.io/RxSwift%20MVVM%20API%20Manual.html"/>
    <id>https://CepheusSun.github.io/RxSwift MVVM API Manual.html</id>
    <published>2017-05-07T11:02:57.000Z</published>
    <updated>2017-05-19T02:40:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>现在我们掌握了所有的工具, 也明确了他存在的风险以及规避的方法。现在是时候想想应该怎么样最大可能的运用它了。以 MVVM 为例。</p>
<p>又很多方法来写 RxSwift 的 API。 我怕的做法是: 利用 RxSwift 很酷的观察者模式和很方便的操作符, 管理异步的任务。可能不是 100% 纯正的 RxSwift。 在将我做过很多的尝试试图将两种编程思维统一起来,但是我都失败了。</p>
<p>下面是一些我使用 RxSwift 的方法。</p>
<a id="more"></a>
<h3 id="Be-Consistent"><a href="#Be-Consistent" class="headerlink" title="Be Consistent"></a>Be Consistent</h3><p>这是在接口设计中最重要的事情, 如果你做出了选择。就坚持下去。</p>
<p>既然如此, 现在就开始吧！<strong>input vs output</strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FilterViewModel</span> </span>&#123;</div><div class="line">    <span class="comment">//Input</span></div><div class="line">    <span class="keyword">let</span> filterButtonEvents: <span class="type">BehaviorSubject</span>&lt;<span class="type">Int</span>&gt;</div><div class="line">    <span class="keyword">let</span> filterSelectionEvent: <span class="type">PublishSubject</span>&lt;<span class="type">Int</span>&gt;</div><div class="line">    </div><div class="line">    <span class="comment">//OutPut</span></div><div class="line">    <span class="keyword">let</span> currentFilter: <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;</div><div class="line">    <span class="keyword">let</span> shouldShowFilter: <span class="type">Observable</span>&lt;<span class="type">Bool</span>&gt;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有好几个可以用来声明 inout 和 output 的组合。这是我最喜欢的一个。</p>
<h4 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h4><p>通过将 <code>input</code> 声明成 <code>subject</code> 类型。我可以很方便的使用 <code>RxSwift</code> 中的各种操作符。我用的最多的应该是 <strong>throttle</strong>。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filterButtonEvents</div><div class="line">    .throttle(<span class="number">0.5</span>, scheduler: <span class="type">MainScheduler</span>.instance)</div><div class="line">    .subscribe(onNext: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] (counter) <span class="keyword">in</span></div><div class="line">    <span class="keyword">self</span>?.makeRequest()</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>当然用 observable 做 input 也是可以的。</p>
<h4 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h4><p>记住 <code>output</code> 应该是 <code>Observable</code>, 甚至是 <code>Subject</code>。 如果不这样的话，一些外部的类可能会错误的把这他当做是 <code>input</code> 这样就打破了封装了。当我想要发出一个变量的时候, 就是强制的释放。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(observable <span class="keyword">as</span>! <span class="type">PublishSubject</span>)</div><div class="line">    .onNext(<span class="string">"Ugly..."</span>)</div></pre></td></tr></table></figure>
<p>如果你知道有更好的方法, 一定要告诉我。我感觉这么干是在是不优雅😱。</p>
<h3 id="Safety"><a href="#Safety" class="headerlink" title="Safety"></a>Safety</h3><p>如果在一个简单的 Demo 中, 你可能记得做所有的细节。但在一个复杂的 app 中, 你几乎不可能记得住所有的实现细节。这里面可能有好几百个订阅者。 <code>Observable</code> 又是一个非常广泛的类型。都还没有说这个信号是热信号还是冷信号, 他是在主线程还是在后台线程中运行。这也是 <code>Driver</code> 被设计出来的原因, 为了让 API 更加明确。我们鼓励自己去创建一些单元。</p>
<p><strong>Driver</strong> 是一个热信号, 而且是运行在主线程当中的。好想忽略掉了冷信号？没关系, 创造一个就是了。我称他作 <strong>Template</strong> 因为冷信号就是是一个模版, 在这个模版中你可以用 <code>subscribe</code> 来运行他。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Template</span>&lt;<span class="title">Element</span>&gt; </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> observable: <span class="type">Observable</span>&lt;<span class="type">Element</span>&gt;</div><div class="line">    </div><div class="line">    <span class="keyword">init</span>(<span class="number">_</span> subscribe: @escaping (<span class="type">AnyObserver</span>&lt;<span class="type">Element</span>&gt;) -&gt; <span class="type">Disposable</span>) &#123;</div><div class="line">        observable = <span class="type">Observable</span>.create(subscribe)</div><div class="line">            .subscribeOn(<span class="type">MainScheduler</span>.instance)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样 <code>Template</code> 就能确保是一个在主线程中执行的冷信号。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">class MyViewModel &#123;</div><div class="line"> //Cold ❄️</div><div class="line"> let createRequest : Template&lt;Int&gt;</div><div class="line"> //Hot 🌶</div><div class="line"> let shouldShowElement : Driver&lt;Bool&gt;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样看, 程序中暴露的接口就很明确了。</p>
<h3 id="MVVM-State-Machine"><a href="#MVVM-State-Machine" class="headerlink" title="MVVM State Machine"></a>MVVM State Machine</h3><p>涉及到状态的管理的时候, <code>ViewController</code> 经常会变得很复杂。如果在 <code>viewModel</code> 中使用状态机, 来告诉 <code>ViewController</code> 在什么时候应该怎么做。<a href="http://curtclifton.net/generic-state-machine-in-swift">这里有一篇不错的文章</a></p>
<ul>
<li>把这些状态放在一个枚举里面, 而不是分散在各个地方。这样做可以极大的减少你的 <code>Observable</code>。</li>
<li>这也会强迫你吧更多的逻辑移到 <code>ViewModel</code> 里面。</li>
<li>让你的代码更加的具有声明性。<br>👋</li>
</ul>
<p><a href="http://swiftpearls.com/mvvm-state-manage.html">原文地址</a></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>我是一名来自中国的 iOS 程序员, 对技术有着浓厚的兴趣, 在学习的过程中, 发现了很多来自国外的优秀博客。为了更好的学习这些文章, 产生了将这些文章翻译成中文的想法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在我们掌握了所有的工具, 也明确了他存在的风险以及规避的方法。现在是时候想想应该怎么样最大可能的运用它了。以 MVVM 为例。&lt;/p&gt;
&lt;p&gt;又很多方法来写 RxSwift 的 API。 我怕的做法是: 利用 RxSwift 很酷的观察者模式和很方便的操作符, 管理异步的任务。可能不是 100% 纯正的 RxSwift。 在将我做过很多的尝试试图将两种编程思维统一起来,但是我都失败了。&lt;/p&gt;
&lt;p&gt;下面是一些我使用 RxSwift 的方法。&lt;/p&gt;
    
    </summary>
    
      <category term="Reactive" scheme="https://CepheusSun.github.io/categories/Reactive/"/>
    
    
      <category term="iOS" scheme="https://CepheusSun.github.io/tags/iOS/"/>
    
      <category term="Swift" scheme="https://CepheusSun.github.io/tags/Swift/"/>
    
      <category term="翻译" scheme="https://CepheusSun.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="Reactive" scheme="https://CepheusSun.github.io/tags/Reactive/"/>
    
  </entry>
  
  <entry>
    <title>RxSwift Safety Manual 📚</title>
    <link href="https://CepheusSun.github.io/RxSwift%20Safety%20Manual.html"/>
    <id>https://CepheusSun.github.io/RxSwift Safety Manual.html</id>
    <published>2017-05-07T09:19:57.000Z</published>
    <updated>2017-05-19T02:41:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>RxSwift 提供了大量非常好用的工具, 让写代码更爽, 但是他也可能给你带来一些头疼的地方, 也可能是bug😱。 用了三个月之后我觉得我应该也可以给出一些建议来避免一些问题。</p>
<a id="more"></a>
<h3 id="Side-Effects"><a href="#Side-Effects" class="headerlink" title="Side Effects"></a>Side Effects</h3><p>在计算机科学中副作用这个词可能没那么容易理解, 因为这是一个非常宽泛的内容。在 <a href="http://softwareengineering.stackexchange.com/questions/40297/what-is-a-side-effect">Stackoverflow</a> 有一些比较好的讨论。</p>
<p>简单点说, 一个函数/闭包/…如果他们改变了 app 的状态, 都有可能带来一些副作用。在下面的例子中：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    <span class="comment">// 这样写没有副作用</span></div><div class="line">    observer.onNext(<span class="number">1</span>)</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> observableWithSideEffect = <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    <span class="comment">// 这里就会有副作用: 这个 closure 改变了 counter 的值</span></div><div class="line">    counter = counter + <span class="number">1</span></div><div class="line">    observer.onNext(counter)</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为什么在 RxSwift 中这个很重要呢? 因为对于冷信号❄️来说。<strong>每次被订阅他都会执行一下里面的任务</strong></p>
<p>我们两次订阅这个 <code>observableWithSideEffect</code>: </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">observableWithSideEffect</div><div class="line">    .subscribe(onNext: &#123; (counter) <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(counter)</div><div class="line">    &#125;).addDisposableTo(disposeBag)</div><div class="line"></div><div class="line">observableWithSideEffect</div><div class="line">    .subscribe(onNext: &#123; (counter) <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(counter)</div><div class="line">    &#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>我们可能希望他输出的是两个2.但是事实上它会输出2，3. 因为每次订阅都会分别执行, 所以在闭包里面的代码会被执行两次。<strong>所以 counter + 1 会执行两次</strong></p>
<p>也就是说, 如果你在这里面房里两个网络请求。<strong>它会发出两次请求</strong></p>
<p>我们怎么来解决这个问题呢？ 把这个冷信号转换成热信号💡。 使用 <strong>publish</strong> connect 还有 refCount 就可以了,这是<a href="http://www.tailec.com/blog/understanding-publish-connect-refcount-share">完整细节</a>。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> counter = <span class="number">1</span></div><div class="line"><span class="keyword">let</span> observableWithSideEffect = <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    counter = counter + <span class="number">1</span></div><div class="line">    observer.onNext(counter)</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;.publish()</div><div class="line"><span class="comment">// publish returns an observable with a shared subscription(hot).</span></div><div class="line"><span class="comment">// It's not active yet</span></div><div class="line"></div><div class="line">observableWithSideEffect</div><div class="line">    .subscribe(onNext: &#123; (counter) <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(counter)</div><div class="line">    &#125;).addDisposableTo(disposeBag)</div><div class="line"></div><div class="line">observableWithSideEffect</div><div class="line">    .connect()</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>这会输出 2，2</p>
<p>大多数情况下这就够了。但是还有一个更高级的 <em>shareReplay</em> 操作符。他使用了 <code>refCont</code> 操作符合 <code>replay</code>. <code>refCount</code> 也是一种 <code>connect</code> 但是它是自动管理的。他会在第一次订阅开始的时候开始。 replay 会把一些元素发送给那些 “迟到了” 的订阅者/</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> counter = <span class="number">1</span></div><div class="line"><span class="keyword">let</span> observableWithSideEffect = <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    counter = counter + <span class="number">1</span></div><div class="line">    observer.onNext(counter)</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">    &#125;.shareReplay(<span class="number">1</span>)</div><div class="line"></div><div class="line">observableWithSideEffect</div><div class="line">    .subscribe(onNext: &#123; (counter) <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(counter)</div><div class="line">    &#125;).addDisposableTo(disposeBag)</div><div class="line"></div><div class="line">observableWithSideEffect</div><div class="line">    .subscribe(onNext: &#123; (counter) <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(counter)</div><div class="line">    &#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<h3 id="Main-Queue"><a href="#Main-Queue" class="headerlink" title="Main Queue"></a>Main Queue</h3><p>当订阅行为是发生在 viewcontroller 上, 然后你不知道订阅行为是在那个线程中进行的。在刷新 UI 的时候确定这是在主线程中进行的。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">observableWithSideEffect</div><div class="line">    .observeOn(<span class="type">MainScheduler</span>.instance)</div><div class="line">    .subscribe(onNext: &#123; (counter) <span class="keyword">in</span></div><div class="line">        <span class="comment">// update UI</span></div><div class="line">    &#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<h3 id="Error-Events"><a href="#Error-Events" class="headerlink" title="Error Events"></a>Error Events</h3><p>如果你把好几个 <code>Observerable</code> 合并在了一起。如果其中有一个发生了错误。所有的 <code>Observerable</code> 都会结束。如果最开始是UI的话, 他就会停止响应。你应该好好的设计你的代码, 考虑好如果发生了 <code>complete</code> 或者 <code>error</code> 会发生什么。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">viewModel.importantText</div><div class="line">    .bindTo(myImportantLabel.rx.text)</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>如果 viewModel.importantText 因为什么原因发送出来一个error事件。这个 <code>bingding</code> 订阅也会结束。</p>
<p>如果你想避免这种情况的发生你可以使用 <strong>catchErrorJustReturn</strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">viewModel.importantText</div><div class="line">    .catchErrorJustReturn(<span class="string">"default text"</span>)</div><div class="line">    .bind(to: lable.rx.text)</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<h3 id="Driver"><a href="#Driver" class="headerlink" title="Driver"></a>Driver</h3><p><strong>Driver</strong> 是一个能够 <code>observeOn</code>、<code>catchErrorJustReturn</code>、<code>shareReplay</code> <strong>Observable</strong>.如果你想在viewModel中暴露一个安全的API。使用 <strong>Driver</strong> 是更好的做法。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">viewModel.importantText</div><div class="line">    .asDriver(onErrorJustReturn: <span class="string">"default text"</span>)</div><div class="line">    .drive(lable.rx.text)</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<h3 id="Reference-Cycles"><a href="#Reference-Cycles" class="headerlink" title="Reference Cycles"></a>Reference Cycles</h3><p>防止内存泄漏需要在话很多心思在避免引用循环上，当我们使用在订阅闭包中使用外部变量的时候。这个变量会被捕获为一个强引用。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">viewModel.priceString</div><div class="line">    .subscribe(onNext: &#123;(text) <span class="keyword">in</span></div><div class="line">        <span class="keyword">self</span>.priceLabel.text = text</div><div class="line">    &#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>这个 vc 强引用了 viewModel。现在这个 viewmodel 又因为在这个闭包中强引用了这个 vc。这就带来了循环引用。 <a href="https://krakendev.io/blog/weak-and-unowned-references-in-swift">“WEAK, STRONG, UNOWNED, OH MY!” - A GUIDE TO REFERENCES IN SWIFT</a></p>
<p>下面是解决办法</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">viewModel.priceString</div><div class="line">    .subscribe(onNext: &#123;[<span class="keyword">unowned</span> <span class="keyword">self</span>] (text) <span class="keyword">in</span></div><div class="line">        <span class="keyword">self</span>.priceLabel.text = text</div><div class="line">    &#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>使用 <strong>[unowned self]</strong> 语句之后就不用去考虑这个问题了🤗。</p>
<p>self 并不是唯一一个你需要担心的东西。你可能需要考虑所有你在在闭包中捕获的变量。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// out side the view controller</span></div><div class="line">        viewModel.priceString</div><div class="line">            .subscribe(onNext: &#123;[<span class="keyword">weak</span> viewController] (text) <span class="keyword">in</span></div><div class="line">                viewController?.priceLabel.text = text</div><div class="line">            &#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>这可能会比较复杂。这也是我<strong>强烈建议你尽量让你的闭包很短</strong>的原因。如果一个闭包超过了3、4行代码的话。可以考虑把这部分逻辑放在一个新的方法里面去。这样的话，这些依赖关系就会变的很明确了。你才能够很好的去考虑强弱应用的问题。</p>
<h3 id="Managing-your-subscriptions"><a href="#Managing-your-subscriptions" class="headerlink" title="Managing your subscriptions"></a>Managing your subscriptions</h3><p>记住要把你不需要订阅的订阅清楚掉。我曾经遇到过一次, 由于我没有及时的清除掉我的订阅, 当 <code>cell</code> 被重用的时候, 就会创建一个新的订阅, 导致了非常壮观的 <strong>bug</strong>。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> reuseBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="comment">// Called each time a cell is reused</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">configCell</span><span class="params">()</span></span> &#123;</div><div class="line">    viewModel</div><div class="line">        .subscribe(onNext: &#123; [<span class="keyword">unowned</span> <span class="keyword">self</span>] (element) <span class="keyword">in</span></div><div class="line">            <span class="keyword">self</span>.sendOpenNewDetailsScreen()</div><div class="line">        &#125;)</div><div class="line">&#125;</div><div class="line"><span class="comment">// Creating a new bag for each cell</span></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">prepareForReuse</span><span class="params">()</span></span> &#123;</div><div class="line">    reuseBag = <span class="type">DisposeBag</span>()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>RxSwift 是非常复杂的东西。但是如果你设定好了自己的一套规则, 然后在编码的时候坚持这个规则。这也没什么好难受的😇。 在使用 RxSwift 做的时候在每一层中考虑清楚你需要把哪些 API 暴露出来。这也能帮助你很快的发现 bug。</p>
<p><a href="http://swiftpearls.com/RxSwift-Safety-Manual.html">原文地址</a></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>我是一名来自中国的 iOS 程序员, 对技术有着浓厚的兴趣, 在学习的过程中, 发现了很多来自国外的优秀博客。为了更好的学习这些文章, 产生了将这些文章翻译成中文的想法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;RxSwift 提供了大量非常好用的工具, 让写代码更爽, 但是他也可能给你带来一些头疼的地方, 也可能是bug😱。 用了三个月之后我觉得我应该也可以给出一些建议来避免一些问题。&lt;/p&gt;
    
    </summary>
    
      <category term="Reactive" scheme="https://CepheusSun.github.io/categories/Reactive/"/>
    
    
      <category term="iOS" scheme="https://CepheusSun.github.io/tags/iOS/"/>
    
      <category term="Swift" scheme="https://CepheusSun.github.io/tags/Swift/"/>
    
      <category term="翻译" scheme="https://CepheusSun.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="Reactive" scheme="https://CepheusSun.github.io/tags/Reactive/"/>
    
  </entry>
  
  <entry>
    <title>RxSwift For Dummies 🐣 Part3</title>
    <link href="https://CepheusSun.github.io/RxSwift%20For%20Dummies%20Part3.html"/>
    <id>https://CepheusSun.github.io/RxSwift For Dummies Part3.html</id>
    <published>2017-05-07T07:27:57.000Z</published>
    <updated>2017-05-19T02:41:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>好了, 接下来是第三个部分。<strong>Subjects</strong></p>
<p>学了之前内容. 我们可能已经发现了。之前学习的内容都是 <code>Observables</code> 输出事件的部分。我们可以订阅他, 就能知道他输出的事件了。但是我们还不能改变他。</p>
<a id="more"></a>
<p><strong>Subject</strong> 也是一个 <code>Observable</code> 但是他是能够同时输入和输出的。也就是说, 我们可以动态(强制)的在一个序列中发出信号。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> subject = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</div><div class="line"><span class="comment">// 可以直接转换，因为他也是一个 `Observable`</span></div><div class="line"><span class="keyword">let</span> observable: <span class="type">Observable</span>&lt;<span class="type">String</span>&gt; = subject</div><div class="line">observable.subscribe(onNext: &#123; (text) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(text)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div><div class="line"><span class="comment">// 只要你想发出一个新的事件, 就可以用 onNext 方法 </span></div><div class="line">subject.onNext(<span class="string">"Hey!"</span>)</div><div class="line">subject.onNext(<span class="string">"I'm back!"</span>)</div></pre></td></tr></table></figure>
<p><strong>onNext</strong> 是一个输出事件的方法。最后控制台会输出</p>
<blockquote>
<p>“Hey!”<br>“I’m back!”</p>
</blockquote>
<p><code>Subject</code> 到底有什么用呢? 为了很轻松的将 Rxswift 中声明式的世界和我们平常的世界连接起来。让我们在需要写实现式的代码的时候更 Rx </p>
<p>在一个纯正的 Rx 的世界里。当你需要有一个更完美的流的时候, 不用去管这个 <code>Observable</code> 是怎么实现的。这个东西我会另外的解释。反正, 如果你需要， 大胆的用吧。</p>
<p>上面式关于 Subject 最基本的内容。接下来我们学习一下怎么更好的使用 <strong>Subject</strong></p>
<h3 id="Hot🔥-vs-Cold❄️"><a href="#Hot🔥-vs-Cold❄️" class="headerlink" title="Hot🔥 vs Cold❄️"></a>Hot🔥 vs Cold❄️</h3><p>在第一篇文章中就已经提到过了热信号🔥和冷信号❄️。今天我们在深入的了解一点吧，因为 <strong>Subject</strong> 实际上是我们第一次接触到真正的热信号。</p>
<p>我们一定确定了，当我们使用 <strong>create</strong> 创建一个 <strong>Observable</strong> 的时候, 由于没有人订阅他，所以她是不会发送消息的。只有被 <strong>subscribe</strong>(订阅)之后才会开始发送消息出来。这就是我们叫它为冷信号❄️的原因。如果很不幸你忘了这个知识点。你可以回到第一篇文章去看看。热信号🔥 就是那种即使没有被订阅也会发出消息的信号, 这也是 <code>subject</code> 做的事情。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> subject = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</div><div class="line"><span class="keyword">let</span> observable: <span class="type">Observable</span>&lt;<span class="type">String</span>&gt; = subject</div><div class="line"><span class="comment">// 这个信号还没有被订阅, 所以这个值不回被接受到</span></div><div class="line">subject.onNext(<span class="string">"Am I too early for the party?"</span>)</div><div class="line"></div><div class="line">observable</div><div class="line">    .subscribe(onNext: &#123; (text) <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(text)</div><div class="line">    &#125;).addDisposableTo(disposeBag)</div><div class="line"><span class="comment">// 这个值发出来的时候已经有一个订阅者了, 所以这个值会打印出来</span></div><div class="line">subject.onNext(<span class="string">"🎉🎉🎉"</span>)</div></pre></td></tr></table></figure>
<p>很简单直接吧。如果在第一篇中你理解了冷信号的话, 理解热信号也是很自然的事情。</p>
<h3 id="Subject-Types"><a href="#Subject-Types" class="headerlink" title="Subject Types"></a>Subject Types</h3><p>常用的 <code>Subject</code> 有三种。 他们其实都差不多, 唯一的区别就是: 在订阅之前, 它会干什么。</p>
<h4 id="Publish-Subject"><a href="#Publish-Subject" class="headerlink" title="Publish Subject"></a>Publish Subject</h4><p>在上面的例子中已经说到了。 <strong>PublishSubject</strong> 会忽略掉在订阅之前发出来的信号。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> subject = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</div><div class="line"><span class="keyword">let</span> observable: <span class="type">Observable</span>&lt;<span class="type">String</span>&gt; = subject</div><div class="line">subject.onNext(<span class="string">"Ignored..."</span>)</div><div class="line">observable.subscribe(onNext: &#123; (text) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(text)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div><div class="line">subject.onNext(<span class="string">"Printed!"</span>)</div></pre></td></tr></table></figure>
<p>当你只关注你订阅之后发生了什么的时候, 就可以使用 <code>PublishSubject</code></p>
<h4 id="Replay-Subjects"><a href="#Replay-Subjects" class="headerlink" title="Replay Subjects"></a>Replay Subjects</h4><p><strong>ReplaySubject</strong> 会将最后 n 个值发出来, 即使是订阅发生之前的值。 这个 n 个值被被放在一个环从区里面。在这个例子中会缓有 3 个值被保留。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> subject = <span class="type">ReplaySubject</span>&lt;<span class="type">String</span>&gt;.create(bufferSize: <span class="number">3</span>)</div><div class="line"><span class="keyword">let</span> observable: <span class="type">Observable</span>&lt;<span class="type">String</span>&gt; = subject</div><div class="line"></div><div class="line">subject.onNext(<span class="string">"Not printed!"</span>)</div><div class="line">subject.onNext(<span class="string">"Printed"</span>)</div><div class="line">subject.onNext(<span class="string">"Printed!"</span>)</div><div class="line">subject.onNext(<span class="string">"Printed!"</span>)</div><div class="line"></div><div class="line">observable.subscribe(onNext: &#123; (text) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(text)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div><div class="line">subject .onNext(<span class="string">"Printed!"</span>)</div></pre></td></tr></table></figure>
<p>当我们需要知道订阅之前发生了什么的时候, 我们就需要使用 <code>ReplaySubject</code> 了。</p>
<h4 id="Behavior-Subject"><a href="#Behavior-Subject" class="headerlink" title="Behavior Subject"></a>Behavior Subject</h4><p><strong>BehaviorSubject</strong> 只会重复最后一个值。 更其他的 Subject 的同， 他在创建的时候就需要给定一个初始值。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> subject = <span class="type">BehaviorSubject</span>&lt;<span class="type">String</span>&gt;(value: <span class="string">"Initial value"</span>)</div><div class="line"><span class="keyword">let</span> observable: <span class="type">Observable</span>&lt;<span class="type">String</span>&gt; = subject</div><div class="line"></div><div class="line">subject.onNext(<span class="string">"Not printed!"</span>)</div><div class="line">subject.onNext(<span class="string">"Not printed!"</span>)</div><div class="line">subject.onNext(<span class="string">"Printed!"</span>)</div><div class="line"></div><div class="line">observable.subscribe(onNext: &#123; (text) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(text)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div><div class="line">subject.onNext(<span class="string">"Printed!"</span>)</div></pre></td></tr></table></figure>
<p>当你只需要知道最后一个值的时候。就需要使用 <code>BehaviorSubject</code></p>
<h3 id="Binding"><a href="#Binding" class="headerlink" title="Binding"></a>Binding</h3><p>你可以把一个 <code>Observable</code> 和 <code>Subject</code> 绑定到一起。也就是说可以让这个 <code>Observable</code> 将它的序列里的所有值都发送给这个 <code>Subject</code></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> subject = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</div><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.just(<span class="string">"I'm being passed around 😲"</span>)</div><div class="line">subject.subscribe(onNext: &#123; (text) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(text)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div><div class="line"></div><div class="line">observable.subscribe &#123; (event) <span class="keyword">in</span></div><div class="line">    subject.on(event)</div><div class="line">&#125;.addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>有一个语法糖来简化这些代码。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> subject = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</div><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.just(<span class="string">"I'm being passed around 😲"</span>)</div><div class="line">subject.subscribe(onNext: &#123; (text) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(text)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div><div class="line"></div><div class="line">observable.bind(to: subject).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>输出</p>
<blockquote>
<p>I’m being passed around 😲</p>
</blockquote>
<p><strong>Warning</strong></p>
<p>Binding 不仅仅会传递值, 他也会把完成和错误都传递过来。这种情况下这个 <code>Subject</code> 就会被释放。</p>
<h3 id="Quick-Example"><a href="#Quick-Example" class="headerlink" title="Quick Example"></a>Quick Example</h3><p>还是把第一篇文章中的 Demo 稍微修改一下吧。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Foundation</div><div class="line"><span class="keyword">import</span> RxCocoa</div><div class="line"><span class="keyword">import</span> RxSwift</div><div class="line"></div><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">GoogleModel</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> googleString = <span class="type">BehaviorSubject</span>&lt;<span class="type">String</span>&gt;(value: <span class="string">""</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">fetchNetString</span><span class="params">()</span></span>  &#123;</div><div class="line">        <span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">            <span class="keyword">let</span> session = <span class="type">URLSession</span>.shared</div><div class="line">            <span class="keyword">let</span> task = session.dataTask(with: <span class="type">URL</span>(string: <span class="string">"https://www.google.com"</span>)!, completionHandler: &#123; (data, response, error) <span class="keyword">in</span></div><div class="line">                </div><div class="line">                <span class="type">DispatchQueue</span>.main.async &#123;</div><div class="line">                    <span class="keyword">if</span> <span class="keyword">let</span> err = error &#123;</div><div class="line">                        observer.onError(err)</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        <span class="keyword">let</span> googleString = <span class="type">NSString</span>(data: data!, encoding: <span class="number">1</span>) <span class="keyword">as</span> <span class="type">String</span>?</div><div class="line">                        </div><div class="line">                        observer.onNext(googleString!)</div><div class="line">                        observer.onCompleted()</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">            task.resume()</div><div class="line">            <span class="keyword">return</span> <span class="type">Disposables</span>.create&#123;</div><div class="line">                task.cancel()</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">// Bind the observable to the subject</span></div><div class="line">        observable.bind(to: googleString).addDisposableTo(disposeBag)</div><div class="line">    &#125;</div><div class="line">&#125;        </div><div class="line"><span class="comment">// Bind the observable to the subject</span></div><div class="line">observable.bind(to: googleString).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>可以看到，在这个例子中，我们有一个视图模型将 <code>googleString</code> 这个 <code>subject</code> 暴露出来。让 <code>ViewController</code> 能够订阅。我们将这个 <code>observable</code> 绑定到这个 <code>subject</code> 上, 这样我们就可以在网络请求有结果的时候, 立马将请求结果传递到这给 <code>subject</code>。</p>
<h3 id="Bonus-Variable"><a href="#Bonus-Variable" class="headerlink" title="Bonus: Variable"></a>Bonus: Variable</h3><p>距离完完全全的 Rx 还差最后一点了。强行的获取之前发送出来的值。</p>
<p>这就是为什么会有 <strong>Variable</strong> 这个东西了。Variable 是对 BehaviorSubject 的简单包装。<a href="https://github.com/ReactiveX/RxSwift/blob/master/RxSwift/Subjects/Variable.swift">可以看一下</a> 它的实现是非常简单的。但它却非常的方便。</p>
<p>还是用一个小例子来说明这个问题吧。在这个例子中, 我们需要在任何时间都可以得到 “googleString” “当前” 的值。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> googleString = <span class="type">Variable</span>(<span class="string">"currentString"</span>)</div><div class="line"><span class="comment">// get</span></div><div class="line"><span class="built_in">print</span>(googleString.value)</div><div class="line"><span class="comment">// set</span></div><div class="line">googleString.value = <span class="string">"newString"</span></div><div class="line"><span class="comment">// 订阅</span></div><div class="line">googleString.asObservable().subscribe(onNext: &#123; (text) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(text)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>你一定会爱上他的。这基本上就是 <strong>RxSwift</strong> 的简单模式了。</p>
<p>看起来很简单吧，但是别忘了，还是有很多的坑的。还是小心为上。下一篇文章我会讲讲: 怎么写 Rxswift 最保险。</p>
<h3 id="That’s-it"><a href="#That’s-it" class="headerlink" title="That’s it!"></a>That’s it!</h3><p>你知道了太多了。剩下的就是 <code>Subjects</code> 了</p>
<p><a href="http://swiftpearls.com/RxSwift-for-dummies-3-Subjects.html">原文地址</a></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>我是一名来自中国的 iOS 程序员, 对技术有着浓厚的兴趣, 在学习的过程中, 发现了很多来自国外的优秀博客。为了更好的学习这些文章, 产生了将这些文章翻译成中文的想法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好了, 接下来是第三个部分。&lt;strong&gt;Subjects&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;学了之前内容. 我们可能已经发现了。之前学习的内容都是 &lt;code&gt;Observables&lt;/code&gt; 输出事件的部分。我们可以订阅他, 就能知道他输出的事件了。但是我们还不能改变他。&lt;/p&gt;
    
    </summary>
    
      <category term="Reactive" scheme="https://CepheusSun.github.io/categories/Reactive/"/>
    
    
      <category term="iOS" scheme="https://CepheusSun.github.io/tags/iOS/"/>
    
      <category term="Swift" scheme="https://CepheusSun.github.io/tags/Swift/"/>
    
      <category term="翻译" scheme="https://CepheusSun.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="Reactive" scheme="https://CepheusSun.github.io/tags/Reactive/"/>
    
  </entry>
  
  <entry>
    <title>RxSwift For Dummies 🐣 Part2</title>
    <link href="https://CepheusSun.github.io/RxSwift%20For%20Dummies%20Part2.html"/>
    <id>https://CepheusSun.github.io/RxSwift For Dummies Part2.html</id>
    <published>2017-05-06T16:26:57.000Z</published>
    <updated>2017-05-19T02:42:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们在上一篇文章中介绍了 RxSwift 基础的部分. 现在我们来学习一些操作符, 来学习一下 <strong>FRP</strong> 中的<strong>F</strong>(unctional) 部分</p>
<a id="more"></a>
<h3 id="Schedulers"><a href="#Schedulers" class="headerlink" title="Schedulers"></a>Schedulers</h3><p>我们先学习一下之前就已经提到过的, 但是没有详细介绍的 <strong>Schedulers</strong></p>
<p><strong>Schedulers</strong> 最常见的用法就是告诉 <code>Observables</code> 和订阅者 应该在哪个线程或者队列中发送事件,或者通知。</p>
<p>关于 <code>Schedulers</code> 最常见的操作符是<code>observerOn</code> 和 <code>subscribleOn</code></p>
<p>通常情况下 <code>Observables</code> 会在它被订阅的那个线程发送事件或者通知。</p>
<h4 id="ObserveOn"><a href="#ObserveOn" class="headerlink" title="ObserveOn"></a>ObserveOn</h4><p><strong>ObserveOn</strong> 指定 <code>Observables</code> 发送事件的线程或者队列。它不会改变它执行的线程。</p>
<p>举一个跟 part1 很相似的例子：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    <span class="type">DispatchQueue</span>.global(qos: .<span class="keyword">default</span>).async &#123;</div><div class="line">        <span class="type">Thread</span>.sleep(forTimeInterval: <span class="number">10</span>)</div><div class="line">        <span class="type">DispatchQueue</span>.main.async &#123;</div><div class="line">            observer.onNext(<span class="string">"Hello dummy 🐥"</span>)</div><div class="line">            observer.onCompleted()</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>假设订阅者是一个 UI 层的东西， 比如说是一个 <code>UIViewController</code> 或者 <code>UIView</code></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="type">DispatchQueue</span>.global(qos: .<span class="keyword">default</span>).async</div></pre></td></tr></table></figure>
<p>我们把这个任务放在子线程中去执行， 以免阻塞 UI </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DispatchQueue.main.async&#123; ...</div></pre></td></tr></table></figure>
<p>我们需要在主线程中去更新 UI, 你应该知道 <code>UIKit</code> 要求对 <code>UI</code> 的操作都必须在主线程中进行。所以这些操作对你来说一定是很熟悉的了。</p>
<p>记下来使用 <strong>ObserveOn</strong> 来重构一下这段代码</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create(&#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    <span class="type">DispatchQueue</span>.global(qos: .<span class="keyword">default</span>).async &#123;</div><div class="line">        <span class="type">Thread</span>.sleep(forTimeInterval: <span class="number">10</span>)</div><div class="line">        observer.onNext(<span class="string">"Hello dummy 🐥"</span>)</div><div class="line">        observer.onCompleted()</div><div class="line">    &#125;</div><div class="line">        <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">    &#125;).observeOn(<span class="type">MainScheduler</span>.instance)</div></pre></td></tr></table></figure>
<p>我们删掉了 <code>DispatchQueue.main.async {}</code> 然后添加了 <code>.observeOn(MainScheduler.instance)</code>。 这个就可以让所有的事件都在主线程中被发送出去。就是这么简单。 <code>&quot;Hello dummy 🐥&quot;</code> 这个元素就能够很安全的被发送给 UI 的元素， 因为我们可以很确定他会在主线程中被发送出去。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">observable.subscribe(onNext: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] (element) <span class="keyword">in</span></div><div class="line">    <span class="keyword">self</span>?.label.text = element</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p><strong>ObserveOn</strong> 大概是最常见的线程调度操作符了。你希望 <code>Observables</code> 包含了所有的逻辑, 和线程操作, 让订阅者尽可能的简单。所以我们接下来再了解一下 <code>subscribeOn</code> 这个操作符。</p>
<h4 id="SubscribeOn-Optional"><a href="#SubscribeOn-Optional" class="headerlink" title="SubscribeOn (Optional)"></a>SubscribeOn (Optional)</h4><p>这是一个非常先进的操作符。你可以先跳过这部分, 以后再来研究🐤</p>
<p><code>subscribeOn</code> 跟 <code>ObserveOn</code> 非常的相似。<strong>但是他只能改变 <code>Observable</code> 将要执行的任务所在的线程。</strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    <span class="type">Thread</span>.sleep(forTimeInterval: <span class="number">10</span>)</div><div class="line">    observer.onNext(<span class="string">"Hello dummy 🐥"</span>)</div><div class="line">    observer.onCompleted()</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125; </div><div class="line">observable</div><div class="line">    .subscribeOn(<span class="type">ConcurrentDispatchQueueScheduler</span>(qos: .<span class="keyword">default</span>))</div><div class="line">    .subscribe(onNext: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] (element) <span class="keyword">in</span></div><div class="line">        <span class="keyword">self</span>?.label.text = element</div><div class="line">    &#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>上面的代码中, 我删掉了 <code>Observable</code> 中的 <code>DispatchQueue.global(qos: .default).async {}</code>  是这个订阅者告诉他应该在一个 <code>global queue</code> 中执行下面的操作, 以免阻塞 UI. 很明显这回导致一个异常的抛出, 之前提到过： 这回导致 <code>Observable</code> 在全局队列中执行, <strong>也会在全局队列中发出事件</strong>。只需要添加在 <code>Observable</code> 中添加 <code>.observeOn(MainScheduler.instance)</code>就能避免这个问题。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    <span class="type">Thread</span>.sleep(forTimeInterval: <span class="number">10</span>)</div><div class="line">    observer.onNext(<span class="string">"Hello dummy 🐥"</span>)</div><div class="line">    observer.onCompleted()</div><div class="line">        <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;.observeOn(<span class="type">MainScheduler</span>.instance)      </div><div class="line">observable</div><div class="line">    .subscribeOn(<span class="type">ConcurrentDispatchQueueScheduler</span>(qos: .<span class="keyword">default</span>))</div><div class="line">    .subscribe(onNext: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] (element) <span class="keyword">in</span></div><div class="line">        <span class="keyword">self</span>?.label.text = element</div><div class="line">    &#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>添加之后，就能够发现刚刚说到的问题已经解决掉了。</p>
<p>我们什么时候应该用 <code>observeOn</code> 呢？最常见的场景是:如果在 <code>Observable</code> 不需要在后台执行耗时操作(读取数据, 大的计算任务)的话.我不认为这是非常频繁的事情。但是，come on!  多知道一个你能用的工具 🛠不是件很 cool 的事情吗？</p>
<h4 id="Scheduler-Types"><a href="#Scheduler-Types" class="headerlink" title="Scheduler Types"></a>Scheduler Types</h4><p>做为 RxSwift 菜鸟, 好奇 <code>observeOn</code> 和 <code>MainScheduler.instance</code> 没什么关系。你可以自己创建一个线程或者直接使用已经创建好了的。如果你很好奇的话<a href="https://github.com/ReactiveX/RxSwift/blob/master/Documentation/Schedulers.md">这里有很多</a>。 这也没什么好复杂的， 就是对 GCD 和 NSOperation 的封装而已。</p>
<h3 id="Transforming-Operators"><a href="#Transforming-Operators" class="headerlink" title="Transforming Operators"></a>Transforming Operators</h3><p>现在你已经知道两种操作符了: 创建操作符(<code>create</code>、<code>interval</code>、<code>just</code>)  和 功能操作符(<code>observeOn</code>, <code>subscribeOn</code>)。 现在再学一些转换操作符吧！</p>
<h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><p>这是非常简单，但非常有用的操作符。它也可能是你未来最常用的一个操作符号。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observerable = <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    observer.onNext(<span class="number">1</span>)</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;        </div><div class="line"><span class="keyword">let</span> boolObservable: <span class="type">Observable</span>&lt;<span class="type">Bool</span>&gt; = observerable.<span class="built_in">map</span>&#123;(element) -&gt; <span class="type">Bool</span> <span class="keyword">in</span></div><div class="line">    <span class="keyword">if</span> element == <span class="number">0</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">&#125;</div><div class="line">boolObservable.subscribe(onNext: &#123; (boolElement) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(boolElement)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p><strong>Map</strong> 操作符号，改变了序列中值的类型。他映射了一个 <code>Observable</code> 所以他以你告诉他的新的方式发送事件。在这个例子中, 我们将一个 <code>Int</code> 类型的 <code>Observable</code> 映射成了一个 <code>Bool</code> 类型。 </p>
<p>所以这个例子的结果是</p>
<blockquote>
<p>true</p>
</blockquote>
<h4 id="Scan"><a href="#Scan" class="headerlink" title="Scan"></a>Scan</h4><p><strong>scan</strong> 要复杂一些了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    observer.onNext(<span class="string">"D"</span>)</div><div class="line">    observer.onNext(<span class="string">"U"</span>)</div><div class="line">    observer.onNext(<span class="string">"M"</span>)</div><div class="line">    observer.onNext(<span class="string">"M"</span>)</div><div class="line">    observer.onNext(<span class="string">"Y"</span>)</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;</div><div class="line">observable.scan(<span class="string">""</span>) &#123; (lastValue, currentValue) -&gt; <span class="type">String</span> <span class="keyword">in</span></div><div class="line">    <span class="keyword">return</span> lastValue + currentValue</div><div class="line">&#125;.subscribe(onNext: &#123; (element) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(element)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>在这个例子中会输出</p>
<blockquote>
<p>D<br>DU<br>DUM<br>DUMM<br>DUMMY</p>
</blockquote>
<p><strong>scan</strong>操作符, 让你可以通过上一个值来改变这一个值。他也被称作元素堆积。上面代码中的 <code>“”</code>是扫描参数传递的起始值。还是想着能干什么呢？</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    observer.onNext(<span class="number">1</span>)</div><div class="line">    observer.onNext(<span class="number">2</span>)</div><div class="line">    observer.onNext(<span class="number">3</span>)</div><div class="line">    observer.onNext(<span class="number">4</span>)</div><div class="line">    observer.onNext(<span class="number">5</span>)</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;</div><div class="line">observable.scan(<span class="number">1</span>) &#123; (lastValue, currentValue) -&gt; <span class="type">Int</span> <span class="keyword">in</span></div><div class="line">    <span class="keyword">return</span> lastValue + currentValue</div><div class="line">&#125;.subscribe(onNext: &#123; (element) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(element)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>这是通过 <strong>scan</strong> 操作符计算 5 的阶层。 算出来的答案是: 120</p>
<p><a href="http://rx-marin.com/post/rxswift-state-with-scan/">Marin 给了一个更有用的例子</a> 关于按钮的 selected 状态</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> button = <span class="type">UIButton</span>()</div><div class="line">button.rx.tap.scan(<span class="literal">false</span>) &#123; last, new <span class="keyword">in</span></div><div class="line">    <span class="keyword">return</span> !last</div><div class="line">&#125;.subscribe(onNext: &#123; (element) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(<span class="string">"tap: <span class="subst">\(element)</span>"</span>)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>现在你知道他能干什么了吧？ 当然还有很多其他的转换操作符。</p>
<h3 id="Filtering-Operators"><a href="#Filtering-Operators" class="headerlink" title="Filtering Operators"></a>Filtering Operators</h3><p>发出事件是很重要的事情, 但是很多情况下我们还需要过滤掉一些没用的事件。这就是 filter 操作符所做的事什么。</p>
<h4 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h4><p>决定那些事件是要响应的那些是要过滤掉的。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observerable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    observer.onNext(<span class="string">"🎁"</span>)</div><div class="line">    observer.onNext(<span class="string">"💩"</span>)</div><div class="line">    observer.onNext(<span class="string">"💩"</span>)</div><div class="line">    observer.onNext(<span class="string">"💩"</span>)</div><div class="line">    observer.onNext(<span class="string">"🎁"</span>)</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;</div><div class="line">observerable.<span class="built_in">filter</span> &#123; (element) -&gt; <span class="type">Bool</span> <span class="keyword">in</span></div><div class="line">    <span class="keyword">return</span> element == <span class="string">"🎁"</span></div><div class="line">&#125;.subscribe(onNext: &#123; (element) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(element)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>输出</p>
<blockquote>
<p>🎁<br>🎁</p>
</blockquote>
<h4 id="Debounce"><a href="#Debounce" class="headerlink" title="Debounce"></a>Debounce</h4><p>简单且有用</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">observerable</div><div class="line">    .debounce(<span class="number">2</span>, scheduler: <span class="type">MainScheduler</span>.instance)</div><div class="line">    .subscribe(onNext: &#123; (element) <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(element)</div><div class="line">    &#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p><strong>debounce</strong> 会过滤掉2秒以内的所有事件, 如果事件a在上一次事件之后的0.5秒被发送出来。那么他就会被过滤掉。如果他在上次事件的2.5秒被发送出来。那么他就会被接受到。需要注意的是, 如果就算当前时间之后没有其他的事件，他也要在2秒之后被发送出来。</p>
<blockquote>
<p>译者: 需要注意的 <code>debounce</code> 和 <code>throttle</code> 的区别。还有 Obj-C 中的 <code>ReactiveCocoa</code> 中的 throttle 的区别。</p>
</blockquote>
<h3 id="Combining-Operator"><a href="#Combining-Operator" class="headerlink" title="Combining Operator"></a>Combining Operator</h3><p>联合操作符让你可以把多个 <code>Observable</code> 转换成一个。</p>
<h4 id="Merge"><a href="#Merge" class="headerlink" title="Merge"></a>Merge</h4><p>合并只是将多个 <code>Observable</code> 发送的事件合并到一个 <code>Observable</code> 中。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    observer.onNext(<span class="string">"🎁"</span>)</div><div class="line">    observer.onNext(<span class="string">"🎁"</span>)</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> observable2 = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    observer.onNext(<span class="string">"💩"</span>)</div><div class="line">    observer.onNext(<span class="string">"💩"</span>)</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;</div><div class="line"><span class="type">Observable</span>.of(observable, observable2).merge().subscribe(onNext: &#123; (element) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(element)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<blockquote>
<p>🎁<br>🎁<br>💩<br>💩</p>
</blockquote>
<h4 id="Zip"><a href="#Zip" class="headerlink" title="Zip"></a>Zip</h4><p><strong>Zip</strong> 将每个 <code>Observable</code> 发出来的值合并成一个值。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    observer.onNext(<span class="string">"🎁"</span>)</div><div class="line">    observer.onNext(<span class="string">"🎁"</span>)</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> observable2 = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    observer.onNext(<span class="string">"💩"</span>)</div><div class="line">    observer.onNext(<span class="string">"💩"</span>)</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;</div><div class="line"><span class="type">Observable</span>.<span class="built_in">zip</span>(observable ,observable2).subscribe(onNext: &#123; (element) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(element)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<blockquote>
<p>🎁💩<br>🎁💩</p>
</blockquote>
<p>这是一个很有用的操作符。还是举一个例子吧！ 假如你有两个网络请求, 你需要等到他们都结束之后再进行下一步操作。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    <span class="type">DispatchQueue</span>.main.async &#123;</div><div class="line">        <span class="type">Thread</span>.sleep(forTimeInterval: <span class="number">3</span>)</div><div class="line">        observer.onNext(<span class="string">"fetched from sever 1"</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> observable2 = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    <span class="type">DispatchQueue</span>.main.async &#123;</div><div class="line">        <span class="type">Thread</span>.sleep(forTimeInterval: <span class="number">2</span>)</div><div class="line">        observer.onNext(<span class="string">"fetched from sever 2"</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;</div><div class="line"><span class="type">Observable</span>.<span class="built_in">zip</span>(observable, observable2)</div><div class="line">    .subscribe(onNext: &#123; (element) <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(element)</div><div class="line">    &#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p><strong>Zip</strong> 会等到两个 <code>Observable</code> 都结束之后将两个请求的结果合并成一个值发送出来。</p>
<h3 id="Other-Operators"><a href="#Other-Operators" class="headerlink" title="Other Operators"></a>Other Operators</h3><p>还有很多有趣的操作符, 比如 <code>reduce</code>、 <code>takeUntil</code> 等等。我认为如果你什么时候有了一些想法, 你也会很容易的找到他们。他们非常的强大, 能让你快速简单的操作事件序列。</p>
<h3 id="Mixing-Operators"><a href="#Mixing-Operators" class="headerlink" title="Mixing Operators"></a>Mixing Operators</h3><p>这个教程不需要具体的实例项目, 但是能快的将各种操作符搭配使用。我们来做一个实验吧：工具根据事件改变视图的颜色。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="type">Observable</span>&lt;<span class="type">NSDate</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    <span class="type">DispatchQueue</span>.global(qos: .<span class="keyword">default</span>).async &#123;</div><div class="line">        <span class="keyword">while</span> <span class="literal">true</span> &#123;</div><div class="line">            <span class="type">Thread</span>.sleep(forTimeInterval: <span class="number">0.01</span>)</div><div class="line">            observer.onNext(<span class="type">NSDate</span>())</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">    &#125;<span class="comment">// 需要在主线程中刷新 UI</span></div><div class="line">    .observeOn(<span class="type">MainScheduler</span>.instance)</div><div class="line">    <span class="comment">// 我们只需要能够被2整除的事件</span></div><div class="line">    .<span class="built_in">filter</span> &#123; (date) -&gt; <span class="type">Bool</span> <span class="keyword">in</span></div><div class="line">        <span class="keyword">return</span> <span class="type">Int</span>(date.timeIntervalSince1970) % <span class="number">2</span> == <span class="number">0</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 将数据转换成颜色</span></div><div class="line">    .<span class="built_in">map</span> &#123; (date) -&gt; <span class="type">UIColor</span> <span class="keyword">in</span></div><div class="line">        <span class="keyword">let</span> interval: <span class="type">Int</span> = <span class="type">Int</span>(date.timeIntervalSince1970)</div><div class="line">        <span class="keyword">let</span> color1 = <span class="type">CGFloat</span>( <span class="type">Double</span>(((interval * <span class="number">1</span>) % <span class="number">255</span>)) / <span class="number">255.0</span>)</div><div class="line">        <span class="keyword">let</span> color2 = <span class="type">CGFloat</span>( <span class="type">Double</span>(((interval * <span class="number">2</span>) % <span class="number">255</span>)) / <span class="number">255.0</span>)</div><div class="line">        <span class="keyword">let</span> color3 = <span class="type">CGFloat</span>( <span class="type">Double</span>(((interval * <span class="number">3</span>) % <span class="number">255</span>)) / <span class="number">255.0</span>)</div><div class="line">        <span class="keyword">return</span> <span class="type">UIColor</span>(red: color1, green: color2, blue: color3, alpha: <span class="number">1</span>)</div><div class="line">    &#125;</div><div class="line">    .subscribe(onNext: &#123;[<span class="keyword">weak</span> <span class="keyword">self</span>] (color) <span class="keyword">in</span></div><div class="line">        <span class="keyword">self</span>?.demoView.backgroundColor = color</div><div class="line">    &#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>You can find more examples in the <a href="https://github.com/ReactiveX/RxSwift/blob/master/Rx.playground/Pages/Combining_Operators.xcplaygroundpage/Contents.swift">RxSwfit playgrounds</a></p>
<h3 id="That’s-it"><a href="#That’s-it" class="headerlink" title="That’s it!"></a>That’s it!</h3><p>你知道了太多了。剩下的就是 <code>Subjects</code> 了</p>
<p><a href="http://swiftpearls.com/RxSwift-for-dummies-2-Operators.html">原文地址</a></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>我是一名来自中国的 iOS 程序员, 对技术有着浓厚的兴趣, 在学习的过程中, 发现了很多来自国外的优秀博客。为了更好的学习这些文章, 产生了将这些文章翻译成中文的想法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们在上一篇文章中介绍了 RxSwift 基础的部分. 现在我们来学习一些操作符, 来学习一下 &lt;strong&gt;FRP&lt;/strong&gt; 中的&lt;strong&gt;F&lt;/strong&gt;(unctional) 部分&lt;/p&gt;
    
    </summary>
    
      <category term="Reactive" scheme="https://CepheusSun.github.io/categories/Reactive/"/>
    
    
      <category term="iOS" scheme="https://CepheusSun.github.io/tags/iOS/"/>
    
      <category term="Swift" scheme="https://CepheusSun.github.io/tags/Swift/"/>
    
      <category term="翻译" scheme="https://CepheusSun.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="Reactive" scheme="https://CepheusSun.github.io/tags/Reactive/"/>
    
  </entry>
  
  <entry>
    <title>RxSwift For Dummies 🐣 Part1</title>
    <link href="https://CepheusSun.github.io/RxSwift%20For%20Dummies%20Part1.html"/>
    <id>https://CepheusSun.github.io/RxSwift For Dummies Part1.html</id>
    <published>2017-05-06T10:41:59.000Z</published>
    <updated>2017-05-19T02:42:26.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>RxSwift</strong> 真的是一个非常值得学习的东西。非常遗憾的是我没有研究所有的架构模式MVVM VIPER Routing。</p>
<p>要非常好的讲出来RxSwift到底是个什么东西，我也说不好。毕竟他能做太多的事情了。普遍认为，他是函数响应式编程中非常重要的观察者模式。在最初的定义中,他并不就是函数响应式编程。他最初的设计灵感就是来自于函数响应式(<strong>FRP</strong>), 所以也可以说它包含了函数响应式的特性。</p>
<p>如果你不知道什么是 <strong>FRP</strong> 的话, 不用担心, 在这个教程中你会自然而然的理解什么是 <strong>FRP</strong>。</p>
<p>通过对 RXSwift 的深入研究, 我得到了很多的启发, 同时也被很多的问题困扰。相信你也会这样。</p>
<p>需要花很多个小时的时间来适应新的思维模式，唯一能确定的是，一旦你适应了，你就再也不想回到从前了。</p>
<p>在这个教程中，我会尽可能的节约你的时间，并且解释的尽可能的详细。想教幼儿园的小朋友一样。</p>
<p>开始学习之前, 请确定你已经掌握了 Swift 和 UIkit 的基础知识. </p>
<a id="more"></a>
<h3 id="The-Why"><a href="#The-Why" class="headerlink" title="The Why?"></a>The Why?</h3><p>写 UI 的时候经常会处理一些异步的操作。我们很早就知道要使用观察者模式来实现这个东西。我相信你现在已经非常熟悉代理模式了。代理模式是一种很酷的设计模式。但是写起来真的很烦😡。</p>
<center><br><img src="http://swiftpearls.com/images/cry.jpg" alt=""><br></center>

<ul>
<li>代理模式需要些很多的模版代码: 创建一个协议, 声明一个 <code>delegate</code> 变量, 遵守协议, 设置代理…</li>
<li>写完这么多模版代码,可能你不小心就忘了其中的某个步骤。 比如说 <code>object.delegete = self</code></li>
<li>管理起来非常麻烦。他需要在好几个文件中跳跃。</li>
</ul>
<p>RxSwift 解决了这个问题。他能够让你通过声明的方式使用观察者模式。减少了管理的负担, 当然，也不用写那么多模版代码。</p>
<p>我刚刚开始了一个项目，在这个项目中，至今还没有写一个 <code>delegate</code></p>
<h3 id="Basic-Example"><a href="#Basic-Example" class="headerlink" title="Basic Example"></a>Basic Example</h3><p>talk is cheap, show you the code.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleClass</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">runExample</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="comment">// OBSERVABLE //</span></div><div class="line">        <span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span></div><div class="line">            <span class="type">DispatchQueue</span>.global(qos: .<span class="keyword">default</span>).async &#123;</div><div class="line">                <span class="type">Thread</span>.sleep(forTimeInterval: <span class="number">10</span>)</div><div class="line">                observer.onNext(<span class="string">"Hello dummy 🐣"</span>)</div><div class="line">                observer.onCompleted()</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// OBSERVER //</span></div><div class="line">        </div><div class="line">        observable.subscribe(onNext:&#123; (element) <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(element)</div><div class="line">        &#125;).addDisposableTo(disposeBag)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这就是最基本的例子, 在这个示例中, 我们声明了一个 runExample 方法。在这个方法中执行的是一些 RxSwift 中的事情。想一下在这个例子中发生了什么吧。</p>
<h3 id="Observable-📡"><a href="#Observable-📡" class="headerlink" title="Observable 📡"></a>Observable 📡</h3><p>我们还是从 RxSwift 中最基本的构建单元开始吧。 <code>Observable</code>。 它其实非常的简单。 <code>Observable</code> 执行某些动作, 然后观察者能够对此作出一些反应。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span></div><div class="line">    <span class="type">DispatchQueue</span>.global(qos: .<span class="keyword">default</span>).async &#123;</div><div class="line">        <span class="comment">// Simulate some work</span></div><div class="line">        <span class="type">Thread</span>.sleep(forTimeInterval: <span class="number">10</span>)</div><div class="line">        observer.onNext(<span class="string">"Hello dummy 🐣"</span>)</div><div class="line">        observer.onCompleted()</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;</div><div class="line">                </div><div class="line">observable.subscribe(onNext:&#123; (element) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(element)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>现在我们有了一个 <code>Observable</code> 信号了。这种信号只有在被订阅之后才会执行它也被叫做:冷信号❄️。相反热信号🔥是那种既是没有被订阅也会执行的信号。</p>
<p>在下一步们我们会具体的讲解二者的区别。现在你只需要理解的是: 因为你初始化出来的是一个冷❄️信号<code>Hello dummy 🐣</code>这个值是不会被发送出来的。冷信号❄️只有在有东西订阅之后才会发送消息。</p>
<p>我们一步一步的来分析一下这究竟是什么意思。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="type">DispatchQueue</span>.global(qos: .<span class="keyword">default</span>).async &#123;...&#125;</div></pre></td></tr></table></figure>
<p>这行代码保证这个 <code>Observable</code> 信号在主线程中发送消息。其实 RxSwift 是有一个调度机制, 但是我现在还不想那么早告诉你, 不然你该记不值了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">observer.onNext(<span class="string">"Hello dummy 🐣"</span>)</div></pre></td></tr></table></figure>
<p>一个 <code>Observable</code> 信号发出的消息从时间上来看, 可以被看作是一个 <strong>序列</strong>。在这个序列中可能有无限多的值。我们可以通过 <code>onNext</code> 方法类将这些值发送出来。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">observer.onCompleted()</div></pre></td></tr></table></figure>
<p>当这个序列已经发送完了所有的值之后，它可以发送一个 <code>Completed</code> 或者 <code>Error</code>出来。之后这个信号就不能在产生更多的值了, 然后就会随着一个闭包被释放掉。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> <span class="type">Disposables</span>.create()</div></pre></td></tr></table></figure>
<p>每一个  <code>Observable</code> 信号都要返回一个 <code>Disposable</code>.</p>
<p>使用 <code>Disposables.create()</code> 如果你不想在信号被释放的时候处理其他事情。你可以看看<a href="https://github.com/ReactiveX/RxSwift/blob/master/RxSwift/Disposables/NopDisposable.swift">NopDisposable</a>的实现，你会发现，他什么事情都没有做，只是一些空方法。</p>
<h3 id="Disposable"><a href="#Disposable" class="headerlink" title="Disposable"></a>Disposable</h3><p><code>Disposable</code> 对象必须要在 <code>Observable</code> 中返回, 它是用来在<code>Observable</code>不能再正常的完成的时候清除掉这些信号的。比如说你可以使用 <strong>AnonymousDisposable</strong>:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> <span class="type">Disposables</span>.create(with: &#123;</div><div class="line">    connection.close()</div><div class="line">    database.closeImportantSomething()</div><div class="line">    cache.clear()</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>只有当信号被提前释放或者程序手动调用了 <code>dispose()</code> 方法, <code>Disposable</code> 才会被调用。但是在多数情况下, <code>dispose()</code> 方法都是通过 <strong>Dispose Bags</strong> 自动调用的。别着急，你可以在一些更具体的例子中自己实现这个东西。</p>
<h3 id="Observer-🕵"><a href="#Observer-🕵" class="headerlink" title="Observer 🕵"></a>Observer 🕵</h3><p>我们创建的 <code>Observable</code> 是冷信号❄️。 除非我们订阅了它，不然它是不会发送信号的。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">observable.subscribe(onNext: &#123;(element) <span class="keyword">in</span></div><div class="line">  <span class="built_in">print</span>(element)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>这就是订阅信号的方法。在 <code>subscribeNext</code> 方法中一个订阅就发生了。这个方法也会返回一个 <code>Disposable</code>.这个 <code>Disposable</code> 就是对这个订阅的记录</p>
<p>这个 <code>Observable</code> 就开始工作了, 10秒之后, 你就会在控制台看见</p>
<blockquote>
<p>Hello dummy 🐣</p>
</blockquote>
<p><code>subscribe(onNext:)</code> 只会在Next事件发送出来的时候响应。也可以使用 <code>subscribe(onCompleted:)</code> 和 <code>subscribe(onError:)</code> 响应对应的事件。</p>
<h3 id="Dispose-Bag-🗑"><a href="#Dispose-Bag-🗑" class="headerlink" title="Dispose Bag 🗑"></a>Dispose Bag 🗑</h3><p>唯一一个还有点神秘的东西就是 <code>addDisposableTo</code> 这个方法了。</p>
<blockquote>
<p>Dispose bags are used to return ARC like behavior to RX. When a DisposeBag is deallocated, it will call dispose on each of the added disposables.</p>
<p>Dispose bags 就像是一个垃圾筐。就像是 AutoreleasePool 一样，当这个垃圾筐被释放的时候, 里面的所有东西都会被释放掉。</p>
</blockquote>
<p>当你订阅一个信号的时候, 你就需要把你创建出来的 <code>Disposable</code> 添加到这个框里面。当这的框被释放的时候(ExampleClass 对象 dealloc 的时候)。这些没有执行完的<code>Disposable</code>就会被释放掉。</p>
<p>它被用作释放在闭包中引用的值, 以及没用的资源, 比如说, 一个 HTTP 网络连接, 数据库连接, 或者是缓存的对象。</p>
<p>如果你还是不懂, 一会儿再举一个例子。</p>
<h3 id="Observable-operators"><a href="#Observable-operators" class="headerlink" title="Observable operators"></a>Observable operators</h3><p><code>create</code> 只是信号诸多操作方法中的一个而已，它被用来创建一个新的信号。可以看一下 ReactiveX<br>的<a href="http://reactivex.io/documentation/operators.html">官方文档</a>。哪里有所有的操作方法。我只是举一些常见的例子。</p>
<h4 id="Just"><a href="#Just" class="headerlink" title="Just"></a>Just</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.just(<span class="string">"Hello again dummy 🐥"</span>);</div><div class="line">observable.subscribe(onNext: &#123; (element) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(element)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div><div class="line">        </div><div class="line">observable.subscribe(onCompleted: &#123; </div><div class="line">    <span class="built_in">print</span>(<span class="string">"I'm done"</span>)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<blockquote>
<p>Hello again dummy 🐥<br>I’m done</p>
</blockquote>
<p><strong>Just</strong> just 创建了一个智能释放一个值的信号。所以在这个信号序列中的事件，是这样的:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.Next(&quot;Hello&quot;) -&gt;  .Completed</div></pre></td></tr></table></figure>
<h4 id="Interval"><a href="#Interval" class="headerlink" title="Interval"></a>Interval</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.interval(<span class="number">0.3</span>, scheduler: <span class="type">MainScheduler</span>.instance)</div><div class="line">observable.subscribe(onNext: &#123; (element) <span class="keyword">in</span></div><div class="line">   <span class="built_in">print</span>(element)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<blockquote>
<p>0<br>1<br>2<br>3<br>…</p>
</blockquote>
<p><strong>Interval</strong> 是一个非常具体的操作符号。在这个例子中, 它从 0 每0.3秒递增, <code>scheduler</code> 是用来定义异步行为的。</p>
<h4 id="Repeat"><a href="#Repeat" class="headerlink" title="Repeat"></a>Repeat</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.repeatElement(<span class="string">"This is fun 🙄"</span>)</div><div class="line">observable.subscribe(onNext: &#123; (element) <span class="keyword">in</span></div><div class="line">   <span class="built_in">print</span>(element)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<blockquote>
<p>This is fun 🙄<br>This is fun 🙄<br>This is fun 🙄<br>This is fun 🙄<br>…</p>
</blockquote>
<p><strong>repeat</strong> 会无限的重复我们给定的值。你可以通过定义 <code>scheduler</code> 类型的方法来控制线程的行为。</p>
<p>目前为止, 可能都不是非常的给力。但是知道其他的操作是必要的。另外一件很重要的事情涘，这是 RxSwift 最有用的一部分。</p>
<h3 id="Real-life-example"><a href="#Real-life-example" class="headerlink" title="Real life example"></a>Real life example</h3><p>现在我们开始快速的通过一个例子巩固一下这些知识。我们对 RxSwift 的了解目前为止是非常有限的。所有我们先使用一个简单的 MVC 的例子。我们先创建一个模型， 它可以从 google 上获取数据。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Foundation</div><div class="line"><span class="keyword">import</span> RxCocoa</div><div class="line"><span class="keyword">import</span> RxSwift</div><div class="line"></div><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">GoogleModel</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">createGoogleDataObservable</span><span class="params">()</span></span> -&gt; <span class="type">Observable</span>&lt;<span class="type">String</span>&gt; &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create(&#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">            </div><div class="line">            <span class="keyword">let</span> session = <span class="type">URLSession</span>.shared</div><div class="line">            <span class="keyword">let</span> task = session.dataTask(with: <span class="type">URL</span>(string: <span class="string">"https://www.google.com"</span>)!) &#123; (data, response, error) <span class="keyword">in</span></div><div class="line">                </div><div class="line">                <span class="comment">// 我们需要在主线程中更新</span></div><div class="line">                <span class="type">DispatchQueue</span>.main.async &#123;</div><div class="line">                    <span class="keyword">if</span> <span class="keyword">let</span> err = error &#123;</div><div class="line">                        <span class="comment">// 如果请求失败, 直接发处失败的事件</span></div><div class="line">                        observer.onError(err)</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        <span class="comment">// 解析数据</span></div><div class="line">                        <span class="keyword">if</span> <span class="keyword">let</span> googleString = <span class="type">String</span>(data: data!, encoding: .ascii) &#123;</div><div class="line">                            <span class="comment">// 将数据发送出去</span></div><div class="line">                            observer.onNext(googleString)</div><div class="line">                        &#125; <span class="keyword">else</span> &#123;</div><div class="line">                            <span class="comment">// 如果解析失败发送失败的事件</span></div><div class="line">                            observer.onNext(<span class="string">"Error! Unable to parse the response data from google!"</span>)</div><div class="line">                        &#125;</div><div class="line">                        <span class="comment">// 结束这个序列</span></div><div class="line">                        observer.onCompleted()</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            task.resume()</div><div class="line">            </div><div class="line">            <span class="comment">// 返回一个 AnonymousDisposable</span></div><div class="line">            <span class="keyword">return</span> <span class="type">Disposables</span>.create(with: &#123;</div><div class="line">                <span class="comment">// 取消请求</span></div><div class="line">                task.cancel()</div><div class="line">            &#125;)</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这是非常简单的。 <code>createGoogleDataObservable</code>中我们创建了一个可以被订阅的信号。这个信号创建了一个从 google 获取数据的任务。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="type">DispatchQueue</span>.main.async &#123;...&#125;</div></pre></td></tr></table></figure>
<p>URLSession 的任务是在后台线程中进行的, 所以我们需要在 UI 线程中更新。记住还有一个 <code>schedulers</code> 这会在更高级的阶段介绍出来。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> <span class="type">Disposables</span>.create(with: &#123;</div><div class="line"> task.cancel()</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p><code>Disposable</code> 是一个给长给力的机制： 如果订阅者停止订阅这个信号了。这个任务就会被取消。</p>
<p>接下来是订阅者这部分的内容了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"><span class="keyword">import</span> RxCocoa</div><div class="line"><span class="keyword">import</span> RxSwift</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// 通常就是这样创建 DisposeBag 的</span></div><div class="line">    <span class="comment">// 当这个 controller 被释放掉的时候，disposebag</span></div><div class="line">    <span class="comment">// 也会释放掉, 并且所有 bag 中的元素都会调用 dispose() 方法</span></div><div class="line">    <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">    <span class="keyword">let</span> model = <span class="type">GoogleModel</span>()</div><div class="line">    </div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> googleText: <span class="type">UITextView</span>!</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        </div><div class="line">        <span class="comment">// 记住使用 [weak self] 或者 [unowned self] 来避免循环引用</span></div><div class="line">        model.createGoogleDataObservable()</div><div class="line">            .subscribe(onNext: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] (element) <span class="keyword">in</span></div><div class="line">                <span class="keyword">self</span>?.googleText.text = element</div><div class="line">            &#125;).addDisposableTo(disposeBag)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>神奇吗？没有协议, 没有代理。只是声明了一下在一个事情发生的时候应该做什么。</p>
<p>在闭包中记得使用 <code>[weak self]</code> 或者 <code>[unowned self]</code> 来避免循环引用</p>
<p>还有一种更响应式的方法来为 <code>UITextView</code> 绑定文本, 绑定。但那是更高级的内容。</p>
<h3 id="Dispose-Bag-Example"><a href="#Dispose-Bag-Example" class="headerlink" title="Dispose Bag Example"></a>Dispose Bag Example</h3><p>你可能已经发现了 <code>disposeBag</code> 是 <code>ViewController</code> 的一个成员变量。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div></pre></td></tr></table></figure>
<p>当这个控制器被释放的时候，它也会释放掉这个 <code>disposeBag</code> .</p>
<p>如果这个 <code>disposeBag</code> 被释放掉之后, 它我们添加到这个 bag 里面所有的信号都会被释放掉。而这个网络请求任务如果还没有结束的话也会被取消。<br>希望我讲清楚了 <code>DisposeBag</code> 的机制。</p>
<h3 id="That‘s-it！"><a href="#That‘s-it！" class="headerlink" title="That‘s it！"></a>That‘s it！</h3><p>Demo 我已经放在 <a href="https://github.com/CepheusTeam/Translate">GitHub</a> 上了。</p>
<p>到现在, 我们已经学到了如何创建一个 Observable 和 订阅者。以及 disposing 机制是怎么回事。希望你能够理解到这样做比平常的观察者模式有什么优势。</p>
<p>下一篇是关于 RxSwift 操作符的。</p>
<p><a href="http://swiftpearls.com/RxSwift-for-dummies-1-Observables.html#basic-example">原文地址</a></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>我是一名来自中国的 iOS 程序员, 对技术有着浓厚的兴趣, 在学习的过程中, 发现了很多来自国外的优秀博客。为了更好的学习这些文章, 产生了将这些文章翻译成中文的想法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;RxSwift&lt;/strong&gt; 真的是一个非常值得学习的东西。非常遗憾的是我没有研究所有的架构模式MVVM VIPER Routing。&lt;/p&gt;
&lt;p&gt;要非常好的讲出来RxSwift到底是个什么东西，我也说不好。毕竟他能做太多的事情了。普遍认为，他是函数响应式编程中非常重要的观察者模式。在最初的定义中,他并不就是函数响应式编程。他最初的设计灵感就是来自于函数响应式(&lt;strong&gt;FRP&lt;/strong&gt;), 所以也可以说它包含了函数响应式的特性。&lt;/p&gt;
&lt;p&gt;如果你不知道什么是 &lt;strong&gt;FRP&lt;/strong&gt; 的话, 不用担心, 在这个教程中你会自然而然的理解什么是 &lt;strong&gt;FRP&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;通过对 RXSwift 的深入研究, 我得到了很多的启发, 同时也被很多的问题困扰。相信你也会这样。&lt;/p&gt;
&lt;p&gt;需要花很多个小时的时间来适应新的思维模式，唯一能确定的是，一旦你适应了，你就再也不想回到从前了。&lt;/p&gt;
&lt;p&gt;在这个教程中，我会尽可能的节约你的时间，并且解释的尽可能的详细。想教幼儿园的小朋友一样。&lt;/p&gt;
&lt;p&gt;开始学习之前, 请确定你已经掌握了 Swift 和 UIkit 的基础知识. &lt;/p&gt;
    
    </summary>
    
      <category term="Reactive" scheme="https://CepheusSun.github.io/categories/Reactive/"/>
    
    
      <category term="iOS" scheme="https://CepheusSun.github.io/tags/iOS/"/>
    
      <category term="Swift" scheme="https://CepheusSun.github.io/tags/Swift/"/>
    
      <category term="翻译" scheme="https://CepheusSun.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="Reactive" scheme="https://CepheusSun.github.io/tags/Reactive/"/>
    
  </entry>
  
  <entry>
    <title>MVVM design pattern and RxSwift</title>
    <link href="https://CepheusSun.github.io/MVVM%20design%20pattern%20and%20RxSwift.html"/>
    <id>https://CepheusSun.github.io/MVVM design pattern and RxSwift.html</id>
    <published>2017-05-05T17:35:57.000Z</published>
    <updated>2017-05-19T02:44:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文翻译自(<a href="http://lukagabric.com/mvvm-design-pattern-and-rxswift/">http://lukagabric.com/mvvm-design-pattern-and-rxswift/</a>)</p>
<h3 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h3><p>MVVM 是一种设计模式。他是程序的代码分离成三个部分: <code>Model</code>、<code>View</code>、<code>ViewModel</code>。 <code>Model</code> 代表数据的表现, <code>View</code> 代表用户看到的界面，<code>ViewModel</code> 代表着模型层和视图层的主要关联关系。</p>
<a id="more"></a>
<h4 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h4><p><code>Model</code> 就是数据层。他包括一定范围内的模型，和业务逻辑。 <code>Model</code> 并不只是你程序中的那些模型结构体或者数据库, 他也包含了一些 Service 或者组件, 比如说 <code>Alamofire</code>和一些 SDK 等等。</p>
<p><code>Model</code> 层执行所有跟数据有关的操作。比如常见的增删改查等等。这些操作由 <code>ViewModel</code> 发起。当 <code>Model</code>操作完了数据之后它再告诉 <code>ViewModel</code> 结果。</p>
<p><code>Model</code> 被 ViewModel 持有。他也并不知道视图层和 <code>ViewModel</code> 层的事情。因为他是和这两个东西完全隔离开的。</p>
<h4 id="View"><a href="#View" class="headerlink" title="View"></a>View</h4><p><code>View</code> 是程序中数据的可视化展示。它没有逻辑相关的东西。他主要有接受用户交互事件，和将数据展示在界面上两个人物。它将用户交互的事件转发到 <code>ViewModel</code> 中进行处理。<code>View</code> 观察 <code>ViewModel</code> 中数据的变化, 并且将这些变化展现出来。</p>
<p><code>View</code> 和 <code>Model</code> 之间没有任何直接的关联。 他们通过 <code>View</code> 持有的 <code>ViewModel</code> 产生关联。</p>
<p>界面信息在 <code>xib</code> 或者 <code>StoryBoard</code> 中通过 <code>UIKit</code> 中的组件被定义。<code>ViewController</code> 是直接跟 <code>xib</code> 或者 <code>StoryBoard</code> 关联的。它包含了 <code>Xib</code> 或者 <code>StoryBoard</code> 中的 <code>outlets</code> 和一些定义 UI 的额外配置。他也负责管理 <code>View</code> 的生命周期。 在 MVVM 中他和 <code>View</code> 的关联是非常紧密的, 他其实就是 <code>View</code> 层的一部分。</p>
<h4 id="ViewModel"><a href="#ViewModel" class="headerlink" title="ViewModel"></a>ViewModel</h4><p><code>ViewModel</code> 是程序的逻辑层。他处理用户交互行为。然后更新数据。然后在通知 <code>View</code> 新的数据和显示的方式。举一个很平常的例子。一个 ViewModel 从Model层中请求到了一些包含 <code>Date</code> 的模型。 这个 Date 值并不会被告诉给 View, ViewModel 告诉 View 的应该是被格式化之后的字符串。视图不会操作数据本身，他只负责将 ViewModel 准备好的数据展示出来。</p>
<h4 id="Similar-to-MVC"><a href="#Similar-to-MVC" class="headerlink" title="Similar to MVC"></a>Similar to MVC</h4><p>在 MVC 设计模式中, <code>ViewController</code> 是 <code>Model</code> 和 <code>View</code> 之间的桥梁。他只有视图, 管理视图的结构，管理用户的交互。他还负责管理视图的生命周期,加载、显示、消失等。他具有的另外一个指责是更新模型数据, 这就包括了显示数据的相关逻辑(也就是数据的处理,如上文提到的讲 <code>Date</code> 转化成 <code>String</code> 的逻辑)。因为他具有这么多的职责，所以很多情况下 <code>Viewcontroller</code> 就会变的非常大。所以也有人称MVC 为 Massive View Controller</p>
<p>出现复杂的 <code>viewController</code> 主要有两个原因。由于 <code>Controller</code> 有很多的职责。代码就会变的非常的复杂。这很明显就违背了单一职责这个原则。这也让测试 <code>Controller</code> 中的逻辑变成一件很麻烦的事情。<code>Controller</code> 和 <code>View</code> 的高度耦合。<code>view</code> 的生命周期使得逻辑的分离变的不那么容易。我们就需要花很大的精力来处理视图的生命周期。</p>
<p>MVVM 和 MVC 非常相似。 正如前文所说。 MVC 中的 <code>Controller</code> 同时包含了视图和程序的逻辑。将逻辑相关的代码从 <code>Controller</code> 中分离出来, 放到他自己抽象出来的类里面去。这时候的 <code>Controller</code>就只关注视图相关的事情。刚刚分离出来的这个类处理相关的逻辑。这个类就是 ViewModel。他和 <code>Controller</code> 具有一一对应关系。所以说 MVVM 就是将逻辑代码从 <code>controller</code>中分离到 <code>ViewModel</code> 中的 MVC</p>
<h4 id="Binding-data-from-ViewModel-to-View"><a href="#Binding-data-from-ViewModel-to-View" class="headerlink" title="Binding data from ViewModel to View"></a>Binding data from ViewModel to View</h4><p>有很多将数据绑定的机制, 比如 Swift 中的属性观察。视图可以对外提供一个 Closure 来进行视图的更新。这个 Closure 用来通知 View 他关联的属性的更新。除了熟悉观察。我们的程序还经常需要处理各种异步操作，比如网络请求，和通知或者事件的流信息。函数响应式编程(FRP)框架简直就是为了处理这类事件而生的。现在也有很多FRP 框架，对 iOS 开发来说，最出名的应该是 <code>RxSwift</code> 和 <code>ReactiveCocoa</code>了。之前在一篇对比文章中有提到过, 不管怎样，我更喜欢 <code>RxSwift</code> </p>
<h3 id="RxSwift"><a href="#RxSwift" class="headerlink" title="RxSwift"></a>RxSwift</h3><p>指令式编程是基于一步一步明确的指令来执行的。他详细的描述了程序的运行过程。值做为状态而存在。由于程序是一步一步的执行的,所以如果其中一个值在之后发生了改变，这一改变也不会被传到下一步。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 指令式编程</span></div><div class="line">a = <span class="number">1</span></div><div class="line">b = <span class="number">2</span></div><div class="line"><span class="built_in">c</span> = a + b  <span class="comment">// c = 3</span></div><div class="line">a = <span class="number">5</span>   <span class="comment">// c = 3</span></div></pre></td></tr></table></figure>
<p>响应式编程,跟指令式相反。他是基于变化的。他基于声明式编程，这就意味着他关注的是程序应该完成什么，而不是程序是怎么运行的。它是通过数学运算和其他像是 <code>filter</code> <code>map</code> <code>reduce</code> 之类的运算操作的运用来实现的。如何准确的运行被交给底层的程序语言或者框架来考虑了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 响应式编程</span></div><div class="line">a = <span class="number">1</span></div><div class="line">b = <span class="number">2</span></div><div class="line"><span class="built_in">c</span> = a + b <span class="comment">// c = 3</span></div><div class="line">a = <span class="number">5</span>     <span class="comment">// c = 7</span></div></pre></td></tr></table></figure>
<p>RxSwift 让你能用通过函数响应式编程来编写你的代码。使用 RxSwift 可以很轻松的创建事件或者数据流。这些事件或者数据流可以互相组合、转换。并且最终被观察到，基于值来进行一些操作。</p>
<p>正如前文所说，在 MVVM 中 View 观察 ViewModel 中模型的数据。RxSwift 提供了一个非常简单并且干净的方法来观察这些值，并绑定到对应的 View 上。</p>
<h4 id="Observable"><a href="#Observable" class="headerlink" title="Observable"></a>Observable</h4><p>Observable 是 RxSwift 的主要构成部分。他是一个可以异步的接受元素的序列。这个序列可以有0个或者很多个的元素。有三种事件能够基于它发生。下一步(Next)、完成(Completed)、错误(Error)</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Event</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> next(<span class="type">Element</span>)   <span class="comment">// 这个序列的下一个元素</span></div><div class="line">    <span class="keyword">case</span> error(<span class="type">Swift</span>.<span class="type">Error</span>)<span class="comment">// 这个序列发生了错误</span></div><div class="line">    <span class="keyword">case</span> completed      <span class="comment">// 这个序列成功的完成的所有人任务</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以使用 <code>Observable</code> 的 <code>subscribe</code> 方法来订阅这些事件。 用这种方法可以分别处理这个事件的各种情况。</p>
<ul>
<li>OnNext: 可以使用被订阅的元素值。</li>
<li>OnCompleted: 当这个序列成功的发送完所有元素之后会被调用。</li>
<li>OnError: 当这个序列不能完成的时候被调用。</li>
</ul>
<p>只要 <code>Complete</code> 或者 <code>Error</code> 被观察到了, 这个序列就不能产生任何新的元素了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">observable.subscribe(</div><div class="line">    onNext: &#123; element <span class="keyword">in</span> ... &#125;, </div><div class="line">    onError: &#123; error <span class="keyword">in</span> ... &#125;,</div><div class="line">    onCompleted: &#123; ... &#125;</div><div class="line">)</div></pre></td></tr></table></figure>
<h4 id="Hot-and-cold-observables"><a href="#Hot-and-cold-observables" class="headerlink" title="Hot and cold observables"></a>Hot and cold observables</h4><p>即使没有被观察也会发送消息的信号被称作热信号。想象一下 <code>NotificationCenter</code> 技术没有其他对象接受通知, 也也然会发送出来。如果你在某个时候订阅了这个信号, 之前发出来的消息你就会错过。</p>
<p>那些只有被订阅之后才开始发送消息的信号被称作冷信号。这些资源会被分配给每个订阅对象。(比如说，你每次订阅的网络请求就会被释放)但是这些资源可以被多个对象共享(只有一个网络请求被释放了,但可能这被很多个观察者订阅)</p>
<h4 id="Driver"><a href="#Driver" class="headerlink" title="Driver"></a>Driver</h4><p>Driver 是 RxCocoa 框架中的一个值类型。它是对一个可订阅的序列的封装，如果要把一个简单的值绑定到View上, 它会是一个更简单的方法。如果 <code>Observables</code> 发生了错误, 你需要很方便的将一些东西展示出来。每个信号都可以很容易的被转换成 <code>Driver</code>。 当你提供了这个信号发生错误的返回什么的时候，只需要使用 <code>asDriver</code> 方法就可以了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.asDriver(onErrorJustReturn: <span class="string">"No items to display."</span>)</div></pre></td></tr></table></figure>
<p>想象一下异步操作的场景。比如说网络请求。我们需要在界面上展示返回值的个数。在这个场景中，我们需要将返回值的个数映射成一个字符串。可能这个字符串的格式可能是 <code>&quot;X item(s)&quot;</code> <code>Driver</code> 还能够确保我们需要修改 UI 的这个订阅是发生在主线程当中的。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> results: <span class="type">Observable</span>&lt;[<span class="type">SomeItem</span>]&gt; = ...</div><div class="line"><span class="keyword">let</span> resultsCountDriver = results</div><div class="line">    .<span class="built_in">map</span> &#123; <span class="string">"<span class="subst">\($<span class="number">0</span>.<span class="built_in">count</span>)</span> item(s)"</span> &#125;</div><div class="line">    .asDriver(onErrorJustReturn: <span class="string">"No items to display."</span>)</div></pre></td></tr></table></figure>
<p>把这个数据绑定到 Label 中就很简单了</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">resultsCountDriver.drive(resultCountLabel.rx.text).disposed(by: disposeBag)</div></pre></td></tr></table></figure>
<h4 id="DisposeBag"><a href="#DisposeBag" class="headerlink" title="DisposeBag"></a>DisposeBag</h4><p>如果一个序列停止了, 但是它并没有被释放掉。在他就会造成资源的浪费和内存的泄漏。知道他完成了或者处错了。如果一个序列没有停止，也没有出错，这个资源就会被永久的占用。这就是为什么我们要在需要订阅的对象中生命一个 <code>DisposeBag</code> 的成员变量的原因了。这样的话，只要这个对象呗释放掉了，所有相关的资源都会被释放并且被系统回收。</p>
<h4 id="Variable"><a href="#Variable" class="headerlink" title="Variable"></a>Variable</h4><p><code>Variable</code>表示可以被订阅的状态。它是信号和功能范式之间的桥梁。<code>Variable</code> 总是包含了提供给构造函数的初始值当你订阅当前的值的时候，这个初始值会立马被发送到过来。(只有最新和当前值会被发出，旧的值不会)。也可以直接获取或者设置 <code>Variable</code> 的值。他内部的信号可以通过 <code>asObservable</code> 方法获取到。另外, <code>Variable</code> 永远都不会出错。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> variable = <span class="type">Variable</span>(<span class="string">"My Variable"</span>)</div><div class="line">variable.value = <span class="string">"Some value"</span></div><div class="line"><span class="keyword">let</span> variableObservable = variable.asObservable()</div><div class="line">variableObservable.subscribe(onNext: &#123; value <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(value) <span class="comment">//prints "Some value"</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>最后， 我写了一个 Demo 来演示 MVVM + RxSwift. 这是一个简单的程序获取并且显示天气的数据。这个app有三种状态， 加载中，显示中，错误。有两种对错误的处理，一是，我们只显示错误。另一个是显示之前的数据。如果没有，就显示错误。这两种处理方式都是通过响应式编程和指令式编程实现的。</p>
<p>在这些例子中，只有 ViewMoel 会发生改变。你可以看到给功能增加复杂性(显示错误或者旧的数据)。如果使用指令式编程，可能会对代码带来很多的变动。而使用响应式编程，只需要增加额外的状态而已。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文翻译自(&lt;a href=&quot;http://lukagabric.com/mvvm-design-pattern-and-rxswift/&quot;&gt;http://lukagabric.com/mvvm-design-pattern-and-rxswift/&lt;/a&gt;)&lt;/p&gt;
&lt;h3 id=&quot;MVVM&quot;&gt;&lt;a href=&quot;#MVVM&quot; class=&quot;headerlink&quot; title=&quot;MVVM&quot;&gt;&lt;/a&gt;MVVM&lt;/h3&gt;&lt;p&gt;MVVM 是一种设计模式。他是程序的代码分离成三个部分: &lt;code&gt;Model&lt;/code&gt;、&lt;code&gt;View&lt;/code&gt;、&lt;code&gt;ViewModel&lt;/code&gt;。 &lt;code&gt;Model&lt;/code&gt; 代表数据的表现, &lt;code&gt;View&lt;/code&gt; 代表用户看到的界面，&lt;code&gt;ViewModel&lt;/code&gt; 代表着模型层和视图层的主要关联关系。&lt;/p&gt;
    
    </summary>
    
      <category term="Reactive" scheme="https://CepheusSun.github.io/categories/Reactive/"/>
    
    
      <category term="iOS" scheme="https://CepheusSun.github.io/tags/iOS/"/>
    
      <category term="Swift" scheme="https://CepheusSun.github.io/tags/Swift/"/>
    
      <category term="翻译" scheme="https://CepheusSun.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="Reactive" scheme="https://CepheusSun.github.io/tags/Reactive/"/>
    
      <category term="设计模式" scheme="https://CepheusSun.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>RxSwift and the awesome things you can do with Reactive Programming — Part I</title>
    <link href="https://CepheusSun.github.io/RxSwift%20and%20the%20awesome%20things%20you%20can%20do%20with%20Reactive%20Programming%E2%80%8A%E2%80%94%E2%80%8APart%20I.html"/>
    <id>https://CepheusSun.github.io/RxSwift and the awesome things you can do with Reactive Programming — Part I.html</id>
    <published>2017-05-04T16:00:00.000Z</published>
    <updated>2017-05-23T07:32:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文翻译自国外的美女工程师 <a href="https://medium.com/@kenzai">Kenza Iraki</a> 的文章 <a href="https://medium.com/@kenzai/rxswift-and-the-awesome-things-you-can-do-with-reactive-programming-part-i-3921137d251">RxSwift and the awesome things you can do with Reactive Programming — Part I</a></p>
<p>第一次听见响应式编程，我的表情是这样的</p>
<center><br><img src="https://cdn-images-1.medium.com/max/1600/1*28RdzpfQBHklPcgLGsg0jw.png"><br></center>

<p>接下来的几次几次接触, 也并没有什么改变。整整两个星期之后,即使我在项目中写了一些响应式代码。我依然是这种感觉。</p>
<p>现在我才知道有很多的人在第一次遇见响应式编程的时候跟我有一样的感觉。我也知道很多人看过响应式的代码之后再也不想再见到它了，因为她的学习曲线太过陡峭了。但是我能告诉你一个事实, 我还没听说过一个人， 在最终理解了他是怎么回事之后,后悔学习响应式编程。</p>
<p>我知道网上有很多关于响应式编程理论和思想还有 RxSwift 的的资源, 也有很多教你用Rx来做各种事情的教程(文末我会给出一些链接)。这篇文章不是是一个教程, 也不会解释 <code>stream</code> 和 <code>observables</code> 是怎么回事。 我要做的是提供一个直接、明确并且尽量少的理论总结来告诉你 RxSwift 能做什么, 并且告诉你为什么你会喜欢上它。由于 Rx 的世界深似海, 所以我打算写三篇文章来讨论这件事情, 这是第一篇。</p>
<h2 id="Part1-Data-Binding-control-events-and-gesture-recognizers"><a href="#Part1-Data-Binding-control-events-and-gesture-recognizers" class="headerlink" title="Part1: Data Binding, control events and gesture recognizers"></a>Part1: Data Binding, control events and gesture recognizers</h2><h3 id="Data-Binding"><a href="#Data-Binding" class="headerlink" title="Data Binding"></a>Data Binding</h3><p>数据绑定看起来像是一个高端的词语, 但是它却是一件非常简单的事情。假如你有一个 App 需要用户在 <code>UITextField</code> 中输入它们的名字。当他们在打字的时候, 用 “你好 + 用户输入的文字” 展示在界面上。这样一个很基本的场景。如果在不是响应式的程序中, 我们需要遵守 <code>UITextFieldDelegate</code> 这个协议, 然后在 <code>ViewController</code> 中实现 <code>textFieldDidEndEditing</code> 这个方法, 来监听用户用户的行为，然后给 <code>Label</code> 赋值。</p>
<p>虽然很简单，但是假如有很多的 <code>UITextField</code> 我们还要在代理方法中判断, 又或者, 我们需要用户在输入的过程中时时的刷新 <code>Label</code>。这种场景, 我们的代码，看起来就会很糟糕。至少不会很优雅吧。</p>
<p>在响应式中, 这种情况就可以用数据绑定来实现。说白了,就是将用户在 <code>UITextField</code> 中输入的文字绑定到 <code>UILabel</code> 上。在 <code>RxSwift</code> 的世界里,  没有什么比处理数据绑定更简单的了。刚才描述的需求, 我们只需要通过以下代码就可以实现了。</p>
<a id="more"></a>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> namefield = <span class="type">UITextField</span>()</div><div class="line"><span class="keyword">var</span> helloLabel = <span class="type">UILabel</span>()</div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    nameField.rx.text.<span class="built_in">map</span> &#123; <span class="string">"Hello <span class="subst">\($<span class="number">0</span>)</span>"</span> &#125;</div><div class="line">                     .bindTo(helloLabel.rx.text)</div></pre></td></tr></table></figure>
<p>上面的代码， 我们首先是获取到了 <code>UITextField</code> 的文字。 然后我们将这段文字映射成想要的格式，然后赋值给 <code>UILabel</code>。 在这里，我们之间见到的在文字前面加了一个 <code>&#39;hello&#39;</code>， 因为 map 是一个闭包, 可以简单的被看作一个匿名函数, 它的参数:<code>$0</code>(第一个参数)、<code>$1</code>(第二个参数)以此类推。然后将映射后的文字绑定到 <code>UILabel</code> 的 <code>text</code> 属性上。就这么简单，这个需求就完成了。没有使用代理，也没有用各种 if 语句, 就简单明了的几行代码。</p>
<p>你先在肯定在想,”是，这是很神奇, 但是真的有很多 app 在这样做吗” 我可以告诉你，是的。不要仅仅是限制在这简单的几个例子中。能够将数据绑定到视图是非常强大的事情。你想想看，如果我们有一个视图的背景颜色需要根据天气用户的地理位置而改变。基于可能变化的数据和一些简单的逻辑, 不需要太过深入的研究它背后的东西。这就是数据绑定最主要的思想。</p>
<h3 id="Control-Events-and-Gesture-Recognizers"><a href="#Control-Events-and-Gesture-Recognizers" class="headerlink" title="Control Events and Gesture Recognizers"></a>Control Events and Gesture Recognizers</h3><p>简单的说一下什么是事件吧！事件基本上是用户能在你的 app 上操作的所有行为，点击、滑动、拖拽等等。当用户按下一个按钮的时候，你的程序会监听到一个 <code>UIControlEvent</code> 的事件类型 <code>.touchUpInSide</code>。 如果你用的是 <code>StoryBoary</code> ，你可能在创建 <code>IBAction</code> 的时候，没有想过这个按钮的行为。我已经写了一篇<a href="">why I never use storyboards</a> 。如果你跟我一样,这段代码你肯定会很熟悉了</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> button = <span class="type">UIButton</span>()</div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    button.addTarget(#selector(<span class="type">ViewController</span>.loginUser), target: <span class="keyword">self</span>, event: .touchUpInside</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">loginUser</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="comment">// Implementation here</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我真的很讨厌 Selector, 这些代码太不明确了，让代码看起来很乱，也让我们更容易犯错。但是用 Rx 这样就可以了：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> button = <span class="type">UIButton</span>()</div><div class="line"><span class="keyword">var</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    button.rx.tap.subscribe &#123; onNext <span class="number">_</span> <span class="keyword">in</span></div><div class="line">        <span class="comment">// Implementation here</span></div><div class="line">    &#125;.addDisposableTo(disposeBag)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不要太过纠结 <code>disposeBag</code> 和 <code>subscribe</code> 这些东西。你只要知道这些是一些必须的动作就可以了。(下面会有介绍)</p>
<p>当你需要给不具有 control event 的控件添加一些逻辑事件, 比如给 <code>UILabel</code> 或者 <code>UIImageView</code> 添加点击事件的时候。我们只能给他添加手势。(这是我做讨厌的 UIKit 特点之一)。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> label = <span class="type">UILabel</span>()</div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="comment">// Show example of gesture recognizers</span></div><div class="line">    <span class="keyword">let</span> gestureRecognizer = <span class="type">UITapGestureRecognizer</span>(target: <span class="keyword">self</span>, action: “handleTap:”)</div><div class="line">    label.addGestureRecognizer(gestureRecognizer)</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleTap</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="comment">// Your logic here</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其他的手势，如果你需要响应的话。你就需要给这个控件添加多个 <code>gesture recognizer</code> ,你要创建多个手势，然后挨个添加到这个控件上。这不仅是很多样板代码这么简单，这也可能带来一些难以想象的混乱和潜在的错误。</p>
<p>你可以已经想到了。Rx 让这个东西变的异常的简单：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> label = <span class="type">UILabel</span>()</div><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    label.rx.gesture(.tap).subscribe &#123;onNext (gesture) <span class="keyword">in</span></div><div class="line">        <span class="comment">// Your logic here</span></div><div class="line">    &#125;.addDisposableTo(disposeBag)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>假如你需要添加多个手势的话:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> label = <span class="type">UILabel</span>()</div><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    label.rx.gesture(.tap, .pan, .swipeUp).subscribe &#123; onNext (gesture) <span class="keyword">in</span></div><div class="line">        <span class="keyword">switch</span> gesture &#123;</div><div class="line">        <span class="keyword">case</span> .tap: <span class="comment">// Do something</span></div><div class="line">        <span class="keyword">case</span> .pan: <span class="comment">// Do something</span></div><div class="line">        <span class="keyword">case</span> .swipeUp: <span class="comment">// Do something </span></div><div class="line">        <span class="keyword">default</span>: <span class="keyword">break</span>       </div><div class="line">        &#125;        </div><div class="line">    &#125;.addDisposableTo(disposeBag)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这些都是一个叫 <a href="https://github.com/RxSwiftCommunity/RxGesture">RxGesture</a> 的 RxSwift 库提供的。</p>
<p><strong>参考资料</strong></p>
<p><a href="https://github.com/ReactiveX/RxSwift">ReactiveX/RxSwift</a></p>
<p><a href="https://realm.io/news/altconf-ash-furrow-functional-reactive-swift/">Functional Reactive Awesomeness With Swift</a></p>
<p><a href="https://medium.com/swift-programming/reactive-swift-3b6050375534">My journey with reactive programming in Swift — and the iOS app that came out of it.</a></p>
<p><a href="https://github.com/DTVD/The-introduction-to-RxSwift-you-have-been-missing">DTVD/The-introduction-to-RxSwift-you-have-been-missing</a></p>
<p><a href="https://www.thedroidsonroids.com/blog/ios/rxswift-by-examples-1-the-basics/">RxSwift by Examples #1 – The basics.</a></p>
<p><a href="https://news.realm.io/news/tryswift-Marin-Todorov-I-create-iOS-apps-is-RxSwift-for-me/">I create iOS apps - is RxSwift for me?</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文翻译自国外的美女工程师 &lt;a href=&quot;https://medium.com/@kenzai&quot;&gt;Kenza Iraki&lt;/a&gt; 的文章 &lt;a href=&quot;https://medium.com/@kenzai/rxswift-and-the-awesome-things-you-can-do-with-reactive-programming-part-i-3921137d251&quot;&gt;RxSwift and the awesome things you can do with Reactive Programming — Part I&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;第一次听见响应式编程，我的表情是这样的&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1600/1*28RdzpfQBHklPcgLGsg0jw.png&quot;&gt;&lt;br&gt;&lt;/center&gt;

&lt;p&gt;接下来的几次几次接触, 也并没有什么改变。整整两个星期之后,即使我在项目中写了一些响应式代码。我依然是这种感觉。&lt;/p&gt;
&lt;p&gt;现在我才知道有很多的人在第一次遇见响应式编程的时候跟我有一样的感觉。我也知道很多人看过响应式的代码之后再也不想再见到它了，因为她的学习曲线太过陡峭了。但是我能告诉你一个事实, 我还没听说过一个人， 在最终理解了他是怎么回事之后,后悔学习响应式编程。&lt;/p&gt;
&lt;p&gt;我知道网上有很多关于响应式编程理论和思想还有 RxSwift 的的资源, 也有很多教你用Rx来做各种事情的教程(文末我会给出一些链接)。这篇文章不是是一个教程, 也不会解释 &lt;code&gt;stream&lt;/code&gt; 和 &lt;code&gt;observables&lt;/code&gt; 是怎么回事。 我要做的是提供一个直接、明确并且尽量少的理论总结来告诉你 RxSwift 能做什么, 并且告诉你为什么你会喜欢上它。由于 Rx 的世界深似海, 所以我打算写三篇文章来讨论这件事情, 这是第一篇。&lt;/p&gt;
&lt;h2 id=&quot;Part1-Data-Binding-control-events-and-gesture-recognizers&quot;&gt;&lt;a href=&quot;#Part1-Data-Binding-control-events-and-gesture-recognizers&quot; class=&quot;headerlink&quot; title=&quot;Part1: Data Binding, control events and gesture recognizers&quot;&gt;&lt;/a&gt;Part1: Data Binding, control events and gesture recognizers&lt;/h2&gt;&lt;h3 id=&quot;Data-Binding&quot;&gt;&lt;a href=&quot;#Data-Binding&quot; class=&quot;headerlink&quot; title=&quot;Data Binding&quot;&gt;&lt;/a&gt;Data Binding&lt;/h3&gt;&lt;p&gt;数据绑定看起来像是一个高端的词语, 但是它却是一件非常简单的事情。假如你有一个 App 需要用户在 &lt;code&gt;UITextField&lt;/code&gt; 中输入它们的名字。当他们在打字的时候, 用 “你好 + 用户输入的文字” 展示在界面上。这样一个很基本的场景。如果在不是响应式的程序中, 我们需要遵守 &lt;code&gt;UITextFieldDelegate&lt;/code&gt; 这个协议, 然后在 &lt;code&gt;ViewController&lt;/code&gt; 中实现 &lt;code&gt;textFieldDidEndEditing&lt;/code&gt; 这个方法, 来监听用户用户的行为，然后给 &lt;code&gt;Label&lt;/code&gt; 赋值。&lt;/p&gt;
&lt;p&gt;虽然很简单，但是假如有很多的 &lt;code&gt;UITextField&lt;/code&gt; 我们还要在代理方法中判断, 又或者, 我们需要用户在输入的过程中时时的刷新 &lt;code&gt;Label&lt;/code&gt;。这种场景, 我们的代码，看起来就会很糟糕。至少不会很优雅吧。&lt;/p&gt;
&lt;p&gt;在响应式中, 这种情况就可以用数据绑定来实现。说白了,就是将用户在 &lt;code&gt;UITextField&lt;/code&gt; 中输入的文字绑定到 &lt;code&gt;UILabel&lt;/code&gt; 上。在 &lt;code&gt;RxSwift&lt;/code&gt; 的世界里,  没有什么比处理数据绑定更简单的了。刚才描述的需求, 我们只需要通过以下代码就可以实现了。&lt;/p&gt;
    
    </summary>
    
      <category term="Reactive" scheme="https://CepheusSun.github.io/categories/Reactive/"/>
    
    
      <category term="iOS" scheme="https://CepheusSun.github.io/tags/iOS/"/>
    
      <category term="Swift" scheme="https://CepheusSun.github.io/tags/Swift/"/>
    
      <category term="翻译" scheme="https://CepheusSun.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="Reactive" scheme="https://CepheusSun.github.io/tags/Reactive/"/>
    
  </entry>
  
  <entry>
    <title>RAC 最基本的东西-- RACSignal</title>
    <link href="https://CepheusSun.github.io/RAC%20%E6%9C%80%E5%9F%BA%E6%9C%AC%E7%9A%84%E4%B8%9C%E8%A5%BF--%20RACSignal.html"/>
    <id>https://CepheusSun.github.io/RAC 最基本的东西-- RACSignal.html</id>
    <published>2017-04-26T16:00:00.000Z</published>
    <updated>2017-04-27T09:20:19.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h3><ul>
<li>创建信号</li>
<li>订阅信号</li>
<li>发送信号</li>
</ul>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1.创建信号(cold)</span></div><div class="line">RACSignal *signal = [RACSignal createSignal:^RACDisposable * _Nullable(<span class="keyword">id</span>&lt;RACSubscriber&gt;  _Nonnull subscriber) &#123;</div><div class="line">    <span class="comment">// 3.发送信号</span></div><div class="line">    [subscriber sendNext:<span class="string">@"hello, RAC."</span>];</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 2.订阅信号(hot)</span></div><div class="line">[signal subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, x);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>在创建 RACSignal 的时候, </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">+ (RACSignal&lt;ValueType&gt; *)createSignal:(RACDisposable * _Nullable (^)(id&lt;RACSubscriber&gt; subscriber))didSubscribe;</div></pre></td></tr></table></figure>
<p>方法传入的 block 会返回一个 <code>RACDisposable</code> 对象。</p>
<p>将以上代码中的 <code>return nil；</code> 替换成如下代码</p>
<a id="more"></a>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> [RACDisposable disposableWithBlock:^&#123;</div><div class="line"><span class="comment">// 订阅者释放时会自动取消订阅信号, 但是只要订阅者没有释放, 就不会取消订阅信号.</span></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"信号被取消订阅了!"</span>);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>这个时候在 <code>[subscriber sendComplete]</code> 的时候会执行创建 <code>RACDisposable</code> 传入的 <code>block</code> </p>
<p><strong>如何主动取消订阅</strong></p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">_disposable = [signal subscribeNext:^(<span class="keyword">id</span> x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, x);</div><div class="line">&#125;];<span class="comment">// 可以看出来，这里的 subscribeNext 返回的就是取消订阅这个 signal 的 RACDisoisable</span></div><div class="line"><span class="comment">// 不管 在创建 signal 的时候 return 的是 nil 还是 RACDisposable 对象</span></div><div class="line">[_disposable dispose]</div></pre></td></tr></table></figure>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;ReactiveObjC.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) RACDisposable *disposable;    </div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    RACSignal *signal = [RACSignal createSignal:^RACDisposable *(<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber ) &#123;       </div><div class="line">        [subscriber sendNext:<span class="string">@"hello, RAC."</span>];</div><div class="line">        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">            [subscriber sendNext:<span class="string">@"2"</span>];</div><div class="line">            dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">                [subscriber sendNext:<span class="string">@"2"</span>];</div><div class="line">                dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">                    [subscriber sendNext:<span class="string">@"2"</span>];</div><div class="line">                    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">                        [subscriber sendNext:<span class="string">@"2"</span>];</div><div class="line">                        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">                            [subscriber sendNext:<span class="string">@"2"</span>];</div><div class="line">                            dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">                                [subscriber sendNext:<span class="string">@"2"</span>];</div><div class="line">                                dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">                                    [subscriber sendNext:<span class="string">@"2"</span>];</div><div class="line">                                    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">                                        [subscriber sendNext:<span class="string">@"2"</span>];</div><div class="line">                                        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">                                            [subscriber sendNext:<span class="string">@"2"</span>];</div><div class="line">                                        &#125;);</div><div class="line">                                    &#125;);</div><div class="line">                                &#125;);</div><div class="line">                            &#125;);</div><div class="line">                        &#125;);</div><div class="line">                    &#125;);</div><div class="line">                &#125;);</div><div class="line">            &#125;);</div><div class="line">        &#125;);</div><div class="line">        <span class="comment">// 如果信号不再发送数据, 最好调用信号的发送完成方法, 该方法会调用 [RACDisposable disposable] 取消订阅信号.</span></div><div class="line">        <span class="comment">//[subscriber sendCompleted];</span></div><div class="line">        </div><div class="line">        <span class="keyword">return</span> [RACDisposable disposableWithBlock:^&#123;</div><div class="line">            <span class="comment">// 订阅者释放时会自动取消订阅信号, 但是只要订阅者没有释放, 就不会取消订阅信号.</span></div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"信号被取消订阅了!"</span>);</div><div class="line">        &#125;];</div><div class="line">        <span class="comment">//如果取消订阅的时候不需要做什么事情, return nil 也没有关系</span></div><div class="line">        <span class="comment">//return nil;</span></div><div class="line">    &#125;];</div><div class="line">    _disposable = [signal subscribeNext:^(<span class="keyword">id</span> x) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, x);</div><div class="line">    &#125;];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</div><div class="line">    <span class="comment">// 主动取消订阅信号</span></div><div class="line">    [_disposable dispose];</div><div class="line">&#125;  </div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h3 id="timer"><a href="#timer" class="headerlink" title="timer"></a>timer</h3><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[[RACSignal interval:<span class="number">2.0</span> onScheduler:[RACScheduler currentScheduler]] subscribeNext:^(<span class="keyword">id</span> x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, x);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h3 id="delay"><a href="#delay" class="headerlink" title="delay"></a>delay</h3><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"first"</span>);</div><div class="line">[[[RACSignal createSignal:^RACDisposable *(<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</div><div class="line">    [subscriber sendNext:<span class="string">@"send，signal"</span>];</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;] </div><div class="line">delay:<span class="number">2.0</span>] <span class="comment">// 信号延迟两秒</span></div><div class="line">subscribeNext:^(<span class="keyword">id</span> x) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h3 id="timeout"><a href="#timeout" class="headerlink" title="timeout"></a>timeout</h3><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">RACSignal *signal = [[RACSignal createSignal:^RACDisposable *(<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</div><div class="line">    [subscriber sendNext:<span class="string">@"send，signal"</span>];</div><div class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">3</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">        [subscriber sendNext:<span class="string">@"send，signal2"</span>];</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;] timeout:<span class="number">2.0</span> onScheduler:[RACScheduler currentScheduler]];</div><div class="line"><span class="comment">// 2s 后发送错误信号。2s 之后的信号被忽略</span></div><div class="line"></div><div class="line">[signal subscribeNext:^(<span class="keyword">id</span> x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125; error:^(<span class="built_in">NSError</span> *error) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,error);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h3 id="retry"><a href="#retry" class="headerlink" title="retry"></a>retry</h3><p>重试, 遇到 error 就会重新执行创建信号中的block,直到成功. 也可以传入 retry 的次数，如果超过这个次数还是 error 则返回 error</p>
<h2 id="对-RACSignal-的操作"><a href="#对-RACSignal-的操作" class="headerlink" title="对 RACSignal 的操作"></a>对 RACSignal 的操作</h2><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">RACSignal *signal = [RACSignal createSignal:^RACDisposable * _Nullable(<span class="keyword">id</span>&lt;RACSubscriber&gt;  _Nonnull subscriber) &#123;</div><div class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">5</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">        [subscriber sendNext:<span class="string">@"1"</span>];</div><div class="line">        [subscriber sendNext:<span class="string">@"2"</span>];</div><div class="line">        [subscriber sendNext:<span class="string">@"3"</span>];</div><div class="line">        [subscriber sendNext:<span class="string">@"3"</span>];</div><div class="line">        [subscriber sendNext:<span class="string">@"5"</span>];</div><div class="line">        [subscriber sendNext:<span class="string">@"3"</span>];</div><div class="line">        [subscriber sendNext:<span class="string">@"6"</span>];</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h3 id="map-映射"><a href="#map-映射" class="headerlink" title="map 映射"></a>map 映射</h3><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</div><div class="line">Map使用步骤:</div><div class="line">1.传入一个block,类型是返回对象，参数是value</div><div class="line">2.value就是源信号的内容，直接拿到源信号的内容做处理</div><div class="line">3.把处理好的内容，直接返回就好了，不用包装成信号，返回的值，就是映射的值。</div><div class="line">*/</span></div><div class="line">[[signal map:^<span class="keyword">id</span> _Nullable(<span class="keyword">id</span>  _Nullable value) &#123;</div><div class="line">    <span class="keyword">return</span> @([value integerValue] * <span class="number">10</span>);</div><div class="line">&#125;] subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 10,20,30,50,30,60</span></div></pre></td></tr></table></figure>
<h4 id="flattenMap"><a href="#flattenMap" class="headerlink" title="flattenMap"></a>flattenMap</h4><p>把源信号的内容映射成一个新的信号，信号可以是任意类型。</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</div><div class="line">flattenMap使用步骤:</div><div class="line">1.传入一个block，block类型是返回值RACStream，参数value</div><div class="line">2.参数value就是源信号的内容，拿到源信号的内容做处理</div><div class="line">3.包装成RACReturnSignal信号，返回出去。</div><div class="line">*/</span></div><div class="line">[[signal flattenMap:^__kindof RACSignal * _Nullable(<span class="keyword">id</span>  _Nullable value) &#123;</div><div class="line">    <span class="keyword">return</span> [RACReturnSignal <span class="keyword">return</span>:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@%@"</span>,value,value]];</div><div class="line">&#125;]</div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h4 id="flattenmap-和-map-的区别"><a href="#flattenmap-和-map-的区别" class="headerlink" title="flattenmap 和 map 的区别"></a>flattenmap 和 map 的区别</h4><ol>
<li>FlatternMap中的Block返回信号。</li>
<li>Map中的Block返回对象。</li>
<li>开发中，如果信号发出的值不是信号，映射一般使用Map</li>
<li>开发中，如果信号发出的值是信号，映射一般使用flatternMap。</li>
</ol>
<h4 id="mapReplace"><a href="#mapReplace" class="headerlink" title="mapReplace"></a>mapReplace</h4><p>传入一个值 x , 将每个信号的值都改为 x</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[[signal mapReplace:<span class="string">@"4"</span>]</div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line">    <span class="comment">// 4,4,4,4,4,4,4</span></div></pre></td></tr></table></figure>
<h3 id="filter-过滤"><a href="#filter-过滤" class="headerlink" title="filter 过滤"></a>filter 过滤</h3><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><p>传入一个 block , 当这个 block 返回 YES 的时候才能响应</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">RACSignal *signal = [RACSignal createSignal:^RACDisposable * _Nullable(<span class="keyword">id</span>&lt;RACSubscriber&gt;  _Nonnull subscriber) &#123;</div><div class="line">    [subscriber sendNext:<span class="string">@"1"</span>];</div><div class="line">    [subscriber sendNext:<span class="string">@"2"</span>];</div><div class="line">    [subscriber sendNext:<span class="string">@"3"</span>];</div><div class="line">    [subscriber sendNext:<span class="string">@"3"</span>];</div><div class="line">    [subscriber sendNext:<span class="string">@"5"</span>];</div><div class="line">    [subscriber sendNext:<span class="string">@"3"</span>];</div><div class="line">    [subscriber sendNext:<span class="string">@"6"</span>];</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;];</div><div class="line">[[signal filter:^<span class="built_in">BOOL</span>(<span class="keyword">id</span>  _Nullable value) &#123;</div><div class="line"><span class="comment">// 只有 value 为 @“3” 的时候才进入下一步</span></div><div class="line">    <span class="keyword">return</span> [value isEqualToString:<span class="string">@"3"</span>];</div><div class="line">&#125;]</div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h4 id="ignore"><a href="#ignore" class="headerlink" title="ignore"></a>ignore</h4><p>传入一个参数 x 忽略 value == x 的信号</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[[signal ignore:<span class="string">@"3"</span>]</div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 1,2,5,6</span></div></pre></td></tr></table></figure>
<h4 id="distinctUntilChanged"><a href="#distinctUntilChanged" class="headerlink" title="distinctUntilChanged"></a>distinctUntilChanged</h4><blockquote>
<p>如果这次受到的信号 <code>value</code> 跟上次的信号 <code>value</code> 相同, 这次信号被忽略。</p>
</blockquote>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[[signal distinctUntilChanged] </div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 1,2,3,5,3,6</span></div></pre></td></tr></table></figure>
<h4 id="startWith"><a href="#startWith" class="headerlink" title="startWith"></a>startWith</h4><p>传入一个参数 x , 订阅的时候首先收到 value = x 的信号。 类似于在创建 RACSignal 的第一行 <code>[subscriber sendNext:x];</code></p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[[signal startWith:<span class="string">@"1"</span>]</div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 1,1,2,3,3,5,3,6</span></div></pre></td></tr></table></figure>
<h4 id="take"><a href="#take" class="headerlink" title="take"></a>take</h4><p>传入一个数组 n， 表明只响应前 n 个信号</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[[signal take:<span class="number">3</span>]</div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 1,2,3</span></div></pre></td></tr></table></figure>
<h4 id="takeLast"><a href="#takeLast" class="headerlink" title="takeLast"></a>takeLast</h4><p>传入一个数值 n, 取最后 n 个信号</p>
<p>只有收到了complete才知道结果。</p>
<h4 id="takeUntilBlock"><a href="#takeUntilBlock" class="headerlink" title="takeUntilBlock"></a>takeUntilBlock</h4><p>一直响应，直到传入的 block 第一次返回 YES</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[[signal takeUntilBlock:^<span class="built_in">BOOL</span>(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="keyword">return</span> [x isEqualToString:<span class="string">@"5"</span>];</div><div class="line">&#125;]</div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 1,2,3,3</span></div></pre></td></tr></table></figure>
<h4 id="takeWhileBlock"><a href="#takeWhileBlock" class="headerlink" title="takeWhileBlock"></a>takeWhileBlock</h4><p>一直响应，直到传入的 block 第一次返回 NO</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[[signal takeWhileBlock:^<span class="built_in">BOOL</span>(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="keyword">return</span> [x integerValue] &lt; <span class="number">5</span>;</div><div class="line">&#125;]</div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 1,2,3,3</span></div></pre></td></tr></table></figure>
<h4 id="skip"><a href="#skip" class="headerlink" title="skip"></a>skip</h4><p>传入一个数字 n 表明忽略前面第 n 个信号, 第 n + 1 个信号开始响应。</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[[signal skip:<span class="number">3</span>]</div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 3,5,3,6</span></div></pre></td></tr></table></figure>
<h4 id="skipUntilBlock"><a href="#skipUntilBlock" class="headerlink" title="skipUntilBlock"></a>skipUntilBlock</h4><p>一直忽略信号, 直到传入的 block 第一次返回 YES</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[[signal skipUntilBlock:^<span class="built_in">BOOL</span>(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="keyword">return</span> ![x isEqualToString:<span class="string">@"1"</span>];</div><div class="line">&#125;]</div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 2，3，3，5，3，6</span></div></pre></td></tr></table></figure>
<h4 id="skipWhileBlock"><a href="#skipWhileBlock" class="headerlink" title="skipWhileBlock"></a>skipWhileBlock</h4><p>一直忽略信号, 直到传入的 block 第一次返回 NO</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[[signal skipWhileBlock:^<span class="built_in">BOOL</span>(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="keyword">return</span> [x isEqualToString:<span class="string">@"1"</span>];</div><div class="line">&#125;]</div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 2，3，3，5，3，6</span></div></pre></td></tr></table></figure>
<h4 id="scanWithStart-reduce"><a href="#scanWithStart-reduce" class="headerlink" title="scanWithStart:reduce"></a>scanWithStart:reduce</h4><p>解决类似数组求和的问题</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">RACSequence *number = @[@<span class="number">1</span>,@<span class="number">2</span>,@<span class="number">3</span>,@<span class="number">4</span>].rac_sequence;</div><div class="line">RACSequence *sums =[number scanWithStart:@<span class="number">2</span> reduce:^<span class="keyword">id</span> _Nullable(<span class="built_in">NSNumber</span> *running, <span class="built_in">NSNumber</span> *next) &#123;</div><div class="line">    <span class="keyword">return</span> @(running.integerValue + next.integerValue);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 第一个参数是起点值, 第二个是便利的block block 中第一个是上一次便利的结果， 第二个是当前位置的值</span></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, sums.array);</div><div class="line"><span class="comment">//3,5,8,12</span></div></pre></td></tr></table></figure>
<h3 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h3><h4 id="contact"><a href="#contact" class="headerlink" title="contact"></a>contact</h4><p>把signalA拼接到signalB后，signalA发送完成，signalB才会被激活。</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">RACSignal *signal = [RACSignal createSignal:^RACDisposable * _Nullable(<span class="keyword">id</span>&lt;RACSubscriber&gt;  _Nonnull subscriber) &#123;  dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">2</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">        [subscriber sendNext:<span class="string">@"1"</span>];</div><div class="line">        [subscriber sendCompleted];<span class="comment">// 必须conpleted 才会到第二个 signal</span></div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;];</div><div class="line">RACSignal *singnal2 = [RACSignal createSignal:^RACDisposable * _Nullable(<span class="keyword">id</span>&lt;RACSubscriber&gt;  _Nonnull subscriber) &#123;</div><div class="line">    [subscriber sendNext:<span class="string">@"11"</span>];</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;];</div><div class="line">RACSignal *contact = [signal concat:singnal2];</div><div class="line">[contact subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 1,11</span></div></pre></td></tr></table></figure>
<h4 id="then"><a href="#then" class="headerlink" title="then"></a>then</h4><p>类似 contact 将两个 signal 链接</p>
<ol>
<li>只有等第一个 signal 介绍之后才会激活第二个 signal。 </li>
<li>在第一个 signal 结束之前 signal2 的信号会被忽略。  </li>
<li>第一个 signal 只关注 <code>complete</code> sendNext 被忽略</li>
</ol>
<p><strong>区别: contact signal1 的 sendNext 会响应, 而 then 的不会。</strong></p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// signal complete 发出之后 signal 的信号才会响应.</span></div><div class="line">RACSignal *then = [signal then:^RACSignal * _Nonnull&#123;</div><div class="line">    <span class="keyword">return</span> singnal2;</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h4 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h4><p>将两个 signal 合并为一个 signal 原先的信号发出 都会响应, 没有前后顺序。</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">RACSignal *merge = [signal merge:singnal2];    </div><div class="line">[merge subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h4 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h4><p>将两个signal 合并之后的 next 合并为一个 tuple 返回回来。 一一对应关系，一个信号的 next 等到第二个信号有 next 之后 包装成 signal 返回。<br>返回的 zip 第一个值就是第一个信号的next。</p>
<h4 id="combineLatest"><a href="#combineLatest" class="headerlink" title="combineLatest"></a>combineLatest</h4><p>将多个信号合并起来，并且拿到各个信号的最新的值,必须每个合并的signal至少都有过一次sendNext，才会触发合并的信号。</p>
<p><strong>zip 和 combineLatest 的区别</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">signal1-----1----2-----3------4-------5-------6--------7-----</div><div class="line"></div><div class="line">signal2----------------5----------------------7--------------</div><div class="line"></div><div class="line"></div><div class="line">combine 返回 (3，5)  （6，7）</div><div class="line">zip 返回     (1,5)    (2,7)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基础用法&quot;&gt;&lt;a href=&quot;#基础用法&quot; class=&quot;headerlink&quot; title=&quot;基础用法&quot;&gt;&lt;/a&gt;基础用法&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;创建信号&lt;/li&gt;
&lt;li&gt;订阅信号&lt;/li&gt;
&lt;li&gt;发送信号&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight obj-c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 1.创建信号(cold)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;RACSignal *signal = [RACSignal createSignal:^RACDisposable * _Nullable(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;&amp;lt;RACSubscriber&amp;gt;  _Nonnull subscriber) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 3.发送信号&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [subscriber sendNext:&lt;span class=&quot;string&quot;&gt;@&quot;hello, RAC.&quot;&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 2.订阅信号(hot)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[signal subscribeNext:^(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;  _Nullable x) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;%@&quot;&lt;/span&gt;, x);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;];&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在创建 RACSignal 的时候, &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;+ (RACSignal&amp;lt;ValueType&amp;gt; *)createSignal:(RACDisposable * _Nullable (^)(id&amp;lt;RACSubscriber&amp;gt; subscriber))didSubscribe;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;方法传入的 block 会返回一个 &lt;code&gt;RACDisposable&lt;/code&gt; 对象。&lt;/p&gt;
&lt;p&gt;将以上代码中的 &lt;code&gt;return nil；&lt;/code&gt; 替换成如下代码&lt;/p&gt;
    
    </summary>
    
      <category term="Reactive" scheme="https://CepheusSun.github.io/categories/Reactive/"/>
    
    
      <category term="iOS" scheme="https://CepheusSun.github.io/tags/iOS/"/>
    
      <category term="Reactive" scheme="https://CepheusSun.github.io/tags/Reactive/"/>
    
  </entry>
  
  <entry>
    <title>突然想聊聊 throttle</title>
    <link href="https://CepheusSun.github.io/%E7%AA%81%E7%84%B6%E6%83%B3%E8%81%8A%E8%81%8A%20throttle.html"/>
    <id>https://CepheusSun.github.io/突然想聊聊 throttle.html</id>
    <published>2017-04-25T16:00:00.000Z</published>
    <updated>2017-04-27T01:22:28.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>如果我们将水龙头拧紧知道水是以水滴的形式流出, 不难发现, 每隔一段时间, 就会有一滴水流出来。</p>
</blockquote>
<p>如果我们预先设置一个执行周期, 当第一次调用动作(滴水)和第二次调用动作之间的间隔大于执行周期, 则执行这个动作。反正, 不执行。</p>
<p>直接翻译 <code>throttle</code> 这个单词。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">throttle</div><div class="line"></div><div class="line">n.	节流阀; 喉咙，气管; [机] 风门;</div><div class="line">vt.	扼杀，压制; 勒死，使窒息; 使节流; （用节汽阀等） 调节;</div><div class="line">vi.	节流，减速; 窒息;</div></pre></td></tr></table></figure>
<p>不难理解, throttle 其实就是一种控制数据或者流量大小的机制。</p>
<p>MrPeak 曾经写的文章中介绍过 <code>I/O Throttle</code> 在 <code>DISPATCH_QUEUE_PRIORITY_BACKGROUND</code> queue 的使用场景。在没有非常严苛的实时性要求的情况下, 对于重度依赖磁盘的后台任务, 使用 <code>DISPATCH_QUEUE_PRIORITY_BACKGROUND</code> 的 queue 会更加友好。文中也引用了官方文档的一段话 </p>
<blockquote>
<p>Items dispatched to the queue run at background priority; the queue is scheduled for execution after all high priority queues have been scheduled and the system runs items on a thread whose priority is set for background status. Such a thread has the lowest priority and any disk I/O is throttled to minimize the impact on the system.</p>
</blockquote>
<p>意思是说, 这种 Global Queue 会在其他所有的 queue 结束之后才会在后台执行。 这是最低优先级的。并且一些磁盘 I/O 操作会因为最小化对系统的影响而被节流。</p>
<a id="more"></a>
<p>文中也介绍了 ASI 和 AFN 中也出现了的 throttle。</p>
<blockquote>
<p>我们通过HTTP请求发送数据的时候，实际上数据是以Packet的形式存在于一个Send Buffer中的，应用层平时感知不到这个Buffer的存在。TCP提供可靠的传输，在弱网环境下，一个Packet一次传输失败的概率会升高，即使一次失败，TCP并不会马上认为请求失败了，而是会继续重试一段时间，同时TCP还保证Packet的有序传输，意味着前面的Packet如果不被ack，后面的Packet就会继续等待，如果我们一次往Send Buffer中写入大量的数据，那么在弱网环境下，排在后面的Packet失败的概率会变高，也就意味着我们HTTP请求失败的几率会变大。</p>
</blockquote>
<p>所以在弱网环境下, 使用 <code>Network Throttle</code> 机制 延迟发起一些请求或者减少往 Send Buffer 中的数据量。 也会大大的提高请求成功率。</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</div><div class="line"> Throttles request bandwidth by limiting the packet size and adding a delay for each chunk read from the upload stream.</div><div class="line"></div><div class="line"> When uploading over a 3G or EDGE connection, requests may fail with "request body stream exhausted". Setting a maximum packet size and delay according to the recommended values (`kAFUploadStream3GSuggestedPacketSize` and `kAFUploadStream3GSuggestedDelay`) lowers the risk of the input stream exceeding its allocated bandwidth. Unfortunately, there is no definite way to distinguish between a 3G, EDGE, or LTE connection over `NSURLConnection`. As such, it is not recommended that you throttle bandwidth based solely on network reachability. Instead, you should consider checking for the "request body stream exhausted" in a failure block, and then retrying the request with throttled bandwidth.</div><div class="line"></div><div class="line"> @param numberOfBytes Maximum packet size, in number of bytes. The default packet size for an input stream is 16kb.</div><div class="line"> @param delay Duration of delay each time a packet is read. By default, no delay is set.</div><div class="line"> */</span></div><div class="line"><span class="comment">// AFN 中的方法</span></div><div class="line">- (<span class="keyword">void</span>)throttleBandwidthWithPacketSize:(<span class="built_in">NSUInteger</span>)numberOfBytes</div><div class="line">                                  delay:(<span class="built_in">NSTimeInterval</span>)delay;</div></pre></td></tr></table></figure>
<h2 id="RAC-中的-throttle"><a href="#RAC-中的-throttle" class="headerlink" title="RAC 中的 throttle"></a>RAC 中的 throttle</h2><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[[[<span class="keyword">self</span>.button rac_signalForControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>] throttle:<span class="number">2</span>] subscribeNext:^(<span class="keyword">id</span> x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"throttle"</span>);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>RAC 中的 <code>throttle</code> 接受一个时间间隔 <code>interval</code> 作为参数, 如果 <code>RACSignal</code> 发出的 <code>next</code> 事件之后的 interval 时间内不再发出 next 那么, 他返回的 RACSignal 会将这个事件发出。也就是说，这个方法会将发送比较频繁的 <code>next</code> 事件舍弃,只保留着一段时间之前的 next 事件。</p>
<p>使用场景:</p>
<p><strong>1、处理用户输入框的信号</strong></p>
<p>在处理搜索这样的需求的时候,有时候可能会在用户在输入框输入之后自动跟服务器交互。然后在下面列表中展示处理结果。如果用户打字很快,这个时候可能几秒钟之内连续发去好几个请求，其实没有什么意义。 这个时候使用 throttle 可以将保留用户输入的少数几个结果, 然后返回一个信号, 将最后的文字作为 next 发出。</p>
<p><strong>2、监听按钮点击</strong></p>
<p>界面上又一个按钮, 然后点击这个按钮, 发起网络请求, 跟上面的例子类似。如果用户快速的点击这个按钮也比较蛋疼。按照以前的写法, 我们可能会设置一个 <code>flag</code> 在点击的时候将这个 <code>flag</code> 设置为 no, 然后在 <code>button</code> 的 <code>action</code> 中判断是否发起请求,然后在请求结果回来之后, 把这个 <code>flag</code> 改回来。 想想都比较蛋疼。这时候使用 <code>throttle</code> 将按钮的点击事件节流一下, 就好了。</p>
<p>这个直接搬用 MrPeak <a href="http://mp.weixin.qq.com/s/MsPEZ9GUwCSZN1kngBkJxw">iOS编程中throttle那些事</a>中的swift代码。 毕竟 OC 的意见在上面了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">button.rx_tap</div><div class="line">   .throttle(<span class="number">0.5</span>, <span class="type">MainScheduler</span>.instance)</div><div class="line">   .subscribeNext &#123; <span class="number">_</span> <span class="keyword">in</span> </div><div class="line">      <span class="built_in">print</span>(<span class="string">"Hello World"</span>)</div><div class="line">   &#125;</div><div class="line">   .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p><strong>在 OC 的 demo 中(ReactiveCocoa 2.5.0) 我也发现了一个问题。第一次的点击也会在这个间隔之后响应。之后又使用了 ReactiveObjc(3.0) 中也发现了这个问题,而在 swift 的 demo 中并没有这种情况。</strong></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实 throttle 并没有减少实际逻辑处理过程的执行来提高事件处理函数运行性能的手段, 并没有减少事件的触发次数。写到最后, 发现文章有点变成学习心得了😂😂😂😂</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;如果我们将水龙头拧紧知道水是以水滴的形式流出, 不难发现, 每隔一段时间, 就会有一滴水流出来。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果我们预先设置一个执行周期, 当第一次调用动作(滴水)和第二次调用动作之间的间隔大于执行周期, 则执行这个动作。反正, 不执行。&lt;/p&gt;
&lt;p&gt;直接翻译 &lt;code&gt;throttle&lt;/code&gt; 这个单词。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;throttle&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;n.	节流阀; 喉咙，气管; [机] 风门;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;vt.	扼杀，压制; 勒死，使窒息; 使节流; （用节汽阀等） 调节;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;vi.	节流，减速; 窒息;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不难理解, throttle 其实就是一种控制数据或者流量大小的机制。&lt;/p&gt;
&lt;p&gt;MrPeak 曾经写的文章中介绍过 &lt;code&gt;I/O Throttle&lt;/code&gt; 在 &lt;code&gt;DISPATCH_QUEUE_PRIORITY_BACKGROUND&lt;/code&gt; queue 的使用场景。在没有非常严苛的实时性要求的情况下, 对于重度依赖磁盘的后台任务, 使用 &lt;code&gt;DISPATCH_QUEUE_PRIORITY_BACKGROUND&lt;/code&gt; 的 queue 会更加友好。文中也引用了官方文档的一段话 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Items dispatched to the queue run at background priority; the queue is scheduled for execution after all high priority queues have been scheduled and the system runs items on a thread whose priority is set for background status. Such a thread has the lowest priority and any disk I/O is throttled to minimize the impact on the system.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;意思是说, 这种 Global Queue 会在其他所有的 queue 结束之后才会在后台执行。 这是最低优先级的。并且一些磁盘 I/O 操作会因为最小化对系统的影响而被节流。&lt;/p&gt;
    
    </summary>
    
      <category term="Reactive" scheme="https://CepheusSun.github.io/categories/Reactive/"/>
    
    
      <category term="iOS" scheme="https://CepheusSun.github.io/tags/iOS/"/>
    
      <category term="Reactive" scheme="https://CepheusSun.github.io/tags/Reactive/"/>
    
  </entry>
  
  <entry>
    <title>我用RAC干了些什么(一)</title>
    <link href="https://CepheusSun.github.io/%E6%88%91%E7%94%A8RAC%E5%B9%B2%E4%BA%86%E4%BA%9B%E4%BB%80%E4%B9%88(%E4%B8%80).html"/>
    <id>https://CepheusSun.github.io/我用RAC干了些什么(一).html</id>
    <published>2017-04-20T16:00:00.000Z</published>
    <updated>2017-04-21T04:34:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>对象间的交互, 主要有 <code>target-action</code>、<code>Notification</code>、<code>KVO</code>、<code>Delegate</code></p>
<h3 id="target-action"><a href="#target-action" class="headerlink" title="target-action"></a>target-action</h3><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[[<span class="keyword">self</span>.loginBtn rac_signalForControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>] subscribeNext:^(<span class="built_in">UIButton</span> *btn) &#123;</div><div class="line"> <span class="comment">// btn, 即 self.loginBtn</span></div><div class="line"> <span class="comment">// 这里执行点击之后的操作</span></div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>可以用 BlocksKit 替代</p>
<h3 id="KVO"><a href="#KVO" class="headerlink" title="KVO"></a>KVO</h3><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[RACObserve(<span class="keyword">self</span>, name) subscribeNext:^(<span class="built_in">NSString</span> *name) &#123;</div><div class="line">  <span class="comment">// name 即 self.name</span></div><div class="line">  <span class="comment">// 一旦 name 属性改变就立即进入到这个 block</span></div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// self.myLab.text 随着 self.myTF.text 的改变而改变</span></div><div class="line">RAC(<span class="keyword">self</span>.myLab, text) = <span class="keyword">self</span>.myTF.rac_textSignal;</div></pre></td></tr></table></figure>
<h3 id="Notificaiton"><a href="#Notificaiton" class="headerlink" title="Notificaiton"></a>Notificaiton</h3><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[[[[<span class="built_in">NSNotificationCenter</span> defaultCenter] </div><div class="line">rac_addObserverForName:<span class="built_in">UIKeyboardWillChangeFrameNotification</span> object:<span class="literal">nil</span>] </div><div class="line">  <span class="comment">// 这句不可少，表示 当 self 将要 dealloc 的时候，就要释放 通知</span></div><div class="line">  takeUntil:<span class="keyword">self</span>.rac_willDeallocSignal] </div><div class="line">  subscribeNext:^(<span class="built_in">NSNotification</span> *notification) &#123;</div><div class="line">      <span class="built_in">NSLog</span>(<span class="string">@"-----%@"</span>, notification.description);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>不要忘了还是原来的方法发送通知。</p>
<p><strong>通知已经通过 RAC 内部得到了释放，所以不需要额外在 - dealloc 添加移除的代码</strong></p>
<h3 id="RACCommand"><a href="#RACCommand" class="headerlink" title="RACCommand"></a>RACCommand</h3><blockquote>
<p>A command, represented by the RACCommand class, creates and subscribes to a signal in response to some action. This makes it easy to perform side-effecting work as the user interacts with the app.</p>
</blockquote>
<p>简单的使用RACCommand 实现一个 viewModel 的网络请求。</p>
<a id="more"></a>
<h4 id="每个viewModel都有不同的事件"><a href="#每个viewModel都有不同的事件" class="headerlink" title="每个viewModel都有不同的事件"></a>每个viewModel都有不同的事件</h4><p><code>ViewModel</code> 持有一个 <code>RACCommand</code> 的属性 <code>sourceCommand</code></p>
<h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 直接构建</span></div><div class="line">- (<span class="keyword">id</span>)initWithSignalBlock:(RACSignal * (^)(<span class="keyword">id</span> input))signalBlock;</div><div class="line"></div><div class="line"><span class="comment">// 只有当enabledSignal为true时, command才执行</span></div><div class="line">- (<span class="keyword">id</span>)initWithEnabled:(RACSignal *)enabledSignal signalBlock:(RACSignal * (^)(<span class="keyword">id</span> input))signalBlock;</div><div class="line"></div><div class="line"></div><div class="line">_sourceCommand = [[RACCommand alloc] initWithSignalBlock:^RACSignal *(<span class="keyword">id</span> input) &#123;</div><div class="line">    <span class="keyword">return</span> [[SYHTTPManager shared] request:[[SFAPI_Find_SectionList alloc] init]];</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h4 id="订阅"><a href="#订阅" class="headerlink" title="订阅"></a>订阅</h4><p>失败和成功不能像订阅其他<code>signal</code>一样直接<code>Next</code>、<code>onError</code>就可以。RACCommand 的失败消息, 都被分发到了 <code>errors</code> 这个属性。所以需要在这个地方订阅失败的消息.</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 订阅成功</span></div><div class="line">[_sourceCommand.executionSignals.switchToLatest subscribeNext:^(<span class="keyword">id</span> x) &#123;</div><div class="line">    PSLog(<span class="string">@"---%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 订阅失败</span></div><div class="line">[_sourceCommand.errors subscribeNext:^(<span class="keyword">id</span> x) &#123;</div><div class="line">    PSLog(<span class="string">@"xxx%@"</span>,x);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h4 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h4><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[command execute:someParameters];</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对象间的交互, 主要有 &lt;code&gt;target-action&lt;/code&gt;、&lt;code&gt;Notification&lt;/code&gt;、&lt;code&gt;KVO&lt;/code&gt;、&lt;code&gt;Delegate&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;target-action&quot;&gt;&lt;a href=&quot;#target-action&quot; class=&quot;headerlink&quot; title=&quot;target-action&quot;&gt;&lt;/a&gt;target-action&lt;/h3&gt;&lt;figure class=&quot;highlight obj-c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.loginBtn rac_signalForControlEvents:&lt;span class=&quot;built_in&quot;&gt;UIControlEventTouchUpInside&lt;/span&gt;] subscribeNext:^(&lt;span class=&quot;built_in&quot;&gt;UIButton&lt;/span&gt; *btn) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// btn, 即 self.loginBtn&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// 这里执行点击之后的操作&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;];&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以用 BlocksKit 替代&lt;/p&gt;
&lt;h3 id=&quot;KVO&quot;&gt;&lt;a href=&quot;#KVO&quot; class=&quot;headerlink&quot; title=&quot;KVO&quot;&gt;&lt;/a&gt;KVO&lt;/h3&gt;&lt;figure class=&quot;highlight obj-c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[RACObserve(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, name) subscribeNext:^(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *name) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// name 即 self.name&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 一旦 name 属性改变就立即进入到这个 block&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;];&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight obj-c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// self.myLab.text 随着 self.myTF.text 的改变而改变&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;RAC(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.myLab, text) = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.myTF.rac_textSignal;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Notificaiton&quot;&gt;&lt;a href=&quot;#Notificaiton&quot; class=&quot;headerlink&quot; title=&quot;Notificaiton&quot;&gt;&lt;/a&gt;Notificaiton&lt;/h3&gt;&lt;figure class=&quot;highlight obj-c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[[[[&lt;span class=&quot;built_in&quot;&gt;NSNotificationCenter&lt;/span&gt; defaultCenter] &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;rac_addObserverForName:&lt;span class=&quot;built_in&quot;&gt;UIKeyboardWillChangeFrameNotification&lt;/span&gt; object:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;] &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 这句不可少，表示 当 self 将要 dealloc 的时候，就要释放 通知&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  takeUntil:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.rac_willDeallocSignal] &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  subscribeNext:^(&lt;span class=&quot;built_in&quot;&gt;NSNotification&lt;/span&gt; *notification) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;-----%@&quot;&lt;/span&gt;, notification.description);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;];&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不要忘了还是原来的方法发送通知。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;通知已经通过 RAC 内部得到了释放，所以不需要额外在 - dealloc 添加移除的代码&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;RACCommand&quot;&gt;&lt;a href=&quot;#RACCommand&quot; class=&quot;headerlink&quot; title=&quot;RACCommand&quot;&gt;&lt;/a&gt;RACCommand&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;A command, represented by the RACCommand class, creates and subscribes to a signal in response to some action. This makes it easy to perform side-effecting work as the user interacts with the app.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简单的使用RACCommand 实现一个 viewModel 的网络请求。&lt;/p&gt;
    
    </summary>
    
      <category term="Reactive" scheme="https://CepheusSun.github.io/categories/Reactive/"/>
    
    
      <category term="iOS" scheme="https://CepheusSun.github.io/tags/iOS/"/>
    
      <category term="Reactive" scheme="https://CepheusSun.github.io/tags/Reactive/"/>
    
  </entry>
  
  <entry>
    <title>使用Gitlab和Cocoapods创建私有pod</title>
    <link href="https://CepheusSun.github.io/%E4%BD%BF%E7%94%A8Gitlab%E5%92%8CCocoapods%E5%88%9B%E5%BB%BA%E7%A7%81%E6%9C%89pod.html"/>
    <id>https://CepheusSun.github.io/使用Gitlab和Cocoapods创建私有pod.html</id>
    <published>2017-04-19T14:39:27.000Z</published>
    <updated>2017-05-11T08:44:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>每个稍微有点开发经验的 iOS 工程师都很容易的发现一下几点: </p>
<ol>
<li>几乎每个 iOS 的项目都适用了 <code>Cocoapods</code> </li>
<li>几乎每个 ObjC 的 iOS 项目是使用 <code>AFNetworking</code> 、 <code>SDWebImage</code>等三方框架。</li>
<li>几乎每个 Swift 的 iOS 项目都是用了 <code>Alamofire</code>、 <code>Kingfisher</code>等三方框架</li>
<li>每一次这些框架更新之后, 无数个工程师只需要在终端执行一下’pod update’ 或 <code>pod install</code>就能对应的更新自己项目中的代码</li>
</ol>
<p>这几乎都是每个 iOS 工程师经常都会遇到的事情。目前几乎所有优秀的 iOS 开源框架都支持了 CocoaPods。 几乎所有的 iOS 项目都集成了 CocoaPods</p>
<p>但是我们在日常的开发中也常会遇到这样的问题:</p>
<ol>
<li>很多公司都有好 App 同时在进行开发。</li>
<li>这些 App 或多或少在业务或者 UI 都很很多的重合。</li>
</ol>
<p>着就意味着有很多的代码在这些 App 中都是可以复用的。由于各种各样的原因,同个公司的不同 App 可能更新不同步。 app A 可能已经升级到新版本 app B 可能还在老版本。每个 App 分别管理势必会出现混乱的局面。一起管理又存在新旧交替的问题。如果每个 App 又不同的工程师负责, 即使可能有交叉 review 的机制, 但也很难保证公司代码的统一。很多逻辑都存在多段代码。</p>
<p>如何管理公司的公共代码库就成了一个比较麻烦的问题。</p>
<p>集成 IJKMediaPlayer 的时候,想到了使用git来区别版本,然后使用 framework 来管理共有代码。然而在出现了你的代码需要使用到其他的 Framework 的时候, 或者好几个 Framework 都需要使用同一个第三方框架的时候, 这么做确实也是件恼火的事情。</p>
<a id="more"></a>
<p>去年写了三了小组件 <code>SYNetwork</code> <code>EmptyDataKit</code> <code>SYPhotoBrowser</code>。前两个已经支持了 <code>Cocoapods</code> 之后网上不断的开始有一些利用 <code>cocoapods</code>进行组件化的文章。前些天在 去直播看了 casa 的两个关于组建化的直播之后。也一直蠢蠢欲动想自己也来做一下这件事情。</p>
<p>做开源的 repo 的时候，还是比较顺利的做到了这件事情。但是当时想用 <code>OSChina</code> 来做了几次都没有成功。就一直搁置了。</p>
<p>春节之后换了个工作, 适应了公司的环境, 简单的学习了一下 Swift 之后, 公司还是决定对现有的项目进行一次梳理,然后做一次重构。 所以很自然的还是想到了使用 <code>CocoaPods</code> 将公司原有的项目进行组件化。</p>
<p>结果了半天时间的尝试,报错create gitlab账号等等。终于达到了最初的想法。 所以将这个过程记录下来。</p>
<h2 id="为什么使用-GitLab"><a href="#为什么使用-GitLab" class="headerlink" title="为什么使用 GitLab"></a>为什么使用 GitLab</h2><p>其实上面已经说到了,为什么要使用 CocoaPods 来做这件事情。也说到了为什么要做这件事情。为什么使用 gitlab 呢？ 原因很简单。 毕竟 GitHub 的私有repo 是收费的。原谅我穷, 也可以说是公司扣门儿。只能把开源的东西放在, GitHub 把不能开源的东西放在其他地方。</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>其实没什么好准备的。 但是首先你得有个 Gitlab 账号吧！ 如果没有注册之后添加 SSH 就好了。</p>
<p>然后在 Gitlab 上创建一个空的仓库:XXX 然后记住这个项目的 地址: git@gitlab.com:XXX/XXX.git </p>
<h2 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h2><p>这些可以看我去年年底写开源 Cocoapods 的时候写的东西。<a href="http://cepheussun.com/2016/12/02/%E4%BD%BF%E7%94%A8Cocoapods%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84%E9%A1%B9%E7%9B%AE/">使用 Cocoapods 管理你的项目</a></p>
<p>基本上简化一下就是以下</p>
<h3 id="创建工程-1"><a href="#创建工程-1" class="headerlink" title="创建工程"></a>创建工程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pod lib create XXX</div></pre></td></tr></table></figure>
<p>回答问题</p>
<h3 id="添加私有库到本地-pod-库-多人开发其他人也应该有这个操作"><a href="#添加私有库到本地-pod-库-多人开发其他人也应该有这个操作" class="headerlink" title="添加私有库到本地 pod 库(多人开发其他人也应该有这个操作)"></a>添加私有库到本地 pod 库(多人开发其他人也应该有这个操作)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pod repo add XXX git@gitlab.com:XXX/XXX.git</div></pre></td></tr></table></figure>
<blockquote>
<p>可以检查一下: ~./cocoapods/repos 目录下又了 XXX 文件夹</p>
</blockquote>
<h3 id="将代码放进去"><a href="#将代码放进去" class="headerlink" title="将代码放进去"></a>将代码放进去</h3><blockquote>
<p>这一步上篇文章中有。 <a href="http://cepheussun.com/2016/12/02/%E4%BD%BF%E7%94%A8Cocoapods%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84%E9%A1%B9%E7%9B%AE/">使用 Cocoapods 管理你的项目</a></p>
</blockquote>
<h4 id="修改-podspec"><a href="#修改-podspec" class="headerlink" title="修改 .podspec"></a>修改 .podspec</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">Pod::Spec.new <span class="keyword">do</span> <span class="params">|s|</span></div><div class="line">  s.name             = <span class="string">'XXX'</span></div><div class="line">  s.version          = <span class="string">'0.0.1'</span></div><div class="line">  s.summary          = <span class="string">'这是项目的基础框架,所有项目都需要集成.'</span></div><div class="line"></div><div class="line">  s.homepage         = <span class="string">'https://gitlab.com/XXX/XXX'</span></div><div class="line">  s.license          = &#123; <span class="symbol">:type</span> =&gt; <span class="string">'MIT'</span>, <span class="symbol">:file</span> =&gt; <span class="string">'LICENSE'</span> &#125;</div><div class="line">  s.author           = &#123; <span class="string">'XXX'</span> =&gt; <span class="string">'cd_sunyang@163.com'</span> &#125;</div><div class="line">  s.source           = &#123; <span class="symbol">:git</span> =&gt; <span class="string">'git@gitlab.com:XXX/XXX.git'</span>, <span class="symbol">:tag</span> =&gt; s.version &#125;</div><div class="line"></div><div class="line">  s.ios.deployment_target = <span class="string">'8.0'</span></div><div class="line"></div><div class="line">  s.source_files = <span class="string">'XXX/Classes/**/*'</span></div><div class="line">  s.frameworks = <span class="string">'UIKit'</span></div><div class="line">  s.dependency <span class="string">'AFNetworking'</span></div><div class="line">  s.dependency <span class="string">'MBProgressHUD'</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>我这个Demo引用了两个公有的repo</p>
<h4 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git add .</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git commit -m &quot;commit comments&quot;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin master</div></pre></td></tr></table></figure>
<h4 id="检查一下"><a href="#检查一下" class="headerlink" title="检查一下"></a>检查一下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ pod lib lint</div><div class="line"></div><div class="line">#或者 pod lib lint --allow-warnings 忽略警告</div></pre></td></tr></table></figure>
<p>然后也可以在项目中的 <code>podfile</code>文件中添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">pod &apos;XXX&apos;, :path =&gt; &apos;/Users/xxx/Desktop/XXX&apos;</div><div class="line"></div><div class="line">## 最后路径以实际情况为准, 有可能不在桌面</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod install</div></pre></td></tr></table></figure>
<p>成功后我们的库会出现在<code>Development Pods</code>文件夹里面。可以检查一下有没有问题。</p>
<h4 id="提交私有库"><a href="#提交私有库" class="headerlink" title="提交私有库"></a>提交私有库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git tag 0.0.1</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push --tags</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod repo push XXX XXX.podspec</div></pre></td></tr></table></figure>
<h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><h4 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h4><p>在执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pod lib lint</div></pre></td></tr></table></figure></p>
<p>的时候,如果在你的文件中引入了一些三方库, 并且在<code>.podspec</code>文件中也添加了对用的<code>.dependency</code> 依然出现</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- ERROR | xcodebuild: /Users/xinhuikeji/Library/Developer/Xcode/DerivedData/App-cpgccqdjhyrbqwcpjanyefntolkf/Build/Products/Release-iphonesimulator/wLib/wLib.framework/Headers/BaseModel.h:13:9: error: include of non-modular header inside framework module &apos;wLib.BaseModel&apos; [-Werror,-Wnon-modular-include-in-framework-module]</div></pre></td></tr></table></figure>
<p>这样的错误。</p>
<p>在命令后面添加参数 <code>--use-libraries</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ pod lib lint xxx.podspec --use-libraries</div><div class="line">$ pod repo push XXX XXX.podspec --use-libraries</div></pre></td></tr></table></figure>
<p>在<a href="https://segmentfault.com/q/1010000006885674">segmentfault</a>中看到的答案。</p>
<h4 id="pod-search-找不到"><a href="#pod-search-找不到" class="headerlink" title="pod search 找不到"></a>pod search 找不到</h4><p>最后完成之后在新建的工程中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pod init</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vim podfile</div></pre></td></tr></table></figure>
<p>添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod &quot;SYBase&quot;, :git =&gt; &apos;git@gitlab.com:CepheusSun/SYBase.git&apos;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod install</div></pre></td></tr></table></figure>
<p>然后莫名其妙发现引入的 repo 是<code>0.1.0</code>或者什么巴拉巴拉版本的。这个时候更新一下pod</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod update</div></pre></td></tr></table></figure>
<p>再<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod install</div></pre></td></tr></table></figure></p>
<h4 id="强迫症"><a href="#强迫症" class="headerlink" title="强迫症"></a>强迫症</h4><p>如果遇到强迫症想要用 1.1.1 这样的三级版本的话。</p>
<p><code>XXX.podspec</code> 文件中的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">s.source = &#123; :git =&gt; &apos;git@gitlab.com:XXX/XXX.git&apos;, :tag =&gt; s.version &#125;</div></pre></td></tr></table></figure></p>
<p>必须用 s.version</p>
<p>我也不知道为什么。</p>
<h3 id="结束篇"><a href="#结束篇" class="headerlink" title="结束篇"></a>结束篇</h3><p>好久没写文章了。终于还是继续写了下去。这段时间自己学了学Swift 学了学 函数响应式编程, 七牛云直播的认证也下来的。接下来可能要研究一下推流相关的东西。2017 的前半段老实说学到了很多的东西。一直很感恩也很珍惜这样的情况。</p>
<p><strong>参考文档</strong></p>
<p><a href="http://www.th7.cn/program/ios/201702/1119967.shtml">组件化开发之CocoaPods私有库制作</a><br><a href="http://mt.sohu.com/20160824/n465823814.shtml">使用cocoapods管理私有库</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每个稍微有点开发经验的 iOS 工程师都很容易的发现一下几点: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;几乎每个 iOS 的项目都适用了 &lt;code&gt;Cocoapods&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;几乎每个 ObjC 的 iOS 项目是使用 &lt;code&gt;AFNetworking&lt;/code&gt; 、 &lt;code&gt;SDWebImage&lt;/code&gt;等三方框架。&lt;/li&gt;
&lt;li&gt;几乎每个 Swift 的 iOS 项目都是用了 &lt;code&gt;Alamofire&lt;/code&gt;、 &lt;code&gt;Kingfisher&lt;/code&gt;等三方框架&lt;/li&gt;
&lt;li&gt;每一次这些框架更新之后, 无数个工程师只需要在终端执行一下’pod update’ 或 &lt;code&gt;pod install&lt;/code&gt;就能对应的更新自己项目中的代码&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这几乎都是每个 iOS 工程师经常都会遇到的事情。目前几乎所有优秀的 iOS 开源框架都支持了 CocoaPods。 几乎所有的 iOS 项目都集成了 CocoaPods&lt;/p&gt;
&lt;p&gt;但是我们在日常的开发中也常会遇到这样的问题:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;很多公司都有好 App 同时在进行开发。&lt;/li&gt;
&lt;li&gt;这些 App 或多或少在业务或者 UI 都很很多的重合。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;着就意味着有很多的代码在这些 App 中都是可以复用的。由于各种各样的原因,同个公司的不同 App 可能更新不同步。 app A 可能已经升级到新版本 app B 可能还在老版本。每个 App 分别管理势必会出现混乱的局面。一起管理又存在新旧交替的问题。如果每个 App 又不同的工程师负责, 即使可能有交叉 review 的机制, 但也很难保证公司代码的统一。很多逻辑都存在多段代码。&lt;/p&gt;
&lt;p&gt;如何管理公司的公共代码库就成了一个比较麻烦的问题。&lt;/p&gt;
&lt;p&gt;集成 IJKMediaPlayer 的时候,想到了使用git来区别版本,然后使用 framework 来管理共有代码。然而在出现了你的代码需要使用到其他的 Framework 的时候, 或者好几个 Framework 都需要使用同一个第三方框架的时候, 这么做确实也是件恼火的事情。&lt;/p&gt;
    
    </summary>
    
      <category term="CocoaPods" scheme="https://CepheusSun.github.io/categories/CocoaPods/"/>
    
    
      <category term="CocoaPods" scheme="https://CepheusSun.github.io/tags/CocoaPods/"/>
    
      <category term="iOS" scheme="https://CepheusSun.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>python 爬虫之一 &quot;Requests 库学习&quot;</title>
    <link href="https://CepheusSun.github.io/Requests%20%E5%BA%93.html"/>
    <id>https://CepheusSun.github.io/Requests 库.html</id>
    <published>2017-03-06T16:00:00.000Z</published>
    <updated>2017-03-10T01:54:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>这个系列的文章是用来记录我学习 python 爬虫的。这是第一篇。</p>
<a id="more"></a>
<h2 id="安装-requests-库"><a href="#安装-requests-库" class="headerlink" title="安装 requests 库"></a>安装 requests 库</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo pip install requests</div></pre></td></tr></table></figure>
<h2 id="验证安装是否成功"><a href="#验证安装是否成功" class="headerlink" title="验证安装是否成功"></a>验证安装是否成功</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ python</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment">#import requests</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(<span class="string">"http://www.baidu.com"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r.status_code</div><div class="line"><span class="number">200</span></div><div class="line">&gt;&gt;&gt;r.encoding = <span class="string">'utf-8'</span></div><div class="line">&gt;&gt;&gt;r.text</div></pre></td></tr></table></figure>
<h3 id="Requests-库的主要方法"><a href="#Requests-库的主要方法" class="headerlink" title="Requests 库的主要方法"></a>Requests 库的主要方法</h3><ul>
<li>requests.request()<blockquote>
<p>构造一个请求,支撑一下各方法的基础方法</p>
</blockquote>
</li>
<li>requests.get()<blockquote>
<p>获取HTML网页的主要方法,对应HTTP的GET</p>
</blockquote>
</li>
<li>requests.head()<blockquote>
<p>获取HTML网页头信息的方法,对应HTTP的HEAD</p>
</blockquote>
</li>
<li>requests.post()<blockquote>
<p>向HTML网页提交POST请求的方法,对应HTTP的POST</p>
</blockquote>
</li>
<li>requests.put()<blockquote>
<p>向HTML网页提交PUT请求的方法,对应HTTP的PUT</p>
</blockquote>
</li>
<li>requests.patch()<blockquote>
<p>向HTML网页提交局部修改请求,对应HTTP的POST</p>
</blockquote>
</li>
<li>requests.delete()<blockquote>
<p>向HTML网页提交删除请求,对应HTTP的POST</p>
</blockquote>
</li>
</ul>
<h3 id="Reuqest-最重要的两个对象"><a href="#Reuqest-最重要的两个对象" class="headerlink" title="Reuqest 最重要的两个对象"></a>Reuqest 最重要的两个对象</h3><h4 id="Request-对象"><a href="#Request-对象" class="headerlink" title="Request 对象"></a>Request 对象</h4><blockquote>
</blockquote>
<h4 id="Response-对象"><a href="#Response-对象" class="headerlink" title="Response 对象"></a>Response 对象</h4><blockquote>
<p>包含了爬虫返回的全部内容</p>
</blockquote>
<ul>
<li>r.status_code; 状态码,200表示成功,404表示失败</li>
<li>r.text; HTTP响应内容的字符串形式,即, URL 对应的页面内容</li>
<li><p>r.encoding; 从 HTTP header 中猜测的响应内容编码方式</p>
<blockquote>
<p>如果 header 中不存在 charset, 则认为编码是,ISO-8859-1</p>
</blockquote>
</li>
<li>r.apparent_encoding;从内容中分析出的响应内容编码方式(备选编码方式)</li>
<li>r.content; HTTP 响应内容的二进制形式</li>
</ul>
<h3 id="爬取网页的通用代码框架"><a href="#爬取网页的通用代码框架" class="headerlink" title="爬取网页的通用代码框架"></a>爬取网页的通用代码框架</h3><h4 id="Request-的异常"><a href="#Request-的异常" class="headerlink" title="Request 的异常"></a>Request 的异常</h4><ul>
<li>request.ConnectionError; 网络连接错误异常，如DNS查询失败，拒绝连接定</li>
<li>request.HTTPError; HTTP错误异常</li>
<li>request.URLRequired; URL 缺失异常</li>
<li>request.TooManyRedirects; 超过最大重定向次数,长生重定向异常</li>
<li>request.ConnectTimeout;链接远程服务器超时异常</li>
<li>requests.Timeout;请求URL超时，产生超时异常</li>
</ul>
<p>r.raise_for_status(); 如果不是200,产生已成requests.HTTPError</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -- coding: UTF-8 --</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span><span class="params">(url)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        r = requests.get(url, timeout=<span class="number">30</span>)</div><div class="line">        r.raise_for_status()</div><div class="line">        <span class="comment"># 如果状态不是200， 引发HTTPError异常</span></div><div class="line">        r.encoding = r.apparent_encoding</div><div class="line">        <span class="keyword">return</span> r.text</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">"产生异常"</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    url = <span class="string">"http://CepheusSun.com"</span></div><div class="line">    print(getHTMLText(url))</div></pre></td></tr></table></figure>
<center>通用代码框架</center>

<h4 id="HTTP-协议"><a href="#HTTP-协议" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h4><p>HTTP, Hypertext Transfer Protocol, 超文本传输协议。</p>
<p>HTTP 是一个基于”请求与响应”模式的、无状态的应用层协议。</p>
<p>HTTP 协议采用 URL 作为定位网络资源的标识。</p>
<p>URL格式: <a href="http://host[:port][path">http://host[:port][path</a>]</p>
<ul>
<li>host:合法的 Internet 主机域名或者 IP 地址</li>
<li>port:端口号,缺省端口为80</li>
<li>path:请求资源的路径</li>
</ul>
<p>URL 是通过 HTTP 协议存取资源的 Internet 路径, 一个 URL 对应一个数据资源。</p>
<p>HTTP 协议对资源的操作</p>
<p><strong>GET</strong>， 获取资源<br><strong>HEAD</strong>，获取资源头部信息<br><strong>POST</strong>，向URL位置的资源后附加新的数据<br><strong>PUT</strong>，储存一个资源，覆盖原来URL的资源<br><strong>PATCH</strong>，对原来的资源，进行局部更新<br><strong>DELETE</strong>，删除</p>
<h4 id="requests-request-method-url-kwargs"><a href="#requests-request-method-url-kwargs" class="headerlink" title="requests.request(method, url, **kwargs)"></a>requests.request(<code>method</code>, <code>url</code>, <code>**kwargs</code>)</h4><p>method: 请求方式,对应get/put/post等7种<br>url: 请求地址<br><code>**warrgs</code> 控制访问的参数，一共13个</p>
<ul>
<li><code>params</code>: 字典或字节序列，作为参数增加到url中</li>
<li><code>data</code>: 字典、字节序列或者文件对象，作为 Request 的内容</li>
<li><code>json</code>: JSON 格式的数据,作为 Request 的内容</li>
<li><code>headers</code>: 字典,HTTP定制头</li>
<li><code>cookies</code>:字典或CookieeJar, request中的cookie</li>
<li><code>auth</code>: 元组,支持HTTP认证功能</li>
<li><code>files</code>: 字典类型,传输文件</li>
<li><code>timeout</code>: 设定的超时时间，单位秒</li>
<li><p><code>proxies</code>: 字典类型,设定访问代理服务器,可以增加登录认证 </p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pxs = &#123;<span class="string">'http'</span>:<span class="string">'http//balabala'</span>,</div><div class="line"><span class="string">'https'</span>:<span class="string">'https"//balabala'</span></div><div class="line">&#125;</div><div class="line">r= requests.request(<span class="string">'GET'</span>,<span class="string">'http://www.baidu.com'</span>,proxies=pxs)</div></pre></td></tr></table></figure>
</li>
<li><p><code>allow_redirects</code>: True/False,默认True,重定向开关</p>
</li>
<li><code>stream</code>:True/False,默认True,获取内容立即下载开关</li>
<li><code>verify</code>:True/False,默认True,，认证 SSL 证书开关</li>
<li><code>cert</code>:本地SSL证书路径</li>
</ul>
<h3 id="网络爬虫的类型"><a href="#网络爬虫的类型" class="headerlink" title="网络爬虫的类型"></a>网络爬虫的类型</h3><p>按照尺寸区别</p>
<p>爬取网页，玩转网页。小规模,数据量小，爬取速度不敏感 requests 。</p>
<p>爬取网站，爬取系列网站. 中规模，数据规模较大，爬取速度敏感 Scrapy 库</p>
<p>爬取全网。大规模,搜索引擎，爬取速度关键,只能定制开发</p>
<h3 id="反爬虫"><a href="#反爬虫" class="headerlink" title="反爬虫"></a>反爬虫</h3><h4 id="来源审查-判断-User-Agent-进行限制"><a href="#来源审查-判断-User-Agent-进行限制" class="headerlink" title="来源审查: 判断 User-Agent 进行限制"></a>来源审查: 判断 User-Agent 进行限制</h4><blockquote>
<p>检查来访 HTTP 协议头的 User-Agent 域，只响应浏览器或者友好爬虫的访问。</p>
</blockquote>
<h4 id="发布公告-Robots-协议"><a href="#发布公告-Robots-协议" class="headerlink" title="发布公告 Robots 协议"></a>发布公告 Robots 协议</h4><blockquote>
<p>告知所有爬虫网站的爬取策略,要求爬虫遵守</p>
</blockquote>
<h3 id="Robots-协议"><a href="#Robots-协议" class="headerlink" title="Robots 协议"></a>Robots 协议</h3><p>Robots Exclusion Standard 网络爬虫排除标准</p>
<p>作用: 网站告知网络爬虫哪些页面可以抓取,哪些不行。<br>形式: 在网站根目录下的 robots.txt 文件<br>使用:</p>
<ul>
<li>网络爬虫：自动或者人工识别robots.txt， 再进行内容爬取</li>
<li>约束性: Robots 协议是建议但非约束性,网络爬虫可以不遵守，但是存在法律风险</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个系列的文章是用来记录我学习 python 爬虫的。这是第一篇。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://CepheusSun.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://CepheusSun.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>iOS面试集锦</title>
    <link href="https://CepheusSun.github.io/interview.html"/>
    <id>https://CepheusSun.github.io/interview.html</id>
    <published>2017-02-20T16:00:00.000Z</published>
    <updated>2017-05-19T01:59:28.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>写出中序遍历二叉树的算法(不限编程语言，已知 TreeRoot 为二叉树的根)</li>
<li>快速排序，归并排序的时间复杂度分别是什么？</li>
<li>UITableViewCell 可重用机制是什么?有什么要注意的地方?</li>
<li>OC 中的 @property 和 @synthesize 有什么用？</li>
<li>OC有没有重载(overload)和重写(overwrite)？有的话请举个例子。</li>
<li>列举出 iOS 开发中三种最常出现的循环引用的场景。</li>
<li>MVC 模式具体指什么？iOS现在流行的 MVVM 是什么？</li>
<li>iOS 中设计金钱计算和比较时，用数值应该用哪个类型来处理？</li>
<li>iOS 上触摸事件的视图检测和事件传递过程是怎样的？  </li>
<li>写一个折半查找或者快速排序</li>
</ol>
<hr>
<ol>
<li>对内存管理的理解。</li>
<li>类别的作用</li>
<li>点击屏幕上的按钮，系统做了什么？</li>
</ol>
<hr>
<ol>
<li><code>id</code> 和 <code>instancetype</code> 的区别?</li>
<li>有方法查看当前系统内存使用的情况吗？</li>
<li>为什么 NotificationCenter 要 removeObserver? 如何实现自动 remove？</li>
<li>iOS的沙盒目录结构是怎样的？ App Bundle 里面都有什么？</li>
<li>简单描述一下客户端的缓存机制？</li>
</ol>
<hr>
<ol>
<li>按钮或者 View 在进行 frame 动画的时候，为什么点击 frame 动画的重点位置才能触发事件？如何在动画过程中响应事件？<a id="more"></a>
</li>
</ol>
<p>#####1.写出中序遍历二叉树的算法(不限编程语言，已知 TreeRoot 为二叉树的根)。  </p>
<p>最近在学 Python 所以整理了一个 Python 版的</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -- coding: UTF-8 --</span></div><div class="line"><span class="comment"># @Date    : 2017-02-21</span></div><div class="line"><span class="comment"># @Author  : CepheusSun</span></div><div class="line"><span class="comment"># @Version : python 2.7</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tree</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data, left, right)</span>:</span></div><div class="line">        self.data = data</div><div class="line">        self.left = left</div><div class="line">        self.right = right</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">in_visit</span><span class="params">(tree)</span>:</span></div><div class="line">    <span class="string">"""递归中序遍历"""</span></div><div class="line">    <span class="keyword">if</span> tree:</div><div class="line">        in_visit(tree.left)</div><div class="line">        <span class="keyword">print</span> (tree.data)</div><div class="line">        in_visit(tree.right)</div><div class="line">        </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">in_stack</span><span class="params">(tree)</span>:</span></div><div class="line">    <span class="string">"""堆栈中序遍历"""</span></div><div class="line">    <span class="keyword">if</span> tree:</div><div class="line">        my_stack = []</div><div class="line">        node = tree</div><div class="line">        <span class="keyword">while</span> node <span class="keyword">or</span> my_stack:</div><div class="line">            <span class="keyword">while</span> node:</div><div class="line">                my_stack.append(node)</div><div class="line">                node = node.left</div><div class="line">            node = my_stack.pop()</div><div class="line">            print(node.data)</div><div class="line">            node = node.right</div><div class="line"></div><div class="line">            <span class="keyword">print</span> my_stack2.pop().data</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    node1 = Tree(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>)</div><div class="line">    node2 = Tree(<span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>)</div><div class="line">    node3 = Tree(<span class="number">3</span>, node1, node2)</div><div class="line">    node4 = Tree(<span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>)</div><div class="line">    node5 = Tree(<span class="number">5</span>, node4, node3)</div><div class="line">    print(<span class="string">"the post_visit is ..."</span>)</div><div class="line">    post_visit(node5)</div><div class="line">    post_stack(node5)</div><div class="line">    print(<span class="string">"the pre_visit is ..."</span>)</div><div class="line">    pre_visit(node5)</div><div class="line">    pre_stack(node5)</div><div class="line">    print(<span class="string">"the in_visit is ..."</span>)</div><div class="line">    in_visit(node5)</div><div class="line">    in_stack(node5)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure>
<h5 id="2-快速排序，归并排序的时间复杂度分别是什么？"><a href="#2-快速排序，归并排序的时间复杂度分别是什么？" class="headerlink" title="2.快速排序，归并排序的时间复杂度分别是什么？"></a>2.快速排序，归并排序的时间复杂度分别是什么？</h5><ul>
<li>归并排序：稳定，时间复杂度 O(nlog n)</li>
<li>快速排序：不稳定，时间复杂度 最理想 O(nlogn) 最差时间O(n^2)</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -- coding: UTF-8 --</span></div><div class="line"><span class="comment"># @Date    : 2017-02-21</span></div><div class="line"><span class="comment"># @Author  : CepheusSun</span></div><div class="line"><span class="comment"># @Version : python 2.7</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(array, first_index, last_index)</span>:</span></div><div class="line">    <span class="string">"""快速排序"""</span></div><div class="line">    <span class="keyword">if</span> first_index &lt; last_index:</div><div class="line">        div_index = partition(array, first_index, last_index)</div><div class="line">        quick_sort(array, first_index, div_index)</div><div class="line">        quick_sort(array, div_index + <span class="number">1</span>, last_index)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(array, first_index, last_index)</span>:</span></div><div class="line">    i = first_index - <span class="number">1</span></div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(first_index, last_index):</div><div class="line">        <span class="keyword">if</span> array[j] &lt;= array[last_index]:</div><div class="line">            i += <span class="number">1</span></div><div class="line">            array[i], array[j] = array[j], array[i]</div><div class="line">    array[i + <span class="number">1</span>], array[last_index] = array[last_index], array[i + <span class="number">1</span>]</div><div class="line">    <span class="keyword">return</span> i</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(left, right)</span>:</span></div><div class="line">    i, j = <span class="number">0</span>, <span class="number">0</span></div><div class="line">    res = []</div><div class="line">    <span class="keyword">while</span> i &lt; len(left) <span class="keyword">and</span> j &lt; len(right):</div><div class="line">        <span class="keyword">if</span> left[i] &lt;= right[j]:</div><div class="line">            res.append(left[i])</div><div class="line">            i += <span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            res.append(right[j])</div><div class="line">            j += <span class="number">1</span></div><div class="line">    res += left[i:]</div><div class="line">    res += right[j:]</div><div class="line">    <span class="keyword">return</span> res</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span><span class="params">(array)</span>:</span></div><div class="line">    <span class="string">"""并归排序"""</span></div><div class="line">    <span class="keyword">if</span> len(array) &lt;= <span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> array</div><div class="line">    num = len(array) / <span class="number">2</span></div><div class="line">    left = merge_sort(array[:num])</div><div class="line">    right = merge_sort(array[num:])</div><div class="line">    <span class="keyword">return</span> merge(left, right)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    array = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">76</span>, <span class="number">5</span>, <span class="number">567</span>, <span class="number">54</span>, <span class="number">6</span>, <span class="number">54</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">0</span>]</div><div class="line">    print(<span class="string">"initial array : \n"</span>, array)</div><div class="line">    print(<span class="string">"merge sort result: \n"</span>, merge_sort(array))</div><div class="line">    quick_sort(array, <span class="number">0</span>, len(array) - <span class="number">1</span>)</div><div class="line">    print(<span class="string">"result array :\n"</span>, array)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div><div class="line"></div><div class="line">``` </div><div class="line">    </div><div class="line"><span class="comment">##### 3.UITableViewCell 可重用机制是什么?有什么要注意的地方?</span></div><div class="line"></div><div class="line">UITableView 通过重用单元格来达到节省内存的目的：通过为每个单元格指定一个重用标识符，即指定来单元格的种类，以及当单元格滚出屏幕时，允许恢复单元格以便重用。对于不同种类的单元格使用不同的ID，对于简单的表格，一个标识符就够了。</div><div class="line"></div><div class="line">需要注意的地方：</div><div class="line">    取出来的cell是有可能已经捆绑过数据或者加过子视图的，如果有必要，要清除需要用与显示的数据和remove掉add过的子视图。不然会造成错乱的情况</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">##### 4.OC 中的 @property 和 @synthesize 有什么用？</span></div><div class="line"></div><div class="line">答：</div><div class="line">iOS2<span class="number">.0</span> Apple引入 `@property` `@synthesize` 概念，两者组合使用可以自动生成 `seter` `geter`方法，iOS4<span class="number">.0</span>以后只需要 `@property` 即可实现 自动生成 `seter` `geter`方法。</div></pre></td></tr></table></figure>
<p>//setter</p>
<ul>
<li>(void)setObjStr:(NSString *)objStr {<br>   if (_ objStr != objStr) {<pre><code>[_objStr release];
 _objStr = [objStr copy];
</code></pre>   }<br>}<br>//getter</li>
<li>(NSString *)objStr {<br>   return _objStr;<br>}<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">以上代码等价于</div></pre></td></tr></table></figure>
</li>
</ul>
<p>//iOS2.0-iOS4.0<br>@interface Obj : NSObject<br>@property (nonatomic, copy) NSString *objStr;<br>@end</p>
<p>@implementation Object<br>@synthesize objStr = _ objStr;<br>@end<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iOS4.0及以后</div></pre></td></tr></table></figure></p>
<p>@interface Obj : NSObject<br>@property (nonatomic, copy) NSString *objStr;<br>@end<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">##### 5.OC有没有重载(overload)和重写(overwrite)？有的话请举个例子。</div><div class="line"></div><div class="line">答：</div><div class="line">OC 语言不支持重载</div><div class="line"></div><div class="line">```oc</div><div class="line">-(void)doSth:(NSInteger)integer;</div><div class="line">-(void)doSth:(NSString *)str; </div><div class="line">//对Objective-C而言是一样的，都叫方法doSth: 同时定义实现这两个方法是无法编译通过的。 若要达到类似重载的效果，可以这样跟不同参数：</div><div class="line">-(void)doSthWithInt:(NSInteger)integer;</div><div class="line">-(void)doSthWithStr:(NSString *)str</div></pre></td></tr></table></figure></p>
<p>OC 支持重写</p>
<pre><code>子类重写父类方法
</code></pre><h5 id="6-列举出-iOS-开发中三种最常出现的循环引用的场景。"><a href="#6-列举出-iOS-开发中三种最常出现的循环引用的场景。" class="headerlink" title="6.列举出 iOS 开发中三种最常出现的循环引用的场景。"></a>6.列举出 iOS 开发中三种最常出现的循环引用的场景。</h5><p>答：</p>
<ul>
<li>delegate 被强引用了，代理应该使用 weak (拓展 weak 干了啥使自己可以防止循环的出现)  </li>
<li>使用 block 的时候，注意是否出现互相持有。  </li>
<li>使用 NSTimer 的时候，我们可能会使<code>+scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:</code> 这个方法在建立的时候需要指定 target ，会被 timer retain 一份。因为 timer 还在一直执行，就会导致无法运行 dealloc的方法。正确的做法是在 viewDidDisappear: 的时候停止timer </li>
</ul>
<h5 id="7-MVC-模式具体指什么？iOS现在流行的-MVVM-是什么？"><a href="#7-MVC-模式具体指什么？iOS现在流行的-MVVM-是什么？" class="headerlink" title="7.MVC 模式具体指什么？iOS现在流行的 MVVM 是什么？"></a>7.MVC 模式具体指什么？iOS现在流行的 MVVM 是什么？</h5><p>MVC：</p>
<pre><code>MVC模式考虑三种对象：模型对象、视图对象和控制器对象。 模型对象负责应用程序的数据和定义操作数据的逻辑； 视图对象知道如何显示应用程序的模型数据； 控制器对象是M与V之间的协调者。
</code></pre><p>MVVM：</p>
<pre><code>MVVM 把 View Controller 作为 View
View 和 Model 之间没有紧耦合
MVVM 是在 View 和 ViewModel 之间进行绑定。
什么是 ViewModel 呢？基本上来说，它是 View 和 View 状态的独立于     UIKit 外的一个呈现，ViewModel 调用 Model 中的的变化，根据 Model 的变化进行调整，并且通过 View 和 ViewModel 的绑定，同步调整 View。
</code></pre><h5 id="8-iOS-中设计金钱计算和比较时，用数值应该用哪个类型来处理？"><a href="#8-iOS-中设计金钱计算和比较时，用数值应该用哪个类型来处理？" class="headerlink" title="8.iOS 中设计金钱计算和比较时，用数值应该用哪个类型来处理？"></a>8.iOS 中设计金钱计算和比较时，用数值应该用哪个类型来处理？</h5><ul>
<li><code>NSDecimalNumber</code> 继承于 <code>NSNumber</code>   </li>
<li><p><code>NSDecimalNumber</code> 包含  加减乘除，幂运算，指数运算，四舍五入，比较运算。  </p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line">	/** 示例 比较运算</div><div class="line">	NSOrderedAscending 升序</div><div class="line">	NSOrderedSame 相等</div><div class="line">	NSOrderedDescending 降序</div><div class="line">	- (NSComparisonResult)compare:(NSNumber *)decimalNumber;</div><div class="line">	*/</div><div class="line">	NSDecimalNumber *discount1 = [NSDecimalNumber decimalNumberWithString:@&quot;1.2&quot;];</div><div class="line">	NSDecimalNumber *discount2 = [NSDecimalNumber decimalNumberWithString:@&quot;1.3&quot;];</div><div class="line">	NSComparisonResult result = [discount1 compare:discount2];</div><div class="line">	if (result == NSOrderedAscending) &#123;</div><div class="line">	    NSLog(@&quot;1.2 &lt; 1.3&quot;);</div><div class="line">	&#125; else if (result == NSOrderedSame) &#123;</div><div class="line">	    NSLog(@&quot;1.2 == 1.3&quot;);</div><div class="line">	&#125; else if (result == NSOrderedDescending) &#123;</div><div class="line">	    NSLog(@&quot;1.2 &gt; 1.3&quot;);</div><div class="line">	&#125;</div><div class="line">	输出结果 1.2 &lt; 1.3</div><div class="line">	``` </div><div class="line"></div><div class="line">##### 9.iOS 上触摸事件的视图检测和事件传递过程是怎样的？  </div><div class="line"></div><div class="line">* 发生触摸事件后，系统会将该事件加入到一个由UIApplication管理的事件队列中。(为什么是队列而不是栈？因为队列的特定是先进先出，先产生的事件先处理才符合常理，所以把事件添加到队列。)</div><div class="line"></div><div class="line">* UIApplication会从事件队列中取出最前面的事件，并将事件分发下去以便处理，通常，先发送事件给应用程序的主窗口（keyWindow）。</div><div class="line"></div><div class="line">* 主窗口会在视图层次结构中找到一个最合适的视图来处理触摸事件，这也是整个事件处理过程的第一步。</div><div class="line">找到合适的视图控件后，就会调用视图控件的touches方法来作具体的事件处理。</div><div class="line"></div><div class="line">##### 10.写一个折半查找或者快速排序</div><div class="line"></div><div class="line">    用 Python写了一个二分查找</div><div class="line">    </div><div class="line">```python</div><div class="line"># -- coding: UTF-8 --</div><div class="line"># @Date    : 2017-02-21</div><div class="line"># @Author  : CepheusSun</div><div class="line"># @Version : python 2.7</div><div class="line"></div><div class="line"></div><div class="line">def in_bisect(word_list, word):</div><div class="line">    &quot;&quot;&quot;check weather a word is in a list using bisection search.</div><div class="line">    Precondition: the words in the list are sorted</div><div class="line"></div><div class="line">    :param word_list: list of strings</div><div class="line">    :param word: string</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    if len(word_list) == 0:</div><div class="line">        return False</div><div class="line"></div><div class="line">    # 结果四舍五入</div><div class="line">    i = len(word_list) // 2</div><div class="line">    if word_list[i] == word:</div><div class="line">        return True</div><div class="line"></div><div class="line">    if word_list[i] &gt; word:</div><div class="line">        # search the first half</div><div class="line">        return in_bisect(word_list[:i], word)</div><div class="line">    else:</div><div class="line">        # search the second half</div><div class="line">        return in_bisect(word_list[i + 1:], word)</div><div class="line"></div><div class="line"></div><div class="line">def main():</div><div class="line">    array = [&apos;1&apos;, &apos;asf&apos;, &apos;sf2&apos;, &apos;df1&apos;, &apos;2das&apos;, &apos;5asdfd&apos;, &apos;0sadf&apos;,</div><div class="line">            &apos;2ge&apos;, &apos;efc2&apos;, &apos;1eds&apos;, &apos;2ef&apos;, &apos;2apple&apos;, &apos;apple&apos;, &apos;orange&apos;]</div><div class="line">    print(in_bisect(array, &apos;1&apos;))</div><div class="line">    print(in_bisect(array, &apos;111&apos;))</div><div class="line"></div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    main()</div></pre></td></tr></table></figure>
</li>
</ul>
<p>Question 1.内存管理理解不正确的是<br>A 程序A里有一段内存被成功申请完成之后，内存计数器就从0变为1 (这个过程是alloc);<br>B 程序B里要使用已存在内存，那么内存计数器从1变为2 (这个过程是retain或者copy);<br>C 紧接着程序A不需要这个内存了，那么程序A就把这个内存计数器减1 (这个过程是release);<br>D 当系统发现这个内存计数器变为小于等于0，那么就调用垃圾回收程序把这段内存回收(这个过程是dealloc)；</p>
<p>Question 2.类别的作用不正确的是<br>A 将类的实现分散到多个不同文件或多个不同框架中。<br>B 创建对私有方法的前向引用。<br>C 向对象添加非正式协议。 继承可以增加，修改或者删除方法。<br>D 不能添加属性  </p>
<p>Question 3.点击屏幕上的按钮，系统做了什么？  </p>
<h2 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h2><p>Answer 1. B  使用并不会增加引用技术，持有才会。<br>Answer 2. D  </p>
<pre><code>class-continuation分类是唯一能给添加属性的分类。而所谓的关联对象，我在52个方法中找到了这样一句话：
    * “定义关联对象时可以指定内存管理语义，用以模仿定义属性时所采用的“拥有”和“非拥有关系””
可见，关连对象跟属性是两个不同的概念，不能混为一谈。

类别的三个作用：
    * 可以将类的实现分散到多个不同文件或多个不同框架中，方便代码管理。
    * 创建对私有方法的前向引用。比如在别人的类或者框架中有一个方法的是没有说明的，这时候通过类别声明这个方法，就可以在不破坏原来框架的情况下，使用到这个方法。
    * 向对象添加非正式协议。
</code></pre><p>Answer 3.   </p>
<ul>
<li>触摸事件的传递是从父空间传递到子控件，如果父空间不能接收触摸事件，那么子控件就不能接收触摸事件  </li>
<li>发生触摸事件后，系统会将该事件加入到一个由UIApplication管理的事件队列中。(为什么是队列而不是栈？因为队列的特定是先进先出，先产生的事件先处理才符合常理，所以把事件添加到队列。)  </li>
<li>UIApplication会从事件队列中取出最前面的事件，并将事件分发下去以便处理，通常，先发送事件给应用程序的主窗口（keyWindow）。  </li>
<li>主窗口会在视图层次结构中找到一个最合适的视图来处理触摸事件，这也是整个事件处理过程的第一步。<br>找到合适的视图控件后，就会调用视图控件的touches方法来作具体的事件处理。  </li>
</ul>
<hr>
<p>#####1. <code>id</code> 和 <code>instancetype</code> 的区别?</p>
<ol>
<li><p>在 ARC(Auto Reference Count)环境下:</p>
<pre><code>instancetype 用来在编译期确定实例的类型,而使用 id 的话,编译器不检查类型, 运行时检查类型.
</code></pre><p>在 MRC(Manual Reference Count)环境下:</p>
<pre><code>instancetype 和 id 一样,不做具体类型检查
</code></pre></li>
<li><p>id 可以作为方法的参数,但 instancetype 不可以<br>instancetype 只适用于初始化方法和便利构造器的返回值类型</p>
</li>
</ol>
<p>#####2. 有方法查看当前系统内存使用的情况吗？<br>一般我上手新的项目,检查内存问题三部曲;</p>
<ol>
<li>静态分析, 初步了解代码不规范的地方,或者是一些内存泄漏问题。</li>
<li>instrument, 初略的定位我们在什么地方发生了内存泄漏。</li>
<li>代码测试内存泄漏, 观察对象的生成和销毁是否配对。使用MLeaksFinder来配合检查</li>
</ol>
<ul>
<li>两个对象互相持有，主要是 delegate 使用 weak 属性, 在 iOS8 上系统 delegate 使用的是 assign 这会带来一些问题,踩过坑的老司机可以提一下。</li>
<li>有时候需要使用 removeFromSuperView 来释放, a 持有了 b ， b 被 add 到了 c 上, 而在程序设计中b 的生命周期应该和 a 相同, 这个时候使用 self.b = nil 并不会吧 b 释放, 我们应该在之前加上 <code>[b removeFromSuperView]</code></li>
</ul>
<p>#####3. 为什么 NotificationCenter 要 removeObserver? 如何实现自动 remove？</p>
<ul>
<li>如果不移除，万一注册通知的类被销毁之后又发送了通知, 程序会 crash。 因为野指针。</li>
<li>实现自动 remove;通过自动释放机制, 通过动态属性将 remove 转移给第三者,解除耦合,达到自动实现 remove 。</li>
</ul>
<p>#####4. iOS的沙盒目录结构是怎样的？ App Bundle 里面都有什么？</p>
<ol>
<li>沙盒结构<ul>
<li>Application: 存放程序源文件, 上架前经过数字签名,上架后不可修改</li>
<li>Documents: 常用目录, iCloud 备份目录,存放数据,这里不能缓存文件,否则上架不被通过</li>
<li>Library<ul>
<li>Caches: 存放体积大又不需要备份的数据, SDWebImage 就是这个</li>
<li>Preference: 设置目录, iCloud会备份设置信息。</li>
<li>tmp: 存放临时文件,不会被备份,而且这个文件下的数据有可能随时被清除</li>
</ul>
</li>
</ul>
</li>
<li>App Bundle<ul>
<li>Info.plist: 文件的配置信息,系统依赖次文件获取应用程序的相关信息。</li>
<li>可执行文件: 此文件包含应用程序的入口和通过静态链接到应用程序 target 的代码。</li>
<li>资源文件: 图片声音</li>
<li>其他: 可以潜入定制的数据资源。</li>
</ul>
</li>
</ol>
<h5 id="5-简单描述一下客户端的缓存机制？"><a href="#5-简单描述一下客户端的缓存机制？" class="headerlink" title="5.简单描述一下客户端的缓存机制？"></a>5.简单描述一下客户端的缓存机制？</h5><ul>
<li>缓存可以分为:<ul>
<li>内存数据缓存</li>
<li>数据库缓存</li>
<li>文件缓存</li>
</ul>
</li>
<li>每次想获取数据的时候<ol>
<li>检查内存中有无缓存</li>
<li>检查本地有无缓存(数据库\文件)</li>
<li>发起请求</li>
<li>将服务器返回的数据进行缓存(内存数据库文件)</li>
</ol>
</li>
</ul>
<hr>
<h5 id="1-按钮或者-View-在进行-frame-动画的时候，为什么点击-frame-动画的重点位置才能触发事件？如何在动画过程中响应事件？"><a href="#1-按钮或者-View-在进行-frame-动画的时候，为什么点击-frame-动画的重点位置才能触发事件？如何在动画过程中响应事件？" class="headerlink" title="1.按钮或者 View 在进行 frame 动画的时候，为什么点击 frame 动画的重点位置才能触发事件？如何在动画过程中响应事件？"></a>1.按钮或者 View 在进行 frame 动画的时候，为什么点击 frame 动画的重点位置才能触发事件？如何在动画过程中响应事件？</h5><p>答：<br>① <del>动画开始后有两个图层：</del><br>（修改原因：不是动画开始后,而是 view 出现了的时候。只要 view 出现在试图上,他都具有这两个图层。）<br><strong>iOS 中对于 UIView 具有一个 CALayer 类的属性 layer 我们姑且叫他 rootLayer。而每一个 CALayer 都有两个属性：</strong><br><del>一个 <code>view.layer.presentationLayer</code> 用来显示动画（属性随动画过程慢慢改变)</del><br>（修改原因:感觉显示动画这个用法不大准确,我语文也不好😂）<br><strong>一个<code>resentationLayer</code> 指呈现图层,是模型图层的复制，他的属性值代表了在任何指定时刻当前的显示。所以在 UIView 没有出现的时候这个 view 的属性值为 nil， 出现之后无论 view 是否动画，这个值的内存地址每次打印都不一样。</strong></p>
<p><del>一个 <code>view.layer</code> 用来处理用户交互（动画一开始属性值立即改变到动画结束时的状态和位置)</del><br>(修改原因: CALayer 是不处理交互的,这一点可以从UIView有<code>userInteractionEnabled</code>这个属性，而CALayer没有可以看出,并且看 iOS-CoreAnimation这本书,这样使用 modelLayer 来描述更 MVC 一些)<br><strong>一个<code>modelLayer</code> 指模型层,在 view 显示出来的时候<code>view.layer</code> = <code>view.layer.presentationLayer.modelLayer</code> = <code>view.layer.view.layer.modelLayer</code>。 三者内存地址是一样的,保存实际的属性值。</strong></p>
<p><strong>最后总结：当一个图层的属性改变的时候，我们设置的属性并没有直接调用图层的外观，只是定义了图层动画结束之后将要变化的外观。</strong>具体关系见下图：</p>
<center><img src="http://ocg4av0wv.bkt.clouddn.com/layer%E7%9F%A5%E8%AF%86.png" alt=""><br>from《iOS-CoreAnimation》<br></center>

<p>② 要在移动动画的过程中处理 触摸可以重写 <code>UIView的hitTest</code> 方法<br>(总的来说，通过<code>view.layer.presentationLayer</code>的相关属性，就可以实现响应需求了，通过<code>touchbegan</code>判断用户点击的位置是否在<code>view.layer.presentationLayer.frame</code>之内，是《iOS—CoreAnimation》中另外一个实现方式)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">- (id)hitTest:(CGPoint)point withEvent:(UIEvent *)event &#123;</div><div class="line">    NSArray *subViews = self.subviews;</div><div class="line">    for (UIView *subView in subViews) &#123;</div><div class="line">        if([subView isKindOfClass:[FoamImageView class]])&#123; //是要找的图片</div><div class="line">            CALayer *layer = subView.layer.presentationLayer; //图片的显示层            </div><div class="line">            if(CGRectContainsPoint(layer.frame, point))&#123; //触摸点在显示层中，返回当前图片</div><div class="line">                return subView;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return [super hitTest:point withEvent:event];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event &#123;</div><div class="line">    CGPoint point = [[touches anyObject] locationInView:self.view];</div><div class="line">    </div><div class="line">    if (CGRectContainsPoint(button_.layer.presentationLayer.frame, point)) &#123;</div><div class="line">        NSLog(@&quot;youxiangying&quot;);</div><div class="line">        [self buttonEvent:button_];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>参考资料</strong><br><a href="http://blog.sina.com.cn/s/blog_771849d301010ta0.html">资料1</a></p>
<p><a href="https://my.oschina.net/iamzkt/blog/126503">Objective-C 之 @property和@synthesize</a>  </p>
<p><a href="https://www.pupboss.com/property-and-synthesize/">回炉篇之（一）– @property和@synthesize</a>  </p>
<p><a href="http://arthurchen.blog.51cto.com/2483760/761426">iOS开发：Objective-C精确的货币计算</a> </p>
<p><a href="http://www.jianshu.com/p/4703d704c953">‘NSDecimalNumber–十进制数’使用方法(带例子)</a></p>
<p><a href="https://yq.aliyun.com/wenzhang/show_41715">objective c-OC中有方法重载吗？具体是怎么样？</a></p>
<p><a href="http://www.cnblogs.com/LiLihongqiang/p/5645907.html">http://www.cnblogs.com/LiLihongqiang/p/5645907.html</a><br><a href="http://www.infocool.net/kb/IOS/201610/200104.html">http://www.infocool.net/kb/IOS/201610/200104.html</a><br><a href="http://www.cocoachina.com/ios/20160113/14896.html">http://www.cocoachina.com/ios/20160113/14896.html</a><br><a href="http://www.jianshu.com/p/2e074db792ba">http://www.jianshu.com/p/2e074db792ba</a>  </p>
<p>think python</p>
<p><a href="http://www.voidcn.com/blog/lixuemei45/article/p-5021040.html">www.voidcn.com</a><br><a href="https://www.amazon.com/iOS-Core-Animation-Advanced-Techniques-ebook/dp/B00EHJCORC/ref=sr_1_1?ie=UTF8&amp;qid=1423192842&amp;sr=8-1&amp;keywords=Core+Animation+Advanced+Techniques">iOS-CoreAnimation</a></p>
<hr>
<h5 id="写在后面的话"><a href="#写在后面的话" class="headerlink" title="写在后面的话"></a>写在后面的话</h5><p>这个系列所有的文章都是在一个QQ群里面跟小伙伴们讨论出来的,每个 topic 都已经放在了 GitHub 的一个仓库中 <a href="https://github.com/GetOfferSoldier/Objective-C"><strong>这是地址</strong></a>。 所有内容的更新的将在这个仓库中进行,在博客中将不再进行更新。有任何问题，都可以在这个仓库中给我们提 issue 或者 pull request.</p>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;写出中序遍历二叉树的算法(不限编程语言，已知 TreeRoot 为二叉树的根)&lt;/li&gt;
&lt;li&gt;快速排序，归并排序的时间复杂度分别是什么？&lt;/li&gt;
&lt;li&gt;UITableViewCell 可重用机制是什么?有什么要注意的地方?&lt;/li&gt;
&lt;li&gt;OC 中的 @property 和 @synthesize 有什么用？&lt;/li&gt;
&lt;li&gt;OC有没有重载(overload)和重写(overwrite)？有的话请举个例子。&lt;/li&gt;
&lt;li&gt;列举出 iOS 开发中三种最常出现的循环引用的场景。&lt;/li&gt;
&lt;li&gt;MVC 模式具体指什么？iOS现在流行的 MVVM 是什么？&lt;/li&gt;
&lt;li&gt;iOS 中设计金钱计算和比较时，用数值应该用哪个类型来处理？&lt;/li&gt;
&lt;li&gt;iOS 上触摸事件的视图检测和事件传递过程是怎样的？  &lt;/li&gt;
&lt;li&gt;写一个折半查找或者快速排序&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;对内存管理的理解。&lt;/li&gt;
&lt;li&gt;类别的作用&lt;/li&gt;
&lt;li&gt;点击屏幕上的按钮，系统做了什么？&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;id&lt;/code&gt; 和 &lt;code&gt;instancetype&lt;/code&gt; 的区别?&lt;/li&gt;
&lt;li&gt;有方法查看当前系统内存使用的情况吗？&lt;/li&gt;
&lt;li&gt;为什么 NotificationCenter 要 removeObserver? 如何实现自动 remove？&lt;/li&gt;
&lt;li&gt;iOS的沙盒目录结构是怎样的？ App Bundle 里面都有什么？&lt;/li&gt;
&lt;li&gt;简单描述一下客户端的缓存机制？&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;按钮或者 View 在进行 frame 动画的时候，为什么点击 frame 动画的重点位置才能触发事件？如何在动画过程中响应事件？
    
    </summary>
    
      <category term="知识集锦" scheme="https://CepheusSun.github.io/categories/%E7%9F%A5%E8%AF%86%E9%9B%86%E9%94%A6/"/>
    
    
      <category term="iOS面试集锦" scheme="https://CepheusSun.github.io/tags/iOS%E9%9D%A2%E8%AF%95%E9%9B%86%E9%94%A6/"/>
    
  </entry>
  
  <entry>
    <title>python 中 str 和 list 互相转换</title>
    <link href="https://CepheusSun.github.io/python%20%E4%B8%AD%20str%20%E5%92%8C%20list%20%E4%BA%92%E7%9B%B8%E8%BD%AC%E6%8D%A2.html"/>
    <id>https://CepheusSun.github.io/python 中 str 和 list 互相转换.html</id>
    <published>2017-02-03T16:00:00.000Z</published>
    <updated>2017-02-04T09:27:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>一些相关方法、函数、运算符的整理</p>
<a id="more"></a>
<h3 id="str-gt-list"><a href="#str-gt-list" class="headerlink" title="str -&gt; list"></a>str -&gt; list</h3><h4 id="将字符串按照字符分割成字符list"><a href="#将字符串按照字符分割成字符list" class="headerlink" title="将字符串按照字符分割成字符list"></a>将字符串按照字符分割成字符list</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">s = <span class="string">'spam'</span></div><div class="line">t = list(s)</div><div class="line"><span class="keyword">print</span> t</div><div class="line"></div><div class="line"><span class="comment">#结果：['s', 'p', 'a', 'm']</span></div></pre></td></tr></table></figure>
<h4 id="将字符串按照分隔符，分割成字符-串-list"><a href="#将字符串按照分隔符，分割成字符-串-list" class="headerlink" title="将字符串按照分隔符，分割成字符(串)list"></a>将字符串按照分隔符，分割成字符(串)list</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">s = <span class="string">'spam-spam-spsm'</span></div><div class="line">delimiter = <span class="string">'-'</span></div><div class="line">s.split(delimiter)</div><div class="line"><span class="keyword">print</span> s.split(delimiter)</div><div class="line"></div><div class="line"><span class="comment">#结果：['spam', 'spam', 'spsm']</span></div></pre></td></tr></table></figure>
<h4 id="使用-split-方法将字符串分成单词"><a href="#使用-split-方法将字符串分成单词" class="headerlink" title="使用 split 方法将字符串分成单词"></a>使用 split 方法将字符串分成单词</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">s = <span class="string">'pinging for the fjords'</span></div><div class="line">t = s.split()</div><div class="line"><span class="keyword">print</span> t</div><div class="line"></div><div class="line"><span class="comment">#结果：['pinging', 'for', 'the', 'fjords']</span></div></pre></td></tr></table></figure>
<h3 id="list-gt-str"><a href="#list-gt-str" class="headerlink" title="list -&gt; str"></a>list -&gt; str</h3><h4 id="使用字符-串-将-list-串联成字符串"><a href="#使用字符-串-将-list-串联成字符串" class="headerlink" title="使用字符(串)将 list 串联成字符串"></a>使用字符(串)将 list 串联成字符串</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">t = [<span class="string">'pinging'</span>, <span class="string">'for'</span>, <span class="string">'the'</span>, <span class="string">'fjords'</span>]</div><div class="line">delimiter = <span class="string">' '</span></div><div class="line"><span class="keyword">print</span> delimiter.join(t)</div><div class="line"></div><div class="line"><span class="comment">#结果：pinging for the fjords</span></div><div class="line"><span class="comment"># 如果不需要分隔符，第二行中delimiter复制为''空字符串即可</span></div></pre></td></tr></table></figure>
<h3 id="数组-增-删-改"><a href="#数组-增-删-改" class="headerlink" title="数组 增 删 改"></a>数组 增 删 改</h3><h4 id="增"><a href="#增" class="headerlink" title="增"></a>增</h4><p><strong>直接在后面添加一个元素</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">t = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</div><div class="line">t.append(<span class="string">'d'</span>)</div><div class="line"><span class="keyword">print</span> t</div><div class="line"></div><div class="line"><span class="comment">#结果：['a', 'b', 'c', 'd']</span></div></pre></td></tr></table></figure>
<p><strong>将一个数组遍历添加在后面</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">t = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</div><div class="line">t2 = [<span class="string">'e'</span> ,<span class="string">'f'</span>]</div><div class="line">t.extend(t2)</div><div class="line"><span class="keyword">print</span> t</div><div class="line"></div><div class="line"><span class="comment">#结果：['a', 'b', 'c', 'e', 'f']</span></div></pre></td></tr></table></figure>
<h4 id="删"><a href="#删" class="headerlink" title="删"></a>删</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 以下方法运算符都可以使用切片</span></div><div class="line"></div><div class="line">t = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</div><div class="line"><span class="comment"># del 运算符 如果不需要被删除的值，使用这个</span></div><div class="line"><span class="keyword">del</span> t[<span class="number">1</span>]</div><div class="line"></div><div class="line"><span class="comment"># pop 方法 改变列表并返回被删除的元素。如果不提供索引，删除并返回最后一个元素。</span></div><div class="line"><span class="keyword">print</span> t.pop(<span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="comment"># remove 方法 删除不知道索引的元素, 只删除第一个</span></div><div class="line">t.remove(<span class="string">'a'</span>)</div><div class="line"><span class="keyword">print</span> t</div></pre></td></tr></table></figure>
<h4 id="改"><a href="#改" class="headerlink" title="改"></a>改</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">t = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</div><div class="line">t[<span class="number">0</span>] = <span class="string">'c'</span></div><div class="line"><span class="keyword">print</span> t</div><div class="line"></div><div class="line"><span class="comment">#结果：['c', 'b', 'c']</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一些相关方法、函数、运算符的整理&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://CepheusSun.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://CepheusSun.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python SyntaxError Non-ASCII character \xe9 in file xxx</title>
    <link href="https://CepheusSun.github.io/python%20SyntaxError%20Non-ASCII%20character%20xe9%20in%20file%20xxx.html"/>
    <id>https://CepheusSun.github.io/python SyntaxError Non-ASCII character xe9 in file xxx.html</id>
    <published>2017-02-01T16:00:00.000Z</published>
    <updated>2017-05-19T02:35:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>错误类型:SyntaxError: Non-ASCII character <code>\xe9</code> in file xxx</p>
<a id="more"></a>
<p>最近写 python 代码的时候，简单的一下代码，确出现错误。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">points = int(raw_input(<span class="string">"领先的分数："</span>))</div><div class="line">is_in_control = raw_input(<span class="string">"是否领先队控球(Y／N：)"</span>)</div><div class="line">last_seconds = int(raw_input(<span class="string">"比赛剩余秒数："</span>))</div><div class="line"></div><div class="line">points -= <span class="number">3</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> is_in_control == <span class="string">'Y'</span>:</div><div class="line">    points += <span class="number">0.5</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    points -= <span class="number">0.5</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> points &lt; <span class="number">0</span>:</div><div class="line">    points = <span class="number">0</span></div><div class="line"></div><div class="line"></div><div class="line">points = points ** <span class="number">2</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> points &gt; last_seconds:</div><div class="line">    <span class="keyword">print</span> <span class="string">"safe"</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span>  <span class="string">"unsafe"</span></div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SyntaxError: Non-ASCII character &apos;\xe9&apos; in file /Users/programersunny/PycharmProjects/pythonDemo/hello on line 58, but no encoding declared; see http://www.python.org/peps/pep-0263.html for details</div></pre></td></tr></table></figure>
<p>打开 URL 阅读了一下，找到原因：</p>
<blockquote>
<p>Python will default to ASCII as standard encoding if no other encoding hints are given.</p>
</blockquote>
<p>Python的默认编码文件是用的ASCII码，你将文件存成了UTF-8也没用。</p>
<p>解决办法很简单：</p>
<p>只要在文件开头加入<code># -*- coding: UTF-8 —</code>或者<code>#coding=utf-8</code> 就行了。</p>
<p>注意，这两行代码必须添加在<code>.py</code>文件的第一行或者第二行。如果在第三行以及以上，都没有效果，这个在这个网址上也有描述</p>
<blockquote>
<p>To define a source code encoding, a magic comment must be placed into the source files either as first or second line in the file</p>
</blockquote>
<p>翻译一下：</p>
<blockquote>
<p>为了定义源码的编码格式，一个神奇的注释需要被添加到源文件的第一行或者第二行中。</p>
</blockquote>
<p>神奇的注释已经在上文提到了。</p>
<p><a href="https://www.python.org/dev/peps/pep-0263/">上文提到的URL地址</a></p>
<p>纪念一下自己在 python 中遇到的第一个小坑。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;错误类型:SyntaxError: Non-ASCII character &lt;code&gt;\xe9&lt;/code&gt; in file xxx&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://CepheusSun.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://CepheusSun.github.io/tags/python/"/>
    
  </entry>
  
</feed>
