<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CepheusSun的博客</title>
  <subtitle>CepheusSun的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://CepheusSun.github.io/"/>
  <updated>2017-03-10T01:54:02.000Z</updated>
  <id>https://CepheusSun.github.io/</id>
  
  <author>
    <name>CepheusSun</name>
    <email>cd_sunyang@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python 爬虫之一 &quot;Requests 库学习&quot;</title>
    <link href="https://CepheusSun.github.io/2017/03/07/Requests%20%E5%BA%93/"/>
    <id>https://CepheusSun.github.io/2017/03/07/Requests 库/</id>
    <published>2017-03-06T16:00:00.000Z</published>
    <updated>2017-03-10T01:54:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>这个系列的文章是用来记录我学习 python 爬虫的。这是第一篇。</p>
<a id="more"></a>
<h2 id="安装-requests-库"><a href="#安装-requests-库" class="headerlink" title="安装 requests 库"></a>安装 requests 库</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo pip install requests</div></pre></td></tr></table></figure>
<h2 id="验证安装是否成功"><a href="#验证安装是否成功" class="headerlink" title="验证安装是否成功"></a>验证安装是否成功</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ python</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment">#import requests</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(<span class="string">"http://www.baidu.com"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r.status_code</div><div class="line"><span class="number">200</span></div><div class="line">&gt;&gt;&gt;r.encoding = <span class="string">'utf-8'</span></div><div class="line">&gt;&gt;&gt;r.text</div></pre></td></tr></table></figure>
<h3 id="Requests-库的主要方法"><a href="#Requests-库的主要方法" class="headerlink" title="Requests 库的主要方法"></a>Requests 库的主要方法</h3><ul>
<li>requests.request()<blockquote>
<p>构造一个请求,支撑一下各方法的基础方法</p>
</blockquote>
</li>
<li>requests.get()<blockquote>
<p>获取HTML网页的主要方法,对应HTTP的GET</p>
</blockquote>
</li>
<li>requests.head()<blockquote>
<p>获取HTML网页头信息的方法,对应HTTP的HEAD</p>
</blockquote>
</li>
<li>requests.post()<blockquote>
<p>向HTML网页提交POST请求的方法,对应HTTP的POST</p>
</blockquote>
</li>
<li>requests.put()<blockquote>
<p>向HTML网页提交PUT请求的方法,对应HTTP的PUT</p>
</blockquote>
</li>
<li>requests.patch()<blockquote>
<p>向HTML网页提交局部修改请求,对应HTTP的POST</p>
</blockquote>
</li>
<li>requests.delete()<blockquote>
<p>向HTML网页提交删除请求,对应HTTP的POST</p>
</blockquote>
</li>
</ul>
<h3 id="Reuqest-最重要的两个对象"><a href="#Reuqest-最重要的两个对象" class="headerlink" title="Reuqest 最重要的两个对象"></a>Reuqest 最重要的两个对象</h3><h4 id="Request-对象"><a href="#Request-对象" class="headerlink" title="Request 对象"></a>Request 对象</h4><blockquote>
</blockquote>
<h4 id="Response-对象"><a href="#Response-对象" class="headerlink" title="Response 对象"></a>Response 对象</h4><blockquote>
<p>包含了爬虫返回的全部内容</p>
</blockquote>
<ul>
<li>r.status_code; 状态码,200表示成功,404表示失败</li>
<li>r.text; HTTP响应内容的字符串形式,即, URL 对应的页面内容</li>
<li><p>r.encoding; 从 HTTP header 中猜测的响应内容编码方式</p>
<blockquote>
<p>如果 header 中不存在 charset, 则认为编码是,ISO-8859-1</p>
</blockquote>
</li>
<li>r.apparent_encoding;从内容中分析出的响应内容编码方式(备选编码方式)</li>
<li>r.content; HTTP 响应内容的二进制形式</li>
</ul>
<h3 id="爬取网页的通用代码框架"><a href="#爬取网页的通用代码框架" class="headerlink" title="爬取网页的通用代码框架"></a>爬取网页的通用代码框架</h3><h4 id="Request-的异常"><a href="#Request-的异常" class="headerlink" title="Request 的异常"></a>Request 的异常</h4><ul>
<li>request.ConnectionError; 网络连接错误异常，如DNS查询失败，拒绝连接定</li>
<li>request.HTTPError; HTTP错误异常</li>
<li>request.URLRequired; URL 缺失异常</li>
<li>request.TooManyRedirects; 超过最大重定向次数,长生重定向异常</li>
<li>request.ConnectTimeout;链接远程服务器超时异常</li>
<li>requests.Timeout;请求URL超时，产生超时异常</li>
</ul>
<p>r.raise_for_status(); 如果不是200,产生已成requests.HTTPError</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -- coding: UTF-8 --</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span><span class="params">(url)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        r = requests.get(url, timeout=<span class="number">30</span>)</div><div class="line">        r.raise_for_status()</div><div class="line">        <span class="comment"># 如果状态不是200， 引发HTTPError异常</span></div><div class="line">        r.encoding = r.apparent_encoding</div><div class="line">        <span class="keyword">return</span> r.text</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">"产生异常"</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    url = <span class="string">"http://CepheusSun.com"</span></div><div class="line">    print(getHTMLText(url))</div></pre></td></tr></table></figure>
<center>通用代码框架</center>

<h4 id="HTTP-协议"><a href="#HTTP-协议" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h4><p>HTTP, Hypertext Transfer Protocol, 超文本传输协议。</p>
<p>HTTP 是一个基于”请求与响应”模式的、无状态的应用层协议。</p>
<p>HTTP 协议采用 URL 作为定位网络资源的标识。</p>
<p>URL格式: <a href="http://host[:port][path">http://host[:port][path</a>]</p>
<ul>
<li>host:合法的 Internet 主机域名或者 IP 地址</li>
<li>port:端口号,缺省端口为80</li>
<li>path:请求资源的路径</li>
</ul>
<p>URL 是通过 HTTP 协议存取资源的 Internet 路径, 一个 URL 对应一个数据资源。</p>
<p>HTTP 协议对资源的操作</p>
<p><strong>GET</strong>， 获取资源<br><strong>HEAD</strong>，获取资源头部信息<br><strong>POST</strong>，向URL位置的资源后附加新的数据<br><strong>PUT</strong>，储存一个资源，覆盖原来URL的资源<br><strong>PATCH</strong>，对原来的资源，进行局部更新<br><strong>DELETE</strong>，删除</p>
<h4 id="requests-request-method-url-kwargs"><a href="#requests-request-method-url-kwargs" class="headerlink" title="requests.request(method, url, **kwargs)"></a>requests.request(<code>method</code>, <code>url</code>, <code>**kwargs</code>)</h4><p>method: 请求方式,对应get/put/post等7种<br>url: 请求地址<br><code>**warrgs</code> 控制访问的参数，一共13个</p>
<ul>
<li><code>params</code>: 字典或字节序列，作为参数增加到url中</li>
<li><code>data</code>: 字典、字节序列或者文件对象，作为 Request 的内容</li>
<li><code>json</code>: JSON 格式的数据,作为 Request 的内容</li>
<li><code>headers</code>: 字典,HTTP定制头</li>
<li><code>cookies</code>:字典或CookieeJar, request中的cookie</li>
<li><code>auth</code>: 元组,支持HTTP认证功能</li>
<li><code>files</code>: 字典类型,传输文件</li>
<li><code>timeout</code>: 设定的超时时间，单位秒</li>
<li><p><code>proxies</code>: 字典类型,设定访问代理服务器,可以增加登录认证 </p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pxs = &#123;<span class="string">'http'</span>:<span class="string">'http//balabala'</span>,</div><div class="line"><span class="string">'https'</span>:<span class="string">'https"//balabala'</span></div><div class="line">&#125;</div><div class="line">r= requests.request(<span class="string">'GET'</span>,<span class="string">'http://www.baidu.com'</span>,proxies=pxs)</div></pre></td></tr></table></figure>
</li>
<li><p><code>allow_redirects</code>: True/False,默认True,重定向开关</p>
</li>
<li><code>stream</code>:True/False,默认True,获取内容立即下载开关</li>
<li><code>verify</code>:True/False,默认True,，认证 SSL 证书开关</li>
<li><code>cert</code>:本地SSL证书路径</li>
</ul>
<h3 id="网络爬虫的类型"><a href="#网络爬虫的类型" class="headerlink" title="网络爬虫的类型"></a>网络爬虫的类型</h3><p>按照尺寸区别</p>
<p>爬取网页，玩转网页。小规模,数据量小，爬取速度不敏感 requests 。</p>
<p>爬取网站，爬取系列网站. 中规模，数据规模较大，爬取速度敏感 Scrapy 库</p>
<p>爬取全网。大规模,搜索引擎，爬取速度关键,只能定制开发</p>
<h3 id="反爬虫"><a href="#反爬虫" class="headerlink" title="反爬虫"></a>反爬虫</h3><h4 id="来源审查-判断-User-Agent-进行限制"><a href="#来源审查-判断-User-Agent-进行限制" class="headerlink" title="来源审查: 判断 User-Agent 进行限制"></a>来源审查: 判断 User-Agent 进行限制</h4><blockquote>
<p>检查来访 HTTP 协议头的 User-Agent 域，只响应浏览器或者友好爬虫的访问。</p>
</blockquote>
<h4 id="发布公告-Robots-协议"><a href="#发布公告-Robots-协议" class="headerlink" title="发布公告 Robots 协议"></a>发布公告 Robots 协议</h4><blockquote>
<p>告知所有爬虫网站的爬取策略,要求爬虫遵守</p>
</blockquote>
<h3 id="Robots-协议"><a href="#Robots-协议" class="headerlink" title="Robots 协议"></a>Robots 协议</h3><p>Robots Exclusion Standard 网络爬虫排除标准</p>
<p>作用: 网站告知网络爬虫哪些页面可以抓取,哪些不行。<br>形式: 在网站根目录下的 robots.txt 文件<br>使用:</p>
<ul>
<li>网络爬虫：自动或者人工识别robots.txt， 再进行内容爬取</li>
<li>约束性: Robots 协议是建议但非约束性,网络爬虫可以不遵守，但是存在法律风险</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个系列的文章是用来记录我学习 python 爬虫的。这是第一篇。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://CepheusSun.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://CepheusSun.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>iOS面试集锦&amp;2017年02月22日01</title>
    <link href="https://CepheusSun.github.io/2017/02/22/interview07022201/"/>
    <id>https://CepheusSun.github.io/2017/02/22/interview07022201/</id>
    <published>2017-02-21T16:00:00.000Z</published>
    <updated>2017-03-17T17:00:38.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><code>id</code> 和 <code>instancetype</code> 的区别?</li>
<li>有方法查看当前系统内存使用的情况吗？</li>
<li>为什么 NotificationCenter 要 removeObserver? 如何实现自动 remove？</li>
<li>iOS的沙盒目录结构是怎样的？ App Bundle 里面都有什么？</li>
<li>简单描述一下客户端的缓存机制？</li>
</ol>
<p>注意： 以后的更新全部放在 GitHub 博客不再继续添加了。 毕竟好多内容放在这里也没有什么意义。<br><a id="more"></a></p>
<p>##2017-02-22</p>
<p>#####1. <code>id</code> 和 <code>instancetype</code> 的区别?</p>
<ol>
<li><p>在 ARC(Auto Reference Count)环境下:</p>
<pre><code>instancetype 用来在编译期确定实例的类型,而使用 id 的话,编译器不检查类型, 运行时检查类型.
</code></pre><p>在 MRC(Manual Reference Count)环境下:</p>
<pre><code>instancetype 和 id 一样,不做具体类型检查
</code></pre></li>
<li><p>id 可以作为方法的参数,但 instancetype 不可以<br>instancetype 只适用于初始化方法和便利构造器的返回值类型</p>
</li>
</ol>
<p>#####2. 有方法查看当前系统内存使用的情况吗？<br>一般我上手新的项目,检查内存问题三部曲;</p>
<ol>
<li>静态分析, 初步了解代码不规范的地方,或者是一些内存泄漏问题。</li>
<li>instrument, 初略的定位我们在什么地方发生了内存泄漏。</li>
<li>代码测试内存泄漏, 观察对象的生成和销毁是否配对。使用MLeaksFinder来配合检查</li>
</ol>
<ul>
<li>两个对象互相持有，主要是 delegate 使用 weak 属性, 在 iOS8 上系统 delegate 使用的是 assign 这会带来一些问题,踩过坑的老司机可以提一下。</li>
<li>有时候需要使用 removeFromSuperView 来释放, a 持有了 b ， b 被 add 到了 c 上, 而在程序设计中b 的生命周期应该和 a 相同, 这个时候使用 self.b = nil 并不会吧 b 释放, 我们应该在之前加上 <code>[b removeFromSuperView]</code></li>
</ul>
<p>#####3. 为什么 NotificationCenter 要 removeObserver? 如何实现自动 remove？</p>
<ul>
<li>如果不移除，万一注册通知的类被销毁之后又发送了通知, 程序会 crash。 因为野指针。</li>
<li>实现自动 remove;通过自动释放机制, 通过动态属性将 remove 转移给第三者,解除耦合,达到自动实现 remove 。</li>
</ul>
<p>#####4. iOS的沙盒目录结构是怎样的？ App Bundle 里面都有什么？</p>
<ol>
<li>沙盒结构<ul>
<li>Application: 存放程序源文件, 上架前经过数字签名,上架后不可修改</li>
<li>Documents: 常用目录, iCloud 备份目录,存放数据,这里不能缓存文件,否则上架不被通过</li>
<li>Library<ul>
<li>Caches: 存放体积大又不需要备份的数据, SDWebImage 就是这个</li>
<li>Preference: 设置目录, iCloud会备份设置信息。</li>
<li>tmp: 存放临时文件,不会被备份,而且这个文件下的数据有可能随时被清除</li>
</ul>
</li>
</ul>
</li>
<li>App Bundle<ul>
<li>Info.plist: 文件的配置信息,系统依赖次文件获取应用程序的相关信息。</li>
<li>可执行文件: 此文件包含应用程序的入口和通过静态链接到应用程序 target 的代码。</li>
<li>资源文件: 图片声音</li>
<li>其他: 可以潜入定制的数据资源。</li>
</ul>
</li>
</ol>
<h5 id="5-简单描述一下客户端的缓存机制？"><a href="#5-简单描述一下客户端的缓存机制？" class="headerlink" title="5.简单描述一下客户端的缓存机制？"></a>5.简单描述一下客户端的缓存机制？</h5><ul>
<li>缓存可以分为:<ul>
<li>内存数据缓存</li>
<li>数据库缓存</li>
<li>文件缓存</li>
</ul>
</li>
<li>每次想获取数据的时候<ol>
<li>检查内存中有无缓存</li>
<li>检查本地有无缓存(数据库\文件)</li>
<li>发起请求</li>
<li>将服务器返回的数据进行缓存(内存数据库文件)</li>
</ol>
</li>
</ul>
<pre><code>---
</code></pre><h5 id="写在后面的话"><a href="#写在后面的话" class="headerlink" title="写在后面的话"></a>写在后面的话</h5><p>这个系列所有的文章都是在一个QQ群里面跟小伙伴们讨论出来的,每个 topic 都已经放在了 GitHub 的一个仓库中 <a href="https://github.com/GetOfferSoldier/Objective-C"><strong>这是地址</strong></a>。 所有内容的更新的将在这个仓库中进行,在博客中将不再进行更新。有任何问题，都可以在这个仓库中给我们提 issue 或者 pull request.</p>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;code&gt;id&lt;/code&gt; 和 &lt;code&gt;instancetype&lt;/code&gt; 的区别?&lt;/li&gt;
&lt;li&gt;有方法查看当前系统内存使用的情况吗？&lt;/li&gt;
&lt;li&gt;为什么 NotificationCenter 要 removeObserver? 如何实现自动 remove？&lt;/li&gt;
&lt;li&gt;iOS的沙盒目录结构是怎样的？ App Bundle 里面都有什么？&lt;/li&gt;
&lt;li&gt;简单描述一下客户端的缓存机制？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意： 以后的更新全部放在 GitHub 博客不再继续添加了。 毕竟好多内容放在这里也没有什么意义。&lt;br&gt;
    
    </summary>
    
      <category term="iOS面试集锦" scheme="https://CepheusSun.github.io/categories/iOS%E9%9D%A2%E8%AF%95%E9%9B%86%E9%94%A6/"/>
    
    
      <category term="iOS面试集锦" scheme="https://CepheusSun.github.io/tags/iOS%E9%9D%A2%E8%AF%95%E9%9B%86%E9%94%A6/"/>
    
  </entry>
  
  <entry>
    <title>iOS面试集锦&amp;2017年02月21日01</title>
    <link href="https://CepheusSun.github.io/2017/02/21/interview07022101/"/>
    <id>https://CepheusSun.github.io/2017/02/21/interview07022101/</id>
    <published>2017-02-20T16:00:00.000Z</published>
    <updated>2017-02-21T16:02:25.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>写出中序遍历二叉树的算法(不限编程语言，已知 TreeRoot 为二叉树的根)</li>
<li>快速排序，归并排序的时间复杂度分别是什么？</li>
<li>UITableViewCell 可重用机制是什么?有什么要注意的地方?</li>
<li>OC 中的 @property 和 @synthesize 有什么用？</li>
<li>OC有没有重载(overload)和重写(overwrite)？有的话请举个例子。</li>
<li>列举出 iOS 开发中三种最常出现的循环引用的场景。</li>
<li>MVC 模式具体指什么？iOS现在流行的 MVVM 是什么？</li>
<li>iOS 中设计金钱计算和比较时，用数值应该用哪个类型来处理？</li>
<li>iOS 上触摸事件的视图检测和事件传递过程是怎样的？  </li>
<li>写一个折半查找或者快速排序</li>
</ol>
<a id="more"></a>
<p>#####1.写出中序遍历二叉树的算法(不限编程语言，已知 TreeRoot 为二叉树的根)。  </p>
<pre><code>最近在学 Python 所以整理了一个 Python 版的
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -- coding: UTF-8 --</span></div><div class="line"><span class="comment"># @Date    : 2017-02-21</span></div><div class="line"><span class="comment"># @Author  : CepheusSun</span></div><div class="line"><span class="comment"># @Version : python 2.7</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tree</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data, left, right)</span>:</span></div><div class="line">        self.data = data</div><div class="line">        self.left = left</div><div class="line">        self.right = right</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">in_visit</span><span class="params">(tree)</span>:</span></div><div class="line">    <span class="string">"""递归中序遍历"""</span></div><div class="line">    <span class="keyword">if</span> tree:</div><div class="line">        in_visit(tree.left)</div><div class="line">        <span class="keyword">print</span> (tree.data)</div><div class="line">        in_visit(tree.right)</div><div class="line">        </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">in_stack</span><span class="params">(tree)</span>:</span></div><div class="line">    <span class="string">"""堆栈中序遍历"""</span></div><div class="line">    <span class="keyword">if</span> tree:</div><div class="line">        my_stack = []</div><div class="line">        node = tree</div><div class="line">        <span class="keyword">while</span> node <span class="keyword">or</span> my_stack:</div><div class="line">            <span class="keyword">while</span> node:</div><div class="line">                my_stack.append(node)</div><div class="line">                node = node.left</div><div class="line">            node = my_stack.pop()</div><div class="line">            print(node.data)</div><div class="line">            node = node.right</div><div class="line"></div><div class="line">            <span class="keyword">print</span> my_stack2.pop().data</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    node1 = Tree(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>)</div><div class="line">    node2 = Tree(<span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>)</div><div class="line">    node3 = Tree(<span class="number">3</span>, node1, node2)</div><div class="line">    node4 = Tree(<span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>)</div><div class="line">    node5 = Tree(<span class="number">5</span>, node4, node3)</div><div class="line">    print(<span class="string">"the post_visit is ..."</span>)</div><div class="line">    post_visit(node5)</div><div class="line">    post_stack(node5)</div><div class="line">    print(<span class="string">"the pre_visit is ..."</span>)</div><div class="line">    pre_visit(node5)</div><div class="line">    pre_stack(node5)</div><div class="line">    print(<span class="string">"the in_visit is ..."</span>)</div><div class="line">    in_visit(node5)</div><div class="line">    in_stack(node5)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure>
<h5 id="2-快速排序，归并排序的时间复杂度分别是什么？"><a href="#2-快速排序，归并排序的时间复杂度分别是什么？" class="headerlink" title="2.快速排序，归并排序的时间复杂度分别是什么？"></a>2.快速排序，归并排序的时间复杂度分别是什么？</h5><ul>
<li>归并排序：稳定，时间复杂度 O(nlog n)</li>
<li>快速排序：不稳定，时间复杂度 最理想 O(nlogn) 最差时间O(n^2)</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -- coding: UTF-8 --</span></div><div class="line"><span class="comment"># @Date    : 2017-02-21</span></div><div class="line"><span class="comment"># @Author  : CepheusSun</span></div><div class="line"><span class="comment"># @Version : python 2.7</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(array, first_index, last_index)</span>:</span></div><div class="line">    <span class="string">"""快速排序"""</span></div><div class="line">    <span class="keyword">if</span> first_index &lt; last_index:</div><div class="line">        div_index = partition(array, first_index, last_index)</div><div class="line">        quick_sort(array, first_index, div_index)</div><div class="line">        quick_sort(array, div_index + <span class="number">1</span>, last_index)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(array, first_index, last_index)</span>:</span></div><div class="line">    i = first_index - <span class="number">1</span></div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(first_index, last_index):</div><div class="line">        <span class="keyword">if</span> array[j] &lt;= array[last_index]:</div><div class="line">            i += <span class="number">1</span></div><div class="line">            array[i], array[j] = array[j], array[i]</div><div class="line">    array[i + <span class="number">1</span>], array[last_index] = array[last_index], array[i + <span class="number">1</span>]</div><div class="line">    <span class="keyword">return</span> i</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(left, right)</span>:</span></div><div class="line">    i, j = <span class="number">0</span>, <span class="number">0</span></div><div class="line">    res = []</div><div class="line">    <span class="keyword">while</span> i &lt; len(left) <span class="keyword">and</span> j &lt; len(right):</div><div class="line">        <span class="keyword">if</span> left[i] &lt;= right[j]:</div><div class="line">            res.append(left[i])</div><div class="line">            i += <span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            res.append(right[j])</div><div class="line">            j += <span class="number">1</span></div><div class="line">    res += left[i:]</div><div class="line">    res += right[j:]</div><div class="line">    <span class="keyword">return</span> res</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span><span class="params">(array)</span>:</span></div><div class="line">    <span class="string">"""并归排序"""</span></div><div class="line">    <span class="keyword">if</span> len(array) &lt;= <span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> array</div><div class="line">    num = len(array) / <span class="number">2</span></div><div class="line">    left = merge_sort(array[:num])</div><div class="line">    right = merge_sort(array[num:])</div><div class="line">    <span class="keyword">return</span> merge(left, right)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    array = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">76</span>, <span class="number">5</span>, <span class="number">567</span>, <span class="number">54</span>, <span class="number">6</span>, <span class="number">54</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">0</span>]</div><div class="line">    print(<span class="string">"initial array : \n"</span>, array)</div><div class="line">    print(<span class="string">"merge sort result: \n"</span>, merge_sort(array))</div><div class="line">    quick_sort(array, <span class="number">0</span>, len(array) - <span class="number">1</span>)</div><div class="line">    print(<span class="string">"result array :\n"</span>, array)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div><div class="line"></div><div class="line">``` </div><div class="line">    </div><div class="line"><span class="comment">##### 3.UITableViewCell 可重用机制是什么?有什么要注意的地方?</span></div><div class="line"></div><div class="line">UITableView 通过重用单元格来达到节省内存的目的：通过为每个单元格指定一个重用标识符，即指定来单元格的种类，以及当单元格滚出屏幕时，允许恢复单元格以便重用。对于不同种类的单元格使用不同的ID，对于简单的表格，一个标识符就够了。</div><div class="line"></div><div class="line">需要注意的地方：</div><div class="line">    取出来的cell是有可能已经捆绑过数据或者加过子视图的，如果有必要，要清除需要用与显示的数据和remove掉add过的子视图。不然会造成错乱的情况</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">##### 4.OC 中的 @property 和 @synthesize 有什么用？</span></div><div class="line"></div><div class="line">答：</div><div class="line">iOS2<span class="number">.0</span> Apple引入 `@property` `@synthesize` 概念，两者组合使用可以自动生成 `seter` `geter`方法，iOS4<span class="number">.0</span>以后只需要 `@property` 即可实现 自动生成 `seter` `geter`方法。</div></pre></td></tr></table></figure>
<p>//setter</p>
<ul>
<li>(void)setObjStr:(NSString *)objStr {<br>   if (_ objStr != objStr) {<pre><code>[_objStr release];
 _objStr = [objStr copy];
</code></pre>   }<br>}<br>//getter</li>
<li>(NSString *)objStr {<br>   return _objStr;<br>}<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">以上代码等价于</div></pre></td></tr></table></figure>
</li>
</ul>
<p>//iOS2.0-iOS4.0<br>@interface Obj : NSObject<br>@property (nonatomic, copy) NSString *objStr;<br>@end</p>
<p>@implementation Object<br>@synthesize objStr = _ objStr;<br>@end<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iOS4.0及以后</div></pre></td></tr></table></figure></p>
<p>@interface Obj : NSObject<br>@property (nonatomic, copy) NSString *objStr;<br>@end<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">##### 5.OC有没有重载(overload)和重写(overwrite)？有的话请举个例子。</div><div class="line"></div><div class="line">答：</div><div class="line">OC 语言不支持重载</div><div class="line"></div><div class="line">```oc</div><div class="line">-(void)doSth:(NSInteger)integer;</div><div class="line">-(void)doSth:(NSString *)str; </div><div class="line">//对Objective-C而言是一样的，都叫方法doSth: 同时定义实现这两个方法是无法编译通过的。 若要达到类似重载的效果，可以这样跟不同参数：</div><div class="line">-(void)doSthWithInt:(NSInteger)integer;</div><div class="line">-(void)doSthWithStr:(NSString *)str</div></pre></td></tr></table></figure></p>
<p>OC 支持重写</p>
<pre><code>子类重写父类方法
</code></pre><h5 id="6-列举出-iOS-开发中三种最常出现的循环引用的场景。"><a href="#6-列举出-iOS-开发中三种最常出现的循环引用的场景。" class="headerlink" title="6.列举出 iOS 开发中三种最常出现的循环引用的场景。"></a>6.列举出 iOS 开发中三种最常出现的循环引用的场景。</h5><p>答：</p>
<ul>
<li>delegate 被强引用了，代理应该使用 weak (拓展 weak 干了啥使自己可以防止循环的出现)  </li>
<li>使用 block 的时候，注意是否出现互相持有。  </li>
<li>使用 NSTimer 的时候，我们可能会使<code>+scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:</code> 这个方法在建立的时候需要指定 target ，会被 timer retain 一份。因为 timer 还在一直执行，就会导致无法运行 dealloc的方法。正确的做法是在 viewDidDisappear: 的时候停止timer </li>
</ul>
<h5 id="7-MVC-模式具体指什么？iOS现在流行的-MVVM-是什么？"><a href="#7-MVC-模式具体指什么？iOS现在流行的-MVVM-是什么？" class="headerlink" title="7.MVC 模式具体指什么？iOS现在流行的 MVVM 是什么？"></a>7.MVC 模式具体指什么？iOS现在流行的 MVVM 是什么？</h5><p>MVC：</p>
<pre><code>MVC模式考虑三种对象：模型对象、视图对象和控制器对象。 模型对象负责应用程序的数据和定义操作数据的逻辑； 视图对象知道如何显示应用程序的模型数据； 控制器对象是M与V之间的协调者。
</code></pre><p>MVVM：</p>
<pre><code>MVVM 把 View Controller 作为 View
View 和 Model 之间没有紧耦合
MVVM 是在 View 和 ViewModel 之间进行绑定。
什么是 ViewModel 呢？基本上来说，它是 View 和 View 状态的独立于     UIKit 外的一个呈现，ViewModel 调用 Model 中的的变化，根据 Model 的变化进行调整，并且通过 View 和 ViewModel 的绑定，同步调整 View。
</code></pre><h5 id="8-iOS-中设计金钱计算和比较时，用数值应该用哪个类型来处理？"><a href="#8-iOS-中设计金钱计算和比较时，用数值应该用哪个类型来处理？" class="headerlink" title="8.iOS 中设计金钱计算和比较时，用数值应该用哪个类型来处理？"></a>8.iOS 中设计金钱计算和比较时，用数值应该用哪个类型来处理？</h5><ul>
<li><code>NSDecimalNumber</code> 继承于 <code>NSNumber</code>   </li>
<li><p><code>NSDecimalNumber</code> 包含  加减乘除，幂运算，指数运算，四舍五入，比较运算。  </p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line">	/** 示例 比较运算</div><div class="line">	NSOrderedAscending 升序</div><div class="line">	NSOrderedSame 相等</div><div class="line">	NSOrderedDescending 降序</div><div class="line">	- (NSComparisonResult)compare:(NSNumber *)decimalNumber;</div><div class="line">	*/</div><div class="line">	NSDecimalNumber *discount1 = [NSDecimalNumber decimalNumberWithString:@&quot;1.2&quot;];</div><div class="line">	NSDecimalNumber *discount2 = [NSDecimalNumber decimalNumberWithString:@&quot;1.3&quot;];</div><div class="line">	NSComparisonResult result = [discount1 compare:discount2];</div><div class="line">	if (result == NSOrderedAscending) &#123;</div><div class="line">	    NSLog(@&quot;1.2 &lt; 1.3&quot;);</div><div class="line">	&#125; else if (result == NSOrderedSame) &#123;</div><div class="line">	    NSLog(@&quot;1.2 == 1.3&quot;);</div><div class="line">	&#125; else if (result == NSOrderedDescending) &#123;</div><div class="line">	    NSLog(@&quot;1.2 &gt; 1.3&quot;);</div><div class="line">	&#125;</div><div class="line">	输出结果 1.2 &lt; 1.3</div><div class="line">	``` </div><div class="line"></div><div class="line">##### 9.iOS 上触摸事件的视图检测和事件传递过程是怎样的？  </div><div class="line"></div><div class="line">* 发生触摸事件后，系统会将该事件加入到一个由UIApplication管理的事件队列中。(为什么是队列而不是栈？因为队列的特定是先进先出，先产生的事件先处理才符合常理，所以把事件添加到队列。)</div><div class="line"></div><div class="line">* UIApplication会从事件队列中取出最前面的事件，并将事件分发下去以便处理，通常，先发送事件给应用程序的主窗口（keyWindow）。</div><div class="line"></div><div class="line">* 主窗口会在视图层次结构中找到一个最合适的视图来处理触摸事件，这也是整个事件处理过程的第一步。</div><div class="line">找到合适的视图控件后，就会调用视图控件的touches方法来作具体的事件处理。</div><div class="line"></div><div class="line">##### 10.写一个折半查找或者快速排序</div><div class="line"></div><div class="line">    用 Python写了一个二分查找</div><div class="line">    </div><div class="line">```python</div><div class="line"># -- coding: UTF-8 --</div><div class="line"># @Date    : 2017-02-21</div><div class="line"># @Author  : CepheusSun</div><div class="line"># @Version : python 2.7</div><div class="line"></div><div class="line"></div><div class="line">def in_bisect(word_list, word):</div><div class="line">    &quot;&quot;&quot;check weather a word is in a list using bisection search.</div><div class="line">    Precondition: the words in the list are sorted</div><div class="line"></div><div class="line">    :param word_list: list of strings</div><div class="line">    :param word: string</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    if len(word_list) == 0:</div><div class="line">        return False</div><div class="line"></div><div class="line">    # 结果四舍五入</div><div class="line">    i = len(word_list) // 2</div><div class="line">    if word_list[i] == word:</div><div class="line">        return True</div><div class="line"></div><div class="line">    if word_list[i] &gt; word:</div><div class="line">        # search the first half</div><div class="line">        return in_bisect(word_list[:i], word)</div><div class="line">    else:</div><div class="line">        # search the second half</div><div class="line">        return in_bisect(word_list[i + 1:], word)</div><div class="line"></div><div class="line"></div><div class="line">def main():</div><div class="line">    array = [&apos;1&apos;, &apos;asf&apos;, &apos;sf2&apos;, &apos;df1&apos;, &apos;2das&apos;, &apos;5asdfd&apos;, &apos;0sadf&apos;,</div><div class="line">            &apos;2ge&apos;, &apos;efc2&apos;, &apos;1eds&apos;, &apos;2ef&apos;, &apos;2apple&apos;, &apos;apple&apos;, &apos;orange&apos;]</div><div class="line">    print(in_bisect(array, &apos;1&apos;))</div><div class="line">    print(in_bisect(array, &apos;111&apos;))</div><div class="line"></div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    main()</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>参考资料</strong><br><a href="http://blog.sina.com.cn/s/blog_771849d301010ta0.html">资料1</a></p>
<p><a href="https://my.oschina.net/iamzkt/blog/126503">Objective-C 之 @property和@synthesize</a>  </p>
<p><a href="https://www.pupboss.com/property-and-synthesize/">回炉篇之（一）– @property和@synthesize</a>  </p>
<p><a href="http://arthurchen.blog.51cto.com/2483760/761426">iOS开发：Objective-C精确的货币计算</a> </p>
<p><a href="http://www.jianshu.com/p/4703d704c953">‘NSDecimalNumber–十进制数’使用方法(带例子)</a></p>
<p><a href="https://yq.aliyun.com/wenzhang/show_41715">objective c-OC中有方法重载吗？具体是怎么样？</a></p>
<p>think python</p>
<hr>
<h5 id="写在后面的话"><a href="#写在后面的话" class="headerlink" title="写在后面的话"></a>写在后面的话</h5><p>这个系列所有的文章都是在一个QQ群里面跟小伙伴们讨论出来的,每个 topic 都已经放在了 GitHub 的一个仓库中 <a href="https://github.com/GetOfferSoldier/Objective-C"><strong>这是地址</strong></a>。 所有内容的更新的将在这个仓库中进行,在博客中将不再进行更新。有任何问题，都可以在这个仓库中给我们提 issue 或者 pull request.</p>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;写出中序遍历二叉树的算法(不限编程语言，已知 TreeRoot 为二叉树的根)&lt;/li&gt;
&lt;li&gt;快速排序，归并排序的时间复杂度分别是什么？&lt;/li&gt;
&lt;li&gt;UITableViewCell 可重用机制是什么?有什么要注意的地方?&lt;/li&gt;
&lt;li&gt;OC 中的 @property 和 @synthesize 有什么用？&lt;/li&gt;
&lt;li&gt;OC有没有重载(overload)和重写(overwrite)？有的话请举个例子。&lt;/li&gt;
&lt;li&gt;列举出 iOS 开发中三种最常出现的循环引用的场景。&lt;/li&gt;
&lt;li&gt;MVC 模式具体指什么？iOS现在流行的 MVVM 是什么？&lt;/li&gt;
&lt;li&gt;iOS 中设计金钱计算和比较时，用数值应该用哪个类型来处理？&lt;/li&gt;
&lt;li&gt;iOS 上触摸事件的视图检测和事件传递过程是怎样的？  &lt;/li&gt;
&lt;li&gt;写一个折半查找或者快速排序&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="iOS面试集锦" scheme="https://CepheusSun.github.io/categories/iOS%E9%9D%A2%E8%AF%95%E9%9B%86%E9%94%A6/"/>
    
    
      <category term="iOS面试集锦" scheme="https://CepheusSun.github.io/tags/iOS%E9%9D%A2%E8%AF%95%E9%9B%86%E9%94%A6/"/>
    
  </entry>
  
  <entry>
    <title>iOS面试集锦&amp;2017年02月20日01</title>
    <link href="https://CepheusSun.github.io/2017/02/20/interview07022001/"/>
    <id>https://CepheusSun.github.io/2017/02/20/interview07022001/</id>
    <published>2017-02-19T16:00:00.000Z</published>
    <updated>2017-02-22T17:09:41.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>对内存管理的理解。</li>
<li>类别的作用</li>
<li>点击屏幕上的按钮，系统做了什么？</li>
</ol>
<a id="more"></a>
<p>##2017-02-20  Question<br>Question 1.内存管理理解不正确的是<br>A 程序A里有一段内存被成功申请完成之后，内存计数器就从0变为1 (这个过程是alloc);<br>B 程序B里要使用已存在内存，那么内存计数器从1变为2 (这个过程是retain或者copy);<br>C 紧接着程序A不需要这个内存了，那么程序A就把这个内存计数器减1 (这个过程是release);<br>D 当系统发现这个内存计数器变为小于等于0，那么就调用垃圾回收程序把这段内存回收(这个过程是dealloc)；</p>
<p>Question 2.类别的作用不正确的是<br>A 将类的实现分散到多个不同文件或多个不同框架中。<br>B 创建对私有方法的前向引用。<br>C 向对象添加非正式协议。 继承可以增加，修改或者删除方法。<br>D 不能添加属性  </p>
<p>Question 3.点击屏幕上的按钮，系统做了什么？  </p>
<h2 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h2><p>Answer 1. B  使用并不会增加引用技术，持有才会。<br>Answer 2. D  </p>
<pre><code>class-continuation分类是唯一能给添加属性的分类。而所谓的关联对象，我在52个方法中找到了这样一句话：
    * “定义关联对象时可以指定内存管理语义，用以模仿定义属性时所采用的“拥有”和“非拥有关系””
可见，关连对象跟属性是两个不同的概念，不能混为一谈。

类别的三个作用：
    * 可以将类的实现分散到多个不同文件或多个不同框架中，方便代码管理。
    * 创建对私有方法的前向引用。比如在别人的类或者框架中有一个方法的是没有说明的，这时候通过类别声明这个方法，就可以在不破坏原来框架的情况下，使用到这个方法。
    * 向对象添加非正式协议。
</code></pre><p>Answer 3.   </p>
<ul>
<li>触摸事件的传递是从父空间传递到子控件，如果父空间不能接收触摸事件，那么子控件就不能接收触摸事件  </li>
<li>发生触摸事件后，系统会将该事件加入到一个由UIApplication管理的事件队列中。(为什么是队列而不是栈？因为队列的特定是先进先出，先产生的事件先处理才符合常理，所以把事件添加到队列。)  </li>
<li>UIApplication会从事件队列中取出最前面的事件，并将事件分发下去以便处理，通常，先发送事件给应用程序的主窗口（keyWindow）。  </li>
<li>主窗口会在视图层次结构中找到一个最合适的视图来处理触摸事件，这也是整个事件处理过程的第一步。<br>找到合适的视图控件后，就会调用视图控件的touches方法来作具体的事件处理。  </li>
</ul>
<blockquote>
<p>参考<br><a href="http://www.cnblogs.com/LiLihongqiang/p/5645907.html">http://www.cnblogs.com/LiLihongqiang/p/5645907.html</a><br><a href="http://www.infocool.net/kb/IOS/201610/200104.html">http://www.infocool.net/kb/IOS/201610/200104.html</a><br><a href="http://www.cocoachina.com/ios/20160113/14896.html">http://www.cocoachina.com/ios/20160113/14896.html</a><br><a href="http://www.jianshu.com/p/2e074db792ba">http://www.jianshu.com/p/2e074db792ba</a>  </p>
</blockquote>
<hr>
<h5 id="写在后面的话"><a href="#写在后面的话" class="headerlink" title="写在后面的话"></a>写在后面的话</h5><p>这个系列所有的文章都是在一个QQ群里面跟小伙伴们讨论出来的,每个 topic 都已经放在了 GitHub 的一个仓库中 <a href="https://github.com/GetOfferSoldier/Objective-C"><strong>这是地址</strong></a>。 所有内容的更新的将在这个仓库中进行,在博客中将不再进行更新。有任何问题，都可以在这个仓库中给我们提 issue 或者 pull request.</p>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;对内存管理的理解。&lt;/li&gt;
&lt;li&gt;类别的作用&lt;/li&gt;
&lt;li&gt;点击屏幕上的按钮，系统做了什么？&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="iOS面试集锦" scheme="https://CepheusSun.github.io/categories/iOS%E9%9D%A2%E8%AF%95%E9%9B%86%E9%94%A6/"/>
    
    
      <category term="iOS面试集锦" scheme="https://CepheusSun.github.io/tags/iOS%E9%9D%A2%E8%AF%95%E9%9B%86%E9%94%A6/"/>
    
  </entry>
  
  <entry>
    <title>iOS面试集锦&amp;2017年02月19日01</title>
    <link href="https://CepheusSun.github.io/2017/02/19/interview07021901/"/>
    <id>https://CepheusSun.github.io/2017/02/19/interview07021901/</id>
    <published>2017-02-18T16:00:00.000Z</published>
    <updated>2017-02-21T16:04:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>按钮或者 View 在进行 frame 动画的时候，为什么点击 frame 动画的重点位置才能触发事件？如何在动画过程中响应事件？</p>
<a id="more"></a>  
<p>答：<br>① <del>动画开始后有两个图层：</del><br>（修改原因：不是动画开始后,而是 view 出现了的时候。只要 view 出现在试图上,他都具有这两个图层。）<br><strong>iOS 中对于 UIView 具有一个 CALayer 类的属性 layer 我们姑且叫他 rootLayer。而每一个 CALayer 都有两个属性：</strong><br><del>一个 <code>view.layer.presentationLayer</code> 用来显示动画（属性随动画过程慢慢改变)</del><br>（修改原因:感觉显示动画这个用法不大准确,我语文也不好😂）<br><strong>一个<code>resentationLayer</code> 指呈现图层,是模型图层的复制，他的属性值代表了在任何指定时刻当前的显示。所以在 UIView 没有出现的时候这个 view 的属性值为 nil， 出现之后无论 view 是否动画，这个值的内存地址每次打印都不一样。</strong></p>
<p><del>一个 <code>view.layer</code> 用来处理用户交互（动画一开始属性值立即改变到动画结束时的状态和位置)</del><br>(修改原因: CALayer 是不处理交互的,这一点可以从UIView有<code>userInteractionEnabled</code>这个属性，而CALayer没有可以看出,并且看 iOS-CoreAnimation这本书,这样使用 modelLayer 来描述更 MVC 一些)<br><strong>一个<code>modelLayer</code> 指模型层,在 view 显示出来的时候<code>view.layer</code> = <code>view.layer.presentationLayer.modelLayer</code> = <code>view.layer.view.layer.modelLayer</code>。 三者内存地址是一样的,保存实际的属性值。</strong></p>
<p><strong>最后总结：当一个图层的属性改变的时候，我们设置的属性并没有直接调用图层的外观，只是定义了图层动画结束之后将要变化的外观。</strong>具体关系见下图：</p>
<center><img src="http://ocg4av0wv.bkt.clouddn.com/layer%E7%9F%A5%E8%AF%86.png" alt=""><br>from《iOS-CoreAnimation》<br></center>

<p>② 要在移动动画的过程中处理 触摸可以重写 <code>UIView的hitTest</code> 方法<br>(总的来说，通过<code>view.layer.presentationLayer</code>的相关属性，就可以实现响应需求了，通过<code>touchbegan</code>判断用户点击的位置是否在<code>view.layer.presentationLayer.frame</code>之内，是《iOS—CoreAnimation》中另外一个实现方式)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">- (id)hitTest:(CGPoint)point withEvent:(UIEvent *)event &#123;</div><div class="line">    NSArray *subViews = self.subviews;</div><div class="line">    for (UIView *subView in subViews) &#123;</div><div class="line">        if([subView isKindOfClass:[FoamImageView class]])&#123; //是要找的图片</div><div class="line">            CALayer *layer = subView.layer.presentationLayer; //图片的显示层            </div><div class="line">            if(CGRectContainsPoint(layer.frame, point))&#123; //触摸点在显示层中，返回当前图片</div><div class="line">                return subView;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return [super hitTest:point withEvent:event];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event &#123;</div><div class="line">    CGPoint point = [[touches anyObject] locationInView:self.view];</div><div class="line">    </div><div class="line">    if (CGRectContainsPoint(button_.layer.presentationLayer.frame, point)) &#123;</div><div class="line">        NSLog(@&quot;youxiangying&quot;);</div><div class="line">        [self buttonEvent:button_];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>参考资料</strong>：<br><a href="http://www.voidcn.com/blog/lixuemei45/article/p-5021040.html">www.voidcn.com</a><br><a href="https://www.amazon.com/iOS-Core-Animation-Advanced-Techniques-ebook/dp/B00EHJCORC/ref=sr_1_1?ie=UTF8&amp;qid=1423192842&amp;sr=8-1&amp;keywords=Core+Animation+Advanced+Techniques">iOS-CoreAnimation</a></p>
<hr>
<h5 id="写在后面的话"><a href="#写在后面的话" class="headerlink" title="写在后面的话"></a>写在后面的话</h5><p>这个系列所有的文章都是在一个QQ群里面跟小伙伴们讨论出来的,每个 topic 都已经放在了 GitHub 的一个仓库中 <a href="https://github.com/GetOfferSoldier/Objective-C"><strong>这是地址</strong></a>。 所有内容的更新的将在这个仓库中进行,在博客中将不再进行更新。有任何问题，都可以在这个仓库中给我们提 issue 或者 pull request.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;按钮或者 View 在进行 frame 动画的时候，为什么点击 frame 动画的重点位置才能触发事件？如何在动画过程中响应事件？&lt;/p&gt;
    
    </summary>
    
      <category term="iOS面试集锦" scheme="https://CepheusSun.github.io/categories/iOS%E9%9D%A2%E8%AF%95%E9%9B%86%E9%94%A6/"/>
    
    
      <category term="iOS面试集锦" scheme="https://CepheusSun.github.io/tags/iOS%E9%9D%A2%E8%AF%95%E9%9B%86%E9%94%A6/"/>
    
  </entry>
  
  <entry>
    <title>python 中 str 和 list 互相转换</title>
    <link href="https://CepheusSun.github.io/2017/02/04/python%20%E4%B8%AD%20str%20%E5%92%8C%20list%20%E4%BA%92%E7%9B%B8%E8%BD%AC%E6%8D%A2/"/>
    <id>https://CepheusSun.github.io/2017/02/04/python 中 str 和 list 互相转换/</id>
    <published>2017-02-03T16:00:00.000Z</published>
    <updated>2017-02-04T09:27:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>一些相关方法、函数、运算符的整理</p>
<a id="more"></a>
<h3 id="str-gt-list"><a href="#str-gt-list" class="headerlink" title="str -&gt; list"></a>str -&gt; list</h3><h4 id="将字符串按照字符分割成字符list"><a href="#将字符串按照字符分割成字符list" class="headerlink" title="将字符串按照字符分割成字符list"></a>将字符串按照字符分割成字符list</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">s = <span class="string">'spam'</span></div><div class="line">t = list(s)</div><div class="line"><span class="keyword">print</span> t</div><div class="line"></div><div class="line"><span class="comment">#结果：['s', 'p', 'a', 'm']</span></div></pre></td></tr></table></figure>
<h4 id="将字符串按照分隔符，分割成字符-串-list"><a href="#将字符串按照分隔符，分割成字符-串-list" class="headerlink" title="将字符串按照分隔符，分割成字符(串)list"></a>将字符串按照分隔符，分割成字符(串)list</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">s = <span class="string">'spam-spam-spsm'</span></div><div class="line">delimiter = <span class="string">'-'</span></div><div class="line">s.split(delimiter)</div><div class="line"><span class="keyword">print</span> s.split(delimiter)</div><div class="line"></div><div class="line"><span class="comment">#结果：['spam', 'spam', 'spsm']</span></div></pre></td></tr></table></figure>
<h4 id="使用-split-方法将字符串分成单词"><a href="#使用-split-方法将字符串分成单词" class="headerlink" title="使用 split 方法将字符串分成单词"></a>使用 split 方法将字符串分成单词</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">s = <span class="string">'pinging for the fjords'</span></div><div class="line">t = s.split()</div><div class="line"><span class="keyword">print</span> t</div><div class="line"></div><div class="line"><span class="comment">#结果：['pinging', 'for', 'the', 'fjords']</span></div></pre></td></tr></table></figure>
<h3 id="list-gt-str"><a href="#list-gt-str" class="headerlink" title="list -&gt; str"></a>list -&gt; str</h3><h4 id="使用字符-串-将-list-串联成字符串"><a href="#使用字符-串-将-list-串联成字符串" class="headerlink" title="使用字符(串)将 list 串联成字符串"></a>使用字符(串)将 list 串联成字符串</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">t = [<span class="string">'pinging'</span>, <span class="string">'for'</span>, <span class="string">'the'</span>, <span class="string">'fjords'</span>]</div><div class="line">delimiter = <span class="string">' '</span></div><div class="line"><span class="keyword">print</span> delimiter.join(t)</div><div class="line"></div><div class="line"><span class="comment">#结果：pinging for the fjords</span></div><div class="line"><span class="comment"># 如果不需要分隔符，第二行中delimiter复制为''空字符串即可</span></div></pre></td></tr></table></figure>
<h3 id="数组-增-删-改"><a href="#数组-增-删-改" class="headerlink" title="数组 增 删 改"></a>数组 增 删 改</h3><h4 id="增"><a href="#增" class="headerlink" title="增"></a>增</h4><p><strong>直接在后面添加一个元素</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">t = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</div><div class="line">t.append(<span class="string">'d'</span>)</div><div class="line"><span class="keyword">print</span> t</div><div class="line"></div><div class="line"><span class="comment">#结果：['a', 'b', 'c', 'd']</span></div></pre></td></tr></table></figure>
<p><strong>将一个数组遍历添加在后面</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">t = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</div><div class="line">t2 = [<span class="string">'e'</span> ,<span class="string">'f'</span>]</div><div class="line">t.extend(t2)</div><div class="line"><span class="keyword">print</span> t</div><div class="line"></div><div class="line"><span class="comment">#结果：['a', 'b', 'c', 'e', 'f']</span></div></pre></td></tr></table></figure>
<h4 id="删"><a href="#删" class="headerlink" title="删"></a>删</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 以下方法运算符都可以使用切片</span></div><div class="line"></div><div class="line">t = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</div><div class="line"><span class="comment"># del 运算符 如果不需要被删除的值，使用这个</span></div><div class="line"><span class="keyword">del</span> t[<span class="number">1</span>]</div><div class="line"></div><div class="line"><span class="comment"># pop 方法 改变列表并返回被删除的元素。如果不提供索引，删除并返回最后一个元素。</span></div><div class="line"><span class="keyword">print</span> t.pop(<span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="comment"># remove 方法 删除不知道索引的元素, 只删除第一个</span></div><div class="line">t.remove(<span class="string">'a'</span>)</div><div class="line"><span class="keyword">print</span> t</div></pre></td></tr></table></figure>
<h4 id="改"><a href="#改" class="headerlink" title="改"></a>改</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">t = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</div><div class="line">t[<span class="number">0</span>] = <span class="string">'c'</span></div><div class="line"><span class="keyword">print</span> t</div><div class="line"></div><div class="line"><span class="comment">#结果：['c', 'b', 'c']</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一些相关方法、函数、运算符的整理&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://CepheusSun.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://CepheusSun.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python Debug 之一</title>
    <link href="https://CepheusSun.github.io/2017/02/02/python%20debug%20%E4%B9%8B%E4%B8%80/"/>
    <id>https://CepheusSun.github.io/2017/02/02/python debug 之一/</id>
    <published>2017-02-01T16:00:00.000Z</published>
    <updated>2017-02-01T16:14:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>错误类型:SyntaxError: Non-ASCII character ‘\xe9’ in file xxx</p>
<a id="more"></a>
<p>最近写 python 代码的时候，简单的一下代码，确出现错误。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">points = int(raw_input(<span class="string">"领先的分数："</span>))</div><div class="line">is_in_control = raw_input(<span class="string">"是否领先队控球(Y／N：)"</span>)</div><div class="line">last_seconds = int(raw_input(<span class="string">"比赛剩余秒数："</span>))</div><div class="line"></div><div class="line">points -= <span class="number">3</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> is_in_control == <span class="string">'Y'</span>:</div><div class="line">    points += <span class="number">0.5</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    points -= <span class="number">0.5</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> points &lt; <span class="number">0</span>:</div><div class="line">    points = <span class="number">0</span></div><div class="line"></div><div class="line"></div><div class="line">points = points ** <span class="number">2</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> points &gt; last_seconds:</div><div class="line">    <span class="keyword">print</span> <span class="string">"safe"</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span>  <span class="string">"unsafe"</span></div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SyntaxError: Non-ASCII character &apos;\xe9&apos; in file /Users/programersunny/PycharmProjects/pythonDemo/hello on line 58, but no encoding declared; see http://www.python.org/peps/pep-0263.html for details</div></pre></td></tr></table></figure>
<p>打开 URL 阅读了一下，找到原因：</p>
<blockquote>
<p>Python will default to ASCII as standard encoding if no other encoding hints are given.</p>
</blockquote>
<p>Python的默认编码文件是用的ASCII码，你将文件存成了UTF-8也没用。</p>
<p>解决办法很简单：</p>
<p>只要在文件开头加入<code># -*- coding: UTF-8 —</code>或者<code>#coding=utf-8</code> 就行了。</p>
<p>注意，这两行代码必须添加在<code>.py</code>文件的第一行或者第二行。如果在第三行以及以上，都没有效果，这个在这个网址上也有描述</p>
<blockquote>
<p>To define a source code encoding, a magic comment must be placed into the source files either as first or second line in the file</p>
</blockquote>
<p>翻译一下：</p>
<blockquote>
<p>为了定义源码的编码格式，一个神奇的注释需要被添加到源文件的第一行或者第二行中。</p>
</blockquote>
<p>神奇的注释已经在上文提到了。</p>
<p><a href="https://www.python.org/dev/peps/pep-0263/">上文提到的URL地址</a></p>
<p>纪念一下自己在 python 中遇到的第一个小坑。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;错误类型:SyntaxError: Non-ASCII character ‘\xe9’ in file xxx&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://CepheusSun.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://CepheusSun.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>iOS小知识集锦-NSString常用方法汇总</title>
    <link href="https://CepheusSun.github.io/2017/02/01/iOS%E5%B0%8F%E7%9F%A5%E8%AF%86%E9%9B%86%E9%94%A6-NSString%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB/"/>
    <id>https://CepheusSun.github.io/2017/02/01/iOS小知识集锦-NSString常用方法汇总/</id>
    <published>2017-01-31T16:00:00.000Z</published>
    <updated>2017-02-22T16:39:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>NSString 几乎是 iOS 开发中最常用的类了。几乎所有的地方都会用到各种各样的字符串。NSString 也有很多的方法。这篇文章记录我在使用 NSString 类的时候，会用到的知识点。也是 <code>iOS小知识集锦</code>的第一篇文章吧。</p>
<a id="more"></a>
<h3 id="创建字符串"><a href="#创建字符串" class="headerlink" title="创建字符串"></a>创建字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 直接创建字符串</div><div class="line">NSString *str1 = @&quot;this is Cepheus Sun&quot;;</div><div class="line"></div><div class="line">// 用一个字符串创建另一个字符串</div><div class="line">NSString *str2 =[[NSString alloc] initWithString:str1];</div><div class="line"></div><div class="line">// 用c的字符串创建oc的字符串</div><div class="line">NSString *str4 = [[NSString alloc] initWithUTF8String:&quot;我是程序猿&quot;];</div><div class="line"></div><div class="line">// 用格式符拼接字符串</div><div class="line">NSString *str3 = [[NSString alloc] initWithFormat:@&quot;%@%@&quot;,str1,str4];</div></pre></td></tr></table></figure>
<h3 id="读取文件来初始化字符串"><a href="#读取文件来初始化字符串" class="headerlink" title="读取文件来初始化字符串"></a>读取文件来初始化字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 先创建一个error对象，用来保存错误信息</div><div class="line">NSError *error = nil;</div><div class="line">//@&quot;/Users/xxx/Desktop/123.txt&quot;为文件路径</div><div class="line">NSString *str01 = [NSString stringWithContentsOfFile:@&quot;/Users/xxx/Desktop/123.txt&quot; encoding:NSUTF8StringEncoding error:&amp;error];</div><div class="line">        </div><div class="line">// 创建if语句判断输出</div><div class="line">if (error) &#123; // 一旦为真，说明读取文件出错了</div><div class="line">	NSLog(@&quot;读取文件出错 %@&quot;, error);</div><div class="line">&#125; else &#123;</div><div class="line">	NSLog(@&quot;读取成功:%@&quot;, str01);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="通过-URL-读取文件，初始化字符串"><a href="#通过-URL-读取文件，初始化字符串" class="headerlink" title="通过 URL 读取文件，初始化字符串"></a>通过 URL 读取文件，初始化字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">// http://www.baidu.com/image/xxxx.png</div><div class="line">// url = 协议头://主机地址/在主机里面的路径</div><div class="line"></div><div class="line">// ftp协议，传输比较大的文件</div><div class="line">// file协议，读取比较大的文件</div><div class="line"></div><div class="line">// file协议，读取文本文件</div><div class="line">NSURL *url = [NSURL URLWithString:@&quot;file://192.168.1.1/user/apple/desktop/test.txt&quot;]</div><div class="line">  </div><div class="line">// 如果不写 IP 地址，就会默认访问本机</div><div class="line">NSURL *url = [NSURL URLWithString:@&quot;file:///user/CepheusSun/desktop/123.txt&quot;]</div><div class="line">  </div><div class="line">// 将本地文件路径创建为 URL 对象(路径可以是中文)</div><div class="line"> NSURL *url = [NSURL fileURLWithPath:@&quot;/Users/CepheusSun/Desktop/123.txt&quot;];</div><div class="line"></div><div class="line">// 将对应对网络资源文件路径创建为URL对象(路径必须是英文字母)</div><div class="line">// SURL *url = [NSURL URLWithString:@&quot;file:///Users/CepheusSun/Desktop/123.txt&quot;];</div><div class="line"> </div><div class="line">// 先创建一个 error 对象，用来保存错误信息</div><div class="line">NSError *error1 = nil;</div><div class="line">// 调用URL地址的文件</div><div class="line">NSString *str03 = [NSString stringWithContentsOfURL:url encoding:NSUTF8StringEncoding error:&amp;error1];</div><div class="line">        </div><div class="line">if (error1) &#123; // 一旦为真，说明读取文件出错了</div><div class="line">	NSLog(@&quot;读取文件出错 %@&quot;, error1);</div><div class="line">&#125; else&#123;</div><div class="line">	NSLog(@&quot;读取成功:%@&quot;, str03);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="通过-url-或-file-将字符串信息写入文件"><a href="#通过-url-或-file-将字符串信息写入文件" class="headerlink" title="通过 url 或 file 将字符串信息写入文件"></a>通过 url 或 file 将字符串信息写入文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"> NSString *s001 = @&quot;dfa短发方法法德俄额度 短发舒服&quot;;</div><div class="line">        </div><div class="line">// NSURL *myurl = [NSURL fileURLWithPath:@&quot;/Users/progamersunny/Desktop/123.txt&quot;];</div><div class="line">        </div><div class="line">NSURL *myurl = [NSURL URLWithString:@&quot;file:///Users/progamersunny/Desktop/123.txt&quot;];</div><div class="line"></div><div class="line">// 调用将字符串写入URL地址文件的方法</div><div class="line">[s001 writeToURL:myurl atomically:YES encoding:NSUTF8StringEncoding error:nil];</div><div class="line">        </div><div class="line">// 调用将字符串写入本机文件的方法</div><div class="line">// [s001 writeToFile:@&quot;/Users/xlzhang/Desktop/OC基础知识点汇总/OC中NSString常用方法汇总/text1.txt1&quot; atomically:YES encoding:NSUTF8StringEncoding error:nil];</div><div class="line">        </div><div class="line">// 提取文件内容</div><div class="line">NSString *str04 = [NSString stringWithContentsOfFile:@&quot;/Users/xlzhang/Desktop/text/text/123.txt&quot; encoding:NSUTF8StringEncoding error:nil];</div></pre></td></tr></table></figure>
<h3 id="创建临时字符串"><a href="#创建临时字符串" class="headerlink" title="创建临时字符串"></a>创建临时字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 用一个字符串创建另一个临时字符串</div><div class="line">NSString *str5 = [NSString stringWithString:str2];</div><div class="line"></div><div class="line">// 用c的字符串创建oc的临时字符串</div><div class="line">NSString *str6 = [NSString stringWithUTF8String:&quot;我是程序猿&quot;];</div><div class="line">        </div><div class="line">// 用格式符拼接字符串</div><div class="line">NSString *str7 = [NSString stringWithFormat:@&quot;%@%@&quot;,str5,str3];</div></pre></td></tr></table></figure>
<h3 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">// 比较两个字符串是否相等，返回BOOL值YES或NO</div><div class="line">BOOL ret = [str6 isEqualToString: str7];</div><div class="line"></div><div class="line">// 比较并返回谁大谁小(返回值是个枚举类型: 比较的结果 ＝ －1，0，1)</div><div class="line">// typedef NS_ENUM(NSInteger, NSComparisonResult) &#123;NSOrderedAscending = -1L, NSOrderedSame, NSOrderedDescending&#125;;</div><div class="line">// 如果左边str1小于右边str4就返回－1，相等就返回0，大于就返回1</div><div class="line"></div><div class="line">NSComparisonResult ret1 = [str1 compare: str4];</div><div class="line"></div><div class="line">// 忽略大小写进行比较</div><div class="line">NSComparisonResult ret01 = [str1 caseInsensitiveCompare:str4];</div><div class="line"></div><div class="line"> // 有条件的比较谁大谁小(options的参数为限制条件)</div><div class="line"> // options: 指定比较的条件</div><div class="line"> // NSCaseInsensitiveSearch  忽略大小写</div><div class="line"> // NSBackwardsSearch  从后往前比较</div><div class="line"> // NSNumericSearch  首先比较字符串里面的字符的个数，个数一样再比较大小</div><div class="line"></div><div class="line">NSComparisonResult ret02 = [str1 compare:str4 options:NSCaseInsensitiveSearch]; // 忽略大小写进行比较</div></pre></td></tr></table></figure>
<h3 id="从一个字符串中查找子字符串"><a href="#从一个字符串中查找子字符串" class="headerlink" title="从一个字符串中查找子字符串"></a>从一个字符串中查找子字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">NSString *s1 = @&quot;I am such a poor programer.&quot;;</div><div class="line">NSString *s2 = @&quot;am&quot;;</div><div class="line"></div><div class="line">// 返回值类型是一个枚举类型NSRange,包含两个lu整型变量location(位置)和length(长度)</div><div class="line">NSRange range = [s1 rangeOfString:s2];// 查找并返回位置</div><div class="line"></div><div class="line">        </div><div class="line">// 有条件的查找,options后面为： NSCaseInsensitiveSearch 表示忽略大小写</div><div class="line">NSRange range01 = [s1 rangeOfString:s2 options:NSLiteralSearch]; // options表示查找方式</div><div class="line"></div><div class="line">BOOL b1 = [s1 containsString:s2]; // 返回值类型是一个BOOL值，YES表示s1包含有s2，NO表示没有包含</div><div class="line"></div><div class="line">// 如果查找的字符串不存在，返回的值：range.length = 0;range.location = NSNotFound (NSNotFound = -1)</div></pre></td></tr></table></figure>
<h3 id="单独提取某一个字符"><a href="#单独提取某一个字符" class="headerlink" title="单独提取某一个字符"></a>单独提取某一个字符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 创建一个可变字符串对象</div><div class="line">NSMutableString *str02 = [[NSMutableString alloc] init];</div><div class="line">// 循环获取字符中的每一个字符</div><div class="line">for (int i = 0;i &lt; [str1 length]; i++)&#123;</div><div class="line">    // 此处提取的字符是两个字节，因此可以提取汉字</div><div class="line">	unichar c = [str1 characterAtIndex:i]; </div><div class="line">	// 将获取对字符合并到可变字符串中</div><div class="line">	[str02 appendFormat:@&quot;%C&quot;,c];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="从字符串中提取某个范围点字符生成新字符串－－-从第一个字符开始到某个位置结束，从某个位置开始到字符串尾，某点开始某点结束"><a href="#从字符串中提取某个范围点字符生成新字符串－－-从第一个字符开始到某个位置结束，从某个位置开始到字符串尾，某点开始某点结束" class="headerlink" title="从字符串中提取某个范围点字符生成新字符串－－(从第一个字符开始到某个位置结束，从某个位置开始到字符串尾，某点开始某点结束)"></a>从字符串中提取某个范围点字符生成新字符串－－(从第一个字符开始到某个位置结束，从某个位置开始到字符串尾，某点开始某点结束)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">NSString *s3 = @&quot;0123456789&quot;;</div><div class="line">NSString *s4 = [s3 substringToIndex: 6 ]; </div><div class="line">// 从s3中提取从头至第6个字符(不包括第6个),生产新字符串,返回这个新字符串的地址</div><div class="line">// s4的结果为: &quot;012345&quot;</div><div class="line">        </div><div class="line">NSString *s5 = [s3 substringFromIndex: 6 ]; </div><div class="line">// 从s3中提取从第6个字符(包括第6个)到最后一个字符,生产新字符串,返回这个新字符串的地址</div><div class="line">// s5到结果为: &quot;6789&quot;</div><div class="line">        </div><div class="line">NSRange range1 = &#123;3,4&#125;; </div><div class="line">// 3表示起始位置，4表示长度，表示从第3个字符(包含第3个)开始提取连续的4个字符,生产新字符串,返回这个新字符串的地址</div><div class="line">NSString *s6 = [s3 substringWithRange:range1]; </div><div class="line">// 先定义一个range值</div><div class="line">// s6的结果为: &quot;3456&quot;</div><div class="line">        </div><div class="line">        </div><div class="line">// 也可以合并一起写</div><div class="line">NSString *s7 = [s3 substringWithRange:NSMakeRange(3, 4)]; // NSMakeRange 是一个c函数</div></pre></td></tr></table></figure>
<h3 id="字符串与其他类型的转换"><a href="#字符串与其他类型的转换" class="headerlink" title="字符串与其他类型的转换"></a>字符串与其他类型的转换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">NSString *intStr = @&quot;1234&quot;;</div><div class="line">NSString *floatStr = @&quot;5.14&quot;;</div><div class="line"></div><div class="line">int a = [intStr intValue];</div><div class="line">float f = [floatS floatValue];</div></pre></td></tr></table></figure>
<h3 id="字符串首位-前缀后缀的对比"><a href="#字符串首位-前缀后缀的对比" class="headerlink" title="字符串首位(前缀后缀的对比)"></a>字符串首位(前缀后缀的对比)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">NSString *url1 = @&quot;https://www.baidu.com/rader/p.png&quot;;</div><div class="line">BOOL b001 = [url1 hasPrefix:@&quot;https://&quot;]; // 判断字符串首位是否与输入的字符串相同</div><div class="line">BOOL b002 = [url1 hasSuffix:@&quot;p.png&quot;];   // 判断字符串尾部是否与输入的字符串相同</div></pre></td></tr></table></figure>
<h3 id="字符串中某些字符的替换"><a href="#字符串中某些字符的替换" class="headerlink" title="字符串中某些字符的替换"></a>字符串中某些字符的替换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">NSString *url2 = @&quot;http://www.baidu.com/rader/p.gdp&quot;;</div><div class="line">// 将withString:字符串内容替换掉url1中 OfString:字符串内容 后生成一个新的字符串url2</div><div class="line">NSString *url3 = [url2 stringByReplacingOccurrencesOfString:@&quot;/&quot; withString:@&quot;*&quot;];</div></pre></td></tr></table></figure>
<h3 id="去掉字符串首尾的某些连续的字符"><a href="#去掉字符串首尾的某些连续的字符" class="headerlink" title="去掉字符串首尾的某些连续的字符"></a>去掉字符串首尾的某些连续的字符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> NSString *url4 = @&quot;    http://www.baidu.com     &quot;;</div><div class="line">        </div><div class="line">NSCharacterSet *set = [NSCharacterSet whitespaceCharacterSet]; //  去除空格</div><div class="line">// lowercaseLetterCharacterSet  去除小写字母</div><div class="line">// uppercaseLetterCharacterSet  去除大写字母</div><div class="line">        </div><div class="line">NSCharacterSet *set1 = [NSCharacterSet characterSetWithCharactersInString:@&quot;指定的字符串&quot;]; // 去除指定的字符串</div><div class="line">        </div><div class="line">        </div><div class="line">// 去除字符串首尾的某些相同字符,有多少个就去掉多少个</div><div class="line">NSString *url5 = [url4 stringByTrimmingCharactersInSet:set];</div></pre></td></tr></table></figure>
<h3 id="可变字符串-以上字符串方法都可以用于可变字符串"><a href="#可变字符串-以上字符串方法都可以用于可变字符串" class="headerlink" title="可变字符串:(以上字符串方法都可以用于可变字符串)"></a>可变字符串:(以上字符串方法都可以用于可变字符串)</h3><blockquote>
<p>可变字符串是字符串的子类，所以可以使用所有NSString的所有方法，其比起字符串增加的功能主要有：增,删,改,擦</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">// 创建一个可变字符串</div><div class="line"></div><div class="line">NSMutableString *string1 = [[NSMutableString alloc] init];</div><div class="line">[string1 setString:@&quot;1234&quot;]; // 对可变字符串进行赋值</div><div class="line">        </div><div class="line">[string1 setString:@&quot;abcd&quot;]; // 已赋值的可变字符串可以重新赋值（改）</div><div class="line">[string1 appendString:@&quot;123&quot;]; // 可以增加字符串，增加后结果为:&quot;abcd123&quot;</div><div class="line">[string1 appendFormat:@&quot;%c&quot;,&apos;D&apos;]; // 可以用格式符增加相应的字符或字符串，结果为:&quot;abcd123D&quot;</div><div class="line">[string1 insertString:@&quot;xxxx&quot; atIndex:4]; // 可以把&quot;xxxx&quot;字符串插入到第4个字符开始的地方,原第四个开始的后面字符依次后移</div><div class="line">// 插入后的结果为: &quot;abcdxxxx123D&quot;</div><div class="line">        </div><div class="line">// 也可以把字符串改为另一个字符串的地址，因为它们传递的都是地址</div><div class="line">NSString *ss1 = [NSString stringWithFormat:@&quot;%d&quot;,-88];</div><div class="line">        </div><div class="line">[string1 insertString:ss1 atIndex:6]; // 结果为: string1 = &quot;abcdxx-88xx123D&quot;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">NSRange range2 = &#123;3,4&#125;; </div><div class="line">// 3表示起始位置，4表示长度，表示从第3个字符(包含第3个)开始删除连续的4个字符,后面字符依次前移</div><div class="line">[string1 deleteCharactersInRange:range2]; </div><div class="line">// 结果为: string1 = &quot;abc88xx123D&quot;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[string1 replaceCharactersInRange:NSMakeRange(3, 2) withString:@&quot;RRRRRRRRRR&quot;];</div><div class="line">// 3表示起始位置，2表示长度，表示从第3个字符(包含第3个)开始将后面的2个字符换成字符串&quot;RRRRRRRRRR&quot;,后面字符依次后移</div><div class="line">// 结果为: string1 = &quot;abcRRRRRRRRRRxx123D&quot;</div><div class="line">NSLog(@&quot;\nstring1 = %@&quot;,string1);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 擦除原有字符串内容重新设置字符串的内容</div><div class="line">[string1 setString:@&quot;---&quot;];</div><div class="line">// 等同于</div><div class="line">// string1.string = @&quot;---&quot;;</div><div class="line">        </div><div class="line">NSLog(@&quot;string1 = %@&quot;, string1);</div><div class="line">// 结果为: string1 = &quot;---&quot;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NSString 几乎是 iOS 开发中最常用的类了。几乎所有的地方都会用到各种各样的字符串。NSString 也有很多的方法。这篇文章记录我在使用 NSString 类的时候，会用到的知识点。也是 &lt;code&gt;iOS小知识集锦&lt;/code&gt;的第一篇文章吧。&lt;/p&gt;
    
    </summary>
    
      <category term="知识集锦" scheme="https://CepheusSun.github.io/categories/%E7%9F%A5%E8%AF%86%E9%9B%86%E9%94%A6/"/>
    
    
      <category term="Objective-C" scheme="https://CepheusSun.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>python 中的逻辑运算符</title>
    <link href="https://CepheusSun.github.io/2017/01/29/python%20%E4%B8%AD%E7%9A%84%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>https://CepheusSun.github.io/2017/01/29/python 中的逻辑运算符/</id>
    <published>2017-01-28T16:00:00.000Z</published>
    <updated>2017-01-29T16:05:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>从现在开始，开始了对 pyhton 这门语言的学习。</p>
<a id="more"></a>
<p>逻辑运算符其实没什么好说的，只是最近学习 python 这门语言的时候，才研究发现的一个小知识点。</p>
<h2 id="逻辑运算符有什么？"><a href="#逻辑运算符有什么？" class="headerlink" title="逻辑运算符有什么？"></a>逻辑运算符有什么？</h2><table>
<thead>
<tr>
<th style="text-align:center">关系运算符</th>
<th style="text-align:center">含义</th>
<th style="text-align:center">举例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">and</td>
<td style="text-align:center">与(全真才真)</td>
<td style="text-align:center">True and False == False</td>
</tr>
<tr>
<td style="text-align:center">or</td>
<td style="text-align:center">或(全假才假)</td>
<td style="text-align:center">True or False == True</td>
</tr>
<tr>
<td style="text-align:center">not</td>
<td style="text-align:center">非(真变假、假变真)</td>
<td style="text-align:center">not True == False</td>
</tr>
</tbody>
</table>
<h2 id="为什么123-and-456结果是456而123-or-456结果是123？"><a href="#为什么123-and-456结果是456而123-or-456结果是123？" class="headerlink" title="为什么123 and 456结果是456而123 or 456结果是123？"></a>为什么<code>123 and 456</code>结果是<code>456</code>而<code>123 or 456</code>结果是<code>123</code>？</h2><p><strong>and </strong>:</p>
<p>​    对于 and 首先计算第一个表达式，</p>
<p>​    如果第一个表达式为真，结果为第二个表达式的结果。</p>
<p>​    如果第一个表达式为假，返回假。</p>
<p><strong>or </strong>：</p>
<p>​    对于 or 首先计算第一个表达式，</p>
<p>​    如果第一个表达式为真，则返回真。</p>
<p>​    如果第一个表达式为假，则返回第二个表达式的结果    </p>
<p>所以，对于</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">123</span> <span class="keyword">and</span> <span class="number">456</span></div></pre></td></tr></table></figure>
<p>这行代码， 遵循非零为真的原则，第一个表达式为真。那么看第二个表达式，第二个表达式也大于零，所以结果为第二个表达式的结果。所以返回</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">456</span></div></pre></td></tr></table></figure>
<p>对于</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">123</span> <span class="keyword">or</span> <span class="number">456</span></div></pre></td></tr></table></figure>
<p>这行代码，第一个表达式非零，结果为第一个表达式的结果。</p>
<blockquote>
<p>Strictly speaking, the operands of the logical operators should be boolean expressions, but</p>
<p>Python is not very strict. Any nonzero number is interpreted as “true.”严格来讲，布尔运算符的运算数应该是布尔表达式， 但是Python并不严格。任何非0的数字都被解释成“真”。</p>
</blockquote>
<p>另外，因为 <code>123</code> 或者 <code>456</code> 这两个表达式，都不是逻辑运算，表达式的值就是他本身的值。所以最后得出这样的结果。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>and: </strong>从左到右计算表达式，若所有值为真，返回最后一个值。若存在假，返回第一个假值。</p>
<p><strong>or：</strong> 从左到右计算表达式，返回第一个为真的值。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从现在开始，开始了对 pyhton 这门语言的学习。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://CepheusSun.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://CepheusSun.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>SBAnimation a new Repository</title>
    <link href="https://CepheusSun.github.io/2017/01/28/SBAnimation%20a%20new%20Repository/"/>
    <id>https://CepheusSun.github.io/2017/01/28/SBAnimation a new Repository/</id>
    <published>2017-01-27T16:00:00.000Z</published>
    <updated>2017-02-22T15:47:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>看了时间，外面已经一直是在放着鞭炮声音。QQ 上收到大学同窗在美国发来的新春祝福，闲聊两句，深感在国外的科研狗的不容易。想到了昨天突然多想了一下，看到的一句话</p>
<blockquote>
<p>优秀的人太多，优秀的人也太优秀，我只要负责被惊艳就好了。</p>
</blockquote>
<p>这个世界优秀的人真是太多了，比你优秀的人又比你努力太多了。这两年深觉差距越来越大。突然有了一些懊恼。</p>
<p>借着这篇文字，写写这几天回成都之后的一些感悟。</p>
<a id="more"></a>
<p>一直想找几个人，做一些有趣的事情。回成都之前的两天，和朋友在 QQ 群里聊天，他发出来了一个不算复杂，但是还算不错的 UI 效果出来，讨论了一下，然后想着把我们做的一些有趣的效果 工具之类的东西都开源出来，放在一个 repository 里面，然后一起来维护这个东西。然后我就去 create 了一个 叫 SolarBee  的 organization 然后开始做起了这件事情。 然后把他写的东西拿出来，然后自己写了一个 demo 然后这个东西就搞出来了。</p>
<p>回成都的几天里面，逐渐把我自己写的一些东西放进来，然后慢慢的来丰富这个东西。五天了，几乎提交了去年一整年在 github 上面的代码量。完善代码，完善 demo 把各种仓库整合修改 balabala…. 痛并快乐着。</p>
<p>对了，昨天还参加了一个 python 的学习组织，正式开始“人生苦短，我用 python 了” ，激励着我开始更广泛的学习，还是因为看了一些书，看了一些文章，深深的感觉在计算机科学这一块，很厉害的人都是能够轻松的驾驭各种语言的人，还是希望自己多体验几门语言，能够在更高的角度去理解这件事情。虽然很惭愧，之前学的 java 已经忘的一干二净了。</p>
<p>后面还会更多的加入更多的东西在这个地方。不仅仅在 UI 这一方面，可能后面还会有更多方面的东西加入进来。希望自己的 2017 能够坚持下来，做这件自认为很酷的事情。</p>
<p>后面可能还会有一些计划什么的。这个可能年后很快就需要去完成。第一是，找工作。第二是，写一个 mac app 尝试一下新的领域。确实没有什么用处，只是希望方便这个东西的 contributer 更方便的把相关的资料上传到 Leancloud 里面。用这个来管理这个 demo 我感觉也是一件很 cool 的事情。当然，完成的时候，还是会把这些代码放在 GitHub 上面。</p>
<p>愿景。希望自己坚持写博客，能坚持开源。在什么时候能够就某个问题给出一套完整的解决方案。这也是我觉得的很酷的事情。另外，英语也要坚持的学下去。</p>
<p>这几天确实把自己都感动到了。每天都花很长的时间在这件事情上面。很充实，很开心。最重要的是，重新找到了对这件事情的热情。</p>
<p>上面说了那么多 <a href="https://github.com/SolarBee/SBAnimation">GitHub</a>地址还是贴出来。</p>
<p>最后，跳出舒适区很难，但这是我不得不做的事情。想了那么久 FP 也应该学起来了。</p>
<h3 id="SBAnimation"><a href="#SBAnimation" class="headerlink" title="SBAnimation"></a>SBAnimation</h3><p>SolarBee创建的一个关于一些动画和自定义有趣的View的合集的合集。</p>
<h4 id="1、仪表盘"><a href="#1、仪表盘" class="headerlink" title="1、仪表盘"></a>1、仪表盘</h4><p><img src="http://ojno1pj4x.bkt.clouddn.com/91B9BB1D47A45C3FD69A20FB5813C31F.jpg"></p>
<h4 id="2、购物车抛物线"><a href="#2、购物车抛物线" class="headerlink" title="2、购物车抛物线"></a>2、购物车抛物线</h4><p><img src="http://ojno1pj4x.bkt.clouddn.com/%E8%B4%AD%E7%89%A9%E8%BD%A6%E6%8A%9B%E7%89%A9%E7%BA%BF.gif"></p>
<h4 id="3、列表空数据展示"><a href="#3、列表空数据展示" class="headerlink" title="3、列表空数据展示"></a>3、列表空数据展示</h4><p>这个工具支持 CocoaPods 可见源作者 github 仓库 <a href="https://github.com/CepheusSun/EmptyDataKit">地址</a></p>
<p><img src="http://ojno1pj4x.bkt.clouddn.com/EmptyDataKit.gif"></p>
<h4 id="4、仿照淘宝商品详情加入购物车转场动画"><a href="#4、仿照淘宝商品详情加入购物车转场动画" class="headerlink" title="4、仿照淘宝商品详情加入购物车转场动画"></a>4、仿照淘宝商品详情加入购物车转场动画</h4><p>使用说明在作者 <a href="https://github.com/CepheusSun/SYTaoBaoAnimation">github</a></p>
<p><img src="http://ojno1pj4x.bkt.clouddn.com/ProgramerSunnyDemo.gif"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看了时间，外面已经一直是在放着鞭炮声音。QQ 上收到大学同窗在美国发来的新春祝福，闲聊两句，深感在国外的科研狗的不容易。想到了昨天突然多想了一下，看到的一句话&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;优秀的人太多，优秀的人也太优秀，我只要负责被惊艳就好了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个世界优秀的人真是太多了，比你优秀的人又比你努力太多了。这两年深觉差距越来越大。突然有了一些懊恼。&lt;/p&gt;
&lt;p&gt;借着这篇文字，写写这几天回成都之后的一些感悟。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://CepheusSun.github.io/categories/iOS/"/>
    
    
      <category term="杂记" scheme="https://CepheusSun.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
      <category term="iOS" scheme="https://CepheusSun.github.io/tags/iOS/"/>
    
      <category term="OpenSource" scheme="https://CepheusSun.github.io/tags/OpenSource/"/>
    
  </entry>
  
  <entry>
    <title>CocoaPods小知识集锦</title>
    <link href="https://CepheusSun.github.io/2017/01/20/CocoaPods%E5%B0%8F%E7%9F%A5%E8%AF%86%E9%9B%86%E9%94%A6/"/>
    <id>https://CepheusSun.github.io/2017/01/20/CocoaPods小知识集锦/</id>
    <published>2017-01-19T16:00:00.000Z</published>
    <updated>2017-01-20T06:09:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>在使用CocoaPods 的过程中遇到的问题。整理性的一遍文章，没有多少价值。</p>
<a id="more"></a>
<h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">✘ sunyang@sunny-mbp  ~<span class="regexp">/desktop/ios</span>  pod install</div><div class="line">[!] No <span class="string">`Podfile' found in the project directory.</span></div></pre></td></tr></table></figure>
<p>解决方案</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">✘ sunyang@sunny-mbp  ~<span class="regexp">/desktop/ios</span>   pod repo remove master</div><div class="line">Removing spec repo <span class="string">`master`</span></div><div class="line"></div><div class="line">✘ sunyang@sunny-mbp  ~<span class="regexp">/desktop/ios</span>  pod setup</div><div class="line">Setting up CocoaPods master repo</div><div class="line"></div><div class="line">✘ sunyang@sunny-mbp  ~<span class="regexp">/desktop/ios</span>  pod install</div><div class="line">Pod installation complete! There are <span class="number">3</span> dependencies from the Podfile <span class="keyword">and</span> <span class="number">4</span> total pods installed.</div></pre></td></tr></table></figure>
<p>原因</p>
<p>这是因为 CocoaPods 基于 GitHub 的网页编辑器的 <code>libgit2</code>的一个 bug。 正式这个 bug 导致了 git 仓库错误。</p>
<p>唯一的解决办法就是像上面一样。 </p>
<p><a href="http://blog.cocoapods.org/Repairing-Our-Broken-Specs-Repository/">相关链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用CocoaPods 的过程中遇到的问题。整理性的一遍文章，没有多少价值。&lt;/p&gt;
    
    </summary>
    
      <category term="CocoaPods" scheme="https://CepheusSun.github.io/categories/CocoaPods/"/>
    
    
      <category term="CocoaPods" scheme="https://CepheusSun.github.io/tags/CocoaPods/"/>
    
  </entry>
  
  <entry>
    <title>Swift 和 OC 混合编程</title>
    <link href="https://CepheusSun.github.io/2017/01/05/Swift%E5%92%8COC%E6%B7%B7%E5%90%88%E7%BC%96%E7%A8%8B/"/>
    <id>https://CepheusSun.github.io/2017/01/05/Swift和OC混合编程/</id>
    <published>2017-01-04T16:00:00.000Z</published>
    <updated>2017-01-10T07:49:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>自己学了一段时间的 Swift ，从最开始看 Swift 2.3 的《写给大忙人看的Swift》,在 Xcode8 下很多示例代码都不能好好玩下去，然后看到了 SwiftGG 翻译组针对 Swift 官方文档的中文译本。算是正式开始了对 Swift 的学习。对 Swift 的喜爱不仅仅是因为他是新的语言，是 iOS 开发未来的趋势。而且还有一个很重要的一点单单就是因为 Swift 代码看起来就是非常漂亮啊。</p>
<a id="more"></a>
<h2 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h2><p>对于Swift的学习根本还是一种还没有正式入门的感觉。所以没有办法像 OC 那样驾轻就熟，很多语法都还没有完全掌握，因为时间原因，也因为最近确实发生了一些事情。导致最近学习的热情比较的低，而且年关在即，很多工作上生活上的事情都需要认真梳理一遍。减少了在学习上的努力，是在是罪大恶极。技术圈在这个时候也发生了一些大事情。微信开源的组件 <a href="https://github.com/Tencent/mars#mars_cn">Mars</a>  滴滴和手Q相继 po 出了自己的动态化解决方案。下一年应该会是动态化更广泛应用的一年吧，很多 app 动态化将成为标准配置。但是唯一比较遗憾的是，这些解决方案还是基于 OC 的。但是这也并不妨碍我学习 Swift 的激情，毕竟一切 app 的生杀大权都掌握在苹果手中的，而且，苹果还有一个并不开放的动态库。</p>
<p>简单的学了一些 Swift 的相关东西，就开始手痒想要实践一下了。本来打算使用 Swift 重新写一个项目，但是苦于需求一直源源不断，重写压力也是非常的大。还有一个最大的原因，对 Swift 的掌握还没有真正算是一个 Swift 开发者。实在没有能力将原有项目中的组件转化为 Swift ，所以还是决定在原来的代码中，尝试将一些类用 Swift 来表达。</p>
<blockquote>
<p>这也解决了在 Swift 项目中，优秀的第三方库确实没有 OC 丰富，而作为现在非常热门的开发语言，很多比较好的效果什么的也只有 Swift 版本这样的问题。</p>
</blockquote>
<p>其实无论如何，其实都是 OC 和 Swift 之间的交互。</p>
<h2 id="在-Swift-中使用-OC-类"><a href="#在-Swift-中使用-OC-类" class="headerlink" title="在 Swift 中使用 OC 类"></a>在 Swift 中使用 OC 类</h2><p>如果在Swift类中使用OC的代码，那么就需要使用桥接文件了。</p>
<p>这是我们在平常的OC项目中创建一个新的类</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/34DF1870-F7E8-4522-B715-F1ACAA35DFEA.png" /></p>
<p>点击按钮 <code>Create Bridging Header</code> 。</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/CC24943D-0A36-4095-9EFF-64DBF9D96193.png" /></p>
<p>就会生成一个<code>项目名-Bridging-Header.h</code>文件，这其实貌似就是一个很平常的<code>.h</code>文件。</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/7132C9EA-C1A4-4AE9-BC83-F200006A95B1.png"></p>
<p>然后就只需要像 Import 一个普通类一样把你需要在 Swift 中使用的所有 OC 类在这个<code>.h</code> 文件中添加进来，然后就能够在 Swift 代码中正常的使用 OC 的方法了。</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/B4E7A1D8-F202-4BE8-8CDF-1A3221F42571.png"></p>
<p>这里的<code>MUserInfo</code>其实就是我项目中的一个单例类了。这里要注意的是，虽然使用的是 OC 的类，但是使用的时候依然是使用 Swift 的语法。这个也没什么需要注意的。</p>
<blockquote>
<p>需要注意的是：在 Swift 类中使用的 OC 的方法，还是需要使用 Swift 的语法。</p>
</blockquote>
<p>刚刚说的导入，就是直接在刚刚说的桥接文件中写入如下代码。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#import &quot;MUserInfo.h&quot;</div></pre></td></tr></table></figure>
<h2 id="在-OC-中使用-Swift-类"><a href="#在-OC-中使用-Swift-类" class="headerlink" title="在 OC 中使用 Swift 类"></a>在 OC 中使用 Swift 类</h2><p>这个也是非常的简单，</p>
<p>在<code>TARGETS</code>- <code>Build Settings</code>中选择<code>Swift Complier-General</code></p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/0BA5113B-03E2-40EC-81D0-A55903005F19.png" /></p>
<p>然后分别将<code>Install Objective-C Compatibility Header</code> 和 <code>Objective-C Generated Interface Header Name</code> 选项 改为 <code>YES</code> 和 <code>项目名-Swift.h</code></p>
<p>然后在使用Swift类的时候，只需要在使用的时候像导入头文件一样倒入 <code>项目名-Swift.h</code>这个文件。然后就可以愉快的使用了。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>没有解语，期待下次分享！</p>
<p>## </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自己学了一段时间的 Swift ，从最开始看 Swift 2.3 的《写给大忙人看的Swift》,在 Xcode8 下很多示例代码都不能好好玩下去，然后看到了 SwiftGG 翻译组针对 Swift 官方文档的中文译本。算是正式开始了对 Swift 的学习。对 Swift 的喜爱不仅仅是因为他是新的语言，是 iOS 开发未来的趋势。而且还有一个很重要的一点单单就是因为 Swift 代码看起来就是非常漂亮啊。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://CepheusSun.github.io/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://CepheusSun.github.io/tags/iOS/"/>
    
      <category term="Swift" scheme="https://CepheusSun.github.io/tags/Swift/"/>
    
      <category term="Objective-C" scheme="https://CepheusSun.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>2016写在年关的话</title>
    <link href="https://CepheusSun.github.io/2016/12/26/2016%E5%86%99%E5%9C%A8%E5%B9%B4%E5%85%B3%E7%9A%84%E8%AF%9D/"/>
    <id>https://CepheusSun.github.io/2016/12/26/2016写在年关的话/</id>
    <published>2016-12-25T16:00:00.000Z</published>
    <updated>2016-12-26T05:46:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>距离下一个年头也只有几张日历纸了，还是抱着一个比较好的态度来回忆一些这即将过去的2016. 从大学开始，每一年都有着一个这样的习惯，总要在每学期结束，每一年结束的时候，给自己写下点什么。开通了新的blog， 总还是要在这里留下心的印记。</p>
<a id="more"></a>
<p>写了那么多年，着实还是没有训练出来对文字驾轻就熟的能力，写出来的东西也往往还是一坨狗屎。让自己也不忍心重新回头再来看下去。每一年也就是这么简单的这么写着。</p>
<p>这一年总结下来，在技术上还是有了一些沉淀，虽然没有什么十足的进步。但，终于能够有这么一段比较长的时间，纯粹的去研究一些这些东西。五月份以来的这么一段时间里，我还是心怀感激的，有了这么个不紧不慢，也有足够多时间了足够多的空间来折腾各种好玩的东西。也开始努力的在质量上控制整个项目。也有那么几个同事愿意花时间了精力去折腾新鲜的东西。确实也是件不错的事情。</p>
<p>这么长的时间以来，感觉在技术生活上还是蛮有趣的，先是在微博上加入了一些技术比较活跃的群，然后又转到趣直播这样的平台下，跟大牛们更近距离的接触，体会到了技术世界的无边无际。再后来因为bang用上了微信读书，不多不少还是读过了一些书，更技术无关。到最后应该能凑够个50多个小时阅读时长吧。阅读总是能让人安静下来的。</p>
<p>之前学过一篇文章来记录这一年看过的书，到最后，应该还是能再加上那么一本两本。每天能够抽出那么一个把小时来阅读，也是一件值得坚持的事情。程序员还是应该花一些时间再代码以外的事情上。</p>
<p>然后不知道什么契机，下载了一个英语流利说。还是认为这是一个非常优秀的 app ，确实在我身上还是达到了他们的口号：“让你忍不住，开口说英语”, 花了100块钱参加他们的课程，每天花一些时间来学习英语，每天哇啦哇啦的说着并不流利的英语，也能切切实实的感受到自己的成长。学习英语这件事情，想来也是值得坚持的事情，多么希望一年以后再次写这样的文字的时候，能够很开心的说，这件事情，我坚持了整整一年。</p>
<p>除了这两件事情，年初或者年初的时候，还是读过一些作为程序员，应该读的一些书的。这一年开始了，并不太深入的对 iOS 底层的探索。因为最初对动态化近乎痴迷的兴趣，在看到 JSPatch 的时候，立马就开始撸Demo开干，在线上出了 bug 之后，瞬间把 bug 解决掉的之后，JSPatch 很快的被集成在了公司所有的 iOS app 中，在公司测试力度不足的情况下，也能够放心的进行开发。</p>
<p>再后来因为对 Javascript 知识的刚需，简单的学了一些 HTML 和 CSS 之类的东西，因为集成成本高，不能立马在公司项目中使用等原因，放弃了对 React Native 的探索，知道最近阿里又开源了 Weex ， 对动态化的兴趣，驱使着我在接下来的时间里，或多或少的都会花点时间去研究这些东西。对 Weex 的兴趣应该还是大于 RN 的， 比较起来，还是愿意使用国人研发的 Vue ，前端的世界果然是深似海。在海边散步，也确实折腾了我很多的精力。但是看着新出来的名词 PWA 还是希望对这一块有一些了解。对了，还有微信的小程序。</p>
<p>对技术的追求在这一年还是让我非常的应接不暇。作为客户端开发，在今年初期的时候便对动态化、组件化产生了比较大的兴趣，以至于在博客刚刚建立的时候，就写下来了对动态化和组件化时分着迷这样的文字(后来还是改了)， 相比起来，动态化算是简单的能实现了吧，一直就通过各种渠道能够猜出来 sunny 孙源在滴滴正在进行的项目也是更动态化相关的内容，在 DynamicCocoa 被公布出来的时候，还是被这样的大神折服了，sunny 对底层，对编译器的研究确实是让人难以望其项背的。到后来知道手Q很久以前就有一套类似的框架的事情，最后还是认识到了一个残酷的现实</p>
<blockquote>
<p>大厂对于小公司的碾压不仅仅是运营能力上的，他们对于小厂在技术上的碾压，对于我们来说才是更可怕的。不管你有多么好的 idea 等你实现下来并且能够完美运行的时候，你觉得十分牛逼的事情，确实人家玩剩下的。</p>
</blockquote>
<p>对新的东西的追求还是让我在这一年收集到了各种书，也驱使着我我去学习英语。也驱使着我去学习了可能已经无限趋近稳定的 Swift 3.0 ，开始看了一些现在估计也完全没有入门的前端三件套，balabala….</p>
<p>接着再说一下组件化吧，这一年确实在这一块只做了很少的工作，简单的吧一些组件网络库什么的拆分出来，使用  CocoaPods 来进行管理，看了一些相关的文章，跟一些搞过这个朋友交流过，算是积累了一些知识储备，但是在这样的时间，面对年底还是比较多的需求，实践这件事情，可能还是需要往后推一下了。</p>
<p>然后这一年从纯代码，转到了Xib ，研究了一下 iconfont 然后貌似也记不清楚再搞过什么了。只是读了写文章，看了点源码，重构了下项目，做了些需求，改了些bug，如是而已…</p>
<p>这一年，绕了一大圈，有因为一些原因跑到重庆了，再次回到这个城市生活，确实没有感受到太多的让我心里有什么波动的东西，跟往常一样，跟去到曾经到过的任何一个城市一样…只是喜欢上了这个季节的这里随处可见的黄叶。</p>
<p>外婆离开也到了第三个年头了，是不是还是会思念那个胖胖的可爱的人。生活还是继续向前走着的，毕业也三年了，还是不知道接下来应该怎样。或许，就是这样吧。</p>
<p>车也把坐垫全部换成皮的了，也算修正了买车时犯下的错误。</p>
<p>做了一丢丢有关技术管理的工作，做的不好。只能继续努力了。</p>
<p>好奇心还是那么重，看到什么都想去尝试一下，所以入门了很多东西，了解很多东西，却没能深入，算是今年最大的遗憾吧。</p>
<p>关于年初做的不好的一些事情，等真正再长大一些了再来梳理吧，确实对一些事情还是没那么精通，而且那些也算是去年的事情了吧…</p>
<p>很多想做，却没能做的事情，只能在下一个年头继续了，努力做一个可爱的人吧…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;距离下一个年头也只有几张日历纸了，还是抱着一个比较好的态度来回忆一些这即将过去的2016. 从大学开始，每一年都有着一个这样的习惯，总要在每学期结束，每一年结束的时候，给自己写下点什么。开通了新的blog， 总还是要在这里留下心的印记。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔杂记" scheme="https://CepheusSun.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="杂记" scheme="https://CepheusSun.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>一叶知秋</title>
    <link href="https://CepheusSun.github.io/2016/12/05/%E4%B8%80%E5%A4%9C%E7%9F%A5%E7%A7%8B/"/>
    <id>https://CepheusSun.github.io/2016/12/05/一夜知秋/</id>
    <published>2016-12-04T16:00:00.000Z</published>
    <updated>2016-12-09T02:44:13.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>任何一种环境或个人，初次见面就预感到离别的隐痛时，你必定爱上他了。</p>
</blockquote>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/IMG_0124.JPG?imageView2/4/w/600"/></p>
<p>​    不知道从什么时候开始，重庆已经到处都是黄黄的银杏叶子了。也不知道从什么时候开始，重庆的每个角落都能看到银杏树。正好跟家乡的名字相同，在银杏身上倒多添加了一些情感。</p>
<p>​    早些时候，就一直想要看一看秋天的银杏，金黄色的叶子洒满整条街。想象着这样的意境，脚踩在这样的树叶上，发出吱吱的声音，仿佛大自然叫呼唤。</p>
<p>​    时隔两年，再回到重庆的时候，却发现原来熟悉的一切都已经不在了，记得重庆留给我的印象，除了一片一片的香樟树，就是路边的竹子。再逢重庆，看到的又是一排排的梧桐，一棵棵的银杏。更美了吧！更四季分明了。</p>
<a id="more"></a>
<p>​    过去的两年，念念不忘的总是樟树林里面的味道，和每年运动场上一大片的蓝花楹花瓣。也许某天再次离开重庆的时候，让我怀念的不会再是香樟的味道和浪漫的蓝花楹，而是爱憎分明的梧桐和银杏。    </p>
<p>​    时光总是悄无声息的流淌着，秋的意境也总是被冠以一种 <code>春花秋月何时了</code> 或者 <code>红藕香残玉簟秋</code> 这样的想象。只是今日这样的景象中我还是产生了 <code>自古逢秋悲寂寥，我言秋日胜春朝</code> 这样的情感。</p>
<p>​    这么多年来，对一个城市的印象总是从学校或者公园开始。趁这这样一个艳阳天，还是爬起来，花了那么长时间到了大学城，故意绕过母校，只是怕误了认识这座城市的另外一次机会。</p>
<p>​    确实，重新认识了一下这座城市，虽然曾经走过这些地方。只是当时的脚步还是太过于匆忙了。也许，是应该放慢一下自己的脚步了，在这个浮躁的社会里，在这个浮躁的行业了里，放慢一下脚步是一件多么宝贵的事情啊，给自己一点时间，给生活一点时间，好好的认识这个世界。我想才是活着更大的意义吧。</p>
<p>​    在现在这个年纪思考这样的问题，着实是一件让别人看起来可笑的事情。也不好说自己经历过了什么，其实也并没有经历过什么。只是觉得走的太快，应该停下来休息一下了，走了那么多地方，仔细想起来，却仿佛什么地方都没有去过，没有仔细的体会过这个城市谈什么到过。只是过客而已。</p>
<p>​    一直不要脸的说重庆是我的第二故乡，相比于成都，却少了太多太多的熟悉。除了成都，待过的最长时间的城市了，还是那么陌生。</p>
<p>​    实在怪自己太懒。</p>
<p>​    不知道未来的时光我会在哪里，这两年也辗转了一些城市，我想，我是应该拿着相机，记下些什么。虽然我什么都带不走，虽然我也可能会忘记曾经拍下的一张张照片，虽然这座城市终究会把我遗忘。但我还是希望一些东西能够被我多记住一会儿，依靠着这么点照片，依靠着这么写文字。多少年以后，也许还会再打开这篇博客，在看到这么些图或者是文字，我还能想起来此时的心境，如此，便已足够。</p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0075.JPG?imageView2/4/w/600"/></p>
<p>​    </p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0115.JPG?imageView2/4/w/600"/></p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0010.JPG?imageView2/4/w/600"/></p>
<p>​    </p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0177.JPG?imageView2/4/w/600"/></p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0333.JPG?imageView2/4/w/600"/></p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0334.JPG?imageView2/4/w/600"/></p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0271.JPG?imageView2/4/w/600"/></p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0179.JPG?imageView2/4/w/600"/></p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0225.JPG?imageView2/4/w/600"/></p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0301.JPG?imageView2/4/w/600"/></p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0275.JPG?imageView2/4/w/600"/></p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0235.JPG?imageView2/4/w/600"/></p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0148.JPG?imageView2/4/w/600"/></p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0113.JPG?imageView2/4/w/600" /></p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0101.JPG?imageView2/4/w/600"/></p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0117.JPG?imageView2/4/w/600"/></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;任何一种环境或个人，初次见面就预感到离别的隐痛时，你必定爱上他了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://ocg4av0wv.bkt.clouddn.com/IMG_0124.JPG?imageView2/4/w/600&quot;/&gt;&lt;/p&gt;
&lt;p&gt;​    不知道从什么时候开始，重庆已经到处都是黄黄的银杏叶子了。也不知道从什么时候开始，重庆的每个角落都能看到银杏树。正好跟家乡的名字相同，在银杏身上倒多添加了一些情感。&lt;/p&gt;
&lt;p&gt;​    早些时候，就一直想要看一看秋天的银杏，金黄色的叶子洒满整条街。想象着这样的意境，脚踩在这样的树叶上，发出吱吱的声音，仿佛大自然叫呼唤。&lt;/p&gt;
&lt;p&gt;​    时隔两年，再回到重庆的时候，却发现原来熟悉的一切都已经不在了，记得重庆留给我的印象，除了一片一片的香樟树，就是路边的竹子。再逢重庆，看到的又是一排排的梧桐，一棵棵的银杏。更美了吧！更四季分明了。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔杂记" scheme="https://CepheusSun.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="杂记" scheme="https://CepheusSun.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>使用 Cocoapods 管理你的项目</title>
    <link href="https://CepheusSun.github.io/2016/12/02/CoaocPodSpec/"/>
    <id>https://CepheusSun.github.io/2016/12/02/CoaocPodSpec/</id>
    <published>2016-12-01T16:00:00.000Z</published>
    <updated>2017-03-01T15:29:17.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文是一个教你使用CocoaPods管理开源模块的文章。</p>
</blockquote>
<p>作为一个 iOS 开发者，几乎所有人都使用过 CocoaPods 。作为 iOS 开发中最常用最有名的类库管理工具，给开发者带来了很大的便利。而且现在很多的第三方类库都支持 Pod . 如果一名开发者想要将自己的代码开源给更多的人使用，支持 CocoaPods 肯定是更好的办法。</p>
<p>最近一直在考虑将公司的项目使用 CocoaPods 来模块管理，所以将前段时间重新写的 <code>SYNetwork</code> 进行了对其他类的解耦，在这个过程中学到了很多组织代码的经验， 加上最近正在读的 《设计模式之禅》 逐渐意识到之前自己组织代码的能力还是有所欠缺，很多模块之间也进行了一些完全没有必要的耦合，这其实是很烂的编码形式。</p>
<p>由于公司并没有构建自己的 git 服务器, 而是将代码托管在了 oschina ,所以索性将这个模块开源并放在了github上。然后尝试使用 CocoaPods 来管理这个模块，并在公司其他几个项目中进行推广。</p>
<a id="more"></a>
<p><strong>这只是我模块化项目的第一步。</strong> </p>
<p>好了， 扯淡部分完成。</p>
<h2 id="在-GitHub-创建代码仓库"><a href="#在-GitHub-创建代码仓库" class="headerlink" title="在 GitHub 创建代码仓库"></a>在 GitHub 创建代码仓库</h2><p>因为 CocoaPods 始终还是要将代码放在 GitHub 上的，所以我们还是创建一个代码仓库来保存这些代码吧！</p>
<p>这一步完成之后需要记住两个内容</p>
<ul>
<li>项目的 ssh地址 <code>git@github.com:CepheusSun/SYNetwork.git</code></li>
<li>项目的名称 <code>SYNetwork</code></li>
</ul>
<h2 id="在本地创建-podspec-文件"><a href="#在本地创建-podspec-文件" class="headerlink" title="在本地创建 podspec 文件"></a>在本地创建 podspec 文件</h2><p>在终端中执行命令</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod lib create SYNetwork</div></pre></td></tr></table></figure>
<p>终端会提示</p>
<blockquote>
<p>Cloning <code>https://github.com/CocoaPods/pod-template.git</code> into <code>pod</code>.</p>
</blockquote>
<p>克隆完成之后会连续的回答几个问题，根据实际情况来选择吧！</p>
<p>回答问题之后，在桌面上会有一个<code>SYNetwork</code>文件夹。在这个文件夹中又有一个文件夹<code>SYNetwork</code>里面有两个文件</p>
<ul>
<li>Classes</li>
<li>Assets</li>
</ul>
<p>其中Classes 存放的你的源代码，Assets 应该好似一些图片资源什么的,我这个仓库里面并没有用到。</p>
<blockquote>
<p>还是重新整理一下Clone下来的SYNetwork吧</p>
<ul>
<li>在 Example 文件中是自动创建的 demo 项目， 回答问题之后会自动打开这个项目，不用管它，果断的关掉它，然后 cd 到这个文件夹中 <code>pod install</code>一下。</li>
<li>将我们写的代码放进 <code>SYNetwork/SYNetwork/Classes/</code>文件夹中。</li>
<li>重新 cd 到 example 文件夹，执行 <code>pod update</code></li>
</ul>
<p>完成上面三步之后，可以在你的 demo 项目中尝试使用一些你的库，不过我没有，偷了一个懒😊</p>
</blockquote>
<h3 id="在podspec文件中编码"><a href="#在podspec文件中编码" class="headerlink" title="在podspec文件中编码"></a>在podspec文件中编码</h3><p>我使用的是Sublime Text </p>
<p>打开第一个<code>SYNetwork</code>文件夹中的<code>SYNetwork.podspec</code>文件。这个文件就是配置 CoaoaPods 基本信息的文件</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Pod::Spec.new <span class="keyword">do</span> <span class="params">|s|</span></div><div class="line">  <span class="comment"># pod 库名</span></div><div class="line">  s.name             = <span class="string">'SYNetwork'</span></div><div class="line">  <span class="comment"># pod 版本</span></div><div class="line">  s.version          = <span class="string">'3.0'</span></div><div class="line">  <span class="comment"># pod 概述 </span></div><div class="line">  s.summary          = <span class="string">'A grest network frameworks.'</span></div><div class="line">  <span class="comment"># pod的详细描述</span></div><div class="line">  s.description      = &lt;&lt;-DESC</div><div class="line">    ’this is A great network frameworks<span class="string">'</div><div class="line">                       DESC</div><div class="line">  # pod 的主页</div><div class="line">  s.homepage         = '</span><span class="symbol">https:</span>/<span class="regexp">/github.com/</span>CepheusSun/SYNetwork<span class="string">'</div><div class="line">  # 许可证书</div><div class="line">  s.license          = &#123; :type =&gt; '</span>MIT<span class="string">', :file =&gt; '</span>LICENSE<span class="string">' &#125;</div><div class="line">  # 作者信息</div><div class="line">  s.author           = &#123; '</span>CepheusSun<span class="string">' =&gt; '</span>cd_sunyang@163.com<span class="string">' &#125;</div><div class="line">  # pod 源码在 GitHub 的仓库地址,以及 pod 版本</div><div class="line">  s.source           = &#123; :git =&gt; '</span><span class="symbol">https:</span>/<span class="regexp">/github.com/</span>CepheusSun/SYNetwork.git<span class="string">', :tag =&gt; 3.0 &#125;</div><div class="line">  # pod 支持 iOS 系统</div><div class="line">  s.ios.deployment_target = '</span><span class="number">8.0</span><span class="string">'</div><div class="line"></div><div class="line">  s.source_files = '</span>SYNetwork/Classes/*<span class="string">'</div><div class="line"></div><div class="line">  # s.public_header_files = '</span>SYNetwork/Classes/SYNetwork.h<span class="string">'</div><div class="line">  # s.frameworks = '</span>UIKit<span class="string">', '</span>MapKit<span class="string">'</div><div class="line">  s.dependency '</span>AFNetworking<span class="string">', '</span>~&gt; <span class="number">3.0</span><span class="string">'</div><div class="line">end</span></div></pre></td></tr></table></figure>
<p><strong>需要注意的是</strong></p>
<p><strong>1.</strong></p>
<p><code>s.source_files</code></p>
<p><code>s.public_header_files</code>  中设置的文件路径一定应该是正确的。不然后面会出问题。</p>
<p><strong>2.</strong></p>
<p><code>s.version</code></p>
<p><code>s.source</code>中设置的版本应该要对上吧，我不知道对不上会有什么问题。这个地方也会有很多的坑。还有就是至今没明白为什么我如果用 <code>0.1.0</code> 这样会报错，所以我就用了 <code>1.0</code></p>
<h3 id="验证一下"><a href="#验证一下" class="headerlink" title="验证一下"></a>验证一下</h3><p>在终端中执行</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod lib lint</div></pre></td></tr></table></figure>
<p>如果出现</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-&gt; SYNetwork (<span class="number">3.0</span>)</div><div class="line">SYNetwork passed validation.</div></pre></td></tr></table></figure>
<p>就是验证通过</p>
<p>不然就需要去改各种问题了</p>
<h3 id="注册CocoaPods"><a href="#注册CocoaPods" class="headerlink" title="注册CocoaPods"></a>注册CocoaPods</h3><p>要上传你的代码到 CocoaPods 肯定也需要注册自己的身份。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod trunk register your_email_address <span class="string">'your_name'</span></div></pre></td></tr></table></figure>
<p>成功之后 CocoaPods 会发送一验证邮件到上面的邮箱，确认一下就OK</p>
<p><strong>这里的<code>your_name</code>非常建议你使用 GitHub 的用户名 邮箱也是</strong></p>
<h3 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git tag -m<span class="string">"first release"</span> <span class="string">"3.0"</span></div><div class="line">git push --tags</div><div class="line">pod trunk push iOS_Category.podspec</div></pre></td></tr></table></figure>
<p>这了的 3.0 就是<code>SYNetwork.podspec</code>中的 3.0 </p>
<p>最后搜索一下吧</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod search SYNetwork</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>一些坑吧！</p>
<h4 id="路径不对"><a href="#路径不对" class="headerlink" title="路径不对"></a>路径不对</h4><blockquote>
<p>Unable to interpret the specified path as a podspec</p>
</blockquote>
<p> 看你的 tag 标记和 podSpec 文件的 version 字段是否一致</p>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p>[<em><a href="http://blog.csdn.net/skylin19840101/article/details/50426822">在CocoaPods上创建自己iOS程序的依赖管理</a></em></p>
<p><a href="http://tips.producter.io/shi-yong-cocoapods-jin-xing-tuan-dui-xie-zuo/">使用 CocoaPods 进行团队协作</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是一个教你使用CocoaPods管理开源模块的文章。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作为一个 iOS 开发者，几乎所有人都使用过 CocoaPods 。作为 iOS 开发中最常用最有名的类库管理工具，给开发者带来了很大的便利。而且现在很多的第三方类库都支持 Pod . 如果一名开发者想要将自己的代码开源给更多的人使用，支持 CocoaPods 肯定是更好的办法。&lt;/p&gt;
&lt;p&gt;最近一直在考虑将公司的项目使用 CocoaPods 来模块管理，所以将前段时间重新写的 &lt;code&gt;SYNetwork&lt;/code&gt; 进行了对其他类的解耦，在这个过程中学到了很多组织代码的经验， 加上最近正在读的 《设计模式之禅》 逐渐意识到之前自己组织代码的能力还是有所欠缺，很多模块之间也进行了一些完全没有必要的耦合，这其实是很烂的编码形式。&lt;/p&gt;
&lt;p&gt;由于公司并没有构建自己的 git 服务器, 而是将代码托管在了 oschina ,所以索性将这个模块开源并放在了github上。然后尝试使用 CocoaPods 来管理这个模块，并在公司其他几个项目中进行推广。&lt;/p&gt;
    
    </summary>
    
      <category term="CocoaPods" scheme="https://CepheusSun.github.io/categories/CocoaPods/"/>
    
    
      <category term="CocoaPods" scheme="https://CepheusSun.github.io/tags/CocoaPods/"/>
    
      <category term="iOS" scheme="https://CepheusSun.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>2016我的书单</title>
    <link href="https://CepheusSun.github.io/2016/11/25/2016%E6%88%91%E7%9A%84%E4%B9%A6%E5%8D%95/"/>
    <id>https://CepheusSun.github.io/2016/11/25/2016我的书单/</id>
    <published>2016-11-24T16:00:00.000Z</published>
    <updated>2016-12-09T03:08:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>在年末的时候意识到梳理记录是一件多么重要和美好的事情。从阅读开始，从2016年开始记录我的读书记录。</p>
<a id="more"></a>
<h3 id="已经读清单"><a href="#已经读清单" class="headerlink" title="已经读清单"></a>已经读清单</h3><h4 id="《疯狂的Java讲义》"><a href="#《疯狂的Java讲义》" class="headerlink" title="《疯狂的Java讲义》"></a>《疯狂的Java讲义》</h4><blockquote>
<p>虽然看了但是没有很深入的研究学习Java，仅仅是看了而已😂</p>
</blockquote>
<h4 id="《禅与Objective-C编程艺术》"><a href="#《禅与Objective-C编程艺术》" class="headerlink" title="《禅与Objective-C编程艺术》"></a>《禅与Objective-C编程艺术》</h4><blockquote>
<p>iOS进阶苦旅</p>
</blockquote>
<h4 id="《iOS开发进阶》"><a href="#《iOS开发进阶》" class="headerlink" title="《iOS开发进阶》"></a>《iOS开发进阶》</h4><blockquote>
<p>iOS进阶苦旅</p>
</blockquote>
<h4 id="《Effective-Objective-C-2-0：编写高质量iOS与OS-X代码的52个有效方法》"><a href="#《Effective-Objective-C-2-0：编写高质量iOS与OS-X代码的52个有效方法》" class="headerlink" title="《Effective Objective-C 2.0：编写高质量iOS与OS X代码的52个有效方法》"></a>《Effective Objective-C 2.0：编写高质量iOS与OS X代码的52个有效方法》</h4><blockquote>
<p>iOS进阶苦旅，强烈推荐本书。</p>
</blockquote>
<h4 id="《PRODUCTER》"><a href="#《PRODUCTER》" class="headerlink" title="《PRODUCTER》"></a>《PRODUCTER》</h4><blockquote>
<p>Kevin Zhou 出品</p>
</blockquote>
<h4 id="《Objective-C高级编程-iOS与OS-X多线程和内存管理》"><a href="#《Objective-C高级编程-iOS与OS-X多线程和内存管理》" class="headerlink" title="《Objective-C高级编程 iOS与OS X多线程和内存管理》"></a>《Objective-C高级编程 iOS与OS X多线程和内存管理》</h4><blockquote>
<p>iOS进阶苦旅，强烈推荐本书。</p>
</blockquote>
<h4 id="《腾讯是怎么长大的》"><a href="#《腾讯是怎么长大的》" class="headerlink" title="《腾讯是怎么长大的》"></a>《腾讯是怎么长大的》</h4><blockquote>
<p>算是腾讯的自传吧</p>
</blockquote>
<h4 id="《跳槽：做出更好的选择》"><a href="#《跳槽：做出更好的选择》" class="headerlink" title="《跳槽：做出更好的选择》"></a>《跳槽：做出更好的选择》</h4><blockquote>
<p>职业规划相关 </p>
</blockquote>
<h3 id="DOING"><a href="#DOING" class="headerlink" title="DOING"></a>DOING</h3><h4 id="《The-Swift-Programming-Languige》"><a href="#《The-Swift-Programming-Languige》" class="headerlink" title="《The Swift Programming Languige》"></a>《The Swift Programming Languige》</h4><blockquote>
<p>swift 开发必备</p>
</blockquote>
<h4 id="《软件开发者路线图：从学徒到高手》"><a href="#《软件开发者路线图：从学徒到高手》" class="headerlink" title="《软件开发者路线图：从学徒到高手》"></a>《软件开发者路线图：从学徒到高手》</h4><h3 id="未读清单"><a href="#未读清单" class="headerlink" title="未读清单"></a>未读清单</h3><h4 id="《软件开发者路线图-从学徒到高手》"><a href="#《软件开发者路线图-从学徒到高手》" class="headerlink" title="《软件开发者路线图:从学徒到高手》"></a>《软件开发者路线图:从学徒到高手》</h4><h4 id="《编程珠玑》"><a href="#《编程珠玑》" class="headerlink" title="《编程珠玑》"></a>《编程珠玑》</h4><h4 id="《重构-改善既有代码的设计》"><a href="#《重构-改善既有代码的设计》" class="headerlink" title="《重构 改善既有代码的设计》"></a>《重构 改善既有代码的设计》</h4><h4 id="《React-Native-用JavaScript开发移动应用》"><a href="#《React-Native-用JavaScript开发移动应用》" class="headerlink" title="《React Native 用JavaScript开发移动应用》"></a>《React Native 用JavaScript开发移动应用》</h4><h4 id="《Objective-C编程全解》"><a href="#《Objective-C编程全解》" class="headerlink" title="《Objective-C编程全解》"></a>《Objective-C编程全解》</h4><h3 id="书库"><a href="#书库" class="headerlink" title="书库"></a>书库</h3><h4 id="《A-Guide-To-iOS-Animation》"><a href="#《A-Guide-To-iOS-Animation》" class="headerlink" title="《A Guide To iOS Animation》"></a>《A Guide To iOS Animation》</h4><h4 id="《iOS进阶指南》"><a href="#《iOS进阶指南》" class="headerlink" title="《iOS进阶指南》"></a>《iOS进阶指南》</h4><blockquote>
<p>iOS圈网红 叶孤城正在写的书</p>
</blockquote>
<h4 id="《Core-Data》"><a href="#《Core-Data》" class="headerlink" title="《Core Data》"></a>《Core Data》</h4><blockquote>
<p>objc.io 出品 喵神翻译</p>
</blockquote>
<h4 id="《Swift-设计模式（iOS）》"><a href="#《Swift-设计模式（iOS）》" class="headerlink" title="《Swift 设计模式（iOS）》"></a>《Swift 设计模式（iOS）》</h4><h4 id="《Go-Web-编程》"><a href="#《Go-Web-编程》" class="headerlink" title="《Go Web 编程》"></a>《Go Web 编程》</h4><h4 id="《iOS-CORE-ANIMATION》"><a href="#《iOS-CORE-ANIMATION》" class="headerlink" title="《iOS CORE ANIMATION》"></a>《iOS CORE ANIMATION》</h4><h4 id="《Python-Cookbook》"><a href="#《Python-Cookbook》" class="headerlink" title="《Python Cookbook》"></a>《Python Cookbook》</h4><h4 id="《函数式Swift》"><a href="#《函数式Swift》" class="headerlink" title="《函数式Swift》"></a>《函数式Swift》</h4><blockquote>
<p>objc.io 出品 喵神翻译</p>
</blockquote>
<h4 id="《深入解析Mac-OX-amp-iOS-操作系统》"><a href="#《深入解析Mac-OX-amp-iOS-操作系统》" class="headerlink" title="《深入解析Mac OX &amp; iOS 操作系统》"></a>《深入解析Mac OX &amp; iOS 操作系统》</h4><h4 id="《JavaScript-权威指南》"><a href="#《JavaScript-权威指南》" class="headerlink" title="《JavaScript 权威指南》"></a>《JavaScript 权威指南》</h4><h4 id="《JavaScript-面向对象编程指南》"><a href="#《JavaScript-面向对象编程指南》" class="headerlink" title="《JavaScript 面向对象编程指南》"></a>《JavaScript 面向对象编程指南》</h4><h4 id="《JavaScript-王者归来》"><a href="#《JavaScript-王者归来》" class="headerlink" title="《JavaScript 王者归来》"></a>《JavaScript 王者归来》</h4><h4 id="《Shell脚本学习指南》"><a href="#《Shell脚本学习指南》" class="headerlink" title="《Shell脚本学习指南》"></a>《Shell脚本学习指南》</h4><h4 id="《大道至简-软件工程实践者的思想》"><a href="#《大道至简-软件工程实践者的思想》" class="headerlink" title="《大道至简 软件工程实践者的思想》"></a>《大道至简 软件工程实践者的思想》</h4><h4 id="《REWORK》"><a href="#《REWORK》" class="headerlink" title="《REWORK》"></a>《REWORK》</h4><h4 id="《iOS-并发编程指南》"><a href="#《iOS-并发编程指南》" class="headerlink" title="《iOS 并发编程指南》"></a>《iOS 并发编程指南》</h4><h4 id="《Growth-全栈工程师指南》"><a href="#《Growth-全栈工程师指南》" class="headerlink" title="《Growth 全栈工程师指南》"></a>《Growth 全栈工程师指南》</h4><h4 id="《深入浅出全栈工程师》"><a href="#《深入浅出全栈工程师》" class="headerlink" title="《深入浅出全栈工程师》"></a>《深入浅出全栈工程师》</h4><h4 id="《调试九法-软件错误的排查之道》"><a href="#《调试九法-软件错误的排查之道》" class="headerlink" title="《调试九法 软件错误的排查之道》"></a>《调试九法 软件错误的排查之道》</h4><h4 id="《架构实践-软件架构设计的过程》"><a href="#《架构实践-软件架构设计的过程》" class="headerlink" title="《架构实践 软件架构设计的过程》"></a>《架构实践 软件架构设计的过程》</h4><h4 id="《图解TCP-IP》"><a href="#《图解TCP-IP》" class="headerlink" title="《图解TCP/IP》"></a>《图解TCP/IP》</h4><h4 id="《图解HTTP》"><a href="#《图解HTTP》" class="headerlink" title="《图解HTTP》"></a>《图解HTTP》</h4><h4 id="《HTTP权威指南》"><a href="#《HTTP权威指南》" class="headerlink" title="《HTTP权威指南》"></a>《HTTP权威指南》</h4><h4 id="《TCP-IP详解-协议、实现、TCP事物协议》"><a href="#《TCP-IP详解-协议、实现、TCP事物协议》" class="headerlink" title="《TCP/IP详解 协议、实现、TCP事物协议》"></a>《TCP/IP详解 协议、实现、TCP事物协议》</h4>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在年末的时候意识到梳理记录是一件多么重要和美好的事情。从阅读开始，从2016年开始记录我的读书记录。&lt;/p&gt;
    
    </summary>
    
      <category term="阅读" scheme="https://CepheusSun.github.io/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="阅读" scheme="https://CepheusSun.github.io/tags/%E9%98%85%E8%AF%BB/"/>
    
      <category term="图书" scheme="https://CepheusSun.github.io/tags/%E5%9B%BE%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>怎样在iOS中使用icon-font？</title>
    <link href="https://CepheusSun.github.io/2016/11/23/%E6%80%8E%E6%A0%B7%E5%9C%A8iOS%E4%B8%AD%E4%BD%BF%E7%94%A8icon-font%EF%BC%9F/"/>
    <id>https://CepheusSun.github.io/2016/11/23/怎样在iOS中使用icon-font？/</id>
    <published>2016-11-22T16:00:00.000Z</published>
    <updated>2016-12-08T17:38:22.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>这是一篇写给 iOS 开发的文章(教程)。</p>
</blockquote>
<p>icon 和 font 拆开来看应该所有人都认识它是什么意思，iconfont就是这两者的结合。严格的说，我们平时使用的字体，并不是我们传统认知中的文字，而是一个一个的图标。是由在坐标系中各种点，连起来组成的。babala….. 这也是我们平时使用的字体无论放到多大，都不会出现在图片上面出现的因为拉伸而出现的失真的情况。</p>
<p>iconfont 实际上就是吧我们在项目中要使用的各类 icon 按照相同的原理制作成一个字体库，然后用使用 font 的方式来使用。</p>
<p>说的挺乱，反正大概就是这么个意思吧。</p>
<a id="more"></a>
<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p>测试的时候随便截了一个图<br><img src="http://ocg4av0wv.bkt.clouddn.com/9760173C-7692-43C5-A5CC-FEED1611B3B5.png" /></p>
<h2 id="icon-font-解决了什么问题"><a href="#icon-font-解决了什么问题" class="headerlink" title="icon-font 解决了什么问题"></a>icon-font 解决了什么问题</h2><blockquote>
<ul>
<li>解决一个图标要同时适配PC 移动端 和 retina 的问题</li>
</ul>
</blockquote>
<p>在现在扁平化设计大行其道的大环境下，拟物化设计推崇的写实以及高光纹理之类的元素也基本上都被现在的设计师们舍弃掉了，这也为 icon-font 的应用提供了基础。</p>
<blockquote>
<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul>
<li>减少应用体积，字体文件比图片要小</li>
<li>图标保真缩放，解决2x／3x的问题</li>
<li>方便更改图标颜色大小，阴影，图片复用</li>
<li>一套图标资源可以在不同平台使用(安卓、iOS、web)</li>
<li>资源维护方便</li>
</ul>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>需要自定义svg图片，并将其转换为ttf文件，图标制作成本比较高</li>
<li>添加图标是需要重新制作ttf文件</li>
<li>只能支持单色(不支持渐变色图标)</li>
</ul>
<p>(以上内容来自 没故事的卓同学 在趣直播的分享)</p>
</blockquote>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>这个很简单，就是利用 svg 矢量图制作字体库</p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul>
<li>阿里的iconfont.cn</li>
<li>svg 文件，svg 的制作其实是由设计师完成的，我们只需要让设计师提供合适的 svg 而不是2x3x图片。就可以了。</li>
</ul>
<h3 id="step-1"><a href="#step-1" class="headerlink" title="step 1"></a>step 1</h3><p><strong>在<a href="ICONFONT.CN">iconfont.cn</a>注册并登录</strong>。</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/CB315E67-08BF-46E0-A087-F658EC1B49FC.png"/></p>
<p>注册完成后点击图标管理，我的图标，然后上传准备好的 svg 文件。</p>
<p><strong>然后切换到我的项目</strong></p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/6064C73F-8BEF-40B9-99EB-3C5BF3BFDBCB.png" /></p>
<p>点击右边的添加，创建字体库。</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/1DF9A210-D6A1-490B-B816-2D813E51F643.png"/></p>
<p>红圈内的内容就是接下来要用到的<code>fontName</code></p>
<p><strong>接下来</strong></p>
<p>还记得我们第一步上传的图标名字吧！</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/64E77B1D-6153-42FA-8FBE-D8C715725C21.png" /></p>
<p>在右上角搜索哪个名字，然后就出来了刚刚上传的图标</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/820BD3A3-DF5B-4837-BA09-40AD93BEFE3C.png"/></p>
<p>加入购物车之后</p>
<p>右上角购物车上应该出现了 badge吧。</p>
<p><strong>点击这个图标</strong></p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/B8A3AE3A-7758-4435-82E9-6E12DDDA4C47.png"/></p>
<p>因为我已经添加了 <code>ps_shop_icon</code>所以我就随便选了一个。</p>
<p><strong>回到我的项目</strong></p>
<p>点击下载至本地</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/C4838064-2EEC-44F8-A8DE-AC5C56A4673E.png"/></p>
<p>下载之后你会看到一个 .ttf 文件。</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/B9737F6A-0140-430F-8298-4DD575AD9C7A.png"/></p>
<p><strong>将这个文件拉到项目中</strong></p>
<p>接下来就是要在项目中操作的事情了。</p>
<h4 id="step-2"><a href="#step-2" class="headerlink" title="step 2"></a>step 2</h4><p><img src="http://ocg4av0wv.bkt.clouddn.com/AF58494E-C3F6-4CEB-BDAD-8F798246F771.png"/></p>
<p>在info.plist 文件中添加如上内容。</p>
<p><strong>然后</strong></p>
<p>在 <code>Build Phases</code>中检查一下</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/954BABBC-3644-4189-9016-B692D18E5CCB.png"/></p>
<p>如果没有就删掉重新拉进项目吧！</p>
<p>或者点击最下面手动添加。</p>
<h4 id="step-3"><a href="#step-3" class="headerlink" title="step 3"></a>step 3</h4><p>在代码中找一个label</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">label.font = [UIFont fontWithName:@&quot;dph_fonticon&quot; size:20];</div><div class="line">label.textColor = [UIColor redColor];</div><div class="line">label.text = @&quot;\U0000e601&quot;;</div></pre></td></tr></table></figure>
<p>代码中的<code>dph_fonticon</code> 就是在iconfont.cn的项目中设置的<code>font-family</code>名字</p>
<p><code>\U0000e601</code>是在iconfont.cn 中对应</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/9B7F5726-260D-4CCA-859B-F5453307387E.png"/></p>
<p>图片中的<code>&amp;#xe610</code> 这个是给前端用的，在iOS上对应的将<code>&amp;#x</code>更换成<code>\U</code> 然后补0 保证unicode 为8位就是了。 </p>
<p>现在运行一下代码，就能看到对应的值已经改变了。</p>
<h3 id="Xib"><a href="#Xib" class="headerlink" title="Xib"></a>Xib</h3><p><img src="http://ocg4av0wv.bkt.clouddn.com/3831121F-8386-4F51-B578-B425888571C6.png" /></p>
<p>如上图。</p>
<p>那个问号需要将下载下来的<code>.ttf</code>文件导入本体的一个叫做<code>footbook的app中</code>（直接拖进去就ok）</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/10B329BA-57B9-4C54-B447-90EEBDDC138D.png"/></p>
<p> 然后就可以复制粘贴了。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>iconfont 这种技术好几年前就已经出现了，现在也已经出现在了阿里的大部分产品中，可见iconfont的技术也是十分成熟的，为了给安装包瘦身，开发者们也做了很多的努力，作为占用资源非常多的图片文件，使用 iconfont 确实能够给 app 减肥。这对于像淘宝、支付宝之类的巨无霸 app 来说就显得尤为重要了。</p>
<p>后期在公司 UI 的帮助下，准备在公司几个项目中小范围的实验一下这个方法。检验一下 iconfont 能在项目中带来多大的便利。</p>
<h3 id="TODO："><a href="#TODO：" class="headerlink" title="TODO："></a>TODO：</h3><p>使用 iconfont 生成<code>UIImage</code> 在<code>UIButton</code>和<code>UIImageView</code> 中使用。</p>
<p>这个在github 上搜一下<code>iconfont</code> 就有很多代码可以使用了。另外 swift 版本 卓同学也写了一份。</p>
<h3 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h3><p>感谢<a href="http://www.jianshu.com/users/88a056103c02/latest_articles">没故事的卓同学</a>在<a href="www.quzhiboapp.com">趣直播</a>的分享</p>
<p>感谢公司 UI 小哥帮我做了几个 svg 图</p>
<p>感谢公司前端小哥的帮忙</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://github.com/PrideChung/FontAwesomeKit">swift</a></p>
<p><a href="https://github.com/JohnWong/IconFont">objC</a></p>
<p><a href="http://johnwong.github.io/mobile/2015/04/03/using-icon-font-in-ios.html">文章</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这是一篇写给 iOS 开发的文章(教程)。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;icon 和 font 拆开来看应该所有人都认识它是什么意思，iconfont就是这两者的结合。严格的说，我们平时使用的字体，并不是我们传统认知中的文字，而是一个一个的图标。是由在坐标系中各种点，连起来组成的。babala….. 这也是我们平时使用的字体无论放到多大，都不会出现在图片上面出现的因为拉伸而出现的失真的情况。&lt;/p&gt;
&lt;p&gt;iconfont 实际上就是吧我们在项目中要使用的各类 icon 按照相同的原理制作成一个字体库，然后用使用 font 的方式来使用。&lt;/p&gt;
&lt;p&gt;说的挺乱，反正大概就是这么个意思吧。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://CepheusSun.github.io/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://CepheusSun.github.io/tags/iOS/"/>
    
      <category term="UI" scheme="https://CepheusSun.github.io/tags/UI/"/>
    
  </entry>
  
  <entry>
    <title>SYNetwork</title>
    <link href="https://CepheusSun.github.io/2016/11/17/SYNetwork/"/>
    <id>https://CepheusSun.github.io/2016/11/17/SYNetwork/</id>
    <published>2016-11-16T16:00:00.000Z</published>
    <updated>2017-02-22T15:44:25.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p> 基于AFNetworking的网络请求框架。采用command设计模式，支持按照接口缓存请求数据。</p>
</blockquote>
<p>在公司项目整体进行换代升级的同时，移动端 App 由原来的的一个 App 拆分成两个 App ，再拆分到三个 App，在三个 App 虽然还是有很多的办法来进行管理，但是考虑到随着业务的增长，产品的数量还有增加的趋势，功能也逐渐增多。还有 Hybrid化 的趋势。将一些共有的模块提取出来为三个 App 所用，可能会是更好的方式。当然，对这些公共模块的管理，还是会选择使用 CocoaPods ，接下来会再写一篇文章来介绍如何使用创建自己的 CocoaPods 仓库。在这样的环境下，第一个提取出来的模块就诞生了 — SYNetwork。</p>
<p>在进行模块的独立的时候，想得最多的还是和原来的代码进行解耦，并且在抽取的过程中不要破坏原有的代码逻辑，并且比较合理的组织代码。在这样的基础上添加一些新的功能。在跟另外一个同事讨论之后，决定放弃之前集中式的网络请求方式，参考了大量前辈的网络库之后，采用了 Command 模式，一个网络请求 Api 是一个对象，这样能够更方便和优雅的根据不同的接口满足不同的业务需求。</p>
<p>当然，公司的项目目前还没有十分的复杂，所以目前主要实现了: <code>POST</code>、<code>GET</code> 两种请求方式；根据请求的参数和 url 缓存请求结果；一个还算漂亮的logger；简单的对网络请求进行 AOP 操作(对参数进行加密)这些比较常见的功能。</p>
<a id="more"></a>
<p><a href="https://github.com/CepheusSun/SYNetwork"><em>GitHub地址</em></a></p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><p>SYNetwork 由下面两个部分组成</p>
<ul>
<li><p>SYNetwork</p>
</li>
<li><p>SYRequestParametersBuilder</p>
</li>
</ul>
<blockquote>
<p>这个类可以添加一些公共的参数</p>
</blockquote>
<ul>
<li>SYRequest</li>
</ul>
<blockquote>
<p>所有网络请求 API 的父类</p>
</blockquote>
<ul>
<li>SYNetworkConfig</li>
</ul>
<blockquote>
<p>环境配置 包括网络请求的 BaseUrl 请求超时时间，缓存总量等</p>
</blockquote>
<ul>
<li>SYHTTPManager</li>
</ul>
<blockquote>
<p>所有网络请求统一由这个类发出</p>
</blockquote>
<ul>
<li>SYResponse</li>
</ul>
<blockquote>
<p>网络请求返回值对象</p>
</blockquote>
<ul>
<li>SYCache</li>
</ul>
<ul>
<li>SYCache</li>
</ul>
<blockquote>
<p>缓存管理</p>
</blockquote>
<ul>
<li>SYCacheObject </li>
</ul>
<blockquote>
<p>缓存的对象</p>
</blockquote>
<ul>
<li>SYLogger</li>
</ul>
<blockquote>
<p>一个漂亮的logger</p>
</blockquote>
<h2 id="加入"><a href="#加入" class="headerlink" title="加入"></a>加入</h2><h3 id="1、直接将源文件拉进你的工程"><a href="#1、直接将源文件拉进你的工程" class="headerlink" title="1、直接将源文件拉进你的工程"></a>1、直接将源文件拉进你的工程</h3><h3 id="2、SYNetwork也支持通过Cocoapod-通过在Podfile中添加如下代码。"><a href="#2、SYNetwork也支持通过Cocoapod-通过在Podfile中添加如下代码。" class="headerlink" title="2、SYNetwork也支持通过Cocoapod. 通过在Podfile中添加如下代码。"></a>2、SYNetwork也支持通过<a href="http://cocoapods.org"><em>Cocoapod</em></a>. 通过在Podfile中添加如下代码。</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod <span class="string">"SYNetwork"</span></div></pre></td></tr></table></figure>
<p>然后在终端中运行</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod install</div></pre></td></tr></table></figure>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="step-1"><a href="#step-1" class="headerlink" title="step 1"></a>step 1</h3><p>导入头文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#import &lt;SYNetwork/SYNetwork.h&gt;</div></pre></td></tr></table></figure>
<p>在<code>appdelegate</code>中加入如下代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[[SYRequestConfig sharedConfig] configBaseUrl:YOUR_BASE_URL                                            								 timeOutInterval:20</div><div class="line">cacheCountLimit:1000</div><div class="line">rebuildParametersManger:[XXRequestParametersBuilder sharedInstance]];</div></pre></td></tr></table></figure>
<p>以上代码中的<code>XXRequestParametersBuilder</code> 是<code>SYRequestParametersBuilder</code>的子类,主要有以下方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">+ (SYRequestParametersBuilder *)sharedInstance;</div><div class="line"></div><div class="line">- (NSDictionary *)rebuildParameters:(NSDictionary *)parameters;</div><div class="line"></div><div class="line">/**</div><div class="line">生成缓存的key  这个方法必须由字类实现</div><div class="line"></div><div class="line">@param parcmeters 参数</div><div class="line">@return key</div><div class="line">*/</div><div class="line">- (NSString *)cacheSaveKeyString:(NSDictionary *)parcmeters;</div></pre></td></tr></table></figure>
<h3 id="step-2"><a href="#step-2" class="headerlink" title="step 2"></a>step 2</h3><p>每个接口都是一个继承与<code>SYRequest</code>的子类,接下来以登录为例子</p>
<p><strong>LoginApi.h</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (id)initWithUserName:(NSString *)username password:(NSString *)password;</div></pre></td></tr></table></figure>
<p><strong>LoginApi.m</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">@implementation LoginApi&#123;</div><div class="line">NSString *_username;</div><div class="line">NSString *_password;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (id)initWithUserName:(NSString *)username password:(NSString *)password &#123;</div><div class="line">self = [super init];</div><div class="line">if (self) &#123;</div><div class="line">_username = username;</div><div class="line">_password = password;</div><div class="line">_logintype = logintype;</div><div class="line">&#125;</div><div class="line">return self;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (NSString *)requestUrl &#123;</div><div class="line">return @&quot;api/user/login&quot;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (NSMutableDictionary *)requestParams &#123;</div><div class="line">return @&#123;</div><div class="line">@&quot;phone&quot;: _username,</div><div class="line">@&quot;code&quot; : _password,</div><div class="line">&#125;.mutableCopy;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>还可以通过<code>SYRequest</code>的一些方法,来设置请求方法，校验返回收据，是否缓存等问题。</p>
<h3 id="step-3-调用"><a href="#step-3-调用" class="headerlink" title="step 3 调用"></a>step 3 调用</h3><p>通过<code>block</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">_loginApi = [[LoginApi alloc] initWithUserName:phone password:code logintype:type];</div><div class="line">[_loginApi startWithSuccessBlock:^(SYResponse *response , NSString *errorMessage) &#123;</div><div class="line">// 请求成功</div><div class="line">&#125; failureBlbck:^(SYResponse *response , NSString *errorMessage) &#123;</div><div class="line">// 请求失败</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>也可以通过<code>delegate</code>收到回调</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">_loginApi = [[LoginApi alloc] initWithUserName:phone password:code logintype:type];</div><div class="line">_loginApi.callBackDelegate = self;</div><div class="line">[_loginApi start];</div></pre></td></tr></table></figure>
<p>然后实现</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- (void)managerCallApiDidSuccess:(SYResponse *)response;</div><div class="line">- (void)managerCallApiDidFailed:(NSString *)errorMessage;</div></pre></td></tr></table></figure>
<p>两个方法</p>
<h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>SYNetwork is available under the MIT license. See the LICENSE file for more info.</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; 基于AFNetworking的网络请求框架。采用command设计模式，支持按照接口缓存请求数据。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在公司项目整体进行换代升级的同时，移动端 App 由原来的的一个 App 拆分成两个 App ，再拆分到三个 App，在三个 App 虽然还是有很多的办法来进行管理，但是考虑到随着业务的增长，产品的数量还有增加的趋势，功能也逐渐增多。还有 Hybrid化 的趋势。将一些共有的模块提取出来为三个 App 所用，可能会是更好的方式。当然，对这些公共模块的管理，还是会选择使用 CocoaPods ，接下来会再写一篇文章来介绍如何使用创建自己的 CocoaPods 仓库。在这样的环境下，第一个提取出来的模块就诞生了 — SYNetwork。&lt;/p&gt;
&lt;p&gt;在进行模块的独立的时候，想得最多的还是和原来的代码进行解耦，并且在抽取的过程中不要破坏原有的代码逻辑，并且比较合理的组织代码。在这样的基础上添加一些新的功能。在跟另外一个同事讨论之后，决定放弃之前集中式的网络请求方式，参考了大量前辈的网络库之后，采用了 Command 模式，一个网络请求 Api 是一个对象，这样能够更方便和优雅的根据不同的接口满足不同的业务需求。&lt;/p&gt;
&lt;p&gt;当然，公司的项目目前还没有十分的复杂，所以目前主要实现了: &lt;code&gt;POST&lt;/code&gt;、&lt;code&gt;GET&lt;/code&gt; 两种请求方式；根据请求的参数和 url 缓存请求结果；一个还算漂亮的logger；简单的对网络请求进行 AOP 操作(对参数进行加密)这些比较常见的功能。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://CepheusSun.github.io/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://CepheusSun.github.io/tags/iOS/"/>
    
      <category term="OpenSource" scheme="https://CepheusSun.github.io/tags/OpenSource/"/>
    
  </entry>
  
  <entry>
    <title>SYPhotoBrowser</title>
    <link href="https://CepheusSun.github.io/2016/11/02/SYPhotoBrowser/"/>
    <id>https://CepheusSun.github.io/2016/11/02/SYPhotoBrowser/</id>
    <published>2016-11-01T16:00:00.000Z</published>
    <updated>2017-02-22T15:47:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>图片浏览器，使用方法类似UITableView的图片浏览器。基于YYWebImage.</p>
<a id="more"></a>
<h3 id="GIF"><a href="#GIF" class="headerlink" title="GIF"></a>GIF</h3><p><img src="http://ocg4av0wv.bkt.clouddn.com/SYPhotoBrowser.gif" width=500/></p>
<h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SYPhotoBrowser *browser = [[SYPhotoBrowser alloc] init];</div><div class="line">   [browser setDataSource:self];</div><div class="line">   NSInteger idx = 0;</div><div class="line">   [browser showFromView:ges.view photoCount:self.imageUrls.count currentPhotoIndex:idx];</div></pre></td></tr></table></figure>
<h4 id="Datasource"><a href="#Datasource" class="headerlink" title="Datasource"></a>Datasource</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (UIView *)photoView:(SYPhotoBrowser *)photeBrowser viewForIndex:(NSInteger)index;</div><div class="line">- (CGSize)photoView:(SYPhotoBrowser *)photeBrowser imageSizeForIndex:(NSInteger)index;</div><div class="line">- (UIImage *)photoView:(SYPhotoBrowser *)photoBrowser defaultImageForIndex:(NSInteger)index;</div><div class="line">- (NSString *)photoView:(SYPhotoBrowser *)photoBrowser highQualityUrlStringForIndex:(NSInteger)index;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/CepheusSun/SYPhotoBrowser"><em>GitHub地址</em></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;图片浏览器，使用方法类似UITableView的图片浏览器。基于YYWebImage.&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://CepheusSun.github.io/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://CepheusSun.github.io/tags/iOS/"/>
    
      <category term="OpenSource" scheme="https://CepheusSun.github.io/tags/OpenSource/"/>
    
  </entry>
  
  <entry>
    <title>让人恐惧的属性关键字</title>
    <link href="https://CepheusSun.github.io/2016/10/31/%E8%AE%A9%E4%BA%BA%E6%81%90%E6%83%A7%E7%9A%84%E5%B1%9E%E6%80%A7%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <id>https://CepheusSun.github.io/2016/10/31/让人恐惧的属性关键字/</id>
    <published>2016-10-30T16:00:00.000Z</published>
    <updated>2016-12-09T02:56:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>一半的 App 都会有一个个人这个模块来对个人信息，设置等功能进行管理，最近搞公司的项目，在项目结束的时候就想到了应该给我的这个界面加上 “headerimage scale” 这样的效果。然后项目已经结束，也并不想大刀阔斧的去修改原来的代码，想到之前在微博看到一个这样的库。时间还是比较紧急的，毕竟周末，然后就把代码下下来，简单的跑了一下，没有发现什么问题之后就直接在项目中用了。</p>
<p>由于公司一直缺乏很系统的兼容测试，只是对功能有比较严格的要求，所以接下来到上线这个过程都很愉快。 UI、产品都比较满意这样搞。</p>
<p>上线之后，就发生了一些悲剧的事情了….</p>
<a id="more"></a>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/CE310A65-63EE-4D64-B031-864A19556924.png",width = 500 /></p>
<h4 id="UIScrollView-headerImageScale-实现原理"><a href="#UIScrollView-headerImageScale-实现原理" class="headerlink" title="UIScrollView + headerImageScale 实现原理"></a>UIScrollView + headerImageScale 实现原理</h4><p>不得不说，这个category也是一个非常好的东西，帮助我们轻松的集成tableview上面的头部缩放图片，且无侵入性。</p>
<p>实现原理其实看起来也比较见到，使用到了method swizzling来拦截到tableview的头部试图，然后通过KVO来监听scrollview的偏移量。然后修改imageView的frame实现头部试图的缩放。</p>
<p>当然既然使用到了KVO很自然的就要想到在dealloc方法里面需要去移除observer我也很愉快的在源码里面找到了这个方法。<strong>这就是坑所在</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- (void)dealloc</div><div class="line">&#123;</div><div class="line">    if (self.yz_isInitial) &#123; // 初始化过，就表示有监听contentOffset属性，才需要移除</div><div class="line">        </div><div class="line">        [self removeObserver:self forKeyPath:YZKeyPath(self, contentOffset)];</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可能说的不好，但是大概实现思路，也跟我之前自己写的差不多，就是在原来的header位置上面放一个UIimageView，通过监听scrollview的偏移量来改变UIimageView的frame.</p>
<p>然后我们接着讲，由于公司缺乏系统的兼容性测试，在上线前使用模拟器跟UI对应调整了一下试图，以及针对小屏幕手机做了相应了屏幕适配之后。项目也很顺利的上线了，虽然从我点发布，到我在app store上面搜到这期间相差了6七个小时，感觉这个周期比往常慢了很多。</p>
<p>原以为提前了半个月完成了项目，然后经过了十分充分的测试，自己也针对极端网络条件下做了很多测试。这个版本应该不会收集到太多的线上crash。</p>
<p>然后很不幸的是我在线上日志收集日志中看到了很怪异的问题，线上crash一直都非常高。</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/8C289058-1F79-42EE-8F0B-34FA0FC27A43.png" width= 500 /></p>
<p>这是我通过bugly收集到的相关日志， 仔细一看，所有crash都发生在iOS8上面。一共三条日志，全部发生在iOS8 上面。</p>
<p>这让我意识到这个问题一定是这次更新导致了严重的不兼容iOS8的问题。</p>
<h4 id="DEBUG过程"><a href="#DEBUG过程" class="headerlink" title="DEBUG过程"></a>DEBUG过程</h4><p>可能也注意到了，上面有一条ipad的日志，虽然app并没有兼容apad，但是我也用家里的ipad试了一下，进入app，到登录界面然后就crash，在打了全局断点的情况下，crash到了maim.m这个文件里面，bad_access野指针。然后我想了半天也没有找到什么情况下能这么快的出现crash。然后我把目标放在了JPush 极光推送上面。经历了一段时间之后，我仔细检查了极光推送所有的地方，并且尝试将所有代码注释的方法，crash依旧。</p>
<p>后来我开始依赖于google，最终在唐巧巧大的博客里找到了解决方法。</p>
<p>在appdelegate中定义一个方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">void uncaughtExceptionHandler(NSException *exception) &#123;</div><div class="line">    NSLog(@&quot;CRASH: %@&quot;, exception);</div><div class="line">    NSLog(@&quot;Stack Trace: %@&quot;, [exception callStackSymbols]);</div><div class="line">    // Internal error reporting</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在应用启动的时候，将这个方法作为异常的回调</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions</div><div class="line">&#123;   </div><div class="line">    NSSetUncaughtExceptionHandler(&amp;uncaughtExceptionHandler);</div><div class="line">    // Normal launch stuff</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后终于能看到日志了。</p>
<p>在另外一次crash中我看到了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[UIScrollView _systemGestureStateChanged:]: message sent to deallocated instance</div></pre></td></tr></table></figure>
<p>这样的句子，才明白，crash并不是JPush造成的。UIScrollView，此时我并没有想到什么东西，因为在这个使用到了ScrollView的场景实在不多，然后我通过修改代码，绕开使用了<code>UIScrollView</code>的<code>WelcomeViewController</code>之后发现登录界面正常，不绕开，无法进入登录界面。然后登录界面登录进去之后依然crash</p>
<p>因为我的登录界面</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/E28FB77D-C390-47D4-A6B3-6FED899295EF.png" width=200/></p>
<p>这个控件使用了Scrollview。</p>
<p>然后在登录成功最后，几乎无法使用，log全是差不多的情况，这个时候我才开始吧注意力放在相关的类别里面。</p>
<p>然后我又打开了<a href="http://www.jianshu.com/p/859e3ef76b05"><em>作者的简书</em></a></p>
<p>在评论中看到这样一句</p>
<blockquote>
<p>1.发现app中任何的uitableview被释放之后，再点击屏幕就会crash，报<br>[UITableView _systemGestureStateChanged:]: message sent to deallocated instance 0x17385200<br>2.后来发现任何的collectionview被释放之后，点击屏幕也会crash，报<br>[UICollectionView _systemGestureStateChanged:]: message sent to deallocated instance 0x17385200<br>3.把目光放在UIScrollView上，查找UIScrollView的分类，是否有问题<br>4.找到 UIScrollView+HeaderScaleImage.h 注释了其中一部分代码,并把所有的引用都注释掉，依然有这个问题。<br>5.开始将目光放在_systemGestureStateChanged上，还有僵尸对象上，用instrument调试，依然无解。<br>6.六个小时过去了。<br>7.睡了一觉，然后又把目光放在UIScrollView上，将UIScrollView+HeaderScaleImage.h 中的代码全部注释掉了。<br>8.正常。感觉世界都亮了。<br>9.一步一步注释，排除，最后发现这个里面重写了uiscrollview的dealloc方法，导致scrollview在释放的时候无法清除自己的观察者身份，导致系统发通知的时候仍然能发到它身上。ios 9 没问题，ios8上就会直接crash。<br>10.将最后那个dealloc中的代码另外立出来，在controller的dealloc中主动调用这个方法，整个app没几个页面用这个，所以也并没有增加太多的工作量。</p>
</blockquote>
<p>照着上面的方法修改之后，果然，问题得到解决。</p>
<h4 id="分析原因"><a href="#分析原因" class="headerlink" title="分析原因"></a>分析原因</h4><p>如果还记得本文的标题，大概也能想到了，在iOS9以前的系统上delegate的属性关键字是assign,这一点不用查看什么文档，只需要在百度里面搜索一下 <code>delegate assign 2014</code> 就可以得到验证。</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/FF79579D-6E61-4795-A19F-5806CF7.png" width=500 /></p>
<p>在那个时代的delegate都是使用的assign作为delegate的属性关键字。</p>
<p>我们再看看<strong>52个方法</strong>中对几个属性关键字的描述</p>
<blockquote>
<ol>
<li>assign “设置方法” 只会执行针对“纯量关系”的简单负值操作。</li>
<li>strong 此特质表明该属性定义了一种“拥有关系”，为这种属性设置新值时，设置方法会<strong>先保留新值，并释放旧值</strong>然后讲新值设置上去。</li>
<li>weak 此特质表明该属性定义了一种“非拥有关系”，为这种属性设置新值时，设置方法<strong>既不保留新值，也不释放旧值</strong>，此特征同assign类似，然而在属性所指的对象遭到摧毁时，属性指也会清空（nil out）</li>
<li>unsafe_unretained 此特质的语义和assign相同，但是它适用于“对象类型”，该特质表达一种“非拥有关系”，当目标对象遭到摧毁时，属性值不会自动清空。</li>
<li>copy 此特质与strong类似，然而设置方法并不保留新值而是将其拷贝一份。</li>
</ol>
</blockquote>
<p>这时候我们看到无论是使用assign 还是weak 甚至是unsafe_unretained都不会造成循环引用的问题。</p>
<p>assign实际上是指针覆值，不对引用计数操作，使用之后如果没有置为nil，可能就会产生野指针；而weak一旦不进行使用后，会有一个置nil的操作。</p>
<h4 id="猜测"><a href="#猜测" class="headerlink" title="猜测"></a>猜测</h4><p>这就说明在iOS8下虽然系统在代理中都使用的assign属性关键字，但是在dealloc方法中使用了如<code>self.delegate = nil</code>这样的代码，将对象置为nil.</p>
<p>然后我我们在UISCrollView的分类中重写了他的dealloc方法，导致这一过程消失。所以造成野指针。</p>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>由于app已经上线，所以最初的思路还是使用hotfix来解决这个问题，但是经过一番努力之后，发现即使是使用了JSPatch也没有办法来解决这个问题，因为UIScrollview的子类涉及的太多了。我们也没有办法，通过patch的方法，还原系统的dealloc方法。所以我也只能先注释掉category中的dealloc方法，然后在使用了这个类别的我的界面中，手动的移除observer。</p>
<h4 id="证明猜测"><a href="#证明猜测" class="headerlink" title="证明猜测"></a>证明猜测</h4><p>既然结论都是猜测出来了，我也简单的写一个小demo来验证一下刚才的猜测吧！</p>
<p> 首先定义了一个Dog类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line">@class Cat;</div><div class="line">@protocol DogDelegate &lt;NSObject&gt;</div><div class="line"></div><div class="line">- (void)fuck;</div><div class="line"></div><div class="line">@end</div><div class="line">@interface Dog : NSObject</div><div class="line"></div><div class="line">@property (nonatomic ,assign) Cat &lt;DogDelegate&gt; *delegate;</div><div class="line"></div><div class="line">-(void)run;</div><div class="line">@end</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#import &quot;Dog.h&quot;</div><div class="line">#import &quot;Cat.h&quot;</div><div class="line"></div><div class="line">@implementation Dog</div><div class="line"></div><div class="line">- (void)setDelegate:(Cat&lt;DogDelegate&gt; *)delegate &#123;</div><div class="line">    _delegate = delegate;</div><div class="line">    [delegate addObserver:self forKeyPath:@&quot;name&quot; options:NSKeyValueObservingOptionNew context:nil];</div><div class="line">&#125;</div><div class="line"></div><div class="line">//- (void)dealloc &#123;</div><div class="line">//    [self.delegate removeObserver:self forKeyPath:@&quot;name&quot;];</div><div class="line">//&#125;</div><div class="line"></div><div class="line">- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary&lt;NSKeyValueChangeKey,id&gt; *)change context:(void *)context &#123;</div><div class="line">    </div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>然后定义个一个Cat类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line"></div><div class="line">@interface Cat : NSObject</div><div class="line">@property (nonatomic ,strong) NSString *name;</div><div class="line">@end</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#import &quot;Cat.h&quot;</div><div class="line">#import &quot;Dog.h&quot;</div><div class="line"></div><div class="line">@interface Cat ()&lt;DogDelegate&gt;</div><div class="line">@end</div><div class="line">@implementation Cat</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>最后调用一下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Dog *dog = [[Dog alloc] init];</div><div class="line">Cat *cat = [[Cat alloc] init];</div><div class="line">dog.delegate = cat;</div><div class="line">cat.name =  @&quot;nacy&quot;;    </div><div class="line">dog = nil;</div><div class="line">cat.name = @&quot;lily&quot;;</div></pre></td></tr></table></figure>
<p>果然如果注释掉Dog的dealloc方法，就会造成<code>EXC_BAD_ACCESS</code>crash。</p>
<h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><ol>
<li>千万不要在 category 中覆盖掉原来类中的方法。不然不知道有多少坑等着你。</li>
<li>在 iOS8 下 delegate使用的是 assign 属性关键字，这是MRC时代的问题。</li>
<li>这个问题确实是由于覆盖了dealloc方法，导致原来dealloc中清理掉原来对象中的delegate相关代码无法执行。这时候再有observer就会造成野指针。</li>
<li>在使用各种属性关键字的时候，一定要想好。</li>
<li>不要以为新的东西出来了就忘掉了以前的东西吧。</li>
</ol>
<h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>大神都是一步一个坑踩过来的。虽然这个问题导致原本很愉快的版本（线上没有crash）变成了现在这个样子，甚至还只能紧急发版来解决。但还是值得的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一半的 App 都会有一个个人这个模块来对个人信息，设置等功能进行管理，最近搞公司的项目，在项目结束的时候就想到了应该给我的这个界面加上 “headerimage scale” 这样的效果。然后项目已经结束，也并不想大刀阔斧的去修改原来的代码，想到之前在微博看到一个这样的库。时间还是比较紧急的，毕竟周末，然后就把代码下下来，简单的跑了一下，没有发现什么问题之后就直接在项目中用了。&lt;/p&gt;
&lt;p&gt;由于公司一直缺乏很系统的兼容测试，只是对功能有比较严格的要求，所以接下来到上线这个过程都很愉快。 UI、产品都比较满意这样搞。&lt;/p&gt;
&lt;p&gt;上线之后，就发生了一些悲剧的事情了….&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://CepheusSun.github.io/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://CepheusSun.github.io/tags/iOS/"/>
    
  </entry>
  
</feed>
