<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ProgramerSunny的博客</title>
  <subtitle>ProgramerSunny的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://programersunny.github.io/"/>
  <updated>2017-02-01T16:14:38.000Z</updated>
  <id>https://programersunny.github.io/</id>
  
  <author>
    <name>Programer Sunny</name>
    <email>cd_sunyang@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python Debug 之一</title>
    <link href="https://programersunny.github.io/2017/02/02/python%20debug%20%E4%B9%8B%E4%B8%80/"/>
    <id>https://programersunny.github.io/2017/02/02/python debug 之一/</id>
    <published>2017-02-01T16:00:00.000Z</published>
    <updated>2017-02-01T16:14:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>错误类型:SyntaxError: Non-ASCII character ‘\xe9’ in file xxx</p>
<a id="more"></a>
<p>最近写 python 代码的时候，简单的一下代码，确出现错误。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">points = int(raw_input(<span class="string">"领先的分数："</span>))</div><div class="line">is_in_control = raw_input(<span class="string">"是否领先队控球(Y／N：)"</span>)</div><div class="line">last_seconds = int(raw_input(<span class="string">"比赛剩余秒数："</span>))</div><div class="line"></div><div class="line">points -= <span class="number">3</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> is_in_control == <span class="string">'Y'</span>:</div><div class="line">    points += <span class="number">0.5</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    points -= <span class="number">0.5</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> points &lt; <span class="number">0</span>:</div><div class="line">    points = <span class="number">0</span></div><div class="line"></div><div class="line"></div><div class="line">points = points ** <span class="number">2</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> points &gt; last_seconds:</div><div class="line">    <span class="keyword">print</span> <span class="string">"safe"</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span>  <span class="string">"unsafe"</span></div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SyntaxError: Non-ASCII character &apos;\xe9&apos; in file /Users/programersunny/PycharmProjects/pythonDemo/hello on line 58, but no encoding declared; see http://www.python.org/peps/pep-0263.html for details</div></pre></td></tr></table></figure>
<p>打开 URL 阅读了一下，找到原因：</p>
<blockquote>
<p>Python will default to ASCII as standard encoding if no other encoding hints are given.</p>
</blockquote>
<p>Python的默认编码文件是用的ASCII码，你将文件存成了UTF-8也没用。</p>
<p>解决办法很简单：</p>
<p>只要在文件开头加入<code># -*- coding: UTF-8 —</code>或者<code>#coding=utf-8</code> 就行了。</p>
<p>注意，这两行代码必须添加在<code>.py</code>文件的第一行或者第二行。如果在第三行以及以上，都没有效果，这个在这个网址上也有描述</p>
<blockquote>
<p>To define a source code encoding, a magic comment must be placed into the source files either as first or second line in the file</p>
</blockquote>
<p>翻译一下：</p>
<blockquote>
<p>为了定义源码的编码格式，一个神奇的注释需要被添加到源文件的第一行或者第二行中。</p>
</blockquote>
<p>神奇的注释已经在上文提到了。</p>
<p><a href="https://www.python.org/dev/peps/pep-0263/">上文提到的URL地址</a></p>
<p>纪念一下自己在 python 中遇到的第一个小坑。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;错误类型:SyntaxError: Non-ASCII character ‘\xe9’ in file xxx&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://programersunny.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://programersunny.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>iOS小知识集锦-NSString常用方法汇总</title>
    <link href="https://programersunny.github.io/2017/02/01/iOS%E5%B0%8F%E7%9F%A5%E8%AF%86%E9%9B%86%E9%94%A6-NSString%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB/"/>
    <id>https://programersunny.github.io/2017/02/01/iOS小知识集锦-NSString常用方法汇总/</id>
    <published>2017-01-31T16:00:00.000Z</published>
    <updated>2017-02-01T16:16:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>NSString 几乎是 iOS 开发中最常用的类了。几乎所有的地方都会用到各种各样的字符串。NSString 也有很多的方法。这篇文章记录我在使用 NSString 类的时候，会用到的知识点。也是 <code>iOS小知识集锦</code>的第一篇文章吧。</p>
<a id="more"></a>
<h3 id="创建字符串"><a href="#创建字符串" class="headerlink" title="创建字符串"></a>创建字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 直接创建字符串</div><div class="line">NSString *str1 = @&quot;this is programer sunny&quot;;</div><div class="line"></div><div class="line">// 用一个字符串创建另一个字符串</div><div class="line">NSString *str2 =[[NSString alloc] initWithString:str1];</div><div class="line"></div><div class="line">// 用c的字符串创建oc的字符串</div><div class="line">NSString *str4 = [[NSString alloc] initWithUTF8String:&quot;我是程序猿&quot;];</div><div class="line"></div><div class="line">// 用格式符拼接字符串</div><div class="line">NSString *str3 = [[NSString alloc] initWithFormat:@&quot;%@%@&quot;,str1,str4];</div></pre></td></tr></table></figure>
<h3 id="读取文件来初始化字符串"><a href="#读取文件来初始化字符串" class="headerlink" title="读取文件来初始化字符串"></a>读取文件来初始化字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 先创建一个error对象，用来保存错误信息</div><div class="line">NSError *error = nil;</div><div class="line">//@&quot;/Users/xxx/Desktop/123.txt&quot;为文件路径</div><div class="line">NSString *str01 = [NSString stringWithContentsOfFile:@&quot;/Users/xxx/Desktop/123.txt&quot; encoding:NSUTF8StringEncoding error:&amp;error];</div><div class="line">        </div><div class="line">// 创建if语句判断输出</div><div class="line">if (error) &#123; // 一旦为真，说明读取文件出错了</div><div class="line">	NSLog(@&quot;读取文件出错 %@&quot;, error);</div><div class="line">&#125; else &#123;</div><div class="line">	NSLog(@&quot;读取成功:%@&quot;, str01);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="通过-URL-读取文件，初始化字符串"><a href="#通过-URL-读取文件，初始化字符串" class="headerlink" title="通过 URL 读取文件，初始化字符串"></a>通过 URL 读取文件，初始化字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">// http://www.baidu.com/image/xxxx.png</div><div class="line">// url = 协议头://主机地址/在主机里面的路径</div><div class="line"></div><div class="line">// ftp协议，传输比较大的文件</div><div class="line">// file协议，读取比较大的文件</div><div class="line"></div><div class="line">// file协议，读取文本文件</div><div class="line">NSURL *url = [NSURL URLWithString:@&quot;file://192.168.1.1/user/apple/desktop/test.txt&quot;]</div><div class="line">  </div><div class="line">// 如果不写 IP 地址，就会默认访问本机</div><div class="line">NSURL *url = [NSURL URLWithString:@&quot;file:///user/programersunny/desktop/123.txt&quot;]</div><div class="line">  </div><div class="line">// 将本地文件路径创建为 URL 对象(路径可以是中文)</div><div class="line"> NSURL *url = [NSURL fileURLWithPath:@&quot;/Users/programersunny/Desktop/123.txt&quot;];</div><div class="line"></div><div class="line">// 将对应对网络资源文件路径创建为URL对象(路径必须是英文字母)</div><div class="line">// SURL *url = [NSURL URLWithString:@&quot;file:///Users/programersunny/Desktop/123.txt&quot;];</div><div class="line"> </div><div class="line">// 先创建一个 error 对象，用来保存错误信息</div><div class="line">NSError *error1 = nil;</div><div class="line">// 调用URL地址的文件</div><div class="line">NSString *str03 = [NSString stringWithContentsOfURL:url encoding:NSUTF8StringEncoding error:&amp;error1];</div><div class="line">        </div><div class="line">if (error1) &#123; // 一旦为真，说明读取文件出错了</div><div class="line">	NSLog(@&quot;读取文件出错 %@&quot;, error1);</div><div class="line">&#125; else&#123;</div><div class="line">	NSLog(@&quot;读取成功:%@&quot;, str03);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="通过-url-或-file-将字符串信息写入文件"><a href="#通过-url-或-file-将字符串信息写入文件" class="headerlink" title="通过 url 或 file 将字符串信息写入文件"></a>通过 url 或 file 将字符串信息写入文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"> NSString *s001 = @&quot;dfa短发方法法德俄额度 短发舒服&quot;;</div><div class="line">        </div><div class="line">// NSURL *myurl = [NSURL fileURLWithPath:@&quot;/Users/progamersunny/Desktop/123.txt&quot;];</div><div class="line">        </div><div class="line">NSURL *myurl = [NSURL URLWithString:@&quot;file:///Users/progamersunny/Desktop/123.txt&quot;];</div><div class="line"></div><div class="line">// 调用将字符串写入URL地址文件的方法</div><div class="line">[s001 writeToURL:myurl atomically:YES encoding:NSUTF8StringEncoding error:nil];</div><div class="line">        </div><div class="line">// 调用将字符串写入本机文件的方法</div><div class="line">// [s001 writeToFile:@&quot;/Users/xlzhang/Desktop/OC基础知识点汇总/OC中NSString常用方法汇总/text1.txt1&quot; atomically:YES encoding:NSUTF8StringEncoding error:nil];</div><div class="line">        </div><div class="line">// 提取文件内容</div><div class="line">NSString *str04 = [NSString stringWithContentsOfFile:@&quot;/Users/xlzhang/Desktop/text/text/123.txt&quot; encoding:NSUTF8StringEncoding error:nil];</div></pre></td></tr></table></figure>
<h3 id="创建临时字符串"><a href="#创建临时字符串" class="headerlink" title="创建临时字符串"></a>创建临时字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 用一个字符串创建另一个临时字符串</div><div class="line">NSString *str5 = [NSString stringWithString:str2];</div><div class="line"></div><div class="line">// 用c的字符串创建oc的临时字符串</div><div class="line">NSString *str6 = [NSString stringWithUTF8String:&quot;我是程序猿&quot;];</div><div class="line">        </div><div class="line">// 用格式符拼接字符串</div><div class="line">NSString *str7 = [NSString stringWithFormat:@&quot;%@%@&quot;,str5,str3];</div></pre></td></tr></table></figure>
<h3 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">// 比较两个字符串是否相等，返回BOOL值YES或NO</div><div class="line">BOOL ret = [str6 isEqualToString: str7];</div><div class="line"></div><div class="line">// 比较并返回谁大谁小(返回值是个枚举类型: 比较的结果 ＝ －1，0，1)</div><div class="line">// typedef NS_ENUM(NSInteger, NSComparisonResult) &#123;NSOrderedAscending = -1L, NSOrderedSame, NSOrderedDescending&#125;;</div><div class="line">// 如果左边str1小于右边str4就返回－1，相等就返回0，大于就返回1</div><div class="line"></div><div class="line">NSComparisonResult ret1 = [str1 compare: str4];</div><div class="line"></div><div class="line">// 忽略大小写进行比较</div><div class="line">NSComparisonResult ret01 = [str1 caseInsensitiveCompare:str4];</div><div class="line"></div><div class="line"> // 有条件的比较谁大谁小(options的参数为限制条件)</div><div class="line"> // options: 指定比较的条件</div><div class="line"> // NSCaseInsensitiveSearch  忽略大小写</div><div class="line"> // NSBackwardsSearch  从后往前比较</div><div class="line"> // NSNumericSearch  首先比较字符串里面的字符的个数，个数一样再比较大小</div><div class="line"></div><div class="line">NSComparisonResult ret02 = [str1 compare:str4 options:NSCaseInsensitiveSearch]; // 忽略大小写进行比较</div></pre></td></tr></table></figure>
<h3 id="从一个字符串中查找子字符串"><a href="#从一个字符串中查找子字符串" class="headerlink" title="从一个字符串中查找子字符串"></a>从一个字符串中查找子字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">NSString *s1 = @&quot;I am such a poor programer.&quot;;</div><div class="line">NSString *s2 = @&quot;am&quot;;</div><div class="line"></div><div class="line">// 返回值类型是一个枚举类型NSRange,包含两个lu整型变量location(位置)和length(长度)</div><div class="line">NSRange range = [s1 rangeOfString:s2];// 查找并返回位置</div><div class="line"></div><div class="line">        </div><div class="line">// 有条件的查找,options后面为： NSCaseInsensitiveSearch 表示忽略大小写</div><div class="line">NSRange range01 = [s1 rangeOfString:s2 options:NSLiteralSearch]; // options表示查找方式</div><div class="line"></div><div class="line">BOOL b1 = [s1 containsString:s2]; // 返回值类型是一个BOOL值，YES表示s1包含有s2，NO表示没有包含</div><div class="line"></div><div class="line">// 如果查找的字符串不存在，返回的值：range.length = 0;range.location = NSNotFound (NSNotFound = -1)</div></pre></td></tr></table></figure>
<h3 id="单独提取某一个字符"><a href="#单独提取某一个字符" class="headerlink" title="单独提取某一个字符"></a>单独提取某一个字符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 创建一个可变字符串对象</div><div class="line">NSMutableString *str02 = [[NSMutableString alloc] init];</div><div class="line">// 循环获取字符中的每一个字符</div><div class="line">for (int i = 0;i &lt; [str1 length]; i++)&#123;</div><div class="line">    // 此处提取的字符是两个字节，因此可以提取汉字</div><div class="line">	unichar c = [str1 characterAtIndex:i]; </div><div class="line">	// 将获取对字符合并到可变字符串中</div><div class="line">	[str02 appendFormat:@&quot;%C&quot;,c];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="从字符串中提取某个范围点字符生成新字符串－－-从第一个字符开始到某个位置结束，从某个位置开始到字符串尾，某点开始某点结束"><a href="#从字符串中提取某个范围点字符生成新字符串－－-从第一个字符开始到某个位置结束，从某个位置开始到字符串尾，某点开始某点结束" class="headerlink" title="从字符串中提取某个范围点字符生成新字符串－－(从第一个字符开始到某个位置结束，从某个位置开始到字符串尾，某点开始某点结束)"></a>从字符串中提取某个范围点字符生成新字符串－－(从第一个字符开始到某个位置结束，从某个位置开始到字符串尾，某点开始某点结束)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">NSString *s3 = @&quot;0123456789&quot;;</div><div class="line">NSString *s4 = [s3 substringToIndex: 6 ]; </div><div class="line">// 从s3中提取从头至第6个字符(不包括第6个),生产新字符串,返回这个新字符串的地址</div><div class="line">// s4的结果为: &quot;012345&quot;</div><div class="line">        </div><div class="line">NSString *s5 = [s3 substringFromIndex: 6 ]; </div><div class="line">// 从s3中提取从第6个字符(包括第6个)到最后一个字符,生产新字符串,返回这个新字符串的地址</div><div class="line">// s5到结果为: &quot;6789&quot;</div><div class="line">        </div><div class="line">NSRange range1 = &#123;3,4&#125;; </div><div class="line">// 3表示起始位置，4表示长度，表示从第3个字符(包含第3个)开始提取连续的4个字符,生产新字符串,返回这个新字符串的地址</div><div class="line">NSString *s6 = [s3 substringWithRange:range1]; </div><div class="line">// 先定义一个range值</div><div class="line">// s6的结果为: &quot;3456&quot;</div><div class="line">        </div><div class="line">        </div><div class="line">// 也可以合并一起写</div><div class="line">NSString *s7 = [s3 substringWithRange:NSMakeRange(3, 4)]; // NSMakeRange 是一个c函数</div></pre></td></tr></table></figure>
<h3 id="字符串与其他类型的转换"><a href="#字符串与其他类型的转换" class="headerlink" title="字符串与其他类型的转换"></a>字符串与其他类型的转换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">NSString *intStr = @&quot;1234&quot;;</div><div class="line">NSString *floatStr = @&quot;5.14&quot;;</div><div class="line"></div><div class="line">int a = [intStr intValue];</div><div class="line">float f = [floatS floatValue];</div></pre></td></tr></table></figure>
<h3 id="字符串首位-前缀后缀的对比"><a href="#字符串首位-前缀后缀的对比" class="headerlink" title="字符串首位(前缀后缀的对比)"></a>字符串首位(前缀后缀的对比)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">NSString *url1 = @&quot;https://www.baidu.com/rader/p.png&quot;;</div><div class="line">BOOL b001 = [url1 hasPrefix:@&quot;https://&quot;]; // 判断字符串首位是否与输入的字符串相同</div><div class="line">BOOL b002 = [url1 hasSuffix:@&quot;p.png&quot;];   // 判断字符串尾部是否与输入的字符串相同</div></pre></td></tr></table></figure>
<h3 id="字符串中某些字符的替换"><a href="#字符串中某些字符的替换" class="headerlink" title="字符串中某些字符的替换"></a>字符串中某些字符的替换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">NSString *url2 = @&quot;http://www.baidu.com/rader/p.gdp&quot;;</div><div class="line">// 将withString:字符串内容替换掉url1中 OfString:字符串内容 后生成一个新的字符串url2</div><div class="line">NSString *url3 = [url2 stringByReplacingOccurrencesOfString:@&quot;/&quot; withString:@&quot;*&quot;];</div></pre></td></tr></table></figure>
<h3 id="去掉字符串首尾的某些连续的字符"><a href="#去掉字符串首尾的某些连续的字符" class="headerlink" title="去掉字符串首尾的某些连续的字符"></a>去掉字符串首尾的某些连续的字符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> NSString *url4 = @&quot;    http://www.baidu.com     &quot;;</div><div class="line">        </div><div class="line">NSCharacterSet *set = [NSCharacterSet whitespaceCharacterSet]; //  去除空格</div><div class="line">// lowercaseLetterCharacterSet  去除小写字母</div><div class="line">// uppercaseLetterCharacterSet  去除大写字母</div><div class="line">        </div><div class="line">NSCharacterSet *set1 = [NSCharacterSet characterSetWithCharactersInString:@&quot;指定的字符串&quot;]; // 去除指定的字符串</div><div class="line">        </div><div class="line">        </div><div class="line">// 去除字符串首尾的某些相同字符,有多少个就去掉多少个</div><div class="line">NSString *url5 = [url4 stringByTrimmingCharactersInSet:set];</div></pre></td></tr></table></figure>
<h3 id="可变字符串-以上字符串方法都可以用于可变字符串"><a href="#可变字符串-以上字符串方法都可以用于可变字符串" class="headerlink" title="可变字符串:(以上字符串方法都可以用于可变字符串)"></a>可变字符串:(以上字符串方法都可以用于可变字符串)</h3><blockquote>
<p>可变字符串是字符串的子类，所以可以使用所有NSString的所有方法，其比起字符串增加的功能主要有：增,删,改,擦</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">// 创建一个可变字符串</div><div class="line"></div><div class="line">NSMutableString *string1 = [[NSMutableString alloc] init];</div><div class="line">[string1 setString:@&quot;1234&quot;]; // 对可变字符串进行赋值</div><div class="line">        </div><div class="line">[string1 setString:@&quot;abcd&quot;]; // 已赋值的可变字符串可以重新赋值（改）</div><div class="line">[string1 appendString:@&quot;123&quot;]; // 可以增加字符串，增加后结果为:&quot;abcd123&quot;</div><div class="line">[string1 appendFormat:@&quot;%c&quot;,&apos;D&apos;]; // 可以用格式符增加相应的字符或字符串，结果为:&quot;abcd123D&quot;</div><div class="line">[string1 insertString:@&quot;xxxx&quot; atIndex:4]; // 可以把&quot;xxxx&quot;字符串插入到第4个字符开始的地方,原第四个开始的后面字符依次后移</div><div class="line">// 插入后的结果为: &quot;abcdxxxx123D&quot;</div><div class="line">        </div><div class="line">// 也可以把字符串改为另一个字符串的地址，因为它们传递的都是地址</div><div class="line">NSString *ss1 = [NSString stringWithFormat:@&quot;%d&quot;,-88];</div><div class="line">        </div><div class="line">[string1 insertString:ss1 atIndex:6]; // 结果为: string1 = &quot;abcdxx-88xx123D&quot;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">NSRange range2 = &#123;3,4&#125;; </div><div class="line">// 3表示起始位置，4表示长度，表示从第3个字符(包含第3个)开始删除连续的4个字符,后面字符依次前移</div><div class="line">[string1 deleteCharactersInRange:range2]; </div><div class="line">// 结果为: string1 = &quot;abc88xx123D&quot;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[string1 replaceCharactersInRange:NSMakeRange(3, 2) withString:@&quot;RRRRRRRRRR&quot;];</div><div class="line">// 3表示起始位置，2表示长度，表示从第3个字符(包含第3个)开始将后面的2个字符换成字符串&quot;RRRRRRRRRR&quot;,后面字符依次后移</div><div class="line">// 结果为: string1 = &quot;abcRRRRRRRRRRxx123D&quot;</div><div class="line">NSLog(@&quot;\nstring1 = %@&quot;,string1);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 擦除原有字符串内容重新设置字符串的内容</div><div class="line">[string1 setString:@&quot;---&quot;];</div><div class="line">// 等同于</div><div class="line">// string1.string = @&quot;---&quot;;</div><div class="line">        </div><div class="line">NSLog(@&quot;string1 = %@&quot;, string1);</div><div class="line">// 结果为: string1 = &quot;---&quot;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NSString 几乎是 iOS 开发中最常用的类了。几乎所有的地方都会用到各种各样的字符串。NSString 也有很多的方法。这篇文章记录我在使用 NSString 类的时候，会用到的知识点。也是 &lt;code&gt;iOS小知识集锦&lt;/code&gt;的第一篇文章吧。&lt;/p&gt;
    
    </summary>
    
      <category term="知识集锦" scheme="https://programersunny.github.io/categories/%E7%9F%A5%E8%AF%86%E9%9B%86%E9%94%A6/"/>
    
    
      <category term="Objective-C" scheme="https://programersunny.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>python 中的逻辑运算符</title>
    <link href="https://programersunny.github.io/2017/01/29/python%20%E4%B8%AD%E7%9A%84%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>https://programersunny.github.io/2017/01/29/python 中的逻辑运算符/</id>
    <published>2017-01-28T16:00:00.000Z</published>
    <updated>2017-01-29T16:05:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>从现在开始，开始了对 pyhton 这门语言的学习。</p>
<a id="more"></a>
<p>逻辑运算符其实没什么好说的，只是最近学习 python 这门语言的时候，才研究发现的一个小知识点。</p>
<h2 id="逻辑运算符有什么？"><a href="#逻辑运算符有什么？" class="headerlink" title="逻辑运算符有什么？"></a>逻辑运算符有什么？</h2><table>
<thead>
<tr>
<th style="text-align:center">关系运算符</th>
<th style="text-align:center">含义</th>
<th style="text-align:center">举例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">and</td>
<td style="text-align:center">与(全真才真)</td>
<td style="text-align:center">True and False == False</td>
</tr>
<tr>
<td style="text-align:center">or</td>
<td style="text-align:center">或(全假才假)</td>
<td style="text-align:center">True or False == True</td>
</tr>
<tr>
<td style="text-align:center">not</td>
<td style="text-align:center">非(真变假、假变真)</td>
<td style="text-align:center">not True == False</td>
</tr>
</tbody>
</table>
<h2 id="为什么123-and-456结果是456而123-or-456结果是123？"><a href="#为什么123-and-456结果是456而123-or-456结果是123？" class="headerlink" title="为什么123 and 456结果是456而123 or 456结果是123？"></a>为什么<code>123 and 456</code>结果是<code>456</code>而<code>123 or 456</code>结果是<code>123</code>？</h2><p><strong>and </strong>:</p>
<p>​    对于 and 首先计算第一个表达式，</p>
<p>​    如果第一个表达式为真，结果为第二个表达式的结果。</p>
<p>​    如果第一个表达式为假，返回假。</p>
<p><strong>or </strong>：</p>
<p>​    对于 or 首先计算第一个表达式，</p>
<p>​    如果第一个表达式为真，则返回真。</p>
<p>​    如果第一个表达式为假，则返回第二个表达式的结果    </p>
<p>所以，对于</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">123</span> <span class="keyword">and</span> <span class="number">456</span></div></pre></td></tr></table></figure>
<p>这行代码， 遵循非零为真的原则，第一个表达式为真。那么看第二个表达式，第二个表达式也大于零，所以结果为第二个表达式的结果。所以返回</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">456</span></div></pre></td></tr></table></figure>
<p>对于</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">123</span> <span class="keyword">or</span> <span class="number">456</span></div></pre></td></tr></table></figure>
<p>这行代码，第一个表达式非零，结果为第一个表达式的结果。</p>
<blockquote>
<p>Strictly speaking, the operands of the logical operators should be boolean expressions, but</p>
<p>Python is not very strict. Any nonzero number is interpreted as “true.”严格来讲，布尔运算符的运算数应该是布尔表达式， 但是Python并不严格。任何非0的数字都被解释成“真”。</p>
</blockquote>
<p>另外，因为 <code>123</code> 或者 <code>456</code> 这两个表达式，都不是逻辑运算，表达式的值就是他本身的值。所以最后得出这样的结果。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>and: </strong>从左到右计算表达式，若所有值为真，返回最后一个值。若存在假，返回第一个假值。</p>
<p><strong>or：</strong> 从左到右计算表达式，返回第一个为真的值。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从现在开始，开始了对 pyhton 这门语言的学习。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://programersunny.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://programersunny.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>SBAnimation a new Repository</title>
    <link href="https://programersunny.github.io/2017/01/28/SBAnimation%20a%20new%20Repository/"/>
    <id>https://programersunny.github.io/2017/01/28/SBAnimation a new Repository/</id>
    <published>2017-01-27T16:00:00.000Z</published>
    <updated>2017-01-27T17:27:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>看了时间，外面已经一直是在放着鞭炮声音。QQ 上收到大学同窗在美国发来的新春祝福，闲聊两句，深感在国外的科研狗的不容易。想到了昨天突然多想了一下，看到的一句话</p>
<blockquote>
<p>优秀的人太多，优秀的人也太优秀，我只要负责被惊艳就好了。</p>
</blockquote>
<p>这个世界优秀的人真是太多了，比你优秀的人又比你努力太多了。这两年深觉差距越来越大。突然有了一些懊恼。</p>
<p>借着这篇文字，写写这几天回成都之后的一些感悟。</p>
<a id="more"></a>
<p>一直想找几个人，做一些有趣的事情。回成都之前的两天，和朋友在 QQ 群里聊天，他发出来了一个不算复杂，但是还算不错的 UI 效果出来，讨论了一下，然后想着把我们做的一些有趣的效果 工具之类的东西都开源出来，放在一个 repository 里面，然后一起来维护这个东西。然后我就去 create 了一个 叫 SolarBee  的 organization 然后开始做起了这件事情。 然后把他写的东西拿出来，然后自己写了一个 demo 然后这个东西就搞出来了。</p>
<p>回成都的几天里面，逐渐把我自己写的一些东西放进来，然后慢慢的来丰富这个东西。五天了，几乎提交了去年一整年在 github 上面的代码量。完善代码，完善 demo 把各种仓库整合修改 balabala…. 痛并快乐着。</p>
<p>对了，昨天还参加了一个 python 的学习组织，正式开始“人生苦短，我用 python 了” ，激励着我开始更广泛的学习，还是因为看了一些书，看了一些文章，深深的感觉在计算机科学这一块，很厉害的人都是能够轻松的驾驭各种语言的人，还是希望自己多体验几门语言，能够在更高的角度去理解这件事情。虽然很惭愧，之前学的 java 已经忘的一干二净了。</p>
<p>后面还会更多的加入更多的东西在这个地方。不仅仅在 UI 这一方面，可能后面还会有更多方面的东西加入进来。希望自己的 2017 能够坚持下来，做这件自认为很酷的事情。</p>
<p>后面可能还会有一些计划什么的。这个可能年后很快就需要去完成。第一是，找工作。第二是，写一个 mac app 尝试一下新的领域。确实没有什么用处，只是希望方便这个东西的 contributer 更方便的把相关的资料上传到 Leancloud 里面。用这个来管理这个 demo 我感觉也是一件很 cool 的事情。当然，完成的时候，还是会把这些代码放在 GitHub 上面。</p>
<p>愿景。希望自己坚持写博客，能坚持开源。在什么时候能够就某个问题给出一套完整的解决方案。这也是我觉得的很酷的事情。另外，英语也要坚持的学下去。</p>
<p>这几天确实把自己都感动到了。每天都花很长的时间在这件事情上面。很充实，很开心。最重要的是，重新找到了对这件事情的热情。</p>
<p>上面说了那么多 <a href="https://github.com/SolarBee/SBAnimation">GitHub</a>地址还是贴出来。</p>
<p>最后，跳出舒适区很难，但这是我不得不做的事情。想了那么久 FP 也应该学起来了。</p>
<h3 id="SBAnimation"><a href="#SBAnimation" class="headerlink" title="SBAnimation"></a>SBAnimation</h3><p>SolarBee创建的一个关于一些动画和自定义有趣的View的合集的合集。</p>
<h4 id="1、仪表盘"><a href="#1、仪表盘" class="headerlink" title="1、仪表盘"></a>1、仪表盘</h4><p><img src="http://ojno1pj4x.bkt.clouddn.com/91B9BB1D47A45C3FD69A20FB5813C31F.jpg"></p>
<h4 id="2、购物车抛物线"><a href="#2、购物车抛物线" class="headerlink" title="2、购物车抛物线"></a>2、购物车抛物线</h4><p><img src="http://ojno1pj4x.bkt.clouddn.com/%E8%B4%AD%E7%89%A9%E8%BD%A6%E6%8A%9B%E7%89%A9%E7%BA%BF.gif"></p>
<h4 id="3、列表空数据展示"><a href="#3、列表空数据展示" class="headerlink" title="3、列表空数据展示"></a>3、列表空数据展示</h4><p>这个工具支持 CocoaPods 可见源作者 github 仓库 <a href="https://github.com/ProgramerSunny/EmptyDataKit">地址</a></p>
<p><img src="http://ojno1pj4x.bkt.clouddn.com/EmptyDataKit.gif"></p>
<h4 id="4、仿照淘宝商品详情加入购物车转场动画"><a href="#4、仿照淘宝商品详情加入购物车转场动画" class="headerlink" title="4、仿照淘宝商品详情加入购物车转场动画"></a>4、仿照淘宝商品详情加入购物车转场动画</h4><p>使用说明在作者 <a href="https://github.com/ProgramerSunny/SYTaoBaoAnimation">github</a></p>
<p><img src="http://ojno1pj4x.bkt.clouddn.com/ProgramerSunnyDemo.gif"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看了时间，外面已经一直是在放着鞭炮声音。QQ 上收到大学同窗在美国发来的新春祝福，闲聊两句，深感在国外的科研狗的不容易。想到了昨天突然多想了一下，看到的一句话&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;优秀的人太多，优秀的人也太优秀，我只要负责被惊艳就好了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个世界优秀的人真是太多了，比你优秀的人又比你努力太多了。这两年深觉差距越来越大。突然有了一些懊恼。&lt;/p&gt;
&lt;p&gt;借着这篇文字，写写这几天回成都之后的一些感悟。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://programersunny.github.io/categories/iOS/"/>
    
    
      <category term="杂记" scheme="https://programersunny.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
      <category term="iOS" scheme="https://programersunny.github.io/tags/iOS/"/>
    
      <category term="OpenSource" scheme="https://programersunny.github.io/tags/OpenSource/"/>
    
  </entry>
  
  <entry>
    <title>CocoaPods小知识集锦</title>
    <link href="https://programersunny.github.io/2017/01/20/CocoaPods%E5%B0%8F%E7%9F%A5%E8%AF%86%E9%9B%86%E9%94%A6/"/>
    <id>https://programersunny.github.io/2017/01/20/CocoaPods小知识集锦/</id>
    <published>2017-01-19T16:00:00.000Z</published>
    <updated>2017-01-20T06:09:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>在使用CocoaPods 的过程中遇到的问题。整理性的一遍文章，没有多少价值。</p>
<a id="more"></a>
<h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">✘ sunyang@sunny-mbp  ~<span class="regexp">/desktop/ios</span>  pod install</div><div class="line">[!] No <span class="string">`Podfile' found in the project directory.</span></div></pre></td></tr></table></figure>
<p>解决方案</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">✘ sunyang@sunny-mbp  ~<span class="regexp">/desktop/ios</span>   pod repo remove master</div><div class="line">Removing spec repo <span class="string">`master`</span></div><div class="line"></div><div class="line">✘ sunyang@sunny-mbp  ~<span class="regexp">/desktop/ios</span>  pod setup</div><div class="line">Setting up CocoaPods master repo</div><div class="line"></div><div class="line">✘ sunyang@sunny-mbp  ~<span class="regexp">/desktop/ios</span>  pod install</div><div class="line">Pod installation complete! There are <span class="number">3</span> dependencies from the Podfile <span class="keyword">and</span> <span class="number">4</span> total pods installed.</div></pre></td></tr></table></figure>
<p>原因</p>
<p>这是因为 CocoaPods 基于 GitHub 的网页编辑器的 <code>libgit2</code>的一个 bug。 正式这个 bug 导致了 git 仓库错误。</p>
<p>唯一的解决办法就是像上面一样。 </p>
<p><a href="http://blog.cocoapods.org/Repairing-Our-Broken-Specs-Repository/">相关链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用CocoaPods 的过程中遇到的问题。整理性的一遍文章，没有多少价值。&lt;/p&gt;
    
    </summary>
    
      <category term="CocoaPods" scheme="https://programersunny.github.io/categories/CocoaPods/"/>
    
    
      <category term="CocoaPods" scheme="https://programersunny.github.io/tags/CocoaPods/"/>
    
  </entry>
  
  <entry>
    <title>Swift 和 OC 混合编程</title>
    <link href="https://programersunny.github.io/2017/01/05/Swift%E5%92%8COC%E6%B7%B7%E5%90%88%E7%BC%96%E7%A8%8B/"/>
    <id>https://programersunny.github.io/2017/01/05/Swift和OC混合编程/</id>
    <published>2017-01-04T16:00:00.000Z</published>
    <updated>2017-01-10T07:49:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>自己学了一段时间的 Swift ，从最开始看 Swift 2.3 的《写给大忙人看的Swift》,在 Xcode8 下很多示例代码都不能好好玩下去，然后看到了 SwiftGG 翻译组针对 Swift 官方文档的中文译本。算是正式开始了对 Swift 的学习。对 Swift 的喜爱不仅仅是因为他是新的语言，是 iOS 开发未来的趋势。而且还有一个很重要的一点单单就是因为 Swift 代码看起来就是非常漂亮啊。</p>
<a id="more"></a>
<h2 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h2><p>对于Swift的学习根本还是一种还没有正式入门的感觉。所以没有办法像 OC 那样驾轻就熟，很多语法都还没有完全掌握，因为时间原因，也因为最近确实发生了一些事情。导致最近学习的热情比较的低，而且年关在即，很多工作上生活上的事情都需要认真梳理一遍。减少了在学习上的努力，是在是罪大恶极。技术圈在这个时候也发生了一些大事情。微信开源的组件 <a href="https://github.com/Tencent/mars#mars_cn">Mars</a>  滴滴和手Q相继 po 出了自己的动态化解决方案。下一年应该会是动态化更广泛应用的一年吧，很多 app 动态化将成为标准配置。但是唯一比较遗憾的是，这些解决方案还是基于 OC 的。但是这也并不妨碍我学习 Swift 的激情，毕竟一切 app 的生杀大权都掌握在苹果手中的，而且，苹果还有一个并不开放的动态库。</p>
<p>简单的学了一些 Swift 的相关东西，就开始手痒想要实践一下了。本来打算使用 Swift 重新写一个项目，但是苦于需求一直源源不断，重写压力也是非常的大。还有一个最大的原因，对 Swift 的掌握还没有真正算是一个 Swift 开发者。实在没有能力将原有项目中的组件转化为 Swift ，所以还是决定在原来的代码中，尝试将一些类用 Swift 来表达。</p>
<blockquote>
<p>这也解决了在 Swift 项目中，优秀的第三方库确实没有 OC 丰富，而作为现在非常热门的开发语言，很多比较好的效果什么的也只有 Swift 版本这样的问题。</p>
</blockquote>
<p>其实无论如何，其实都是 OC 和 Swift 之间的交互。</p>
<h2 id="在-Swift-中使用-OC-类"><a href="#在-Swift-中使用-OC-类" class="headerlink" title="在 Swift 中使用 OC 类"></a>在 Swift 中使用 OC 类</h2><p>如果在Swift类中使用OC的代码，那么就需要使用桥接文件了。</p>
<p>这是我们在平常的OC项目中创建一个新的类</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/34DF1870-F7E8-4522-B715-F1ACAA35DFEA.png" /></p>
<p>点击按钮 <code>Create Bridging Header</code> 。</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/CC24943D-0A36-4095-9EFF-64DBF9D96193.png" /></p>
<p>就会生成一个<code>项目名-Bridging-Header.h</code>文件，这其实貌似就是一个很平常的<code>.h</code>文件。</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/7132C9EA-C1A4-4AE9-BC83-F200006A95B1.png"></p>
<p>然后就只需要像 Import 一个普通类一样把你需要在 Swift 中使用的所有 OC 类在这个<code>.h</code> 文件中添加进来，然后就能够在 Swift 代码中正常的使用 OC 的方法了。</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/B4E7A1D8-F202-4BE8-8CDF-1A3221F42571.png"></p>
<p>这里的<code>MUserInfo</code>其实就是我项目中的一个单例类了。这里要注意的是，虽然使用的是 OC 的类，但是使用的时候依然是使用 Swift 的语法。这个也没什么需要注意的。</p>
<blockquote>
<p>需要注意的是：在 Swift 类中使用的 OC 的方法，还是需要使用 Swift 的语法。</p>
</blockquote>
<p>刚刚说的导入，就是直接在刚刚说的桥接文件中写入如下代码。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#import &quot;MUserInfo.h&quot;</div></pre></td></tr></table></figure>
<h2 id="在-OC-中使用-Swift-类"><a href="#在-OC-中使用-Swift-类" class="headerlink" title="在 OC 中使用 Swift 类"></a>在 OC 中使用 Swift 类</h2><p>这个也是非常的简单，</p>
<p>在<code>TARGETS</code>- <code>Build Settings</code>中选择<code>Swift Complier-General</code></p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/0BA5113B-03E2-40EC-81D0-A55903005F19.png" /></p>
<p>然后分别将<code>Install Objective-C Compatibility Header</code> 和 <code>Objective-C Generated Interface Header Name</code> 选项 改为 <code>YES</code> 和 <code>项目名-Swift.h</code></p>
<p>然后在使用Swift类的时候，只需要在使用的时候像导入头文件一样倒入 <code>项目名-Swift.h</code>这个文件。然后就可以愉快的使用了。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>没有解语，期待下次分享！</p>
<p>## </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自己学了一段时间的 Swift ，从最开始看 Swift 2.3 的《写给大忙人看的Swift》,在 Xcode8 下很多示例代码都不能好好玩下去，然后看到了 SwiftGG 翻译组针对 Swift 官方文档的中文译本。算是正式开始了对 Swift 的学习。对 Swift 的喜爱不仅仅是因为他是新的语言，是 iOS 开发未来的趋势。而且还有一个很重要的一点单单就是因为 Swift 代码看起来就是非常漂亮啊。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://programersunny.github.io/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://programersunny.github.io/tags/iOS/"/>
    
      <category term="Swift" scheme="https://programersunny.github.io/tags/Swift/"/>
    
      <category term="Objective-C" scheme="https://programersunny.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>2016写在年关的话</title>
    <link href="https://programersunny.github.io/2016/12/26/2016%E5%86%99%E5%9C%A8%E5%B9%B4%E5%85%B3%E7%9A%84%E8%AF%9D/"/>
    <id>https://programersunny.github.io/2016/12/26/2016写在年关的话/</id>
    <published>2016-12-25T16:00:00.000Z</published>
    <updated>2016-12-26T05:46:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>距离下一个年头也只有几张日历纸了，还是抱着一个比较好的态度来回忆一些这即将过去的2016. 从大学开始，每一年都有着一个这样的习惯，总要在每学期结束，每一年结束的时候，给自己写下点什么。开通了新的blog， 总还是要在这里留下心的印记。</p>
<a id="more"></a>
<p>写了那么多年，着实还是没有训练出来对文字驾轻就熟的能力，写出来的东西也往往还是一坨狗屎。让自己也不忍心重新回头再来看下去。每一年也就是这么简单的这么写着。</p>
<p>这一年总结下来，在技术上还是有了一些沉淀，虽然没有什么十足的进步。但，终于能够有这么一段比较长的时间，纯粹的去研究一些这些东西。五月份以来的这么一段时间里，我还是心怀感激的，有了这么个不紧不慢，也有足够多时间了足够多的空间来折腾各种好玩的东西。也开始努力的在质量上控制整个项目。也有那么几个同事愿意花时间了精力去折腾新鲜的东西。确实也是件不错的事情。</p>
<p>这么长的时间以来，感觉在技术生活上还是蛮有趣的，先是在微博上加入了一些技术比较活跃的群，然后又转到趣直播这样的平台下，跟大牛们更近距离的接触，体会到了技术世界的无边无际。再后来因为bang用上了微信读书，不多不少还是读过了一些书，更技术无关。到最后应该能凑够个50多个小时阅读时长吧。阅读总是能让人安静下来的。</p>
<p>之前学过一篇文章来记录这一年看过的书，到最后，应该还是能再加上那么一本两本。每天能够抽出那么一个把小时来阅读，也是一件值得坚持的事情。程序员还是应该花一些时间再代码以外的事情上。</p>
<p>然后不知道什么契机，下载了一个英语流利说。还是认为这是一个非常优秀的 app ，确实在我身上还是达到了他们的口号：“让你忍不住，开口说英语”, 花了100块钱参加他们的课程，每天花一些时间来学习英语，每天哇啦哇啦的说着并不流利的英语，也能切切实实的感受到自己的成长。学习英语这件事情，想来也是值得坚持的事情，多么希望一年以后再次写这样的文字的时候，能够很开心的说，这件事情，我坚持了整整一年。</p>
<p>除了这两件事情，年初或者年初的时候，还是读过一些作为程序员，应该读的一些书的。这一年开始了，并不太深入的对 iOS 底层的探索。因为最初对动态化近乎痴迷的兴趣，在看到 JSPatch 的时候，立马就开始撸Demo开干，在线上出了 bug 之后，瞬间把 bug 解决掉的之后，JSPatch 很快的被集成在了公司所有的 iOS app 中，在公司测试力度不足的情况下，也能够放心的进行开发。</p>
<p>再后来因为对 Javascript 知识的刚需，简单的学了一些 HTML 和 CSS 之类的东西，因为集成成本高，不能立马在公司项目中使用等原因，放弃了对 React Native 的探索，知道最近阿里又开源了 Weex ， 对动态化的兴趣，驱使着我在接下来的时间里，或多或少的都会花点时间去研究这些东西。对 Weex 的兴趣应该还是大于 RN 的， 比较起来，还是愿意使用国人研发的 Vue ，前端的世界果然是深似海。在海边散步，也确实折腾了我很多的精力。但是看着新出来的名词 PWA 还是希望对这一块有一些了解。对了，还有微信的小程序。</p>
<p>对技术的追求在这一年还是让我非常的应接不暇。作为客户端开发，在今年初期的时候便对动态化、组件化产生了比较大的兴趣，以至于在博客刚刚建立的时候，就写下来了对动态化和组件化时分着迷这样的文字(后来还是改了)， 相比起来，动态化算是简单的能实现了吧，一直就通过各种渠道能够猜出来 sunny 孙源在滴滴正在进行的项目也是更动态化相关的内容，在 DynamicCocoa 被公布出来的时候，还是被这样的大神折服了，sunny 对底层，对编译器的研究确实是让人难以望其项背的。到后来知道手Q很久以前就有一套类似的框架的事情，最后还是认识到了一个残酷的现实</p>
<blockquote>
<p>大厂对于小公司的碾压不仅仅是运营能力上的，他们对于小厂在技术上的碾压，对于我们来说才是更可怕的。不管你有多么好的 idea 等你实现下来并且能够完美运行的时候，你觉得十分牛逼的事情，确实人家玩剩下的。</p>
</blockquote>
<p>对新的东西的追求还是让我在这一年收集到了各种书，也驱使着我我去学习英语。也驱使着我去学习了可能已经无限趋近稳定的 Swift 3.0 ，开始看了一些现在估计也完全没有入门的前端三件套，balabala….</p>
<p>接着再说一下组件化吧，这一年确实在这一块只做了很少的工作，简单的吧一些组件网络库什么的拆分出来，使用  CocoaPods 来进行管理，看了一些相关的文章，跟一些搞过这个朋友交流过，算是积累了一些知识储备，但是在这样的时间，面对年底还是比较多的需求，实践这件事情，可能还是需要往后推一下了。</p>
<p>然后这一年从纯代码，转到了Xib ，研究了一下 iconfont 然后貌似也记不清楚再搞过什么了。只是读了写文章，看了点源码，重构了下项目，做了些需求，改了些bug，如是而已…</p>
<p>这一年，绕了一大圈，有因为一些原因跑到重庆了，再次回到这个城市生活，确实没有感受到太多的让我心里有什么波动的东西，跟往常一样，跟去到曾经到过的任何一个城市一样…只是喜欢上了这个季节的这里随处可见的黄叶。</p>
<p>外婆离开也到了第三个年头了，是不是还是会思念那个胖胖的可爱的人。生活还是继续向前走着的，毕业也三年了，还是不知道接下来应该怎样。或许，就是这样吧。</p>
<p>车也把坐垫全部换成皮的了，也算修正了买车时犯下的错误。</p>
<p>做了一丢丢有关技术管理的工作，做的不好。只能继续努力了。</p>
<p>好奇心还是那么重，看到什么都想去尝试一下，所以入门了很多东西，了解很多东西，却没能深入，算是今年最大的遗憾吧。</p>
<p>关于年初做的不好的一些事情，等真正再长大一些了再来梳理吧，确实对一些事情还是没那么精通，而且那些也算是去年的事情了吧…</p>
<p>很多想做，却没能做的事情，只能在下一个年头继续了，努力做一个可爱的人吧…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;距离下一个年头也只有几张日历纸了，还是抱着一个比较好的态度来回忆一些这即将过去的2016. 从大学开始，每一年都有着一个这样的习惯，总要在每学期结束，每一年结束的时候，给自己写下点什么。开通了新的blog， 总还是要在这里留下心的印记。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔杂记" scheme="https://programersunny.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="杂记" scheme="https://programersunny.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>一叶知秋</title>
    <link href="https://programersunny.github.io/2016/12/05/%E4%B8%80%E5%A4%9C%E7%9F%A5%E7%A7%8B/"/>
    <id>https://programersunny.github.io/2016/12/05/一夜知秋/</id>
    <published>2016-12-04T16:00:00.000Z</published>
    <updated>2016-12-09T02:44:13.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>任何一种环境或个人，初次见面就预感到离别的隐痛时，你必定爱上他了。</p>
</blockquote>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/IMG_0124.JPG?imageView2/4/w/600"/></p>
<p>​    不知道从什么时候开始，重庆已经到处都是黄黄的银杏叶子了。也不知道从什么时候开始，重庆的每个角落都能看到银杏树。正好跟家乡的名字相同，在银杏身上倒多添加了一些情感。</p>
<p>​    早些时候，就一直想要看一看秋天的银杏，金黄色的叶子洒满整条街。想象着这样的意境，脚踩在这样的树叶上，发出吱吱的声音，仿佛大自然叫呼唤。</p>
<p>​    时隔两年，再回到重庆的时候，却发现原来熟悉的一切都已经不在了，记得重庆留给我的印象，除了一片一片的香樟树，就是路边的竹子。再逢重庆，看到的又是一排排的梧桐，一棵棵的银杏。更美了吧！更四季分明了。</p>
<a id="more"></a>
<p>​    过去的两年，念念不忘的总是樟树林里面的味道，和每年运动场上一大片的蓝花楹花瓣。也许某天再次离开重庆的时候，让我怀念的不会再是香樟的味道和浪漫的蓝花楹，而是爱憎分明的梧桐和银杏。    </p>
<p>​    时光总是悄无声息的流淌着，秋的意境也总是被冠以一种 <code>春花秋月何时了</code> 或者 <code>红藕香残玉簟秋</code> 这样的想象。只是今日这样的景象中我还是产生了 <code>自古逢秋悲寂寥，我言秋日胜春朝</code> 这样的情感。</p>
<p>​    这么多年来，对一个城市的印象总是从学校或者公园开始。趁这这样一个艳阳天，还是爬起来，花了那么长时间到了大学城，故意绕过母校，只是怕误了认识这座城市的另外一次机会。</p>
<p>​    确实，重新认识了一下这座城市，虽然曾经走过这些地方。只是当时的脚步还是太过于匆忙了。也许，是应该放慢一下自己的脚步了，在这个浮躁的社会里，在这个浮躁的行业了里，放慢一下脚步是一件多么宝贵的事情啊，给自己一点时间，给生活一点时间，好好的认识这个世界。我想才是活着更大的意义吧。</p>
<p>​    在现在这个年纪思考这样的问题，着实是一件让别人看起来可笑的事情。也不好说自己经历过了什么，其实也并没有经历过什么。只是觉得走的太快，应该停下来休息一下了，走了那么多地方，仔细想起来，却仿佛什么地方都没有去过，没有仔细的体会过这个城市谈什么到过。只是过客而已。</p>
<p>​    一直不要脸的说重庆是我的第二故乡，相比于成都，却少了太多太多的熟悉。除了成都，待过的最长时间的城市了，还是那么陌生。</p>
<p>​    实在怪自己太懒。</p>
<p>​    不知道未来的时光我会在哪里，这两年也辗转了一些城市，我想，我是应该拿着相机，记下些什么。虽然我什么都带不走，虽然我也可能会忘记曾经拍下的一张张照片，虽然这座城市终究会把我遗忘。但我还是希望一些东西能够被我多记住一会儿，依靠着这么点照片，依靠着这么写文字。多少年以后，也许还会再打开这篇博客，在看到这么些图或者是文字，我还能想起来此时的心境，如此，便已足够。</p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0075.JPG?imageView2/4/w/600"/></p>
<p>​    </p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0115.JPG?imageView2/4/w/600"/></p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0010.JPG?imageView2/4/w/600"/></p>
<p>​    </p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0177.JPG?imageView2/4/w/600"/></p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0333.JPG?imageView2/4/w/600"/></p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0334.JPG?imageView2/4/w/600"/></p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0271.JPG?imageView2/4/w/600"/></p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0179.JPG?imageView2/4/w/600"/></p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0225.JPG?imageView2/4/w/600"/></p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0301.JPG?imageView2/4/w/600"/></p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0275.JPG?imageView2/4/w/600"/></p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0235.JPG?imageView2/4/w/600"/></p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0148.JPG?imageView2/4/w/600"/></p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0113.JPG?imageView2/4/w/600" /></p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0101.JPG?imageView2/4/w/600"/></p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0117.JPG?imageView2/4/w/600"/></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;任何一种环境或个人，初次见面就预感到离别的隐痛时，你必定爱上他了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://ocg4av0wv.bkt.clouddn.com/IMG_0124.JPG?imageView2/4/w/600&quot;/&gt;&lt;/p&gt;
&lt;p&gt;​    不知道从什么时候开始，重庆已经到处都是黄黄的银杏叶子了。也不知道从什么时候开始，重庆的每个角落都能看到银杏树。正好跟家乡的名字相同，在银杏身上倒多添加了一些情感。&lt;/p&gt;
&lt;p&gt;​    早些时候，就一直想要看一看秋天的银杏，金黄色的叶子洒满整条街。想象着这样的意境，脚踩在这样的树叶上，发出吱吱的声音，仿佛大自然叫呼唤。&lt;/p&gt;
&lt;p&gt;​    时隔两年，再回到重庆的时候，却发现原来熟悉的一切都已经不在了，记得重庆留给我的印象，除了一片一片的香樟树，就是路边的竹子。再逢重庆，看到的又是一排排的梧桐，一棵棵的银杏。更美了吧！更四季分明了。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔杂记" scheme="https://programersunny.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="杂记" scheme="https://programersunny.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>使用 Cocoapods 管理你的项目</title>
    <link href="https://programersunny.github.io/2016/12/02/CoaocPodSpec/"/>
    <id>https://programersunny.github.io/2016/12/02/CoaocPodSpec/</id>
    <published>2016-12-01T16:00:00.000Z</published>
    <updated>2017-01-25T14:18:05.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文是一个教你使用CocoaPods管理开源模块的文章。</p>
</blockquote>
<p>作为一个 iOS 开发者，几乎所有人都使用过 CocoaPods 。作为 iOS 开发中最常用最有名的类库管理工具，给开发者带来了很大的便利。而且现在很多的第三方类库都支持 Pod . 如果一名开发者想要将自己的代码开源给更多的人使用，支持 CocoaPods 肯定是更好的办法。</p>
<p>最近一直在考虑将公司的项目使用 CocoaPods 来模块管理，所以将前段时间重新写的 <code>SYNetwork</code> 进行了对其他类的解耦，在这个过程中学到了很多组织代码的经验， 加上最近正在读的 《设计模式之禅》 逐渐意识到之前自己组织代码的能力还是有所欠缺，很多模块之间也进行了一些完全没有必要的耦合，这其实是很烂的编码形式。</p>
<p>由于公司并没有构建自己的 git 服务器, 而是将代码托管在了 oschina ,所以索性将这个模块开源并放在了github上。然后尝试使用 CocoaPods 来管理这个模块，并在公司其他几个项目中进行推广。</p>
<a id="more"></a>
<p><strong>这只是我模块化项目的第一步。</strong> </p>
<p>好了， 扯淡部分完成。</p>
<h2 id="在-GitHub-创建代码仓库"><a href="#在-GitHub-创建代码仓库" class="headerlink" title="在 GitHub 创建代码仓库"></a>在 GitHub 创建代码仓库</h2><p>因为 CocoaPods 始终还是要将代码放在 GitHub 上的，所以我们还是创建一个代码仓库来保存这些代码吧！</p>
<p>这一步完成之后需要记住两个内容</p>
<ul>
<li>项目的 ssh地址 <code>git@github.com:ProgramerSunny/SYNetwork.git</code></li>
<li>项目的名称 <code>SYNetwork</code></li>
</ul>
<h2 id="在本地创建-podspec-文件"><a href="#在本地创建-podspec-文件" class="headerlink" title="在本地创建 podspec 文件"></a>在本地创建 podspec 文件</h2><p>在终端中执行命令</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod lib create SYNetwork</div></pre></td></tr></table></figure>
<p>终端会提示</p>
<blockquote>
<p>Cloning <code>https://github.com/CocoaPods/pod-template.git</code> into <code>pod</code>.</p>
</blockquote>
<p>克隆完成之后会连续的回答几个问题，根据实际情况来选择吧！</p>
<p>回答问题之后，在桌面上会有一个<code>SYNetwork</code>文件夹。在这个文件夹中又有一个文件夹<code>SYNetwork</code>里面有两个文件</p>
<ul>
<li>Classes</li>
<li>Assets</li>
</ul>
<p>其中Classes 存放的你的源代码，Assets 应该好似一些图片资源什么的,我这个仓库里面并没有用到。</p>
<blockquote>
<p>还是重新整理一下Clone下来的SYNetwork吧</p>
<ul>
<li>在 Example 文件中是自动创建的 demo 项目， 回答问题之后会自动打开这个项目，不用管它，果断的关掉它，然后 cd 到这个文件夹中 <code>pod install</code>一下。</li>
<li>将我们写的代码放进 <code>SYNetwork/SYNetwork/Classes/</code>文件夹中。</li>
<li>重新 cd 到 example 文件夹，执行 <code>pod update</code></li>
</ul>
<p>完成上面三步之后，可以在你的 demo 项目中尝试使用一些你的库，不过我没有，偷了一个懒😊</p>
</blockquote>
<h3 id="在podspec文件中编码"><a href="#在podspec文件中编码" class="headerlink" title="在podspec文件中编码"></a>在podspec文件中编码</h3><p>我使用的是Sublime Text </p>
<p>打开第一个<code>SYNetwork</code>文件夹中的<code>SYNetwork.podspec</code>文件。这个文件就是配置 CoaoaPods 基本信息的文件</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Pod::Spec.new <span class="keyword">do</span> <span class="params">|s|</span></div><div class="line">  <span class="comment"># pod 库名</span></div><div class="line">  s.name             = <span class="string">'SYNetwork'</span></div><div class="line">  <span class="comment"># pod 版本</span></div><div class="line">  s.version          = <span class="string">'3.0'</span></div><div class="line">  <span class="comment"># pod 概述 </span></div><div class="line">  s.summary          = <span class="string">'A grest network frameworks.'</span></div><div class="line">  <span class="comment"># pod的详细描述</span></div><div class="line">  s.description      = &lt;&lt;-DESC</div><div class="line">    ’this is A great network frameworks<span class="string">'</div><div class="line">                       DESC</div><div class="line">  # pod 的主页</div><div class="line">  s.homepage         = '</span><span class="symbol">https:</span>/<span class="regexp">/github.com/</span>ProgramerSunny/SYNetwork<span class="string">'</div><div class="line">  # 许可证书</div><div class="line">  s.license          = &#123; :type =&gt; '</span>MIT<span class="string">', :file =&gt; '</span>LICENSE<span class="string">' &#125;</div><div class="line">  # 作者信息</div><div class="line">  s.author           = &#123; '</span>ProgramerSunny<span class="string">' =&gt; '</span>cd_sunyang@163.com<span class="string">' &#125;</div><div class="line">  # pod 源码在 GitHub 的仓库地址,以及 pod 版本</div><div class="line">  s.source           = &#123; :git =&gt; '</span><span class="symbol">https:</span>/<span class="regexp">/github.com/</span>ProgramerSunny/SYNetwork.git<span class="string">', :tag =&gt; 3.0 &#125;</div><div class="line">  # pod 支持 iOS 系统</div><div class="line">  s.ios.deployment_target = '</span><span class="number">8.0</span><span class="string">'</div><div class="line"></div><div class="line">  s.source_files = '</span>SYNetwork/Classes/*<span class="string">'</div><div class="line"></div><div class="line">  # s.public_header_files = '</span>SYNetwork/Classes/SYNetwork.h<span class="string">'</div><div class="line">  # s.frameworks = '</span>UIKit<span class="string">', '</span>MapKit<span class="string">'</div><div class="line">  s.dependency '</span>AFNetworking<span class="string">', '</span>~&gt; <span class="number">3.0</span><span class="string">'</div><div class="line">end</span></div></pre></td></tr></table></figure>
<p><strong>需要注意的是</strong></p>
<p><strong>1.</strong></p>
<p><code>s.source_files</code></p>
<p><code>s.public_header_files</code>  中设置的文件路径一定应该是正确的。不然后面会出问题。</p>
<p><strong>2.</strong></p>
<p><code>s.version</code></p>
<p><code>s.source</code>中设置的版本应该要对上吧，我不知道对不上会有什么问题。这个地方也会有很多的坑。还有就是至今没明白为什么我如果用 <code>0.1.0</code> 这样会报错，所以我就用了 <code>1.0</code></p>
<h3 id="验证一下"><a href="#验证一下" class="headerlink" title="验证一下"></a>验证一下</h3><p>在终端中执行</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod lib lint</div></pre></td></tr></table></figure>
<p>如果出现</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-&gt; SYNetwork (<span class="number">3.0</span>)</div><div class="line">SYNetwork passed validation.</div></pre></td></tr></table></figure>
<p>就是验证通过</p>
<p>不然就需要去改各种问题了</p>
<h3 id="注册CocoaPods"><a href="#注册CocoaPods" class="headerlink" title="注册CocoaPods"></a>注册CocoaPods</h3><p>要上传你的代码到 CocoaPods 肯定也需要注册自己的身份。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod trunk register your_email_address <span class="string">'your_name'</span></div></pre></td></tr></table></figure>
<p>成功之后 CocoaPods 会发送一验证邮件到上面的邮箱，确认一下就OK</p>
<p><strong>这里的<code>your_name</code>非常建议你使用 GitHub 的用户名 邮箱也是</strong></p>
<h3 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git tag -m<span class="string">"first release"</span> <span class="string">"3.0"</span></div><div class="line">git push --tags</div><div class="line">pod trunk push iOS_Category.podspec</div></pre></td></tr></table></figure>
<p>这了的 3.0 就是<code>SYNetwork.podspec</code>中的 3.0 </p>
<p>最后搜索一下吧</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod search SYNetwork</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>一些坑吧！</p>
<h4 id="路径不对"><a href="#路径不对" class="headerlink" title="路径不对"></a>路径不对</h4><blockquote>
<p>Unable to interpret the specified path as a podspec</p>
</blockquote>
<p> 看你的 tag 标记和 podSpec 文件的 version 字段是否一致</p>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p>[<em><a href="http://blog.csdn.net/skylin19840101/article/details/50426822">在CocoaPods上创建自己iOS程序的依赖管理</a></em></p>
<p><a href="http://tips.producter.io/shi-yong-cocoapods-jin-xing-tuan-dui-xie-zuo/">使用 CocoaPods 进行团队协作</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是一个教你使用CocoaPods管理开源模块的文章。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作为一个 iOS 开发者，几乎所有人都使用过 CocoaPods 。作为 iOS 开发中最常用最有名的类库管理工具，给开发者带来了很大的便利。而且现在很多的第三方类库都支持 Pod . 如果一名开发者想要将自己的代码开源给更多的人使用，支持 CocoaPods 肯定是更好的办法。&lt;/p&gt;
&lt;p&gt;最近一直在考虑将公司的项目使用 CocoaPods 来模块管理，所以将前段时间重新写的 &lt;code&gt;SYNetwork&lt;/code&gt; 进行了对其他类的解耦，在这个过程中学到了很多组织代码的经验， 加上最近正在读的 《设计模式之禅》 逐渐意识到之前自己组织代码的能力还是有所欠缺，很多模块之间也进行了一些完全没有必要的耦合，这其实是很烂的编码形式。&lt;/p&gt;
&lt;p&gt;由于公司并没有构建自己的 git 服务器, 而是将代码托管在了 oschina ,所以索性将这个模块开源并放在了github上。然后尝试使用 CocoaPods 来管理这个模块，并在公司其他几个项目中进行推广。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://programersunny.github.io/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://programersunny.github.io/tags/iOS/"/>
    
      <category term="CocoaPods" scheme="https://programersunny.github.io/tags/CocoaPods/"/>
    
  </entry>
  
  <entry>
    <title>2016我的书单</title>
    <link href="https://programersunny.github.io/2016/11/25/2016%E6%88%91%E7%9A%84%E4%B9%A6%E5%8D%95/"/>
    <id>https://programersunny.github.io/2016/11/25/2016我的书单/</id>
    <published>2016-11-24T16:00:00.000Z</published>
    <updated>2016-12-09T03:08:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>在年末的时候意识到梳理记录是一件多么重要和美好的事情。从阅读开始，从2016年开始记录我的读书记录。</p>
<a id="more"></a>
<h3 id="已经读清单"><a href="#已经读清单" class="headerlink" title="已经读清单"></a>已经读清单</h3><h4 id="《疯狂的Java讲义》"><a href="#《疯狂的Java讲义》" class="headerlink" title="《疯狂的Java讲义》"></a>《疯狂的Java讲义》</h4><blockquote>
<p>虽然看了但是没有很深入的研究学习Java，仅仅是看了而已😂</p>
</blockquote>
<h4 id="《禅与Objective-C编程艺术》"><a href="#《禅与Objective-C编程艺术》" class="headerlink" title="《禅与Objective-C编程艺术》"></a>《禅与Objective-C编程艺术》</h4><blockquote>
<p>iOS进阶苦旅</p>
</blockquote>
<h4 id="《iOS开发进阶》"><a href="#《iOS开发进阶》" class="headerlink" title="《iOS开发进阶》"></a>《iOS开发进阶》</h4><blockquote>
<p>iOS进阶苦旅</p>
</blockquote>
<h4 id="《Effective-Objective-C-2-0：编写高质量iOS与OS-X代码的52个有效方法》"><a href="#《Effective-Objective-C-2-0：编写高质量iOS与OS-X代码的52个有效方法》" class="headerlink" title="《Effective Objective-C 2.0：编写高质量iOS与OS X代码的52个有效方法》"></a>《Effective Objective-C 2.0：编写高质量iOS与OS X代码的52个有效方法》</h4><blockquote>
<p>iOS进阶苦旅，强烈推荐本书。</p>
</blockquote>
<h4 id="《PRODUCTER》"><a href="#《PRODUCTER》" class="headerlink" title="《PRODUCTER》"></a>《PRODUCTER》</h4><blockquote>
<p>Kevin Zhou 出品</p>
</blockquote>
<h4 id="《Objective-C高级编程-iOS与OS-X多线程和内存管理》"><a href="#《Objective-C高级编程-iOS与OS-X多线程和内存管理》" class="headerlink" title="《Objective-C高级编程 iOS与OS X多线程和内存管理》"></a>《Objective-C高级编程 iOS与OS X多线程和内存管理》</h4><blockquote>
<p>iOS进阶苦旅，强烈推荐本书。</p>
</blockquote>
<h4 id="《腾讯是怎么长大的》"><a href="#《腾讯是怎么长大的》" class="headerlink" title="《腾讯是怎么长大的》"></a>《腾讯是怎么长大的》</h4><blockquote>
<p>算是腾讯的自传吧</p>
</blockquote>
<h4 id="《跳槽：做出更好的选择》"><a href="#《跳槽：做出更好的选择》" class="headerlink" title="《跳槽：做出更好的选择》"></a>《跳槽：做出更好的选择》</h4><blockquote>
<p>职业规划相关 </p>
</blockquote>
<h3 id="DOING"><a href="#DOING" class="headerlink" title="DOING"></a>DOING</h3><h4 id="《The-Swift-Programming-Languige》"><a href="#《The-Swift-Programming-Languige》" class="headerlink" title="《The Swift Programming Languige》"></a>《The Swift Programming Languige》</h4><blockquote>
<p>swift 开发必备</p>
</blockquote>
<h4 id="《软件开发者路线图：从学徒到高手》"><a href="#《软件开发者路线图：从学徒到高手》" class="headerlink" title="《软件开发者路线图：从学徒到高手》"></a>《软件开发者路线图：从学徒到高手》</h4><h3 id="未读清单"><a href="#未读清单" class="headerlink" title="未读清单"></a>未读清单</h3><h4 id="《软件开发者路线图-从学徒到高手》"><a href="#《软件开发者路线图-从学徒到高手》" class="headerlink" title="《软件开发者路线图:从学徒到高手》"></a>《软件开发者路线图:从学徒到高手》</h4><h4 id="《编程珠玑》"><a href="#《编程珠玑》" class="headerlink" title="《编程珠玑》"></a>《编程珠玑》</h4><h4 id="《重构-改善既有代码的设计》"><a href="#《重构-改善既有代码的设计》" class="headerlink" title="《重构 改善既有代码的设计》"></a>《重构 改善既有代码的设计》</h4><h4 id="《React-Native-用JavaScript开发移动应用》"><a href="#《React-Native-用JavaScript开发移动应用》" class="headerlink" title="《React Native 用JavaScript开发移动应用》"></a>《React Native 用JavaScript开发移动应用》</h4><h4 id="《Objective-C编程全解》"><a href="#《Objective-C编程全解》" class="headerlink" title="《Objective-C编程全解》"></a>《Objective-C编程全解》</h4><h3 id="书库"><a href="#书库" class="headerlink" title="书库"></a>书库</h3><h4 id="《A-Guide-To-iOS-Animation》"><a href="#《A-Guide-To-iOS-Animation》" class="headerlink" title="《A Guide To iOS Animation》"></a>《A Guide To iOS Animation》</h4><h4 id="《iOS进阶指南》"><a href="#《iOS进阶指南》" class="headerlink" title="《iOS进阶指南》"></a>《iOS进阶指南》</h4><blockquote>
<p>iOS圈网红 叶孤城正在写的书</p>
</blockquote>
<h4 id="《Core-Data》"><a href="#《Core-Data》" class="headerlink" title="《Core Data》"></a>《Core Data》</h4><blockquote>
<p>objc.io 出品 喵神翻译</p>
</blockquote>
<h4 id="《Swift-设计模式（iOS）》"><a href="#《Swift-设计模式（iOS）》" class="headerlink" title="《Swift 设计模式（iOS）》"></a>《Swift 设计模式（iOS）》</h4><h4 id="《Go-Web-编程》"><a href="#《Go-Web-编程》" class="headerlink" title="《Go Web 编程》"></a>《Go Web 编程》</h4><h4 id="《iOS-CORE-ANIMATION》"><a href="#《iOS-CORE-ANIMATION》" class="headerlink" title="《iOS CORE ANIMATION》"></a>《iOS CORE ANIMATION》</h4><h4 id="《Python-Cookbook》"><a href="#《Python-Cookbook》" class="headerlink" title="《Python Cookbook》"></a>《Python Cookbook》</h4><h4 id="《函数式Swift》"><a href="#《函数式Swift》" class="headerlink" title="《函数式Swift》"></a>《函数式Swift》</h4><blockquote>
<p>objc.io 出品 喵神翻译</p>
</blockquote>
<h4 id="《深入解析Mac-OX-amp-iOS-操作系统》"><a href="#《深入解析Mac-OX-amp-iOS-操作系统》" class="headerlink" title="《深入解析Mac OX &amp; iOS 操作系统》"></a>《深入解析Mac OX &amp; iOS 操作系统》</h4><h4 id="《JavaScript-权威指南》"><a href="#《JavaScript-权威指南》" class="headerlink" title="《JavaScript 权威指南》"></a>《JavaScript 权威指南》</h4><h4 id="《JavaScript-面向对象编程指南》"><a href="#《JavaScript-面向对象编程指南》" class="headerlink" title="《JavaScript 面向对象编程指南》"></a>《JavaScript 面向对象编程指南》</h4><h4 id="《JavaScript-王者归来》"><a href="#《JavaScript-王者归来》" class="headerlink" title="《JavaScript 王者归来》"></a>《JavaScript 王者归来》</h4><h4 id="《Shell脚本学习指南》"><a href="#《Shell脚本学习指南》" class="headerlink" title="《Shell脚本学习指南》"></a>《Shell脚本学习指南》</h4><h4 id="《大道至简-软件工程实践者的思想》"><a href="#《大道至简-软件工程实践者的思想》" class="headerlink" title="《大道至简 软件工程实践者的思想》"></a>《大道至简 软件工程实践者的思想》</h4><h4 id="《REWORK》"><a href="#《REWORK》" class="headerlink" title="《REWORK》"></a>《REWORK》</h4><h4 id="《iOS-并发编程指南》"><a href="#《iOS-并发编程指南》" class="headerlink" title="《iOS 并发编程指南》"></a>《iOS 并发编程指南》</h4><h4 id="《Growth-全栈工程师指南》"><a href="#《Growth-全栈工程师指南》" class="headerlink" title="《Growth 全栈工程师指南》"></a>《Growth 全栈工程师指南》</h4><h4 id="《深入浅出全栈工程师》"><a href="#《深入浅出全栈工程师》" class="headerlink" title="《深入浅出全栈工程师》"></a>《深入浅出全栈工程师》</h4><h4 id="《调试九法-软件错误的排查之道》"><a href="#《调试九法-软件错误的排查之道》" class="headerlink" title="《调试九法 软件错误的排查之道》"></a>《调试九法 软件错误的排查之道》</h4><h4 id="《架构实践-软件架构设计的过程》"><a href="#《架构实践-软件架构设计的过程》" class="headerlink" title="《架构实践 软件架构设计的过程》"></a>《架构实践 软件架构设计的过程》</h4><h4 id="《图解TCP-IP》"><a href="#《图解TCP-IP》" class="headerlink" title="《图解TCP/IP》"></a>《图解TCP/IP》</h4><h4 id="《图解HTTP》"><a href="#《图解HTTP》" class="headerlink" title="《图解HTTP》"></a>《图解HTTP》</h4><h4 id="《HTTP权威指南》"><a href="#《HTTP权威指南》" class="headerlink" title="《HTTP权威指南》"></a>《HTTP权威指南》</h4><h4 id="《TCP-IP详解-协议、实现、TCP事物协议》"><a href="#《TCP-IP详解-协议、实现、TCP事物协议》" class="headerlink" title="《TCP/IP详解 协议、实现、TCP事物协议》"></a>《TCP/IP详解 协议、实现、TCP事物协议》</h4>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在年末的时候意识到梳理记录是一件多么重要和美好的事情。从阅读开始，从2016年开始记录我的读书记录。&lt;/p&gt;
    
    </summary>
    
      <category term="阅读" scheme="https://programersunny.github.io/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="阅读" scheme="https://programersunny.github.io/tags/%E9%98%85%E8%AF%BB/"/>
    
      <category term="图书" scheme="https://programersunny.github.io/tags/%E5%9B%BE%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>怎样在iOS中使用icon-font？</title>
    <link href="https://programersunny.github.io/2016/11/23/%E6%80%8E%E6%A0%B7%E5%9C%A8iOS%E4%B8%AD%E4%BD%BF%E7%94%A8icon-font%EF%BC%9F/"/>
    <id>https://programersunny.github.io/2016/11/23/怎样在iOS中使用icon-font？/</id>
    <published>2016-11-22T16:00:00.000Z</published>
    <updated>2016-12-08T17:38:22.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>这是一篇写给 iOS 开发的文章(教程)。</p>
</blockquote>
<p>icon 和 font 拆开来看应该所有人都认识它是什么意思，iconfont就是这两者的结合。严格的说，我们平时使用的字体，并不是我们传统认知中的文字，而是一个一个的图标。是由在坐标系中各种点，连起来组成的。babala….. 这也是我们平时使用的字体无论放到多大，都不会出现在图片上面出现的因为拉伸而出现的失真的情况。</p>
<p>iconfont 实际上就是吧我们在项目中要使用的各类 icon 按照相同的原理制作成一个字体库，然后用使用 font 的方式来使用。</p>
<p>说的挺乱，反正大概就是这么个意思吧。</p>
<a id="more"></a>
<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p>测试的时候随便截了一个图<br><img src="http://ocg4av0wv.bkt.clouddn.com/9760173C-7692-43C5-A5CC-FEED1611B3B5.png" /></p>
<h2 id="icon-font-解决了什么问题"><a href="#icon-font-解决了什么问题" class="headerlink" title="icon-font 解决了什么问题"></a>icon-font 解决了什么问题</h2><blockquote>
<ul>
<li>解决一个图标要同时适配PC 移动端 和 retina 的问题</li>
</ul>
</blockquote>
<p>在现在扁平化设计大行其道的大环境下，拟物化设计推崇的写实以及高光纹理之类的元素也基本上都被现在的设计师们舍弃掉了，这也为 icon-font 的应用提供了基础。</p>
<blockquote>
<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul>
<li>减少应用体积，字体文件比图片要小</li>
<li>图标保真缩放，解决2x／3x的问题</li>
<li>方便更改图标颜色大小，阴影，图片复用</li>
<li>一套图标资源可以在不同平台使用(安卓、iOS、web)</li>
<li>资源维护方便</li>
</ul>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>需要自定义svg图片，并将其转换为ttf文件，图标制作成本比较高</li>
<li>添加图标是需要重新制作ttf文件</li>
<li>只能支持单色(不支持渐变色图标)</li>
</ul>
<p>(以上内容来自 没故事的卓同学 在趣直播的分享)</p>
</blockquote>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>这个很简单，就是利用 svg 矢量图制作字体库</p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul>
<li>阿里的iconfont.cn</li>
<li>svg 文件，svg 的制作其实是由设计师完成的，我们只需要让设计师提供合适的 svg 而不是2x3x图片。就可以了。</li>
</ul>
<h3 id="step-1"><a href="#step-1" class="headerlink" title="step 1"></a>step 1</h3><p><strong>在<a href="ICONFONT.CN">iconfont.cn</a>注册并登录</strong>。</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/CB315E67-08BF-46E0-A087-F658EC1B49FC.png"/></p>
<p>注册完成后点击图标管理，我的图标，然后上传准备好的 svg 文件。</p>
<p><strong>然后切换到我的项目</strong></p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/6064C73F-8BEF-40B9-99EB-3C5BF3BFDBCB.png" /></p>
<p>点击右边的添加，创建字体库。</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/1DF9A210-D6A1-490B-B816-2D813E51F643.png"/></p>
<p>红圈内的内容就是接下来要用到的<code>fontName</code></p>
<p><strong>接下来</strong></p>
<p>还记得我们第一步上传的图标名字吧！</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/64E77B1D-6153-42FA-8FBE-D8C715725C21.png" /></p>
<p>在右上角搜索哪个名字，然后就出来了刚刚上传的图标</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/820BD3A3-DF5B-4837-BA09-40AD93BEFE3C.png"/></p>
<p>加入购物车之后</p>
<p>右上角购物车上应该出现了 badge吧。</p>
<p><strong>点击这个图标</strong></p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/B8A3AE3A-7758-4435-82E9-6E12DDDA4C47.png"/></p>
<p>因为我已经添加了 <code>ps_shop_icon</code>所以我就随便选了一个。</p>
<p><strong>回到我的项目</strong></p>
<p>点击下载至本地</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/C4838064-2EEC-44F8-A8DE-AC5C56A4673E.png"/></p>
<p>下载之后你会看到一个 .ttf 文件。</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/B9737F6A-0140-430F-8298-4DD575AD9C7A.png"/></p>
<p><strong>将这个文件拉到项目中</strong></p>
<p>接下来就是要在项目中操作的事情了。</p>
<h4 id="step-2"><a href="#step-2" class="headerlink" title="step 2"></a>step 2</h4><p><img src="http://ocg4av0wv.bkt.clouddn.com/AF58494E-C3F6-4CEB-BDAD-8F798246F771.png"/></p>
<p>在info.plist 文件中添加如上内容。</p>
<p><strong>然后</strong></p>
<p>在 <code>Build Phases</code>中检查一下</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/954BABBC-3644-4189-9016-B692D18E5CCB.png"/></p>
<p>如果没有就删掉重新拉进项目吧！</p>
<p>或者点击最下面手动添加。</p>
<h4 id="step-3"><a href="#step-3" class="headerlink" title="step 3"></a>step 3</h4><p>在代码中找一个label</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">label.font = [UIFont fontWithName:@&quot;dph_fonticon&quot; size:20];</div><div class="line">label.textColor = [UIColor redColor];</div><div class="line">label.text = @&quot;\U0000e601&quot;;</div></pre></td></tr></table></figure>
<p>代码中的<code>dph_fonticon</code> 就是在iconfont.cn的项目中设置的<code>font-family</code>名字</p>
<p><code>\U0000e601</code>是在iconfont.cn 中对应</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/9B7F5726-260D-4CCA-859B-F5453307387E.png"/></p>
<p>图片中的<code>&amp;#xe610</code> 这个是给前端用的，在iOS上对应的将<code>&amp;#x</code>更换成<code>\U</code> 然后补0 保证unicode 为8位就是了。 </p>
<p>现在运行一下代码，就能看到对应的值已经改变了。</p>
<h3 id="Xib"><a href="#Xib" class="headerlink" title="Xib"></a>Xib</h3><p><img src="http://ocg4av0wv.bkt.clouddn.com/3831121F-8386-4F51-B578-B425888571C6.png" /></p>
<p>如上图。</p>
<p>那个问号需要将下载下来的<code>.ttf</code>文件导入本体的一个叫做<code>footbook的app中</code>（直接拖进去就ok）</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/10B329BA-57B9-4C54-B447-90EEBDDC138D.png"/></p>
<p> 然后就可以复制粘贴了。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>iconfont 这种技术好几年前就已经出现了，现在也已经出现在了阿里的大部分产品中，可见iconfont的技术也是十分成熟的，为了给安装包瘦身，开发者们也做了很多的努力，作为占用资源非常多的图片文件，使用 iconfont 确实能够给 app 减肥。这对于像淘宝、支付宝之类的巨无霸 app 来说就显得尤为重要了。</p>
<p>后期在公司 UI 的帮助下，准备在公司几个项目中小范围的实验一下这个方法。检验一下 iconfont 能在项目中带来多大的便利。</p>
<h3 id="TODO："><a href="#TODO：" class="headerlink" title="TODO："></a>TODO：</h3><p>使用 iconfont 生成<code>UIImage</code> 在<code>UIButton</code>和<code>UIImageView</code> 中使用。</p>
<p>这个在github 上搜一下<code>iconfont</code> 就有很多代码可以使用了。另外 swift 版本 卓同学也写了一份。</p>
<h3 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h3><p>感谢<a href="http://www.jianshu.com/users/88a056103c02/latest_articles">没故事的卓同学</a>在<a href="www.quzhiboapp.com">趣直播</a>的分享</p>
<p>感谢公司 UI 小哥帮我做了几个 svg 图</p>
<p>感谢公司前端小哥的帮忙</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://github.com/PrideChung/FontAwesomeKit">swift</a></p>
<p><a href="https://github.com/JohnWong/IconFont">objC</a></p>
<p><a href="http://johnwong.github.io/mobile/2015/04/03/using-icon-font-in-ios.html">文章</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这是一篇写给 iOS 开发的文章(教程)。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;icon 和 font 拆开来看应该所有人都认识它是什么意思，iconfont就是这两者的结合。严格的说，我们平时使用的字体，并不是我们传统认知中的文字，而是一个一个的图标。是由在坐标系中各种点，连起来组成的。babala….. 这也是我们平时使用的字体无论放到多大，都不会出现在图片上面出现的因为拉伸而出现的失真的情况。&lt;/p&gt;
&lt;p&gt;iconfont 实际上就是吧我们在项目中要使用的各类 icon 按照相同的原理制作成一个字体库，然后用使用 font 的方式来使用。&lt;/p&gt;
&lt;p&gt;说的挺乱，反正大概就是这么个意思吧。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://programersunny.github.io/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://programersunny.github.io/tags/iOS/"/>
    
      <category term="UI" scheme="https://programersunny.github.io/tags/UI/"/>
    
  </entry>
  
  <entry>
    <title>SYNetwork</title>
    <link href="https://programersunny.github.io/2016/11/17/SYNetwork/"/>
    <id>https://programersunny.github.io/2016/11/17/SYNetwork/</id>
    <published>2016-11-16T16:00:00.000Z</published>
    <updated>2016-12-08T17:55:20.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p> 基于AFNetworking的网络请求框架。采用command设计模式，支持按照接口缓存请求数据。</p>
</blockquote>
<p>在公司项目整体进行换代升级的同时，移动端 App 由原来的的一个 App 拆分成两个 App ，再拆分到三个 App，在三个 App 虽然还是有很多的办法来进行管理，但是考虑到随着业务的增长，产品的数量还有增加的趋势，功能也逐渐增多。还有 Hybrid化 的趋势。将一些共有的模块提取出来为三个 App 所用，可能会是更好的方式。当然，对这些公共模块的管理，还是会选择使用 CocoaPods ，接下来会再写一篇文章来介绍如何使用创建自己的 CocoaPods 仓库。在这样的环境下，第一个提取出来的模块就诞生了 — SYNetwork。</p>
<p>在进行模块的独立的时候，想得最多的还是和原来的代码进行解耦，并且在抽取的过程中不要破坏原有的代码逻辑，并且比较合理的组织代码。在这样的基础上添加一些新的功能。在跟另外一个同事讨论之后，决定放弃之前集中式的网络请求方式，参考了大量前辈的网络库之后，采用了 Command 模式，一个网络请求 Api 是一个对象，这样能够更方便和优雅的根据不同的接口满足不同的业务需求。</p>
<p>当然，公司的项目目前还没有十分的复杂，所以目前主要实现了: <code>POST</code>、<code>GET</code> 两种请求方式；根据请求的参数和 url 缓存请求结果；一个还算漂亮的logger；简单的对网络请求进行 AOP 操作(对参数进行加密)这些比较常见的功能。</p>
<a id="more"></a>
<p><a href="https://github.com/ProgramerSunny/SYNetwork"><em>GitHub地址</em></a></p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><p>SYNetwork 由下面两个部分组成</p>
<ul>
<li><p>SYNetwork</p>
</li>
<li><p>SYRequestParametersBuilder</p>
</li>
</ul>
<blockquote>
<p>这个类可以添加一些公共的参数</p>
</blockquote>
<ul>
<li>SYRequest</li>
</ul>
<blockquote>
<p>所有网络请求 API 的父类</p>
</blockquote>
<ul>
<li>SYNetworkConfig</li>
</ul>
<blockquote>
<p>环境配置 包括网络请求的 BaseUrl 请求超时时间，缓存总量等</p>
</blockquote>
<ul>
<li>SYHTTPManager</li>
</ul>
<blockquote>
<p>所有网络请求统一由这个类发出</p>
</blockquote>
<ul>
<li>SYResponse</li>
</ul>
<blockquote>
<p>网络请求返回值对象</p>
</blockquote>
<ul>
<li>SYCache</li>
</ul>
<ul>
<li>SYCache</li>
</ul>
<blockquote>
<p>缓存管理</p>
</blockquote>
<ul>
<li>SYCacheObject </li>
</ul>
<blockquote>
<p>缓存的对象</p>
</blockquote>
<ul>
<li>SYLogger</li>
</ul>
<blockquote>
<p>一个漂亮的logger</p>
</blockquote>
<h2 id="加入"><a href="#加入" class="headerlink" title="加入"></a>加入</h2><h3 id="1、直接将源文件拉进你的工程"><a href="#1、直接将源文件拉进你的工程" class="headerlink" title="1、直接将源文件拉进你的工程"></a>1、直接将源文件拉进你的工程</h3><h3 id="2、SYNetwork也支持通过Cocoapod-通过在Podfile中添加如下代码。"><a href="#2、SYNetwork也支持通过Cocoapod-通过在Podfile中添加如下代码。" class="headerlink" title="2、SYNetwork也支持通过Cocoapod. 通过在Podfile中添加如下代码。"></a>2、SYNetwork也支持通过<a href="http://cocoapods.org"><em>Cocoapod</em></a>. 通过在Podfile中添加如下代码。</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod <span class="string">"SYNetwork"</span></div></pre></td></tr></table></figure>
<p>然后在终端中运行</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod install</div></pre></td></tr></table></figure>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="step-1"><a href="#step-1" class="headerlink" title="step 1"></a>step 1</h3><p>导入头文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#import &lt;SYNetwork/SYNetwork.h&gt;</div></pre></td></tr></table></figure>
<p>在<code>appdelegate</code>中加入如下代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[[SYRequestConfig sharedConfig] configBaseUrl:YOUR_BASE_URL                                            								 timeOutInterval:20</div><div class="line">cacheCountLimit:1000</div><div class="line">rebuildParametersManger:[XXRequestParametersBuilder sharedInstance]];</div></pre></td></tr></table></figure>
<p>以上代码中的<code>XXRequestParametersBuilder</code> 是<code>SYRequestParametersBuilder</code>的子类,主要有以下方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">+ (SYRequestParametersBuilder *)sharedInstance;</div><div class="line"></div><div class="line">- (NSDictionary *)rebuildParameters:(NSDictionary *)parameters;</div><div class="line"></div><div class="line">/**</div><div class="line">生成缓存的key  这个方法必须由字类实现</div><div class="line"></div><div class="line">@param parcmeters 参数</div><div class="line">@return key</div><div class="line">*/</div><div class="line">- (NSString *)cacheSaveKeyString:(NSDictionary *)parcmeters;</div></pre></td></tr></table></figure>
<h3 id="step-2"><a href="#step-2" class="headerlink" title="step 2"></a>step 2</h3><p>每个接口都是一个继承与<code>SYRequest</code>的子类,接下来以登录为例子</p>
<p><strong>LoginApi.h</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (id)initWithUserName:(NSString *)username password:(NSString *)password;</div></pre></td></tr></table></figure>
<p><strong>LoginApi.m</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">@implementation LoginApi&#123;</div><div class="line">NSString *_username;</div><div class="line">NSString *_password;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (id)initWithUserName:(NSString *)username password:(NSString *)password &#123;</div><div class="line">self = [super init];</div><div class="line">if (self) &#123;</div><div class="line">_username = username;</div><div class="line">_password = password;</div><div class="line">_logintype = logintype;</div><div class="line">&#125;</div><div class="line">return self;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (NSString *)requestUrl &#123;</div><div class="line">return @&quot;api/user/login&quot;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (NSMutableDictionary *)requestParams &#123;</div><div class="line">return @&#123;</div><div class="line">@&quot;phone&quot;: _username,</div><div class="line">@&quot;code&quot; : _password,</div><div class="line">&#125;.mutableCopy;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>还可以通过<code>SYRequest</code>的一些方法,来设置请求方法，校验返回收据，是否缓存等问题。</p>
<h3 id="step-3-调用"><a href="#step-3-调用" class="headerlink" title="step 3 调用"></a>step 3 调用</h3><p>通过<code>block</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">_loginApi = [[LoginApi alloc] initWithUserName:phone password:code logintype:type];</div><div class="line">[_loginApi startWithSuccessBlock:^(SYResponse *response , NSString *errorMessage) &#123;</div><div class="line">// 请求成功</div><div class="line">&#125; failureBlbck:^(SYResponse *response , NSString *errorMessage) &#123;</div><div class="line">// 请求失败</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>也可以通过<code>delegate</code>收到回调</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">_loginApi = [[LoginApi alloc] initWithUserName:phone password:code logintype:type];</div><div class="line">_loginApi.callBackDelegate = self;</div><div class="line">[_loginApi start];</div></pre></td></tr></table></figure>
<p>然后实现</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- (void)managerCallApiDidSuccess:(SYResponse *)response;</div><div class="line">- (void)managerCallApiDidFailed:(NSString *)errorMessage;</div></pre></td></tr></table></figure>
<p>两个方法</p>
<h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>SYNetwork is available under the MIT license. See the LICENSE file for more info.</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; 基于AFNetworking的网络请求框架。采用command设计模式，支持按照接口缓存请求数据。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在公司项目整体进行换代升级的同时，移动端 App 由原来的的一个 App 拆分成两个 App ，再拆分到三个 App，在三个 App 虽然还是有很多的办法来进行管理，但是考虑到随着业务的增长，产品的数量还有增加的趋势，功能也逐渐增多。还有 Hybrid化 的趋势。将一些共有的模块提取出来为三个 App 所用，可能会是更好的方式。当然，对这些公共模块的管理，还是会选择使用 CocoaPods ，接下来会再写一篇文章来介绍如何使用创建自己的 CocoaPods 仓库。在这样的环境下，第一个提取出来的模块就诞生了 — SYNetwork。&lt;/p&gt;
&lt;p&gt;在进行模块的独立的时候，想得最多的还是和原来的代码进行解耦，并且在抽取的过程中不要破坏原有的代码逻辑，并且比较合理的组织代码。在这样的基础上添加一些新的功能。在跟另外一个同事讨论之后，决定放弃之前集中式的网络请求方式，参考了大量前辈的网络库之后，采用了 Command 模式，一个网络请求 Api 是一个对象，这样能够更方便和优雅的根据不同的接口满足不同的业务需求。&lt;/p&gt;
&lt;p&gt;当然，公司的项目目前还没有十分的复杂，所以目前主要实现了: &lt;code&gt;POST&lt;/code&gt;、&lt;code&gt;GET&lt;/code&gt; 两种请求方式；根据请求的参数和 url 缓存请求结果；一个还算漂亮的logger；简单的对网络请求进行 AOP 操作(对参数进行加密)这些比较常见的功能。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://programersunny.github.io/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://programersunny.github.io/tags/iOS/"/>
    
      <category term="OpenSource" scheme="https://programersunny.github.io/tags/OpenSource/"/>
    
  </entry>
  
  <entry>
    <title>SYPhotoBrowser</title>
    <link href="https://programersunny.github.io/2016/11/02/SYPhotoBrowser/"/>
    <id>https://programersunny.github.io/2016/11/02/SYPhotoBrowser/</id>
    <published>2016-11-01T16:00:00.000Z</published>
    <updated>2016-12-09T02:49:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>图片浏览器，使用方法类似UITableView的图片浏览器。基于YYWebImage.</p>
<a id="more"></a>
<h3 id="GIF"><a href="#GIF" class="headerlink" title="GIF"></a>GIF</h3><p><img src="http://ocg4av0wv.bkt.clouddn.com/SYPhotoBrowser.gif" width=500/></p>
<h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SYPhotoBrowser *browser = [[SYPhotoBrowser alloc] init];</div><div class="line">   [browser setDataSource:self];</div><div class="line">   NSInteger idx = 0;</div><div class="line">   [browser showFromView:ges.view photoCount:self.imageUrls.count currentPhotoIndex:idx];</div></pre></td></tr></table></figure>
<h4 id="Datasource"><a href="#Datasource" class="headerlink" title="Datasource"></a>Datasource</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (UIView *)photoView:(SYPhotoBrowser *)photeBrowser viewForIndex:(NSInteger)index;</div><div class="line">- (CGSize)photoView:(SYPhotoBrowser *)photeBrowser imageSizeForIndex:(NSInteger)index;</div><div class="line">- (UIImage *)photoView:(SYPhotoBrowser *)photoBrowser defaultImageForIndex:(NSInteger)index;</div><div class="line">- (NSString *)photoView:(SYPhotoBrowser *)photoBrowser highQualityUrlStringForIndex:(NSInteger)index;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/ProgramerSunny/SYPhotoBrowser"><em>GitHub地址</em></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;图片浏览器，使用方法类似UITableView的图片浏览器。基于YYWebImage.&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://programersunny.github.io/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://programersunny.github.io/tags/iOS/"/>
    
      <category term="OpenSource" scheme="https://programersunny.github.io/tags/OpenSource/"/>
    
  </entry>
  
  <entry>
    <title>让人恐惧的属性关键字</title>
    <link href="https://programersunny.github.io/2016/10/31/%E8%AE%A9%E4%BA%BA%E6%81%90%E6%83%A7%E7%9A%84%E5%B1%9E%E6%80%A7%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <id>https://programersunny.github.io/2016/10/31/让人恐惧的属性关键字/</id>
    <published>2016-10-30T16:00:00.000Z</published>
    <updated>2016-12-09T02:56:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>一半的 App 都会有一个个人这个模块来对个人信息，设置等功能进行管理，最近搞公司的项目，在项目结束的时候就想到了应该给我的这个界面加上 “headerimage scale” 这样的效果。然后项目已经结束，也并不想大刀阔斧的去修改原来的代码，想到之前在微博看到一个这样的库。时间还是比较紧急的，毕竟周末，然后就把代码下下来，简单的跑了一下，没有发现什么问题之后就直接在项目中用了。</p>
<p>由于公司一直缺乏很系统的兼容测试，只是对功能有比较严格的要求，所以接下来到上线这个过程都很愉快。 UI、产品都比较满意这样搞。</p>
<p>上线之后，就发生了一些悲剧的事情了….</p>
<a id="more"></a>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/CE310A65-63EE-4D64-B031-864A19556924.png",width = 500 /></p>
<h4 id="UIScrollView-headerImageScale-实现原理"><a href="#UIScrollView-headerImageScale-实现原理" class="headerlink" title="UIScrollView + headerImageScale 实现原理"></a>UIScrollView + headerImageScale 实现原理</h4><p>不得不说，这个category也是一个非常好的东西，帮助我们轻松的集成tableview上面的头部缩放图片，且无侵入性。</p>
<p>实现原理其实看起来也比较见到，使用到了method swizzling来拦截到tableview的头部试图，然后通过KVO来监听scrollview的偏移量。然后修改imageView的frame实现头部试图的缩放。</p>
<p>当然既然使用到了KVO很自然的就要想到在dealloc方法里面需要去移除observer我也很愉快的在源码里面找到了这个方法。<strong>这就是坑所在</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- (void)dealloc</div><div class="line">&#123;</div><div class="line">    if (self.yz_isInitial) &#123; // 初始化过，就表示有监听contentOffset属性，才需要移除</div><div class="line">        </div><div class="line">        [self removeObserver:self forKeyPath:YZKeyPath(self, contentOffset)];</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可能说的不好，但是大概实现思路，也跟我之前自己写的差不多，就是在原来的header位置上面放一个UIimageView，通过监听scrollview的偏移量来改变UIimageView的frame.</p>
<p>然后我们接着讲，由于公司缺乏系统的兼容性测试，在上线前使用模拟器跟UI对应调整了一下试图，以及针对小屏幕手机做了相应了屏幕适配之后。项目也很顺利的上线了，虽然从我点发布，到我在app store上面搜到这期间相差了6七个小时，感觉这个周期比往常慢了很多。</p>
<p>原以为提前了半个月完成了项目，然后经过了十分充分的测试，自己也针对极端网络条件下做了很多测试。这个版本应该不会收集到太多的线上crash。</p>
<p>然后很不幸的是我在线上日志收集日志中看到了很怪异的问题，线上crash一直都非常高。</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/8C289058-1F79-42EE-8F0B-34FA0FC27A43.png" width= 500 /></p>
<p>这是我通过bugly收集到的相关日志， 仔细一看，所有crash都发生在iOS8上面。一共三条日志，全部发生在iOS8 上面。</p>
<p>这让我意识到这个问题一定是这次更新导致了严重的不兼容iOS8的问题。</p>
<h4 id="DEBUG过程"><a href="#DEBUG过程" class="headerlink" title="DEBUG过程"></a>DEBUG过程</h4><p>可能也注意到了，上面有一条ipad的日志，虽然app并没有兼容apad，但是我也用家里的ipad试了一下，进入app，到登录界面然后就crash，在打了全局断点的情况下，crash到了maim.m这个文件里面，bad_access野指针。然后我想了半天也没有找到什么情况下能这么快的出现crash。然后我把目标放在了JPush 极光推送上面。经历了一段时间之后，我仔细检查了极光推送所有的地方，并且尝试将所有代码注释的方法，crash依旧。</p>
<p>后来我开始依赖于google，最终在唐巧巧大的博客里找到了解决方法。</p>
<p>在appdelegate中定义一个方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">void uncaughtExceptionHandler(NSException *exception) &#123;</div><div class="line">    NSLog(@&quot;CRASH: %@&quot;, exception);</div><div class="line">    NSLog(@&quot;Stack Trace: %@&quot;, [exception callStackSymbols]);</div><div class="line">    // Internal error reporting</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在应用启动的时候，将这个方法作为异常的回调</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions</div><div class="line">&#123;   </div><div class="line">    NSSetUncaughtExceptionHandler(&amp;uncaughtExceptionHandler);</div><div class="line">    // Normal launch stuff</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后终于能看到日志了。</p>
<p>在另外一次crash中我看到了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[UIScrollView _systemGestureStateChanged:]: message sent to deallocated instance</div></pre></td></tr></table></figure>
<p>这样的句子，才明白，crash并不是JPush造成的。UIScrollView，此时我并没有想到什么东西，因为在这个使用到了ScrollView的场景实在不多，然后我通过修改代码，绕开使用了<code>UIScrollView</code>的<code>WelcomeViewController</code>之后发现登录界面正常，不绕开，无法进入登录界面。然后登录界面登录进去之后依然crash</p>
<p>因为我的登录界面</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/E28FB77D-C390-47D4-A6B3-6FED899295EF.png" width=200/></p>
<p>这个控件使用了Scrollview。</p>
<p>然后在登录成功最后，几乎无法使用，log全是差不多的情况，这个时候我才开始吧注意力放在相关的类别里面。</p>
<p>然后我又打开了<a href="http://www.jianshu.com/p/859e3ef76b05"><em>作者的简书</em></a></p>
<p>在评论中看到这样一句</p>
<blockquote>
<p>1.发现app中任何的uitableview被释放之后，再点击屏幕就会crash，报<br>[UITableView _systemGestureStateChanged:]: message sent to deallocated instance 0x17385200<br>2.后来发现任何的collectionview被释放之后，点击屏幕也会crash，报<br>[UICollectionView _systemGestureStateChanged:]: message sent to deallocated instance 0x17385200<br>3.把目光放在UIScrollView上，查找UIScrollView的分类，是否有问题<br>4.找到 UIScrollView+HeaderScaleImage.h 注释了其中一部分代码,并把所有的引用都注释掉，依然有这个问题。<br>5.开始将目光放在_systemGestureStateChanged上，还有僵尸对象上，用instrument调试，依然无解。<br>6.六个小时过去了。<br>7.睡了一觉，然后又把目光放在UIScrollView上，将UIScrollView+HeaderScaleImage.h 中的代码全部注释掉了。<br>8.正常。感觉世界都亮了。<br>9.一步一步注释，排除，最后发现这个里面重写了uiscrollview的dealloc方法，导致scrollview在释放的时候无法清除自己的观察者身份，导致系统发通知的时候仍然能发到它身上。ios 9 没问题，ios8上就会直接crash。<br>10.将最后那个dealloc中的代码另外立出来，在controller的dealloc中主动调用这个方法，整个app没几个页面用这个，所以也并没有增加太多的工作量。</p>
</blockquote>
<p>照着上面的方法修改之后，果然，问题得到解决。</p>
<h4 id="分析原因"><a href="#分析原因" class="headerlink" title="分析原因"></a>分析原因</h4><p>如果还记得本文的标题，大概也能想到了，在iOS9以前的系统上delegate的属性关键字是assign,这一点不用查看什么文档，只需要在百度里面搜索一下 <code>delegate assign 2014</code> 就可以得到验证。</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/FF79579D-6E61-4795-A19F-5806CF7.png" width=500 /></p>
<p>在那个时代的delegate都是使用的assign作为delegate的属性关键字。</p>
<p>我们再看看<strong>52个方法</strong>中对几个属性关键字的描述</p>
<blockquote>
<ol>
<li>assign “设置方法” 只会执行针对“纯量关系”的简单负值操作。</li>
<li>strong 此特质表明该属性定义了一种“拥有关系”，为这种属性设置新值时，设置方法会<strong>先保留新值，并释放旧值</strong>然后讲新值设置上去。</li>
<li>weak 此特质表明该属性定义了一种“非拥有关系”，为这种属性设置新值时，设置方法<strong>既不保留新值，也不释放旧值</strong>，此特征同assign类似，然而在属性所指的对象遭到摧毁时，属性指也会清空（nil out）</li>
<li>unsafe_unretained 此特质的语义和assign相同，但是它适用于“对象类型”，该特质表达一种“非拥有关系”，当目标对象遭到摧毁时，属性值不会自动清空。</li>
<li>copy 此特质与strong类似，然而设置方法并不保留新值而是将其拷贝一份。</li>
</ol>
</blockquote>
<p>这时候我们看到无论是使用assign 还是weak 甚至是unsafe_unretained都不会造成循环引用的问题。</p>
<p>assign实际上是指针覆值，不对引用计数操作，使用之后如果没有置为nil，可能就会产生野指针；而weak一旦不进行使用后，会有一个置nil的操作。</p>
<h4 id="猜测"><a href="#猜测" class="headerlink" title="猜测"></a>猜测</h4><p>这就说明在iOS8下虽然系统在代理中都使用的assign属性关键字，但是在dealloc方法中使用了如<code>self.delegate = nil</code>这样的代码，将对象置为nil.</p>
<p>然后我我们在UISCrollView的分类中重写了他的dealloc方法，导致这一过程消失。所以造成野指针。</p>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>由于app已经上线，所以最初的思路还是使用hotfix来解决这个问题，但是经过一番努力之后，发现即使是使用了JSPatch也没有办法来解决这个问题，因为UIScrollview的子类涉及的太多了。我们也没有办法，通过patch的方法，还原系统的dealloc方法。所以我也只能先注释掉category中的dealloc方法，然后在使用了这个类别的我的界面中，手动的移除observer。</p>
<h4 id="证明猜测"><a href="#证明猜测" class="headerlink" title="证明猜测"></a>证明猜测</h4><p>既然结论都是猜测出来了，我也简单的写一个小demo来验证一下刚才的猜测吧！</p>
<p> 首先定义了一个Dog类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line">@class Cat;</div><div class="line">@protocol DogDelegate &lt;NSObject&gt;</div><div class="line"></div><div class="line">- (void)fuck;</div><div class="line"></div><div class="line">@end</div><div class="line">@interface Dog : NSObject</div><div class="line"></div><div class="line">@property (nonatomic ,assign) Cat &lt;DogDelegate&gt; *delegate;</div><div class="line"></div><div class="line">-(void)run;</div><div class="line">@end</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#import &quot;Dog.h&quot;</div><div class="line">#import &quot;Cat.h&quot;</div><div class="line"></div><div class="line">@implementation Dog</div><div class="line"></div><div class="line">- (void)setDelegate:(Cat&lt;DogDelegate&gt; *)delegate &#123;</div><div class="line">    _delegate = delegate;</div><div class="line">    [delegate addObserver:self forKeyPath:@&quot;name&quot; options:NSKeyValueObservingOptionNew context:nil];</div><div class="line">&#125;</div><div class="line"></div><div class="line">//- (void)dealloc &#123;</div><div class="line">//    [self.delegate removeObserver:self forKeyPath:@&quot;name&quot;];</div><div class="line">//&#125;</div><div class="line"></div><div class="line">- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary&lt;NSKeyValueChangeKey,id&gt; *)change context:(void *)context &#123;</div><div class="line">    </div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>然后定义个一个Cat类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line"></div><div class="line">@interface Cat : NSObject</div><div class="line">@property (nonatomic ,strong) NSString *name;</div><div class="line">@end</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#import &quot;Cat.h&quot;</div><div class="line">#import &quot;Dog.h&quot;</div><div class="line"></div><div class="line">@interface Cat ()&lt;DogDelegate&gt;</div><div class="line">@end</div><div class="line">@implementation Cat</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>最后调用一下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Dog *dog = [[Dog alloc] init];</div><div class="line">Cat *cat = [[Cat alloc] init];</div><div class="line">dog.delegate = cat;</div><div class="line">cat.name =  @&quot;nacy&quot;;    </div><div class="line">dog = nil;</div><div class="line">cat.name = @&quot;lily&quot;;</div></pre></td></tr></table></figure>
<p>果然如果注释掉Dog的dealloc方法，就会造成<code>EXC_BAD_ACCESS</code>crash。</p>
<h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><ol>
<li>千万不要在 category 中覆盖掉原来类中的方法。不然不知道有多少坑等着你。</li>
<li>在 iOS8 下 delegate使用的是 assign 属性关键字，这是MRC时代的问题。</li>
<li>这个问题确实是由于覆盖了dealloc方法，导致原来dealloc中清理掉原来对象中的delegate相关代码无法执行。这时候再有observer就会造成野指针。</li>
<li>在使用各种属性关键字的时候，一定要想好。</li>
<li>不要以为新的东西出来了就忘掉了以前的东西吧。</li>
</ol>
<h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>大神都是一步一个坑踩过来的。虽然这个问题导致原本很愉快的版本（线上没有crash）变成了现在这个样子，甚至还只能紧急发版来解决。但还是值得的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一半的 App 都会有一个个人这个模块来对个人信息，设置等功能进行管理，最近搞公司的项目，在项目结束的时候就想到了应该给我的这个界面加上 “headerimage scale” 这样的效果。然后项目已经结束，也并不想大刀阔斧的去修改原来的代码，想到之前在微博看到一个这样的库。时间还是比较紧急的，毕竟周末，然后就把代码下下来，简单的跑了一下，没有发现什么问题之后就直接在项目中用了。&lt;/p&gt;
&lt;p&gt;由于公司一直缺乏很系统的兼容测试，只是对功能有比较严格的要求，所以接下来到上线这个过程都很愉快。 UI、产品都比较满意这样搞。&lt;/p&gt;
&lt;p&gt;上线之后，就发生了一些悲剧的事情了….&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://programersunny.github.io/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://programersunny.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>最近看到的一些好的文章</title>
    <link href="https://programersunny.github.io/2016/10/14/readinglist/"/>
    <id>https://programersunny.github.io/2016/10/14/readinglist/</id>
    <published>2016-10-13T16:00:00.000Z</published>
    <updated>2016-10-14T13:33:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>好久没有更新博客了，分享几篇最近读到的比较好的文章吧！读的不是特别的仔细，也算是留一个记录，以后再详读一遍</p>
<a id="more"></a>
<p><a href="http://fex.baidu.com/blog/2014/07/feature-flag/"><em>Feature Flag 功能发布控制</em></a></p>
<p>[<em><a href="http://wangchao.de/%e8%81%8a%e8%81%8a%e5%88%9b%e4%b8%9a%e5%9b%a2%e9%98%9f%e7%9a%84%e9%a1%b9%e7%9b%ae%e7%ae%a1%e7%90%86%e5%a6%82%e4%bd%95%e9%9d%a2%e5%90%91%e5%bc%80%e5%8f%91%e4%ba%ba%e5%91%98%e4%bc%98%e5%8c%96/">聊聊创业团队的项目管理如何面向开发人员优化</a></em></p>
<p><a href="https://zhuanlan.zhihu.com/p/22283843"><em>基于 KIF 的 iOS UI 自动化测试和持续集成</em></a></p>
<p><a href="http://www.jianshu.com/p/9ae446d76271"><em>iOS项目的持续集成与管理[译]</em></a></p>
<p><a href="http://mrpeak.cn/blog/http2/"><em>HTTP 2.0的那些事</em></a></p>
<p><a href="http://mrpeak.cn/blog/ios-network/"><em>深度优化iOS网络模块</em></a></p>
<p>准备把手上项目网络层完全优化之后再来仔细研读一下这几篇文章。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好久没有更新博客了，分享几篇最近读到的比较好的文章吧！读的不是特别的仔细，也算是留一个记录，以后再详读一遍&lt;/p&gt;
    
    </summary>
    
      <category term="阅读" scheme="https://programersunny.github.io/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="阅读" scheme="https://programersunny.github.io/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>如何优雅的使用xib进行开发</title>
    <link href="https://programersunny.github.io/2016/09/30/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E4%BD%BF%E7%94%A8xib%E8%BF%9B%E8%A1%8C%E5%BC%80%E5%8F%91/"/>
    <id>https://programersunny.github.io/2016/09/30/如何优雅的使用xib进行开发/</id>
    <published>2016-09-29T16:00:00.000Z</published>
    <updated>2016-12-09T03:04:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>IB 和纯代码布局在 iOS 界一直都存在着不小的争论，唐巧也曾专门撰文来对比二者。网上也能找打一大堆关于 IB 或者纯代码好的或者不好的文章。即使是大神对这个也有着不一样的看法。 Sunny 力挺 IB 开发，据说Ibireme YY大神是纯代码的拥簇，虽然两位大神现在也不会再写 UI 了…</p>
<p>最近实在是比较忙，先是公司从成都搬到了重庆，纠结了半天还是决定留在现在的团队，再继续往前走下去。再是到重庆没有完整的办公场地的情况下，启动了2.0计划。好在坚持了一段时间之后，2.0版本已经完成了95%的开发等着接下来的优化了。停止可这么长时间的博客，终于也想起来了要打理打理。</p>
<p>在项目中一直都坚持着使用xib来进行界面布局,除了一些界面需要使用静态单元格用了StoryBoard其他的view层全部使用了xib进行。即使这样,刚刚看了一下也有了16w＋行代码,这篇文章就算是一些心得吧。</p>
<a id="more"></a>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="xib的构成"><a href="#xib的构成" class="headerlink" title="xib的构成"></a>xib的构成</h3><p>随便拿了一个xib文件,我们总是能看到这样的内容:</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/EF967121-9470-40EE-97CB-B457F80C0A88.png" width="300" /></p>
<ul>
<li>File’s Owner</li>
<li>First Responder</li>
<li>View (虽然我们看到的是FooCell)</li>
</ul>
<p>其实这就是xib就是由这三部分构成的。</p>
<h4 id="File’s-Owner"><a href="#File’s-Owner" class="headerlink" title="File’s Owner"></a>File’s Owner</h4><p>首先我们先聊聊<code>File&#39;s Owner</code>。我们使用xib定义的所有都是对应MVC架构中的View层(使用<code>StoryBoard</code>定义的controller实际上定义的也是这个controller的<code>self.view</code>)。这就很显然了,这里的<code>File&#39;s Owner</code>其实就是连接View 和ViewController的桥梁。其实File’s Owner就是Custom Class类型的对象，而xib中的其他元素都是该对象的成员变量，但是需要手动来关联Custom Class中的成员变量与xib中对象之间的关系。举一个简单的例子,我们在创建vc的时候勾选了also create XIB file,这时候创建的xib他的<code>File&#39;s Owner</code>就能看到class就是这个VC的class,这时候对应的tableview textfiled等控件的delegate 和datasource都可以通过连线到<code>File&#39;s Owner</code>中实现。</p>
<h4 id="First-Responder"><a href="#First-Responder" class="headerlink" title="First Responder"></a>First Responder</h4><p>再来说说<code>First Responder</code>。首先请想象一下，我们在使用textfield的时候是不是经常会用到<code>becomeFirstResponder</code> 和 <code>resignFirstResponder</code>两个方法,所以,很容易理解<code>First Responder</code>就是在这个xib中正在与用户交互的那个控件。</p>
<h4 id="View"><a href="#View" class="headerlink" title="View"></a>View</h4><p>最后一个就更简单了。以至于我都不知道怎么样来更仔细的介绍了。反正我们这个xib我们看到的部分就是view 我们放的控件也全部都是放在这个view中的。</p>
<h3 id="在xib中定于圆角等layer的属性"><a href="#在xib中定于圆角等layer的属性" class="headerlink" title="在xib中定于圆角等layer的属性"></a>在xib中定于圆角等layer的属性</h3><p>相信很多人都知道怎么样给xib上的属性定义圆角,也就是在右边工具栏选中第三个的<code>User Defined RunTime Attributes</code>中设置layer.borderRadius。 然是如果我们要设置颜色呢？这这个地方我们需要的<code>CGColor</code>但是这里只有一个<code>UIColor</code>对象。</p>
<p>在这里我使用到了一个category,并在实现文件中写下了这个方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- (void)setBorderColorWithUIColor:(UIColor *)color &#123;</div><div class="line">    self.borderColor = color.CGColor;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样在设置bordercolor的时候就可以设置keypath为<code>borderColorWithUIColor</code>并且使用UIColor来赋值了。很简单的tip 由于我比较懒,如果能够通过xib绝对不愿意在代码中写，所以这个对我来说还是很有用的。</p>
<h3 id="IBInspectable"><a href="#IBInspectable" class="headerlink" title="IBInspectable"></a>IBInspectable</h3><p>这个是方便我们在xib文件中通过右边的工具栏给view添加一些属性的,比如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@interface FooView ()</div><div class="line">@property (assign, nonatomic) IBInspectable CGFloat borderWidth;</div><div class="line">@property (strong, nonatomic) IBInspectable UIColor *borderColor;</div><div class="line">@property (assign, nonatomic) IBInspectable CGFloat cornerRadius;</div><div class="line">@end</div></pre></td></tr></table></figure></p>
<p>这个时候在xib的右边工具栏中就会出现这样的东西</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/6913AB39-AF52-427F-9AAB-F30689F9D398.png" /></p>
<p>这时候只需要给对应的属性写上对应的setter方法就ok了。</p>
<h3 id="IB-DESIGNABLE"><a href="#IB-DESIGNABLE" class="headerlink" title="IB_DESIGNABLE"></a>IB_DESIGNABLE</h3><p>这个就比较牛逼了，因为我们平常要是自定义了一个View的话，如果把这个View放在其他的xib中，这时候他其实是看不到她的效果的。这个可能会让我们感觉到很痛苦，这样的话就完全不符合XIB的核心思想<code>所见即所得</code>。</p>
<p>不说闲话了直接进入主题<code>IB_DESIGNABLE</code></p>
<p>我们在自定义View的<code>@implementation</code>前面写上<code>IB_DESIGNABLE</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">IB_DESIGNABLE</div><div class="line">@implementation FooView</div></pre></td></tr></table></figure>
<p>然后在这个view的<code>drawrect</code>方法里面写下一些代码。然后把这个view拖到其他的xib中，就会看到一些神奇的东西。</p>
<blockquote>
<p>需要注意的是，这个情况下代码只是在drawrect方法中有效。</p>
</blockquote>
<p>但是如果我们把<code>IBInspectable</code>和<code>IB_DESIGNABLE</code>结合起来呢?</p>
<h3 id="IBInspectable-amp-amp-IB-DESIGNABLE"><a href="#IBInspectable-amp-amp-IB-DESIGNABLE" class="headerlink" title="IBInspectable &amp;&amp; IB_DESIGNABLE"></a>IBInspectable &amp;&amp; IB_DESIGNABLE</h3><p>在<code>INInspectable</code>那一节的代码中在<code>FooView.m</code>中的@interface的前面写上IB_DESIGNABLE然后我们再在看看xib</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">IB_DESIGNABLE</div><div class="line">@interface FooView ()</div><div class="line">@property (assign, nonatomic) IBInspectable CGFloat borderWidth;</div><div class="line">@property (strong, nonatomic) IBInspectable UIColor *borderColor;</div><div class="line">@property (assign, nonatomic) IBInspectable CGFloat cornerRadius;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>就出现了神器的效果</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/FD65E8DF-FA63-450E-9F44-33121842B5EE.png" /></p>
<p><strong>所见即所得!!!</strong></p>
<h3 id="IBOutletCollection-ClassName"><a href="#IBOutletCollection-ClassName" class="headerlink" title="IBOutletCollection(ClassName):"></a>IBOutletCollection(ClassName):</h3><p>这个关键字支持创建一个IBOutlet控件的数组,</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/F02CCFDC-7707-423D-8FAA-1A60DF64450E.png" /></p>
<p>就是这样,顺序的话测试下来应该是按照脱线顺序来的。针对这个特性，确实不知道应该怎么使用。目前为止也还没有找到合适的应用场景。</p>
<h3 id="小tip"><a href="#小tip" class="headerlink" title="小tip"></a>小tip</h3><h4 id="tip1"><a href="#tip1" class="headerlink" title="tip1"></a>tip1</h4><p>其实在使用xib的时候还没踩到过什么大的坑，就只是遇到过一次由于没有理解到<code>File‘s Owner</code>的涵义。</p>
<p>在使用xib自定义一个view的时候每次使用到这个view总是会crash,并且报错，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos;NSUnknownKeyException&apos;, reason: … this class is not key value coding-compliant for the key X</div></pre></td></tr></table></figure>
<p>多次删掉所有的连线然后重新拉线，多次clean，也无法解决，后来才发现File‘s Owner 错了，改成NSObject之后就好了。</p>
<blockquote>
<p>最尴尬的事情是，笔者在写这篇文章的时候，修改回去又是正常的了。所以如果出现这种问题，首先检查是不是拉线冲突，如果无法解决的话，就试试修改<code>File&#39;s Owner</code>吧!</p>
</blockquote>
<h4 id="tip2"><a href="#tip2" class="headerlink" title="tip2"></a>tip2</h4><p>使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[NSBundle mainBundle] loadNibNamed:@&quot;TestView&quot; owner:self options:nil][0];</div></pre></td></tr></table></figure>
<p>来创建由xib定义的view。如果直接alloc init创建出来的view 如果有block等其他的回调的话,是很麻烦的事情。这个真的可以去试试。</p>
<h3 id="结束的话"><a href="#结束的话" class="headerlink" title="结束的话"></a>结束的话</h3><p>关于AutoLayout什么的实在没什么说的，感觉已经用烂了，无论是用代码布局的时候使用Masonry还是现在使用了xib，实在想不到有什么好介绍的。</p>
<p>非常遗憾的是IBInspectable并不能修饰UIKit下的控件，所以，我还是没有找到一个很好的方法让拖出来的控件能够实时的展示。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;IB 和纯代码布局在 iOS 界一直都存在着不小的争论，唐巧也曾专门撰文来对比二者。网上也能找打一大堆关于 IB 或者纯代码好的或者不好的文章。即使是大神对这个也有着不一样的看法。 Sunny 力挺 IB 开发，据说Ibireme YY大神是纯代码的拥簇，虽然两位大神现在也不会再写 UI 了…&lt;/p&gt;
&lt;p&gt;最近实在是比较忙，先是公司从成都搬到了重庆，纠结了半天还是决定留在现在的团队，再继续往前走下去。再是到重庆没有完整的办公场地的情况下，启动了2.0计划。好在坚持了一段时间之后，2.0版本已经完成了95%的开发等着接下来的优化了。停止可这么长时间的博客，终于也想起来了要打理打理。&lt;/p&gt;
&lt;p&gt;在项目中一直都坚持着使用xib来进行界面布局,除了一些界面需要使用静态单元格用了StoryBoard其他的view层全部使用了xib进行。即使这样,刚刚看了一下也有了16w＋行代码,这篇文章就算是一些心得吧。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://programersunny.github.io/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://programersunny.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>JPUSH 两个问题</title>
    <link href="https://programersunny.github.io/2016/09/13/JPUSH%20%E4%B8%A4%E4%B8%AA%E9%97%AE%E9%A2%98/"/>
    <id>https://programersunny.github.io/2016/09/13/JPUSH 两个问题/</id>
    <published>2016-09-12T16:00:00.000Z</published>
    <updated>2016-09-13T03:24:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在调试公司项目的推送的时候遇到了点小问题,死活收不到推送消息。</p>
<a id="more"></a>
<p>由于接受公司项目的时候极光推送是已经集成上去了的,虽然说本地调试的时候会经常看见失败这种情况,一直也知道极光推送可能会出现一些收不到消息的问题,所以并没有在意。</p>
<p>后来公司需要通过tag给不同组别的用户推送消息,所以也要开始看一下以前的代码。果然还是被我发现了问题。</p>
<h4 id="Q1"><a href="#Q1" class="headerlink" title="Q1"></a>Q1</h4><blockquote>
<p>在登陆的时候设置了别名，但是在Appdelegate中并没有设置。</p>
</blockquote>
<p>这中情况会造成app在保存密码之后进入app不会在走道登录界面，所以并不会设置别名什么的。这个时候的推送应该是收不到的。</p>
<p>这个我没有测试过,看了之前的代码之后直接的添加了相关代码,运行后并没有什么问题。</p>
<h4 id="Q2"><a href="#Q2" class="headerlink" title="Q2"></a>Q2</h4><blockquote>
<p>报错APNs is not available, please check your provisioning profile and certification</p>
</blockquote>
<p>这个可能就全是我自身造成的了,为了尝鲜Swift3.0 下了Xcode8.0beta 来玩玩,然后本来是Xcode7.0打开的项目文件,默认8.0了,然后不小心运行到了公司的项目。很悲剧的是，Xcode8.0 是默认关闭Push Notifications的,Xcode中手动打开就ok了。然后其它添加证书什么的, 真的没什么好说的, 极光在文档中也已经描述的非常清楚了。</p>
<p><strong>设置步骤:</strong> taget -&gt; Capabilities -&gt; PushNotification -&gt; ON</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/BD4D54BC-82B6-40F6-83E8-ECE15A8FA8D2.png" /></p>
<h4 id="Q3"><a href="#Q3" class="headerlink" title="Q3"></a>Q3</h4><blockquote>
<p>设置别名悲剧 : app not registed, give up set tag: alias:</p>
</blockquote>
<p>这是由于记住密码的情况下,设置别名什么的和注册极光等都是在很短的时间内,这个时候掉用的话，可能极光推送还不可用,所以就悲剧了.</p>
<p><strong>解决方案:</strong>延迟调用设置别名的方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</div><div class="line">    [JPUSHService setTags:[NSSet setWithObject:_MUserInfo.partnerId]</div><div class="line">                    alias:_MUserInfo.userId</div><div class="line">    fetchCompletionHandle:^(int iResCode, NSSet *iTags, NSString *iAlias) &#123;</div><div class="line">        PSLog(@&quot;-----%@&quot;, iAlias);</div><div class="line">    &#125;];</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="ending"><a href="#ending" class="headerlink" title="ending"></a>ending</h4><p>在集成的时候还是要注意一下方法的调用顺序, 别在注册JPush之前去设置什么东西吧! 猜想:这肯定是有问题的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在调试公司项目的推送的时候遇到了点小问题,死活收不到推送消息。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://programersunny.github.io/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://programersunny.github.io/tags/iOS/"/>
    
      <category term="推送" scheme="https://programersunny.github.io/tags/%E6%8E%A8%E9%80%81/"/>
    
  </entry>
  
  <entry>
    <title>EmptyDataKit -- 一行代码集成列表视图无数据展示</title>
    <link href="https://programersunny.github.io/2016/09/07/EmptyDataKit/"/>
    <id>https://programersunny.github.io/2016/09/07/EmptyDataKit/</id>
    <published>2016-09-06T16:00:00.000Z</published>
    <updated>2017-01-25T16:57:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>抽空写了一个小东西<a href="https://github.com/ProgramerSunny/EmptyDataKit"><strong>EmptyDataKit</strong></a>，一行代码可以集成UITableView 和 UICollectionView 在数据源没有数据的时候展示一个默认占位图片。</p>
<a id="more"></a>
<h2 id="gif"><a href="#gif" class="headerlink" title="gif"></a>gif</h2><p><img src="http://ocg4av0wv.bkt.clouddn.com/ProgramerSunnyDemo.gif" width= "400" /></p>
<p>另外这个工具也被我添加进了我来一个叫做<code>SBAnimation</code>的仓库中,而且<code>SBAnimation</code>中的demo代码更干净和间接，而且完整的示范了这个工具的使用方法。由于精力有限，暂时还没有动力将这里的demo代码替换。所以我也将<code>SBAnimation</code>中的截图放到这里来。如果需要的话可以过去看看。<a href="https://github.com/SolarBee/SBAnimation">地址</a></p>
<p><img src="http://ojno1pj4x.bkt.clouddn.com/EmptyDataKit.gif"></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><strong>0、</strong>框架依赖与<code>BlocksKit</code>请在<code>podfile</code>中添加<code>pod &#39;BlocksKit&#39;</code>并且在终端执行<code>pod install --no-repo-update</code>。如果直接拖进你的工程记得添加 pod BlocksKit</p>
<p><strong>1、</strong>首先 <code>pod &#39;EmptyDataKit&#39;</code></p>
<p><strong>2、</strong>导入头文件<code>#import &lt;EmptyDataKit/EmptyDataKit.h&gt;</code></p>
<p><strong>3、</strong>在dataSource的<code>numberOfSectionsInTableView</code>方法中调用<code>EmptyDataKit</code>中的唯一方法.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    __weak typeof(self) weakSelf = self;</div><div class="line">    EmptyDataKit *kit = [[EmptyDataKit alloc] initWithEdk_Image:[UIImage imageNamed:@&quot;common_pic_loadFail&quot;] edk_Message:@&quot;aaa&quot; edk_reloadHandler:^&#123;</div><div class="line">        [weakSelf getData];</div><div class="line">    &#125;];</div><div class="line">    kit.edk_error_image = [UIImage imageNamed: @&quot;&quot;];</div><div class="line">    kit.edk_error_message = @&quot;网络错误&quot;;</div><div class="line">    self.tableView.emptyKit = kit;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至此，EmptyDataKit集成成功!   <code>UIcollectionView</code>使用方法同理</p>
<p>另外<code>EmptyDataKit</code>有如下枚举</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">typedef NS_ENUM(NSUInteger ,EmptyDataType) &#123;</div><div class="line">    EDK_Loading,     // if there is a LoadingView, use this ,and also this is a default status.</div><div class="line">    EDK_None,        // if there is some data, use this.</div><div class="line">    EDK_Empty,       // if there is no data, use this.</div><div class="line">    EDK_Error        // if there is some error such as network, use this.</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这样在<code>reloadData</code>之前给<code>self.tableView.emptyKit.edk_type</code>赋值即可区分在不同状态下的不同展示情况。</p>
<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>思路方面，我给<code>UITableView</code>和<code>UIColectionView</code>分别添加了两个Category, 并且通过runtime给两个类都关联了两个属性<code>data</code> 、 <code>touchBlock</code> 和<code>emptyKit</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@property (nonatomic, assign) BOOL data;</div><div class="line">@property (nonatomic, copy) TouchBlock touchBlock;</div><div class="line">@property (nonatomic, strong) EmptyDataKit *emptyKit;</div></pre></td></tr></table></figure>
<p>分别表示是否有数据和一个空数据的时候点击空白部分回调刷新的部分。</p>
<p>考虑到我想同时兼容UITableView 和 UICollectionView 所以我提取了一个object <code>EmptyDataKit</code>。</p>
<p>之前的调用方式是在<code>numberOfSectionsInTableView</code>方法中调用EmptyDataKit，并且是一个类方法，在新的框架下，EmptyDataKit 作为 TableView 的属性在设置的时候更加自主。</p>
<p>并且通过<code>MethodSwizzling</code>在 <code>tableView</code> 的 <code>reloadData</code> 方法中激发 <code>EmptyDataKit</code>,减少了很多调用次数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">+ (void)load &#123;</div><div class="line">    static dispatch_once_t onceToken;</div><div class="line">    dispatch_once(&amp;onceToken, ^&#123;</div><div class="line">        [self methodSwizzlingWithOriginalSelector:@selector(reloadData)</div><div class="line">                               bySwizzledSelector:@selector(sure_reloadData)];</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)sure_reloadData &#123;</div><div class="line">    [self.emptyKit edk_display:self];</div><div class="line">//    id &lt;UITableViewDataSource&gt; dataSource = self.dataSource;</div><div class="line">    [self sure_reloadData];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="TODO："><a href="#TODO：" class="headerlink" title="TODO："></a>TODO：</h2><ol>
<li>进一步规范文档。</li>
<li>移除对BlocksKit的依赖。</li>
</ol>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p><strong>**工具已经开源在github中,欢迎提issue。[</strong>开源地址**](<a href="https://github.com/ProgramerSunny/EmptyDataKit">https://github.com/ProgramerSunny/EmptyDataKit</a>)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;抽空写了一个小东西&lt;a href=&quot;https://github.com/ProgramerSunny/EmptyDataKit&quot;&gt;&lt;strong&gt;EmptyDataKit&lt;/strong&gt;&lt;/a&gt;，一行代码可以集成UITableView 和 UICollectionView 在数据源没有数据的时候展示一个默认占位图片。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://programersunny.github.io/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://programersunny.github.io/tags/iOS/"/>
    
      <category term="OpenSource" scheme="https://programersunny.github.io/tags/OpenSource/"/>
    
  </entry>
  
  <entry>
    <title>为Category添加属性</title>
    <link href="https://programersunny.github.io/2016/09/01/%E4%B8%BACategory%E6%B7%BB%E5%8A%A0%E5%B1%9E%E6%80%A7/"/>
    <id>https://programersunny.github.io/2016/09/01/为Category添加属性/</id>
    <published>2016-08-31T16:00:00.000Z</published>
    <updated>2016-09-01T06:54:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用Runtime给Category添加属性。</p>
<a id="more"></a>
<h2 id="Category-与-property"><a href="#Category-与-property" class="headerlink" title="Category 与 property"></a>Category 与 property</h2><p>我为类<code>ViewController</code>添加了一个<code>Category</code>,然后我想给他添加一个属性，<code>vcName</code></p>
<p>于是我在<code>ViewController+Category</code>中声明了一个属性</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@property (nonatomic ,copy) NSString *vcName;</div></pre></td></tr></table></figure>
<p>我们知道在类目的接口中是可以声明属性的。但是在他的实现部分是不允许包含<code>@synthesize</code>的。 下面安利一下两个关键字<code>@synthesize</code>、<code>@dynamic</code></p>
<pre><code>`@synthesize`的语义是如果我们没有手动的实现`property`的`setter`和`getter`方法，编译器会自动的添加上这两个方法。

`@dynamic`告诉编译器,属性的`setter`与`getter`方法由用户自己实现，不自动生成。

在平常我们都习惯了不写这两个关键词，这个时候其实默认是`@synthesize var = _var`
</code></pre><p>回到刚才的地方,如果我手动加上<code>@synthesize vcName = _vcName;</code>是无法通过编译的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@synthesize not allowed in a category&apos;s implementation//这是编译器报的错误消息</div></pre></td></tr></table></figure>
<p>如果我不写的话编译器会有警告让你加上<code>@dynamic</code>语句。这个当然也是不行的。因为这个时候我自己写setter和getter.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- (NSString *)vcName&#123;</div><div class="line">    return _vcName;</div><div class="line">&#125;</div><div class="line">- (void)setVcName:(NSString *)vcName &#123;</div><div class="line">    _vcName = vcName;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这时候编译器会报错 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">use of undeclared identifier &apos;_vcName&apos;</div></pre></td></tr></table></figure>
<p><strong>结论</strong></p>
<blockquote>
<p>Categoryde 的接口中可以包含属性声明，但是实现部分不能包含<code>@synthesis</code></p>
</blockquote>
<h2 id="给Category-添加-Property"><a href="#给Category-添加-Property" class="headerlink" title="给Category 添加 Property"></a>给Category 添加 Property</h2><p>已经有了上面的结论了，但是我们在具体开发过程中确实会遇到很多需要在类别中添加使用<code>Property</code>的情况。这个时候应该怎么办呢？我们知道Obj-c是一门动态语言，强大的运行时(Runtime)机制能够为类关联引用，然后通过这种方法来实现给类别添加属性。</p>
<blockquote>
<p>关联引用指的是借助运行时功能，为已存在的对象增加实例变量。</p>
</blockquote>
<p>通过关联引用就算时同一个类的不同对象也可能添加关联或者添加不同种类和数量的关联。另外添加了的关联也是可以被删除的。</p>
<h3 id="添加和检索关联"><a href="#添加和检索关联" class="headerlink" title="添加和检索关联"></a>添加和检索关联</h3><p>既然说到了需要使用runtime,那我们首先需要导入Runtime相关的头文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#import &lt;objc/runtime.h&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//这个方法时为对象object添加key指定的地址作为关键字，以value为值关联引用，第四个参数pilicy指的是关联引用的存储策略。</div><div class="line">//通过将value设置为nil 可以删除key的关联</div><div class="line">OBJC_EXPORT void objc_setAssociatedObject(id object, const void *key, id value, objc_AssociationPolicy policy)</div><div class="line">    __OSX_AVAILABLE_STARTING(__MAC_10_6, __IPHONE_3_1);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//返回object以key为关键字关联的对象，如果没有，则反火nil</div><div class="line">OBJC_EXPORT id objc_getAssociatedObject(id object, const void *key)</div><div class="line">    __OSX_AVAILABLE_STARTING(__MAC_10_6, __IPHONE_3_1);</div></pre></td></tr></table></figure>
<p>这一个的原理还是比较简单的。</p>
<p>首先，我们需要为一个类别专家多个关联引用，所以我们需要用不同的key值来区别。</p>
<p>其次，键值必须要使用一个确定且不可变的地址。所以选择定义在实现文件的static静态局部变量的地址。</p>
<p>policy策略就跟定义property的时候才用的存储关键字相似了。</p>
<h3 id="存储关键字"><a href="#存储关键字" class="headerlink" title="存储关键字"></a>存储关键字</h3><p>第四个参数<code>objc_AssociationPolicy policy</code>其实是一个枚举，点看之后我们可以看到</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">typedef OBJC_ENUM(uintptr_t, objc_AssociationPolicy) &#123;</div><div class="line">    OBJC_ASSOCIATION_ASSIGN = 0,           /**&lt; Specifies a weak reference to the associated object. */</div><div class="line">    OBJC_ASSOCIATION_RETAIN_NONATOMIC = 1, /**&lt; Specifies a strong reference to the associated object. </div><div class="line">                                            *   The association is not made atomically. */</div><div class="line">    OBJC_ASSOCIATION_COPY_NONATOMIC = 3,   /**&lt; Specifies that the associated object is copied. </div><div class="line">                                            *   The association is not made atomically. */</div><div class="line">    OBJC_ASSOCIATION_RETAIN = 01401,       /**&lt; Specifies a strong reference to the associated object.</div><div class="line">                                            *   The association is made atomically. */</div><div class="line">    OBJC_ASSOCIATION_COPY = 01403          /**&lt; Specifies that the associated object is copied.</div><div class="line">                                            *   The association is made atomically. */</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>有这5个值</p>
<p>下面就分别的介绍一下几种。看注释也知道:</p>
<p><strong>OBJC_ASSOCIATION_ASSIGN</strong> <code>weak</code></p>
<p>不给关联对象发送<code>retain</code>消息，引用计数不会增加。</p>
<p><strong>OBJC_ASSOCIATION_RETAIN_NONATOMIC</strong> <code>strong</code></p>
<p>发送<code>retain</code>消息，引用计数加1.  如果给同样的key关联到了其他对象，那么会给其他对象发送一个<code>release</code>消息。释放关联对象的所有者的时候，会给所有关联的对象发送<code>release</code>消息。</p>
<p><strong>OBJC_ASSOCIATION_COPY_NONATOMIC</strong> <code>copy</code></p>
<p>会将该对象复制一份，并且用新复制的对象进行关联操作。</p>
<p><strong>OBJC_ASSOCIATION_RETAIN</strong> <code>strong</code>、<code>atomic</code></p>
<p><strong>OBJC_ASSOCIATION_COPY</strong> <code>copy</code>、<code>atomic</code></p>
<h2 id="断开关联"><a href="#断开关联" class="headerlink" title="断开关联"></a>断开关联</h2><p>runtime 也贴心的提供了断开关联的函数。但是可惜，我并不经常用，因为使用上面的方法并且传入nil来断开关联，会更佳安全，毕竟，我不敢保证是不是有其他地方会使用到已经关联的对象。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">OBJC_EXPORT void objc_removeAssociatedObjects(id object)</div><div class="line">    __OSX_AVAILABLE_STARTING(__MAC_10_6, __IPHONE_3_1);</div></pre></td></tr></table></figure>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>扯了这么多有的没得，还是talk is cheap， show me the code 比较好一点。</p>
<p><em>第一步</em>  导入头文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#import &lt;objc/runtime.h&gt;</div></pre></td></tr></table></figure>
<p><em>第二步</em>  定义用作键值的静态变量。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">static char *vcNameKey;</div></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">static const char *vcNameKey = &quot;vcNameKey&quot;;</div></pre></td></tr></table></figure>
<p><em>第三步</em> 定义存取方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- (NSString *)vcName&#123;</div><div class="line">    return objc_getAssociatedObject(self, vcNameKey);</div><div class="line">&#125;</div><div class="line">- (void)setVcName:(NSString *)vcName &#123;</div><div class="line">    objc_setAssociatedObject(self, vcNameKey, vcName, OBJC_ASSOCIATION_COPY_NONATOMIC);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="试一下断开关联"><a href="#试一下断开关联" class="headerlink" title="试一下断开关联"></a>试一下断开关联</h2><p>首先在category中定义两个关联属性</p>
<p>在vievcontroller中给两个属性赋值，并且给<code>self.title</code>赋值</p>
<p>然后用<code>objc_removeAssociatedObjects(self);</code>断开关联</p>
<p>然后输出结果,category中关联的属性两个都输出<code>null</code>而本身的属性title正常输出</p>
<p><strong>结论</strong></p>
<p>很好说了,<code>objc_removeAssociatedObjects(self);</code>的作用是断开所有关联。 </p>
<p>而且也更简单的验证了,使用runtime给对象关联的属性跟本身的属性本质是是不一样的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用Runtime给Category添加属性。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://programersunny.github.io/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://programersunny.github.io/tags/iOS/"/>
    
      <category term="Objective-C" scheme="https://programersunny.github.io/tags/Objective-C/"/>
    
      <category term="运行时" scheme="https://programersunny.github.io/tags/%E8%BF%90%E8%A1%8C%E6%97%B6/"/>
    
  </entry>
  
  <entry>
    <title>怎么使用Hexo发博客</title>
    <link href="https://programersunny.github.io/2016/08/31/%E6%80%8E%E4%B9%88%E4%BD%BF%E7%94%A8Hexo%E5%8F%91%E5%8D%9A%E5%AE%A2/"/>
    <id>https://programersunny.github.io/2016/08/31/怎么使用Hexo发博客/</id>
    <published>2016-08-30T16:00:00.000Z</published>
    <updated>2016-08-31T08:30:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>怎么样使用Hexo发博客,以及博客的使用技巧。</p>
<a id="more"></a>
<blockquote>
<p>第二次帮一个朋友搭建博客,快多了，只花了2个多小时就把博客简单的弄好了<a href="https://maojianxiang.github.io/archives/"><em>传送门</em></a>。然后现在简单的写一个使用说明。我也来帮Hexo站站台。</p>
</blockquote>
<p>这篇文章主要包括我平时是怎么使用Hexo的,以及markdown简单的一些基本语法。和最新搭建这个博客又遇到的坑。</p>
<h2 id="踩坑篇"><a href="#踩坑篇" class="headerlink" title="踩坑篇"></a>踩坑篇</h2><h3 id="环境配置篇"><a href="#环境配置篇" class="headerlink" title="环境配置篇"></a>环境配置篇</h3><p>在最开始搭建这个博客的时候，我还是非常的自信的，不就是在终端使用各种命令嘛。所以我叫他自己下载了markdown写作工具Mou, 一个Sublime Text3 一个teamviewer。然后叫他自己去申请了一个github账号。</p>
<p>首先我是用teamviewer开始操作他的电脑。</p>
<p>然后快速的关掉所有没用的软件。</p>
<p>打开终端，cd到根目录</p>
<p>朋友也是iOS所以肯定是有Xcode的，git肯定也是有。试一下有没有node.js的环境</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div></pre></td></tr></table></figure>
<p>很不幸，什么都没有，结果没有超出我的预料<code>npm command not find</code></p>
<p>然后我开始装Node.js</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh</div></pre></td></tr></table></figure>
<p>半天没反应,进度条不懂，两秒后结束，然后再</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div></pre></td></tr></table></figure>
<p>依然<code>npm command not find</code></p>
<p>我以为是除了什么问题，换个方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget conmmand not find</div></pre></td></tr></table></figure>
<p>然后我在node的<a href="https://github.com/creationix/nvm"><em>github</em></a>上面看到</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.6/install.sh | bash</div></pre></td></tr></table></figure>
<p>依然没反应。然后我就惆怅了。多次尝试之后发现，依然没有反应。这期间多次尝试各种帖子的文档，homebrew 重装了两次。</p>
<p>在经历了绝望之后，我决定再试一下，所以我打开了node的<a href="https://nodejs.org/en/"><em>下载地址</em></a>直接下载，安装之后，惊讶的发现一切都解决了。</p>
<blockquote>
<p>如果采用上面的命令发现一切都没有什么乱用,别多想了，直接下载安装吧。</p>
</blockquote>
<p>这个应该更容易一点，虽然感觉没那么Geek，但是能解决问题，才是最好的吧。</p>
<h3 id="部署篇"><a href="#部署篇" class="headerlink" title="部署篇"></a>部署篇</h3><p>这个没什么好说的了，<a href="https://programersunny.github.io/2016/07/15/hello-world/"><em>上篇文章</em></a>也有写到,在<strong>第一次部署</strong>的时候会出现一些问题，所以在</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo d</div></pre></td></tr></table></figure>
<p>之前先</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git –save</div></pre></td></tr></table></figure>
<p>一下。</p>
<p>其次就是我比较粗心的问题了,比如写github地址的时候，直接手打的，然后一直报错，所以最好还是去github复制地址比较好。</p>
<blockquote>
<p>github的username 是要登陆的邮箱或者其他什么的 </p>
</blockquote>
<h2 id="使用篇"><a href="#使用篇" class="headerlink" title="使用篇"></a>使用篇</h2><h3 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h3><h4 id="1、同过命令"><a href="#1、同过命令" class="headerlink" title="1、同过命令"></a>1、同过命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new &quot;title&quot;</div></pre></td></tr></table></figure>
<p>然后到博客目录下<code>resource</code>的<code>_post</code>文件下下面找到你刚刚创建的<code>.md</code>文件,然后开始写作</p>
<h4 id="2、直接创建"><a href="#2、直接创建" class="headerlink" title="2、直接创建"></a>2、直接创建</h4><p>直接创建一个<code>.md</code>文件,写完后拖到上面的文件夹中。</p>
<h2 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: 怎么使用Hexo发博客</div><div class="line">date: 2016-8-31</div><div class="line">tags: Hexo</div><div class="line">categories: Hexo</div><div class="line">---</div></pre></td></tr></table></figure>
<p>我的文章是这样开始的，上面的内容分别代表什么不用我说了吧。给这篇文章设置tag 和分类什么的都是这样的。如果你想在两个tag 或者分类中看到这篇文    <code>tags: [hexo , ios]</code>即可。</p>
<h3 id="markdown语法"><a href="#markdown语法" class="headerlink" title="markdown语法"></a>markdown语法</h3><p>markdown 也有自己的语法，hexo会自己解析然后出现在你的博客里面，这是一个很好用的工具，让我们更专注于写作本身而不是费尽心思的去弄格式。</p>
<p>之前学习html css的时候发现markdown也支持html标签  比如我想对一个词语“ProgramerSunny”加粗，我可以使用markdown语法 <code>**ProgramerSunny**</code>  也可以使用html标签 <code>&lt;strong&gt;ProgramerSunny&lt;/strong&gt;</code> 这样的效果是一样的；</p>
<ul>
<li>markdown: <strong>ProgramerSunny</strong></li>
<li>html: <strong>ProgramerSunny</strong></li>
</ul>
<p>这里我还是单纯的讲一下markdown我要用的内容吧。 </p>
<blockquote>
<p>在Mou里直接CMD + R 可以看到相关内容，但是貌似是英文的。</p>
</blockquote>
<h4 id="加粗强调"><a href="#加粗强调" class="headerlink" title="加粗强调"></a>加粗强调</h4><p><code>__ss__  _ss_  *aa*  **aa**</code>  表现为： <strong>ss</strong>  <em>ss</em>  <em>aa</em>  <strong>aa</strong></p>
<h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><p><code>[*ProgramerSunny*](https://programersunny.github.io/)</code> 表现为：  <a href="https://programersunny.github.io/"><em>ProgramerSunny</em></a></p>
<h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><p>我弄图片我习惯设置宽度大小什么的，所以我用的html标签</p>
<p><code>&lt;img src=&quot;图片地址&quot; width=&quot;100&quot; height=&quot;100&quot;&gt;</code></p>
<p><img src="图片地址" width="100" height="100"></p>
<h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><p>以及标题到六级标题 分别是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 一级标题</div><div class="line">## 二级标题</div><div class="line">### 三级标题</div><div class="line">#### 四级标题</div><div class="line">##### 五级标题</div><div class="line">###### 六级标题</div></pre></td></tr></table></figure>
<h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1. 1</div><div class="line">2. 2</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">* 1</div><div class="line">	* 1.1</div><div class="line">	* 1.2</div><div class="line">* 2</div></pre></td></tr></table></figure>
<h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; 引用的内容</div></pre></td></tr></table></figure>
<blockquote>
<p>引用的内容</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`小标签`</div></pre></td></tr></table></figure>
<p><code>小标签</code></p>
<p>代码块使用 ： </p>
<p>其他的都用得少就不多说了，这些内容百度能很容易的找到。</p>
<h2 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h2><p>刚过说到图片的问题，可能就不知道怎么弄了，这里推荐使用七牛的图床，然后直接那图片的url出来就可以了，而且不占用空间。具体使用方法，去七牛看吧，我正在尝试着能不能吧这个东西写个什么出来，自动化上传。<a href="https://portal.qiniu.com/signin"><em>七牛地址</em></a></p>
<h2 id="使用Hexo"><a href="#使用Hexo" class="headerlink" title="使用Hexo"></a>使用Hexo</h2><p>实在没什么好说的,配置好各种东西之后就没有什么麻烦的内容了，主要就还是几个。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo clean</div></pre></td></tr></table></figure>
<p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo g</div></pre></td></tr></table></figure>
<p>生产静态文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo d</div></pre></td></tr></table></figure>
<p>部署网站。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo s</div></pre></td></tr></table></figure>
<p>启动服务器。默认情况下访问地址是<code>http://localhost:4000/</code>就能本地看一下改动效果了。</p>
<p>每次 g + d 就ok了</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;怎么样使用Hexo发博客,以及博客的使用技巧。&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://programersunny.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://programersunny.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
