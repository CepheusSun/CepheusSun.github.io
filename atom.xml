<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CepheusSun</title>
  <subtitle>Code for a better world.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.CepheusSun.com/"/>
  <updated>2017-07-22T09:41:39.000Z</updated>
  <id>http://www.CepheusSun.com/</id>
  
  <author>
    <name>CepheusSun</name>
    <email>cd_sunyang@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一个人的敏捷开发</title>
    <link href="http://www.CepheusSun.com/%E4%B8%80%E4%B8%AA%E4%BA%BA%E7%9A%84%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91.html"/>
    <id>http://www.CepheusSun.com/一个人的敏捷开发.html</id>
    <published>2017-07-21T16:00:00.000Z</published>
    <updated>2017-07-22T09:41:39.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ocg4av0wv.bkt.clouddn.com/2017-07-21-114524.jpg" width="500"></p>
<p>不论是在一些大型的开发团队，还是作为独立开发者。我们经常会被预算、技术迭代，以及时间限制。找到合适的工作方式去适应这些限制, 是所有团队都需要去考虑的问题。</p>
<p><a href="https://www.raywenderlich.com/u/alex_andrews">Alex Andrews</a> 在成立 <a href="http://www.tenkettles.com/">Ten Kettles</a> 的时候花了很多了精力去考虑这个问题。直到有一天上帝把敏捷开发砸到了他的头上，很快他就找到了适合他的敏捷开发之道。他认为敏捷开发极大的解放了他的生产力。</p>
<p>这篇文章就会聊到他是怎么进行敏捷开发的。</p>
<a id="more"></a>
<h2 id="远古时代"><a href="#远古时代" class="headerlink" title="远古时代"></a>远古时代</h2><p>2014年 3月 1 日，是 Ten Kettles 成立的第一天。那时候整个公司只有我一个人，没有流程来遵循。什么时候开始工作，做什么软件，怎么安排任务……. 都由我自己决定。</p>
<p>那时候，我喜欢 free style，虽然有时候会让我不大舒服。早些时候，我在其他公司做搜索工程师, 预估工期是我最自豪的能力: 你给我一个需求，我告诉你什么时候完成，到那个时候，我把代码拿出来。现在做 app 跟那时候是一样的，只不过设计产品的人换了而已，但是知道 2014 年年底，我都还没意识到这点。</p>
<p>后来，我慢慢发现独立开发者这个称呼不是特别准确。因为写代码甚至都不是我现在最主要的工作内容，影响我工作效率的事情不是写代码，而是设计产品。</p>
<p><em>“再加一个功能… “</em></p>
<p><em>”不，这样设计不对… “</em></p>
<p><em>”加载的时候等服务器返回了在进入主界面….”</em></p>
<p>这些想法简直无处不在, 我几乎随时都在考虑这些问题！</p>
<p>这让我的工作效率严重低下。我的音乐类app，远远的超出了计划。虽然最后做出了满意的产品，但是现在回过头去看，总想问自己，为什么那么长的时间却只做了这么点事情？</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/2017-07-22-060635.jpg" width="500"></p>
<p>结果是很好的，但是过程并不完美。我需要一个更好的工作方式。需要一个能让我更高效，更赚钱，更幸福的工作方式！</p>
<h2 id="哇，敏捷开发"><a href="#哇，敏捷开发" class="headerlink" title="哇，敏捷开发"></a>哇，敏捷开发</h2><p>一直都在重复那些无聊且进展缓慢的工作。我决定给自己一个改变，所以我把精力放在了一些外包工作上面……</p>
<p>知道接触到了一家中等规模的公司, 他们正好在使用敏捷开发来进行项目管理。我开始去了解敏捷开发的, 期望她能够让我更高效的编程。看了很多相关的书或者文章之后，我惊喜的发现敏捷开发触及到了的三个痛点：</p>
<ul>
<li>高产出</li>
<li>高效率</li>
<li>更happy</li>
</ul>
<p>于是，我开始思考在我自己的产品中运用这套理论。</p>
<p>这家公司的项目做完，我去了蒙特利尔, 打算给自己放个假，也仔细的想想怎么让这套理论给我带来效益。我重新看之前的笔记，重新读了两本很好的书，思考了实际情况下的一些问题，最后总结出了改革我的公司的一些办法。</p>
<h2 id="敏捷开发的基本原则"><a href="#敏捷开发的基本原则" class="headerlink" title="敏捷开发的基本原则"></a>敏捷开发的基本原则</h2><p>什么是敏捷开发呢？这里有一段我第一本读到的书中的摘录:</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/2017-07-21-124818.jpg" width="500"></p>
<blockquote>
<p>敏捷团队通常由7个左右的人组成，每个任务阶段叫做一个 sprint，包括了回顾和总结的时间。敏捷开发有一个咒语”检察和调整”。敏捷团队具有一个很明显的特征：工作流程和产品在不断的进步。</p>
</blockquote>
<p>独立开发跟 5-9 人的团队开发还是有很多不一样的地方的。这段话讲到的内容跟我使用的敏捷开发还是有一些区别。 我更多的是去定义整个工作流程的一些基本原则.</p>
<p>敏捷开发核心原则:</p>
<ul>
<li><strong>主动变化</strong>。经常把产品给别人体验，无论是最终的用户，测试用户，甚至是一些懂行的朋友。这样可以避免把资源投入到没有必要的功能上。让测试用去去使用 beta 版本的产品，及时根据反馈来调整方向，这样能节约很多的时间。</li>
<li><strong>效率优先，并量化它</strong>。短期内最大的量化指标就是产出，并不是销售或者发版数量。要知道每周完成了多少有效任务, 就需要去量化它。这样才能跟踪进度，并优化它。</li>
<li><strong>自我总结</strong>。定期去回顾总结。</li>
</ul>
<h2 id="如何进行敏捷开发"><a href="#如何进行敏捷开发" class="headerlink" title="如何进行敏捷开发"></a>如何进行敏捷开发</h2><p>知道了敏捷开发的核心原则，那么应该怎么样去实践呢？</p>
<h3 id="Sprint"><a href="#Sprint" class="headerlink" title="Sprint"></a>Sprint</h3><p>就是在固定周期的时间里面完成特定的需求，相当于迭代。在这个 sprint 中你应该把全部的尽力用在完成这些需求上面。</p>
<p>一个 sprint 通常有一到四周，这个由你自己的风格和产品决定。我自己的标准是两周一个 sprint。我觉得这样有足够的时间来完成真正有意义的任务。下面是我的 sprint计划图：</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/2017-07-22-022732.jpg" width="500"></p>
<p>可以看出来，每个 sprint 中都有很多时间用来做核心的任务，还有一些其他的东西:</p>
<ul>
<li>每日站会 Daily Stand-up Meeting</li>
<li>每周畅想 Weekly Story Time</li>
<li>发布         Sprint Release</li>
<li>敏捷迭代回顾 Sprint Retrospective</li>
<li>敏捷迭代计划 Sprint Plan</li>
</ul>
<h4 id="每日站会（5-min）"><a href="#每日站会（5-min）" class="headerlink" title="每日站会（5 min）"></a>每日站会（5 min）</h4><p>敏捷开发有一个很基础的部分就是自我审查和迭代，尤其是在生产上面。当我们原计划在某一天完成某项任务，但是最后没有完成，这时候就需要总结到底发生了什么，然后在去优化你的工作流。</p>
<p>每日站会是敏捷开发的主要特点。在传统的敏捷开发中，每日站会让每个团队的成员都聊一下昨天的进度，今天的计划和存在的风险。</p>
<ul>
<li>为了简化会议, 避免会议时间太长所以要求大家都站着开这个会。</li>
<li>让所有成员都能跟上节奏，及时暴露出风险和挑战。</li>
</ul>
<p>那一个人怎么搞呢？</p>
<p>我汲取了敏捷开发中的优点。自己总结了一套适合独立开发的每日站会: 拍短片(45 秒) 。</p>
<p>主要是这些内容：</p>
<ul>
<li><p><strong>回顾</strong>：首先看一下昨天的短片，看看昨天定下的任务是什么。</p>
</li>
<li><p><strong>总结</strong>：没有完成昨天的目标？想想为什么没有完成，还有什么地方没有做到更好。是中午开了一个会，耽误了写代码的时间。还是准备 App Store 的截图花的时间超预算了。</p>
</li>
<li><p><strong>准备</strong>：在不到两分钟的时间里，思考一下今天的短片说什么，回答下面的问题：昨天做了什么？今天准备做什么？什么影响了进度。比如这样。</p>
<blockquote>
<p>我昨天我做了 A 的 App Store截图。今天我要写更新日志，然后下午跟一个供应商讨论一下合作。总结：在做截图的时候花了太多的水岸，所以没有完成本来计划的更新日志。下次尝试使用自动化工具。</p>
</blockquote>
</li>
<li><p><strong>拍摄</strong>：拍下这个短片，然后就好了。这些片子在最后的sprint 回顾中还会用到。</p>
</li>
</ul>
<h4 id="每周畅想-（30-45-min）"><a href="#每周畅想-（30-45-min）" class="headerlink" title="每周畅想 （30-45 min）"></a>每周畅想 （30-45 min）</h4><p>在每个 sprint 中，都会花很多的时间去做程序员。很少花时间去考虑公司发展这类东西，要不要做一个新的 App 、大改现在的 app 等灯。<strong>Story Time</strong> 这段时间就是我用来做 CEO 的时间。我建议尽量到其他环境去做这件事情，咖啡店什么的。</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/2017-07-22-033948.jpg" width="500"></p>
<p>在 Story Time ，我会去整理一下从用户那里收到的反馈，考虑今后加什么功能，考虑怎么运营 app 和公司。然后把一些实际的想法加到一个列表里面我叫它需求池。</p>
<p>需求池里面都是一些比较大的任务。它帮助我计划下一个 sprint。所以在 Store Time 中也需要去修改和整理需求池。比如:</p>
<p>在统计中看到了更多巴西方面的东西，这就是说，你可能需要加入葡萄牙语，而不是原计划的西班牙语。或者可能看到了一些用户希望的小功能。这时候也需要考虑是不是把这个需求加入这个列表。</p>
<h4 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h4><p>敏捷开发还有个原则就是要让你做的工作能够产出成品。这就是在 Sprint Release 中需要做的事情。不一定需要是一个完整的 app，但是把这段时间的工作拿给其他人试一下也是很重要的。让测试用户体验，从他们那儿得到一些反馈。</p>
<p>在敏捷开发的过程中，发布的范围会逐渐的扩大。比如说，最开始你可能只需要发布一个只有一两个新功能的 beta 版。这时候可以优先的去考虑最重要的功能，这样能够尽快的拿到测试反馈。如果你的测试用户根本都没有提到过某个功能，这就是说这没那么重要。这也能帮你决定下个 sprint 中任务的优先级。</p>
<h4 id="Last-Day-of-the-Sprint"><a href="#Last-Day-of-the-Sprint" class="headerlink" title="Last Day of the Sprint"></a>Last Day of the Sprint</h4><p>已经花了9天来完成这个 sprint 的目标，终于到了最后一天了。这一天可能是最轻松的一天，因为今天可能不需要做开发工作。今天是用来回顾这个 sprint，计划下一个 sprint 的一天，然后还可以休息休息。</p>
<p>这可能会让人觉得奇怪，在截止日期做这样的事情？上学的时候，我经常会在回家的路上看书。但是这样我会走偏方向，然后摔倒。敏捷开发也一样，如果不经常抬头看看方向，可能方向就错了。</p>
<p>确保方向正确，这就是 sprint 最后一天做的事情。这是一整天，或者是在是时间紧迫，半天也可以。这一天，抬头看看周围，确保做的事最重要的事情。因为即便你非常的高产出，在不重要的事情上花时间也是不值得的。</p>
<p>现在来看看这天要做什么吧！</p>
<h5 id="Retrospective-回顾-（小于2h）"><a href="#Retrospective-回顾-（小于2h）" class="headerlink" title="Retrospective(回顾) （小于2h）"></a>Retrospective(回顾) （小于2h）</h5><p>打开一个新的文档，或者是在笔记本上翻开新的一页，写下你对刚刚过去的两个星期的总结。这是你发现是什么阻碍你的效率的好机会。</p>
<p>这写是一些简单的问题：</p>
<ul>
<li>我完成了什么？</li>
<li>我达成了我 sprint 的目标了吗？</li>
<li>这个 sprint 最的好的是什么？还有什么地方可以做到更好？</li>
<li>有什么影响效率的因素？回顾每天的短片来找到这个问题的答案。</li>
<li>有什么没什么必要的事情让你焦虑了，或者让你觉得很爽？</li>
</ul>
<p>如果你发现出去走走比在桌子边上回顾，那就出去走走吧！然后回来迅速的写下你的总结。我发现这样确实更有效果。</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/2017-07-22-033938.jpg"  width="500"></p>
<h5 id="Sprint-计划-（小于2h）"><a href="#Sprint-计划-（小于2h）" class="headerlink" title="Sprint 计划 （小于2h）"></a>Sprint 计划 （小于2h）</h5><p>在回顾两次 Story Time 和需求池之间，你应该好好想想下一个 sprint 要做什么。把需求池整理一下，然后挑几个最重要的！</p>
<p>下面是一个简单的例子。说你现在有个快完成了的 app ，你计划下个 sprint 加入最后一个功能，然后做一些自测工作，最后把 Beta 版发布出去。在你的计划文档中，就是下面的内容：</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/2017-07-22-045041.jpg" width="500"></p>
<p>在两个星期的 sprint 中，可能还会有更多的任务需要完成。这只是简单的举个例子。</p>
<p>看每个任务后面的数字，这些都是任务评分。比如说，一个 1 分的任务，需要花 2 分任务一半的时间去完成。这个标准需要你自己来定。就我来说，我还是喜欢用1，2，3，5，8这样的数字，这样可以纠正我们低估大任务的倾向。没有4，所以我必须得用5这个数字。</p>
<p>当你完成所有任务的时候，去想想每一个任务相对于其他的任务需要花费的时间。冷静下来，去预测每一项任务需要花费的时间。</p>
<p>如果某一项任务很复杂，但是你已经做过很多次了，那就可以少估计一点时间，也就是说可以减少这个分值。如果某个任务很简单，但是你还不熟悉。就可以多估计一点时间，也就是加点这个分值。</p>
<p>当你完成任务的时候，只需要把所有分值都加起来，然后跟上个 sprint 做一个比较。如果你经常得到 80-100分的总分，那么下个 sprint 的总分应该就差不多是80的样子了。</p>
<p>这可以说是敏捷开发中最有效的事情了，也是我任务最难做的一部分了，我经常发现，我总是减少我想做的事情的评分，给重要的任务更多的评分。有了 sprint 计划，就擦掉你上个 sprint 的任务板，然后为下个 sprint 做准备！</p>
<p>什么是任务板(Task Board)呢？</p>
<blockquote>
<p>译者: 在之前的敏捷开发实践中，都会有一个白板，清晰的写上这些东西。下个部分会讲到。</p>
</blockquote>
<h4 id="任务板"><a href="#任务板" class="headerlink" title="任务板"></a>任务板</h4><p>现在我们就来说说任务板。即使我在我的笔记本或者其他地方已经了我这个 sprint 的计划，我每天的任务还是会在任务板上组织。我把这个任务板放在办公室的墙上。上面会写一些东西，主要是：<strong>TODO</strong>、<strong>DOING</strong>、<strong>DONE</strong>。</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/2017-07-22-051037.jpg" width="500"></p>
<p>每天下班的之前，我都把第二天的任务写在一个便签上，然后把它们贴在TODO这一块。假如我上个 sprint 平均每天拿到了10分，我就会给下一天贴上10分的任务。</p>
<p>第二天早上，我就会把 <strong>TODO</strong> 上的第一个便签拿到 <strong>DOING</strong> 这边。这样做能够让我更容易集中精力。</p>
<p>任务完成的时候，把这个便签拿到 <strong>DONE</strong> 这边。看到 <strong>DONE</strong> 越来越多，是一件很有成就感的事情。</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/2017-07-22-051624.jpg" width="500"></p>
<h4 id="Rest-and-Explore"><a href="#Rest-and-Explore" class="headerlink" title="Rest and Explore"></a>Rest and Explore</h4><p>回到 sprint 中间来。现在你到了 sprint 的最后一个下午了。这个下午就好好的放松一下吧！我经常都是坐在沙发上，看看 Raywenderlich.com 上的教程，或者学点新的知识。</p>
<p>不要把这件事情当作例行工作那样做。只需要做一些跟工作有关，由能让你放松的工作。喝一杯饮料，听听音乐，庆祝庆祝这个 sprint 你完成的工作，多好！</p>
<h2 id="一些建议"><a href="#一些建议" class="headerlink" title="一些建议"></a>一些建议</h2><p>对独立开发者来说选择正确的工作方式是很个人的事情。这跟你的精力相关。同时也需要要激励你，让你成长。以这个为核心原则，就能够找到适合你自己的敏捷开发之道了。</p>
<p>额外的建议：</p>
<ul>
<li>在刚刚开始的时候，不要因为实际完成的任务比计划完成的任务差很多而感到不好。在下个 sprint 中调整就好了。不断的调整正是敏捷开发的意义。</li>
<li>每隔一两天就调整一下这个 sprint 的计划。review 每一个任务，调整他的分值。如果分值变得很高，就需要把一些低优先级的任务移除掉了。</li>
<li>计划细节是一件很麻烦的事情。如果你跟我一样也是两周一个 sprint。第二个星期的计划没有那么详细也是可以的。每天的调整能够慢慢的丰富它。</li>
<li>对公司来说，有一个长期计划是必要的，但是不要死咬住这个计划不放。保持一个流动的需求池来适应改变。</li>
<li>即便这是我在做 Ten Kettles 的 app 的时候总结的东西。他们在做外包的时候也是很好用的这只需要做一些很小的改动。比如说任务板，可能就需要做成虚拟的了，这样才能让甲方知道你现在是什么情况。</li>
<li>别样了买马克笔还有标签纸。</li>
</ul>
<p>我第一次意识到作为独立开发者，我需要更好的工作方式的时候，我想到了三个需求。更高效的产出，从 app 中获得更多的收入，更多的幸福感。我也很高兴这样的改变确实带来了这些东西。app 的迭代频率大大的上升，每个月的平均收入增长了 18%，用户也更满意(在 App Store中平均分 4.75)，而且工作和生活找到了更好的平衡点。有了周末，一切都更好了。</p>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>这是一篇最近的采访，关于我最近在 Ten Kettles 的的细节。</p>
<p>记住下面三个敏捷开发的基本原则</p>
<ul>
<li>主动改变</li>
<li>效率优先</li>
<li>不断的总结</li>
</ul>
<p>看起来很简单，但是有很好工作流程，这几点能够明显的影响你的工作。</p>
<p>如果你想要学习更多关于敏捷开发，尤其是在团队中的敏捷开发的话，这有一些资料。</p>
<p>我最开始看的两本书是：</p>
<ul>
<li><a href="https://www.amazon.com/Scrum-Doing-Twice-Work-Half/dp/038534645X/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1495477992&amp;sr=1-1&amp;keywords=scrum+art+of+doing">Scrum: The Art of Doing Twice the Work in Half the Time (Sutherland, Sutherland)</a></li>
<li><a href="https://www.amazon.com/Scrum-Breathtakingly-Brief-Agile-Introduction/dp/193796504X">Scrum: a Breathtakingly Brief and Agile Introduction (Sims, Johnson)</a></li>
</ul>
<p><strong>这篇文章翻译自Ray wenderlich <a href="https://www.raywenderlich.com/162654/scrum-one-bring-scrum-one-person-operation">Scrum Of One: How to Bring Scrum into your One-Person Operation</a></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ocg4av0wv.bkt.clouddn.com/2017-07-21-114524.jpg&quot; width=&quot;500&quot;&gt;&lt;/p&gt;
&lt;p&gt;不论是在一些大型的开发团队，还是作为独立开发者。我们经常会被预算、技术迭代，以及时间限制。找到合适的工作方式去适应这些限制, 是所有团队都需要去考虑的问题。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.raywenderlich.com/u/alex_andrews&quot;&gt;Alex Andrews&lt;/a&gt; 在成立 &lt;a href=&quot;http://www.tenkettles.com/&quot;&gt;Ten Kettles&lt;/a&gt; 的时候花了很多了精力去考虑这个问题。直到有一天上帝把敏捷开发砸到了他的头上，很快他就找到了适合他的敏捷开发之道。他认为敏捷开发极大的解放了他的生产力。&lt;/p&gt;
&lt;p&gt;这篇文章就会聊到他是怎么进行敏捷开发的。&lt;/p&gt;
    
    </summary>
    
      <category term="敏捷开发" scheme="http://www.CepheusSun.com/categories/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="翻译" scheme="http://www.CepheusSun.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="敏捷开发" scheme="http://www.CepheusSun.com/tags/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>用 ReSwift 实现 Redux 架构</title>
    <link href="http://www.CepheusSun.com/ReSwiftAndRedux.html"/>
    <id>http://www.CepheusSun.com/ReSwiftAndRedux.html</id>
    <published>2017-07-20T16:00:00.000Z</published>
    <updated>2017-07-21T11:01:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>随着 app 的发展， MVC 渐渐的满足不了业务的需求。大家都在探索各种各样的架构模式来适应这种情况，像是MVVM、VIPER、<a href="https://eng.uber.com/new-rider-app/">Riblets</a> 等等。 他们都有各自的特点，但是都有同一个核心: 通过多向数据流将代码按照单一职责原则来划分代码。在多向数据流中，数据在各个模块中传递。</p>
<p>多向数据流并不一定是你想要的，反而，单向数据流才是我们更喜欢的数据传递方式。在这个 ReSwift 的教程中，你会学到如何使用 ReSwift 来实现单向数据流，并完成一个状态驱动的游戏——<strong>MemoryTunes</strong></p>
<a id="more"></a>
<h2 id="什么是-ReSwift"><a href="#什么是-ReSwift" class="headerlink" title="什么是 ReSwift"></a>什么是 ReSwift</h2><p><a href="https://github.com/ReSwift/ReSwift">ReSwift</a> 是一个轻量级的框架，能够帮助你很轻松的去构建一个 Redux 架构的app。当然它是用Swift 实现的。</p>
<p>RxSwift 有以下四个模块</p>
<ul>
<li><strong>Views</strong>： 响应 <strong>Store</strong> 的改变，并且把他们展示在页面上。views 发出 <strong>Actions</strong>。</li>
<li><strong>Actions</strong>:发起app 种状态的改变。Action 是有 <strong>Reducer</strong> 操作的。</li>
<li><strong>Reducers</strong>: 直接改变程序的状态，这些状态由 <strong>Store</strong> 来保存。</li>
<li><strong>Store</strong>:保存当前的程序的状态。其他模块，比如说 <strong>Views</strong> 可以订阅这个状态，并且响应状态的改变。</li>
</ul>
<p>ReSwift 至少有以下这些优势:</p>
<ul>
<li><strong>很强的约束力</strong>：把一些代码放在不合适的地方往往具有很强的诱惑性，虽然这样写很方便。ReSwift 通过很强的约束力来避免这种情况。</li>
<li><strong>单向数据流</strong>：多向数据流的代码在阅读和debug上都可能变成一场灾难。一个改变可能会带来一系列的连锁反应。而单向数据流就能让程序的运行更加具有可预测性，也能够减少阅读这些代码的痛苦。</li>
<li><strong>容易测试</strong>：大多数的业务逻辑都在Reducer 中，这些都是纯的功能。</li>
<li><strong>复用性</strong>：ReSwift 中的每个组件—Store、Reducer、Action ，都是能在各个平台独立运行的，可以很轻松的在iOS、macOS、或者tvOS 中复用这些模块。</li>
</ul>
<h3 id="多向数据流-vs-单向数据流"><a href="#多向数据流-vs-单向数据流" class="headerlink" title="多向数据流 vs. 单向数据流"></a>多向数据流 vs. 单向数据流</h3><p>通过以下的几个例子，我们来理解一下什么是数据流。一个基于 VIPER 架构实现的程序就允许数据在其组件中多向传递。</p>
<center><br><br><img src="http://ocg4av0wv.bkt.clouddn.com/2017-07-20-033011.jpg" alt="VIPER 中的多向数据流"><br><br>VIPER 中的多向数据流</center>

<p>跟 ReSwift 中的数据传递方向比较一下：</p>
<center><br><br><img src="http://ocg4av0wv.bkt.clouddn.com/2017-07-20-033331.jpg" alt=""><br><br>ReSwift 中的单向数据流</center>

<p>可以看出来，数据是单向传递的，这么做，可以让程序中的数据传递更加清晰，也能够很轻松的定位到问题的所在。</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>这是一个已经把整个框架差不多搭建起来的模版项目，包含了一些骨架代码，和库。<a href="https://github.com/CepheusSun/Translate/tree/master/demos/ReSwiftAndRedux">GitHub</a></p>
<p>首先需要做一些准备工作，首先就是要设置这个app最重要的部分:state</p>
<p>打开<strong>AppState.swift</strong> 文件，创建一个 AppState 的结构体:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> ReSwift</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">AppState</span> : <span class="title">StateType</span></span>&#123;</div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个结构体定义了整个app的状态。</p>
<p>在创建包含所有的 AppState 的 <strong>Store</strong> 之前，还要创建一个主 Reducer</p>
<center><br><br><img src="http://ocg4av0wv.bkt.clouddn.com/2017-07-20-034323.jpg" alt=""><br><br></center>

<p>Reducer 是唯一可以直接改变 <strong>Store</strong> 中 <strong>AppState</strong> 的值的地方。只有 Action 可以驱动 Reducer 来改变当前程序的状态。而 Reducer 改变当前 AppState 的值，又取决于他接受到的 Action 类型。</p>
<blockquote>
<p>注意，在程序中只有一个 Store， 他也只有一个主 Reducer</p>
</blockquote>
<p>接下来在<strong>AppReducer.swift</strong> 中创建主 reducer：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> ReSwift</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">appReducer</span><span class="params">(action: Action, state: AppState?)</span></span> -&gt; <span class="type">AppState</span> &#123;</div><div class="line">  <span class="keyword">return</span> <span class="type">AppState</span>()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>appReducer</strong> 是一个接收 Action 并且返回改变之后的 AppState 的函数。参数 state 是程序当前的 state。 这个函数可以根据他接收的 Action 直接改变这个 状态。现在就可以很容易的创建一个 AppState 值了。</p>
<p>现在应该创建 Store 来保存 state 了。</p>
<center><br><br><img src="http://ocg4av0wv.bkt.clouddn.com/2017-07-20-035231.jpg" alt=""><br><br></center>

<p>Store 包含了整个程序当前的状态：这是 AppState 的一个实例。打开<strong>AppDelegate.swift</strong> ,在 impore UIkit 下面添加如下代码:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> ReSwift</div><div class="line"></div><div class="line"><span class="keyword">var</span> store = <span class="type">Store</span>&lt;<span class="type">AppState</span>&gt;(reducer: appReducer, state: <span class="literal">nil</span>)</div></pre></td></tr></table></figure>
<p>这段代码通过 appReducer 创建了一个全局的变量store，appReducer 是这个 Store 的主 Reducer，他包含了接收到action的时候，store 应该怎么改变的规则。因为这是一些准备工作，所以只是传递了一个 nil state 进去。</p>
<p>编译运行，当然，什么都看不见。因为还没写啊！</p>
<h2 id="App-Routing"><a href="#App-Routing" class="headerlink" title="App Routing"></a>App Routing</h2><p>现在可以创建第一个实质的 state了，可是使用 IB 的导航，或者是 routing。</p>
<p>App 路由在所有的架构模式中都是一个挑战，在 ReSwift 中也是。在 MemoryTunes 中将使用很简单的方法来做这件事情，首先需要通过 enum 定义所有的终点，然后让 AppState 持有当前的终点。AppRouter 就会响应这个值的改变，达到路由的目的。</p>
<p>在 <strong>AppRouter.swift</strong> 中添加下面的代码：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> ReSwift</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">RoutingDestination</span>: <span class="title">String</span> </span>&#123;</div><div class="line">  <span class="keyword">case</span> menu = <span class="string">"MenuTableViewController"</span></div><div class="line">  <span class="keyword">case</span> categories = <span class="string">"CategoriesTableViewController"</span></div><div class="line">  <span class="keyword">case</span> game = <span class="string">"GameViewController"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个枚举代表了app 中的所有 ViewController。</p>
<p>到现在，终于有能够放在你程序状态中的数据了。在这个例子里面，只有一个 state 结构体(AppState), 你也可以在这个 state 里面通过子状态的方法，将状态进行分类，这是一个很好的实践。</p>
<p>打开 <strong>RoutingState.swift</strong> 添加如下的子状态结构体：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> ReSwift</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">RoutingState</span>: <span class="title">StateType</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> navigationState: <span class="type">RoutingDestination</span></div><div class="line">  </div><div class="line">  <span class="keyword">init</span>(navigationState: <span class="type">RoutingDestination</span> = .menu) &#123;</div><div class="line">    <span class="keyword">self</span>.navigationState = navigationState</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>RoutingState 包含了 navigationState， 这个东西，就是当前屏幕展示的界面。</p>
<blockquote>
<p>menu 是 navigationState 的默认值。如果没有制定的话，将它设置成这个app的最初状态。</p>
</blockquote>
<p>在 <strong>AppState.swift</strong> 中，添加如下代码:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> routingState: <span class="type">RoutingState</span></div></pre></td></tr></table></figure>
<p>现在 AppState 就有了 RoutingState 这个子状态。编译一下，会发现一个错误。</p>
<center><br><br><img src="http://ocg4av0wv.bkt.clouddn.com/2017-07-20-091710.jpg" alt=""><br><br></center>

<p><em>appReducer</em> 编译不过了！因为我们给 <em>AppState</em> 添加了 <em>routingState</em>，但是在初始化的时候并没有把这个东西传进去。现在还需要一个 reducer 来创建 <em>routingState</em></p>
<p>现在我们只有一个主 <strong>Reducer</strong>， 跟 state 类型，我们也可以通过 子Reducer 来将 Reducer 划分开来。</p>
<center><br><br><img src="http://ocg4av0wv.bkt.clouddn.com/2017-07-21-014930.jpg" alt=""><br><br></center>

<p>在 <strong>RoutingReducer.swift</strong> 中添加下面的 <strong>Reducer</strong>：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> ReSwift</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">routingReducer</span><span class="params">(action: Action, state: RoutingState?)</span></span> -&gt; <span class="type">RoutingState</span> &#123;</div><div class="line">  <span class="keyword">let</span> state = state ?? <span class="type">RoutingState</span>()</div><div class="line">  <span class="keyword">return</span> state</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>跟 主 Reducer 差不多， <em>routionReducer</em> 根据接收到的 Action 改变状态，然后将这个状态返回。到现在，还没有创建 action 所以如果没有接收到 state 的话，就 new 一个 <em>RoutingState</em>，然后返回。</p>
<p>子 reducer 负责创造他们对应的 子状态。</p>
<p>现在回到 <strong>AppReducer.swift</strong> 去改变这个编译错误:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> <span class="type">AppState</span>(routingState: routingReducer(action: action, </div><div class="line">										 state: state?.routingState))</div></pre></td></tr></table></figure>
<p>给 AppState 的初始化方法中添加了对应的参数。其中的 action 和 state 都是由main reducer 传递进去的。</p>
<h3 id="订阅-subscribing"><a href="#订阅-subscribing" class="headerlink" title="订阅  subscribing"></a>订阅  subscribing</h3><p>还记得 RoutingState 里面那个默认的 state <code>.menu</code> 吗？他就是 app 默认的状态。只是你还没有订阅它。</p>
<p>任何的类都可以定于这个 store， 不仅仅是 <strong>View</strong>。当一个类订阅了这个 Store 之后，每次 state 的改变他都会得到通知。我们在 <em>AppRouter</em> 中订阅这个 Store， 然后收到通知之后，push 一个 Controller</p>
<p>打开 <strong>AppRouter.swift</strong> 然后重新写 <em>AppRouter</em></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">AppRouter</span> </span>&#123;</div><div class="line">  </div><div class="line">  <span class="keyword">let</span> navigationController: <span class="type">UINavigationController</span></div><div class="line">  </div><div class="line">  <span class="keyword">init</span>(window: <span class="type">UIWindow</span>) &#123;</div><div class="line">    navigationController = <span class="type">UINavigationController</span>()</div><div class="line">    window.rootViewController = navigationController</div><div class="line">    </div><div class="line">    <span class="comment">// 1</span></div><div class="line">    store.subscribe(<span class="keyword">self</span>) &#123;</div><div class="line">      $<span class="number">0</span>.select &#123;</div><div class="line">        $<span class="number">0</span>.routingState</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">// 2</span></div><div class="line">  fileprivate <span class="function"><span class="keyword">func</span>  <span class="title">pushViewController</span><span class="params">(identifier: String, animated: Bool)</span></span> &#123;</div><div class="line">    <span class="keyword">let</span> viewController = instantiateViewController(identifier: identifier)</div><div class="line">    navigationController.pushViewController(viewController, animated: animated)</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  fileprivate <span class="function"><span class="keyword">func</span> <span class="title">instantiateViewController</span><span class="params">(identifier: String)</span></span> -&gt; <span class="type">UIViewController</span> &#123;</div><div class="line">    <span class="keyword">let</span> storyboard = <span class="type">UIStoryboard</span>(name: <span class="string">"Main"</span>, bundle: <span class="literal">nil</span>)</div><div class="line">    <span class="keyword">return</span> storyboard.instantiateViewController(withIdentifier: identifier)</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// MARK: - StoreSubscriber</span></div><div class="line"><span class="comment">// 3</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">AppRouter</span> :<span class="title">StoreSubscriber</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">newState</span><span class="params">(state: RoutingState)</span></span> &#123;</div><div class="line">    <span class="comment">// 4</span></div><div class="line">    <span class="keyword">let</span> shouldsAnimate = navigationController.topViewController != <span class="literal">nil</span></div><div class="line">    pushViewController(identifier: state.navigationState.rawValue, animated: shouldsAnimate)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这段代码中，我们改了 AppRouter 这个类，然后添加了一个 extension。我们看看具体每一步都做了什么吧！</p>
<ol>
<li><em>AppState</em> 现在订阅了全局的 store， 在闭包里面， selct 表明正在订阅 routingState 的改变。</li>
<li><em>pushViewController</em> 用来初始化，并且 push 这个控制器。通过 identifier 加载的 StoryBoard 中的控制器。</li>
<li>让 <em>AppRouter</em> 响应 StoreSubscriber， 当 routingState 改变的时候，将新的值返回回来。</li>
<li>根控制器是不需要动画的，所以在这个地方判断一下根控制器。</li>
<li>当 state 发生改变，就可以去出 state.navigationState, push 出对应的 controller</li>
</ol>
<p>AppRouter 现在就就初始化 <em>menu</em> 然后将 <em>MenuTableViewController</em> push 出来</p>
<p>编译运行：</p>
<center><br><br><img src="http://ocg4av0wv.bkt.clouddn.com/2017-07-21-024808.jpg" width="200"><br><br></center>

<p>现在 app 中就是 <em>MenuTableViewController</em> 了, 现在当然还是空的。毕竟我们还没有开始学 view。</p>
<h2 id="View"><a href="#View" class="headerlink" title="View"></a>View</h2><center><br><br><img src="http://ocg4av0wv.bkt.clouddn.com/2017-07-21-025205.jpg" alt=""><br><br></center>

<p>任何东西都可能是一个 <em>StoreSubscriber</em>， 但是大多数情况下都是 view 层在响应状态的变化。现在是让 <em>MenuTableViewController</em> 来展示两个不同的 menu 了。</p>
<p>去 <strong>MenuState.swift</strong>， 创建对应的 Reducer</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> ReSwift</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MenuState</span>: <span class="title">StateType</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> menuTitles: [<span class="type">String</span>]</div><div class="line">  </div><div class="line">  <span class="keyword">init</span>() &#123;</div><div class="line">    menuTitles = [<span class="string">"NewGame"</span>, <span class="string">"Choose Category"</span>]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>MenuState</strong> 有一个 *menuTitles， 这个属性就是 tableView 的 title</p>
<p>在 <strong>MenuReducer.swift</strong> 中，创建这个 state 对应的 Reducer:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> ReSwift</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">menuReducer</span><span class="params">(action: Action, state: MenuState?)</span></span> -&gt; <span class="type">MenuState</span> &#123;</div><div class="line">  <span class="keyword">return</span> <span class="type">MenuState</span>()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为 MenuState 是静态的，所以不需要去处理状态的变化。所以这里只需要简单的返回一个新的 MenuState</p>
<p>回到 <strong>AppState.swift</strong> 中, 添加</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> meunState: <span class="type">MenuState</span></div></pre></td></tr></table></figure>
<p>编译又失败了，然后需要到 <strong>AppReducer.swift</strong> 中去修改这个编译错误。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> <span class="type">AppState</span>(routingState: routingReducer(action: action,</div><div class="line">                                  state: state?.routingState),</div><div class="line">      meunState: menuReducer(action: action, state: state?.meunState))</div></pre></td></tr></table></figure>
<p>现在有了 MenuState, 接下来就是要订阅它了。</p>
<p>先在打开 <strong>MenuTableViewController.swift</strong>, 然后将代码改成这样:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> ReSwift</div><div class="line"></div><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MenuTableViewController</span>: <span class="title">UITableViewController</span> </span>&#123;</div><div class="line">  <span class="comment">// 1</span></div><div class="line">  <span class="keyword">var</span> tableDataSource: <span class="type">TableDataSource</span>&lt;<span class="type">UITableViewCell</span>, <span class="type">String</span>&gt;?</div><div class="line">  </div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewWillAppear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123;</div><div class="line">    <span class="keyword">super</span>.viewWillAppear(animated)</div><div class="line">    <span class="comment">// 2</span></div><div class="line">    store.subscribe(<span class="keyword">self</span>) &#123;</div><div class="line">      $<span class="number">0</span>.select &#123;</div><div class="line">        $<span class="number">0</span>.menuState</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewWillDisappear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123;</div><div class="line">    <span class="keyword">super</span>.viewWillDisappear(animated)</div><div class="line">    <span class="comment">// 3</span></div><div class="line">    store.unsubscribe(<span class="keyword">self</span>)</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// MARK: - StoreSubscriber</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">MenuTableViewController</span>: <span class="title">StoreSubscriber</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">newState</span><span class="params">(state: MenuState)</span></span> &#123;</div><div class="line">    <span class="comment">// 4</span></div><div class="line">    tableDataSource = <span class="type">TableDataSource</span>(cellIdentifier: <span class="string">"TitleCell"</span>, models: state.menuTitles) &#123;</div><div class="line">      $<span class="number">0</span>.textLabel?.text = $<span class="number">1</span></div><div class="line">      $<span class="number">0</span>.textLabel?.textAlignment = .center</div><div class="line">      <span class="keyword">return</span> $<span class="number">0</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    tableView.dataSource = tableDataSource</div><div class="line">    tableView.reloadData()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在我们来看看这段代码做了什么？</p>
<ol>
<li>TableDataSource 包含了UITableView data source 相关的东西。</li>
<li>订阅了 menuState</li>
<li>取消订阅</li>
<li>这段代码就是实现 UITableView 的代码，在这儿可以很明确的看到 state 是怎么变成 view 的。</li>
</ol>
<blockquote>
<p>可能已经发现了，ReSwift 使用了很多值类型变量，而不是对象类型。并且推荐使用声明式的 UI 代码。为什么呢？</p>
<p>StoreSubscriber 中定义的 newState 回调了状态的改变。你可能会通过这样的方法去接货这个值</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MenuTableViewController</span>: <span class="title">UITableViewController</span> </span>&#123;</div><div class="line">&gt;   <span class="keyword">var</span> currentMenuTitlesState: [<span class="type">String</span>]</div><div class="line">&gt;   ...</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p>但是写声明式的 UI 代码，可以很明确的知道 state 是怎么转换成 View 的。在这个例子中的问题的 UITableView 并没有这样的API。这就是我写 TableDataSource 来桥接的原因。如果你感兴趣的话可以去看看这个 <strong>TableDataSource.swift</strong></p>
</blockquote>
<p>编译运行，就能够看到了:</p>
<center><br><br><img src="http://ocg4av0wv.bkt.clouddn.com/2017-07-21-032618.jpg" width="200"><br><br></center>

<h2 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h2><center><br><br><img src="http://ocg4av0wv.bkt.clouddn.com/2017-07-21-032930.jpg" alt=""><br><br></center>

<p>做好了 View 接下来就来写 <strong>Action</strong> 了。</p>
<p>Action 是 Store 中数据改变的原因。一个 Action 就是一个有很多变量结构体，这写变量也是这个 Action 的参数。 Reducer 处理一系列的 action， 然后改变 app 的状态。</p>
<p>我们现在先创建一个 Action， 打开 <strong>RoutingAction.swift</strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> ReSwift</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">RoutingAction</span>: <span class="title">Action</span> </span>&#123;</div><div class="line">  <span class="keyword">let</span> destination: <span class="type">RoutingDestination</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em>RoutingAction</em> 改变当前的 routing 终点</p>
<p>现在，当 menu 的 cell 被点击的时候，派发一个 action。</p>
<p>在 <strong>MenuTableViewController.swift</strong> 中添加下面的代码:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, didSelectRowAt indexPath: IndexPath)</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> routeDestination: <span class="type">RoutingDestination</span> = .categories</div><div class="line">    <span class="keyword">switch</span> indexPath.row &#123;</div><div class="line">    <span class="keyword">case</span> <span class="number">0</span>: routeDestination = .game</div><div class="line">    <span class="keyword">case</span> <span class="number">1</span>: routeDestination = .categories</div><div class="line">    <span class="keyword">default</span>:<span class="keyword">break</span></div><div class="line">    &#125;</div><div class="line">    store.dispatch(<span class="type">RoutingAction</span>(destination: routeDestination))</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>这段代码，根据选择的 cell 设置不同的 routeDestination 然后用dispatch 方法派发出去。</p>
<p>这个 action 被派发出去了，但是，还没有被任何的 reducer 给支持。现在去 RoutingReducer.swift 然后做一下对应的修改。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> state = state ?? <span class="type">RoutingState</span>()</div><div class="line"></div><div class="line"><span class="keyword">switch</span> action &#123;</div><div class="line"><span class="keyword">case</span> <span class="keyword">let</span> routingAction <span class="keyword">as</span> <span class="type">RoutingAction</span>:</div><div class="line">  state.navigationState = routingAction.destination</div><div class="line"><span class="keyword">default</span>: <span class="keyword">break</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> state</div></pre></td></tr></table></figure>
<p>switch 语句用来判断是否传入的 action 是 RoutingAction。如果是，就修改 state 为这个 action 的 destination</p>
<p>编译运行，现在点击 item ， 就会对应的 push 出 controller。</p>
<h2 id="Updating-the-State"><a href="#Updating-the-State" class="headerlink" title="Updating the State"></a>Updating the State</h2><p>这样去实现导航可能是由瑕疵的。当你点击 “New Game” 的时候，<code>RoutingState</code> 的 <code>navigationState</code> 就会从<code>menu</code> 变成 <code>game</code>。 但是当你点击 controller 的返回按钮的时候，navigationState 却没有改变。</p>
<p>在 ReSwift 中，让状态跟 UI 同步是很重要的，但是这又是最容易搞忘的东西。特别是向上面那样，由 UIKit 自动控制的东西。</p>
<p>我们可以在 MenutableViewController 出现的时候更新一下这个状态。</p>
<p>在 <strong>MenuTableViewController.swift</strong> 的 <code>viewWillAppear</code>: 方法中，添加:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">store.dispatch(<span class="type">RoutingAction</span>(destination: .menu))</div></pre></td></tr></table></figure>
<p>这样就能够在上面的问题出现的时候解决这个问题。</p>
<p>运行一下呢？呃… 完全乱了。也可能会看到一个崩溃。</p>
<center><br><br><img src="http://ocg4av0wv.bkt.clouddn.com/2017-07-21-live.gif" alt=""><br><br></center>

<p>打开 <strong>AppRouter.swift</strong>， 你会看到每次接收到一个新的 navigationState 的时候，都会调用 <code>pushViewController</code> 方法。也就是说，每次响应就会 push 一个 menu 出来！</p>
<p>所以我们还必须在 push 之前确定这个 controller 是不是正在屏幕中。所以我们修改一下 <code>pushViewController</code>  这个方法:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">fileprivate <span class="function"><span class="keyword">func</span>  <span class="title">pushViewController</span><span class="params">(identifier: String, animated: Bool)</span></span> &#123;</div><div class="line">	<span class="keyword">let</span> viewController = instantiateViewController(identifier: identifier)</div><div class="line">    <span class="keyword">let</span> newViewControllerType = type(of: viewController)</div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> currentVc = navigationController.topViewController &#123;</div><div class="line">      <span class="keyword">let</span> currentViewControllerType = type(of: currentVc)</div><div class="line">      <span class="keyword">if</span> currentViewControllerType == newViewControllerType &#123;</div><div class="line">        <span class="keyword">return</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    navigationController.pushViewController(viewController, animated: animated)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的方法中，通过 <code>type(of:)</code> 方法来避免当前的 topViewController 跟 要推出来的 Controller 进行对比。如果相等，就直接 <code>return</code> 。</p>
<p>编译运行，这时候，又一切正常了。</p>
<p>当 UI 发生变化的时候更新当前的状态是比较复杂的事情。这是写 ReSwift 的时候必须要解决的一件事情。还好他不是那么常见。</p>
<h2 id="Category"><a href="#Category" class="headerlink" title="Category"></a>Category</h2><p>现在，我们继续来实现  <em>CategoriesTableViewController</em> 这一部分跟之前的部分比起来更复杂一些。这个界面需要允许用户来选择音乐的类型，首先，我们在<strong>CategoriesState.swift</strong> 中添加响应的状态。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> ReSwift</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Category</span>: <span class="title">String</span> </span>&#123;</div><div class="line">  <span class="keyword">case</span> pop = <span class="string">"Pop"</span></div><div class="line">  <span class="keyword">case</span> electrinic = <span class="string">"Electronic"</span></div><div class="line">  <span class="keyword">case</span> rock = <span class="string">"Rock"</span></div><div class="line">  <span class="keyword">case</span> metal = <span class="string">"Metal"</span></div><div class="line">  <span class="keyword">case</span> rap = <span class="string">"Rap"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CategoriesState</span>: <span class="title">StateType</span> </span>&#123;</div><div class="line">  <span class="keyword">let</span> categories: [<span class="type">Category</span>]</div><div class="line">  <span class="keyword">var</span> currentCategorySelected: <span class="type">Category</span></div><div class="line">  </div><div class="line">  <span class="keyword">init</span>(currentCategory: <span class="type">Category</span>) &#123;</div><div class="line">    categories = [.pop, .electrinic, .rock, .metal, .rap]</div><div class="line">    currentCategorySelected = currentCategory</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个枚举定义了一些音乐的类型。CategoriesState 包含了一个数组的种类，以及当前选择的种类。</p>
<p>在 <strong>ChangeCategoryAction.swift</strong> 中添加这些代码:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> ReSwift</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ChangeCategoryAction</span>: <span class="title">Action</span> </span>&#123;</div><div class="line">  <span class="keyword">let</span> categoryIndex: <span class="type">Int</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里定义了对应的 action， 使用 categoryIndex 来寻找对应的音乐类型。</p>
<p>现在来实现 Reducer了。 这个 reducer 需要接受 ChangeCategoryAction 然后将新的 state 保存起来。打开 <strong>CategoryReducer.swift</strong>：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> ReSwift</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">struct</span> <span class="title">CategoriesReducerConstants</span> </span>&#123;</div><div class="line">  <span class="keyword">static</span> <span class="keyword">let</span> userDefaultCategoryKey = <span class="string">"currentCategoryKey"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">typealias</span> <span class="type">C</span> = <span class="type">CategoriesReducerConstants</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">categoriesReducer</span><span class="params">(action: Action, state: CategoriesState?)</span></span> -&gt; <span class="type">CategoriesState</span> &#123;</div><div class="line">  <span class="keyword">var</span> currentCategory: <span class="type">Category</span> = .pop</div><div class="line">  <span class="comment">// 1</span></div><div class="line">  <span class="keyword">if</span> <span class="keyword">let</span> loadedCategory = getCurrentCategoryStateFromUserDefaults() &#123;</div><div class="line">    currentCategory = loadedCategory</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> state = state ?? <span class="type">CategoriesState</span>(currentCategory: currentCategory)</div><div class="line">  </div><div class="line">  <span class="keyword">switch</span> action &#123;</div><div class="line">  <span class="keyword">case</span> <span class="keyword">let</span> changeCategoryAction <span class="keyword">as</span> <span class="type">ChangeCategoryAction</span>:</div><div class="line">    <span class="comment">// 2</span></div><div class="line">    <span class="keyword">let</span> newCategory = state.categories[changeCategoryAction.categoryIndex]</div><div class="line">    state.currentCategorySelected = newCategory</div><div class="line">    saveCurrentCategoryStateToUserdefaults(category: newCategory)</div><div class="line">  <span class="keyword">default</span>: <span class="keyword">break</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> state</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 3</span></div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">getCurrentCategoryStateFromUserDefaults</span><span class="params">()</span></span> -&gt; <span class="type">Category</span>?</div><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> userDefaults = <span class="type">UserDefaults</span>.standard</div><div class="line">  <span class="keyword">let</span> rawValue = userDefaults.string(forKey: <span class="type">C</span>.userDefaultCategoryKey)</div><div class="line">  <span class="keyword">if</span> <span class="keyword">let</span> rawValue = rawValue &#123;</div><div class="line">    <span class="keyword">return</span> <span class="type">Category</span>(rawValue: rawValue)</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 4</span></div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">saveCurrentCategoryStateToUserdefaults</span><span class="params">(category: Category)</span></span> &#123;</div><div class="line">  <span class="keyword">let</span> userDefaults = <span class="type">UserDefaults</span>.standard</div><div class="line">  userDefaults.<span class="keyword">set</span>(category.rawValue, forKey: <span class="type">C</span>.userDefaultCategoryKey)</div><div class="line">  userDefaults.synchronize()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>跟其他的 Reducer 一样，这些方法实现了一下比较复杂的状态的改变，并且将选择之后的状态通过 Userdefault 持久化。</p>
<ol>
<li>从 UserDefault 中获取 category， 然后赋值给 CategoriesState</li>
<li>在接收到 ChangeCategoryAction 的时候更新状态，然后保存下来</li>
<li>从 Userdefault 中获取state</li>
<li>将 state 保存在 UserDefault 中</li>
</ol>
<p>3、4 中的两个方法都是功能很单一的方法，而且是全局的。你也可以把他们放在一个类或者结构体中。</p>
<p>接下来很自然的，就会需要在 AppState 中添加新的状态。打开 <strong>AppState.swift</strong> 然后添加对应的状态:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> categoriesState: <span class="type">CategoriesState</span></div></pre></td></tr></table></figure>
<p>然后去 <strong>AppReducer.swift</strong> 中去修改对应的错误</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> <span class="type">AppState</span>(routingState: routingReducer(action: action,</div><div class="line">                                             state: state?.routingState),</div><div class="line">                meunState: menuReducer(action: action, state: state?.meunState),</div><div class="line">      categoriesState: categoriesReducer(action: action, state: state?.categoriesState))</div></pre></td></tr></table></figure>
<p>现在还需要 View 了。现在需要在 CategoriesViewController 中去写这部分的 View</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> ReSwift</div><div class="line"></div><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoriesTableViewController</span>: <span class="title">UITableViewController</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> tableDataSource: <span class="type">TableDataSource</span>&lt;<span class="type">UITableViewCell</span>, <span class="type">Category</span>&gt;?</div><div class="line">  </div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewWillAppear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123;</div><div class="line">    <span class="keyword">super</span>.viewWillAppear(animated)</div><div class="line">    <span class="comment">//1</span></div><div class="line">    store.subscribe(<span class="keyword">self</span>) &#123;</div><div class="line">      $<span class="number">0</span>.select &#123;</div><div class="line">        $<span class="number">0</span>.categoriesState</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewWillDisappear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123;</div><div class="line">    <span class="keyword">super</span>.viewDidDisappear(animated)</div><div class="line">    store.unsubscribe(<span class="keyword">self</span>)</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, didSelectRowAt indexPath: IndexPath)</span></span> &#123;</div><div class="line">    <span class="comment">// 2</span></div><div class="line">    store.dispatch(<span class="type">ChangeCategoryAction</span>(categoryIndex: indexPath.row))</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">CategoriesTableViewController</span>: <span class="title">StoreSubscriber</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">newState</span><span class="params">(state: CategoriesState)</span></span> &#123;</div><div class="line">    tableDataSource = <span class="type">TableDataSource</span>(cellIdentifier: <span class="string">"CategoryCell"</span>, models: state.categories) &#123;</div><div class="line">      $<span class="number">0</span>.textLabel?.text = $<span class="number">1</span>.rawValue</div><div class="line">      <span class="comment">// 3</span></div><div class="line">      $<span class="number">0</span>.accessoryType = (state.currentCategorySelected == $<span class="number">1</span>) ? .checkmark : .<span class="keyword">none</span></div><div class="line">      <span class="keyword">return</span> $<span class="number">0</span></div><div class="line">    &#125;</div><div class="line">    tableView.dataSource = tableDataSource</div><div class="line">    tableView.reloadData()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这部分的代码跟 MenuTableViewController 差不多。注释中标记的内容分别是：</p>
<ol>
<li>在 <code>viewWillAppear</code> 中订阅 categoriesState 的改变，然后在 <code>viewillDisappear</code> 中取消订阅。</li>
<li>将事件派发出去</li>
<li>标记选择的状态</li>
</ol>
<p>所有的东西都写好了，现在试一下！</p>
<center><br><br><img src="http://ocg4av0wv.bkt.clouddn.com/2017-07-21-065609.jpg" width="200"><br><br></center>

<h2 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h2><p>怎么都跑不了这个话题，这在 ReSwift 也很方便。</p>
<p>场景:从 iTunes的 <a href="https://affiliate.itunes.apple.com/resources/documentation/itunes-store-web-service-search-api/?uo=8&amp;at=11ld4k">API</a> 中去获取照片。首先需要创建对应的 state， reducer 以及相关的 action.</p>
<p>打开 <strong>GameState.swift</strong> 添加</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> ReSwift</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">GameState</span>: <span class="title">StateType</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> memoryCards: [<span class="type">MemoryCard</span>]</div><div class="line">  <span class="comment">// 1</span></div><div class="line">  <span class="keyword">var</span> showLoading: <span class="type">Bool</span></div><div class="line">  <span class="comment">// 2</span></div><div class="line">  <span class="keyword">var</span> gameFinishied: <span class="type">Bool</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码定义了 Game 的状态。</p>
<ol>
<li>loading 的 菊花，是否存在</li>
<li>游戏是否结束</li>
</ol>
<p>接下来是Reducer <strong>GameReducer.swift</strong>:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> ReSwift</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">gameReducer</span><span class="params">(action: Action, state: GameState?)</span></span> -&gt; <span class="type">GameState</span> &#123;</div><div class="line">  <span class="keyword">let</span> state = state ?? <span class="type">GameState</span>(memoryCards: [],</div><div class="line">                                 showLoading: <span class="literal">false</span>,</div><div class="line">                                 gameFinishied: <span class="literal">false</span>)</div><div class="line">  <span class="keyword">return</span> state</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码就是简单的创建了一个 <em>GameState</em>, 稍后会再回到这个地方的。</p>
<p>在 <strong>AppState.swift</strong> 中，添加对应的状态</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> gameState: <span class="type">GameState</span></div></pre></td></tr></table></figure>
<p>修改 <strong>AppReducer.swift</strong> 中出现的编译错误</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> <span class="type">AppState</span>(routingState: routingReducer(action: action,</div><div class="line">                                               state: state?.routingState),</div><div class="line">                  meunState: menuReducer(action: action, state: state?.meunState),</div><div class="line">                  categoriesState: categoriesReducer(action: action, state: state?.categoriesState),</div><div class="line">                  gameState: gameReducer(action: action, state: state?.gameState))</div></pre></td></tr></table></figure>
<blockquote>
<p>发现了规律了吧，在每次写完 Action/Reducer/State之后应该做什么都是可见并且很简单的。这种情况，得益于ReSwift 的单向数据特效和严格的代码约束。只有 Reducer 能够改变 app 的 Store，只有 Action 能够触发这种响应。这样做能够让你知道在上面地方找代码，在什么地方做新功能。</p>
</blockquote>
<p>现在开始定义 Action， 这个 action 用来更新卡片。在 <strong>SetCardsAction.swift</strong>：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> ReSwift</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SetCardsAction</span>: <span class="title">Action</span> </span>&#123;</div><div class="line">  <span class="keyword">let</span> cardImageUrls: [<span class="type">String</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个 action 用来设置 GameState 中图片的URL</p>
<p>现在开始准备程序中第一个异步行为吧！在 <strong>FetchTumesAction.swift</strong> 中，添加下面的代码:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> ReSwift</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">fetchTunes</span><span class="params">(state: AppState, store: Store&lt;AppState&gt;)</span></span> -&gt; <span class="type">FetchTunesAction</span> &#123;</div><div class="line">  iTunesAPI.searchFor(category: state.categoriesState.currentCategorySelected.rawValue) &#123;</div><div class="line">    store.dispatch(<span class="type">SetCardsAction</span>(cardImageUrls: $<span class="number">0</span>))</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="type">FetchTunesAction</span>()</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FetchTunesAction</span>: <span class="title">Action</span></span>&#123;&#125;</div></pre></td></tr></table></figure>
<p><code>fetchTunes</code>  通过 <code>itunesAPI</code> 获取了图片。然后在闭包中将结果派发出来。 ReSwift 中的异步任务就是这么简单。</p>
<p><code>fetchTunes</code> 返回一个 <code>FetchTunesAction</code>  这个 action 是用来验证请求的。</p>
<p>打开 <strong>OpenReducer.swift</strong> 然后添加对这两个 action 的支持。把 <code>gameReducer</code> 中的代码改成下面这样：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> state = state ?? <span class="type">GameState</span>(memoryCards: [],</div><div class="line">                                showLoading: <span class="literal">false</span>,</div><div class="line">                                gameFinishied: <span class="literal">false</span>)</div><div class="line"> <span class="keyword">switch</span> action &#123;</div><div class="line"> <span class="comment">// 1</span></div><div class="line"> <span class="keyword">case</span> <span class="number">_</span> <span class="keyword">as</span> <span class="type">FetchTunesAction</span>:</div><div class="line">   state = <span class="type">GameState</span>(memoryCards: [],</div><div class="line">                     showLoading: <span class="literal">true</span>,</div><div class="line">                     gameFinishied: <span class="literal">false</span>)</div><div class="line"> <span class="comment">// 2</span></div><div class="line"> <span class="keyword">case</span> <span class="keyword">let</span> setCardsAction <span class="keyword">as</span> <span class="type">SetCardsAction</span>:</div><div class="line">   state.memoryCards = generateNewCards(with: setCardsAction.cardImageUrls)</div><div class="line">   state.showLoading = <span class="literal">false</span></div><div class="line"> <span class="keyword">default</span>:<span class="keyword">break</span></div><div class="line"> &#125;</div><div class="line"> <span class="keyword">return</span> state</div></pre></td></tr></table></figure>
<p>这段代码，就是根据具体的 action 做不同的事情。</p>
<ol>
<li>FetchTunesAction, 设置 showLoading 为 true</li>
<li>SetCardsAction, 打乱卡片，然后将 showLoading 设置为 false。 generateNewCards 方法可以在 <strong>MemoryGameLogic.swift</strong> 中找到</li>
</ol>
<p>现在开始写 <strong>View</strong></p>
<p>在 <strong>CardCollectionViewCell.swift</strong> 中添加下面的方法:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">configCell</span><span class="params">(with cardState: MemoryCard)</span></span> &#123;</div><div class="line">  <span class="keyword">let</span> url = <span class="type">URL</span>(string: cardState.imageUrl)</div><div class="line">  <span class="comment">// 1</span></div><div class="line">  cardImageView.kf.setImage(with: url)</div><div class="line">  <span class="comment">// 2</span></div><div class="line">  cardImageView.alpha = cardState.isAlreadyGuessed || cardState.isFlipped ? <span class="number">1</span> : <span class="number">0</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>configCell</code> 这个方法做了下面两件事情:</p>
<ol>
<li>使用 Kingfisher 来缓存图片</li>
<li>判断是否展示图片</li>
</ol>
<p>下一步，实现 CollectionView。在 gameViewCotroller.swift 倒入 <code>import ReSwift</code> 然后在 <code>showGameFinishedAlert</code> 上面添加下面的代码:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> collectionDataSource: <span class="type">CollectionDataSource</span>&lt;<span class="type">CardCollectionViewCell</span>, <span class="type">MemoryCard</span>&gt;?</div><div class="line"> <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewWillAppear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123;</div><div class="line">   <span class="keyword">super</span>.viewWillAppear(animated)</div><div class="line">   store.subscribe(<span class="keyword">self</span>) &#123;</div><div class="line">     $<span class="number">0</span>.select &#123;</div><div class="line">       $<span class="number">0</span>.gameState</div><div class="line">     &#125;</div><div class="line">   &#125;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewWillDisappear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123;</div><div class="line">   <span class="keyword">super</span>.viewWillDisappear(animated)</div><div class="line">   store.unsubscribe(<span class="keyword">self</span>)</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">   <span class="comment">// 1</span></div><div class="line">   store.dispatch(fetchTunes)</div><div class="line">   collectionView.delegate = <span class="keyword">self</span></div><div class="line">   loadingIndicator.hidesWhenStopped = <span class="literal">true</span></div><div class="line">   </div><div class="line">   <span class="comment">// 2</span></div><div class="line">   collectionDataSource = <span class="type">CollectionDataSource</span>.<span class="keyword">init</span>(cellIdentifier: <span class="string">"CardCell"</span>, models: []) &#123;</div><div class="line">     $<span class="number">0</span>.configCell(with: $<span class="number">1</span>)</div><div class="line">     <span class="keyword">return</span> $<span class="number">0</span></div><div class="line">   &#125;</div><div class="line">   collectionView.dataSource = collectionDataSource</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>由于没有写 StoreSubscriber ，所以这里会有一点点的编译错误。我们先假设已经写了。这段代码，首先是订阅了取消订阅 gameState 然后:</p>
<ol>
<li>派发 fetchTunes 来获取图片</li>
<li>使用 CollectiondataSource  来配置 cell 相关信息。</li>
</ol>
<p>现在我们来添加 <code>StoreSubscriber</code> :</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">GameViewController</span>: <span class="title">StoreSubscriber</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">newState</span><span class="params">(state: GameState)</span></span> &#123;</div><div class="line">    collectionDataSource?.models = state.memoryCards</div><div class="line">    collectionView.reloadData()</div><div class="line">    <span class="comment">// 1</span></div><div class="line">    state.showLoading ? loadingIndicator.startAnimating() : loadingIndicator.stopAnimating()</div><div class="line">       <span class="comment">// 2</span></div><div class="line">    <span class="keyword">if</span> state.gameFinishied &#123;</div><div class="line">      showGameFinishedAlert()</div><div class="line">      store.dispatch(fetchTunes)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码实现了 state 改变的时候对应的变化。他会更新 dataSource</p>
<ol>
<li>更新 loading indicator 的状态。</li>
<li>当游戏结束时，弹窗</li>
</ol>
<p>现在，运行一下吧！</p>
<center><br><br><img src="http://ocg4av0wv.bkt.clouddn.com/2017-07-21-085643.jpg" width="200"><br><br></center>

<h2 id="Play"><a href="#Play" class="headerlink" title="Play"></a>Play</h2><p>游戏的逻辑是： 让用户翻转两张卡片的时候，如果它们是一眼的，就让他们保持，如果不一样就翻回去。用户的任务是在尽可能少的尝试之后翻转所有的卡片。</p>
<p>现在需要一个翻转的事件。在 <strong>OpenCardAction.swift</strong> 中添加代码:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> ReSwift</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FlipCardAction</span>: <span class="title">Action</span></span>&#123;</div><div class="line">  <span class="keyword">let</span> cardIndexToFlip: <span class="type">Int</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当卡片翻转的时候: FlipCardAction 使用 cardIndexToFlip 来更新 gameState 中的状态。</p>
<p>下一步修改 <code>gamereducer</code>  来支持这个 action。打开 <strong>GameReducer.swift</strong> 添加下面对应的case</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">case</span> <span class="keyword">let</span> flipCardAction <span class="keyword">as</span> <span class="type">FlipCardAction</span>:</div><div class="line">   state.memoryCards = flipCard(index: flipCardAction.cardIndexToFlip,</div><div class="line">                                memoryCards: state.memoryCards)</div><div class="line">state.gameFinishied = hasFinishedGame(cards: state.memoryCards)</div></pre></td></tr></table></figure>
<p>对 FlipCardAction 来说， flipCard 改变卡片的状态。hasFinishedGame 会在游戏结束的时候调用。两个方法都可以在 <strong>MemoryGameLogic.swift</strong> 中找到。</p>
<p>最后一个问题是在点击的时候，把翻转的 action 派发出去。</p>
<p>在 <strong>GameViewController.swift</strong> 中，找到 <code>UICollectionViewDelegate</code>  这个 extension。在 <code>collectionView(_:didSelectItemAt:)</code> 中添加:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">store.dispatch(<span class="type">FlipCardAction</span>(cardIndexToFlip: indexPath.row))</div></pre></td></tr></table></figure>
<p>当卡片被选择的时候，关联的<code>indexPath.row</code> 就会跟着 <code>FlipcardAction</code> 被派发出去.</p>
<p>再运行一下，就会发现！</p>
<center><br><br><img src="http://ocg4av0wv.bkt.clouddn.com/2017-07-21-091810.jpg" width="200"><br><br></center>



<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>模版项目已经完整项目都在 <a href="https://github.com/CepheusSun/Translate/tree/master/demos/ReSwiftAndRedux">GitHub</a> </p>
<p>ReSwift 不仅仅是我们今天提到的内容。他还以很多:</p>
<ul>
<li><strong>Middleware</strong>: 中间件。swift目前还没有很好的办法来做切面。但是 ReSwift 解决了这个问题。可以使用ReSwift 的 [Middleware] 特性来解决这个问题。他能够让你轻松的切面(logging, 统计， 缓存)。</li>
<li><strong>Routing</strong>： 在这个 app 中已经实现了自己的 Routing， 还有个更通用的解决方案<a href="https://github.com/ReSwift/ReSwift-Router">ReSwift-Routing</a> 单这在社区还是一个还没有完全解决的问题。说不定解决它的人就是你！</li>
<li><strong>Testing</strong>: ReSwift 或许是最方便测试的框架了。 Reducer 包含了你需要测试的所有代码。他们都是纯的功能函数。这种函数在接受了同一个input 总是返回同一个值，他们不回依赖于程序当前的状态。</li>
<li><strong>Debugging</strong>： ReSwift 的所有状态都在一个结构体中定义，并且是单向数据流的，debug 会非常的简单，甚至你还可以用 <a href="https://github.com/ReSwift/ReSwift-Recorder">ReSwift-Recorder</a> 来记录下导致 crash 的状态</li>
<li><strong>Persistence</strong>: 因为所有的状态都在一个地方，拓展和坚持都是很容易的事情。缓存离线的数据也是一个比较麻烦的架构问题，但是 ReSwift 解决了这个问题。</li>
<li><strong>others</strong>： Redux 架构并不是一个库，它是一种编程范式，你也可以自己实现一套，还有 <a href="https://github.com/BendingSpoons/katana-swift">Katana</a> 或者 <a href="https://github.com/ReduxKit/ReduxKit">ReduxKit</a> 也可以做这件事</li>
</ul>
<p>如果你想学习更多关于 ReSwift 的东西，可以看 ReSwift 作者 <a href="https://news.realm.io/news/benji-encz-unidirectional-data-flow-swift/">Benjamin Encz</a> 的演讲视频</p>
<p><a href="http://christiantietze.de/posts/2016/01/reswift-level-indirection/">Christian Tietze’s blog</a> 的博客上有很多有趣的例子。</p>
<p><strong>这篇文章翻译自Ray wenderlich <a href="https://www.raywenderlich.com/155815/reswift-tutorial-memory-game-app">ReSwift Tutorial: Memory Game App</a>]</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随着 app 的发展， MVC 渐渐的满足不了业务的需求。大家都在探索各种各样的架构模式来适应这种情况，像是MVVM、VIPER、&lt;a href=&quot;https://eng.uber.com/new-rider-app/&quot;&gt;Riblets&lt;/a&gt; 等等。 他们都有各自的特点，但是都有同一个核心: 通过多向数据流将代码按照单一职责原则来划分代码。在多向数据流中，数据在各个模块中传递。&lt;/p&gt;
&lt;p&gt;多向数据流并不一定是你想要的，反而，单向数据流才是我们更喜欢的数据传递方式。在这个 ReSwift 的教程中，你会学到如何使用 ReSwift 来实现单向数据流，并完成一个状态驱动的游戏——&lt;strong&gt;MemoryTunes&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Swift" scheme="http://www.CepheusSun.com/categories/Swift/"/>
    
    
      <category term="iOS" scheme="http://www.CepheusSun.com/tags/iOS/"/>
    
      <category term="Swift" scheme="http://www.CepheusSun.com/tags/Swift/"/>
    
      <category term="翻译" scheme="http://www.CepheusSun.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>面向 Extension 开发 🌞 Share Extension</title>
    <link href="http://www.CepheusSun.com/ShareExtension.html"/>
    <id>http://www.CepheusSun.com/ShareExtension.html</id>
    <published>2017-07-09T13:43:38.000Z</published>
    <updated>2017-07-09T13:53:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>Share Extension 使用户在使用其他的app 的时候, 更加方便的将其内容分享出去，像是社会化分享还有上传服务器。比如说， 在一个 app 中有个分享按钮， 用户可以选择其中一个 Share Extension 来发表评论或者内容。</p>
<a id="more"></a>
<blockquote>
<p><strong>写在前面的话</strong></p>
<p>最好的 Share Extension 能够让用户能够很轻松的分享网页中的内容。如果你需要用一个扩展来让用户使用这些内容做一些其他的操作, 或者为用户提供他们所关心的内容的更新， Share Extension 可能就不是最好的解决方案了。</p>
</blockquote>
<h3 id="如何理解-Share-Extension"><a href="#如何理解-Share-Extension" class="headerlink" title="如何理解 Share Extension"></a>如何理解 Share Extension</h3><p> Share Extension 有以下几个特点：</p>
<ul>
<li>让用户更容易分享内容。</li>
<li>如果可以的话，能够让用户预览，编辑，标注，并且自定义内容。</li>
<li>在用户发送内容的时候，能够确保内容是合法的。</li>
</ul>
<p>用户能够通过系统提供的 UI 来获得他能够使用的 Share Extension。在 iOS 中， 用户点击分享按钮，然后从系统弹出来的分享区域中选择一个 Share Extension。</p>
<p>当用户选择了你的 Share Extension 之后，你需要展示一个包含了内容的视图，然后发表出去。你可以将你的视图机遇系统提供的 vc， 或者自定义一个。系统提供的那个提供了一些很常见的操作，比如说，预览，合法性判断，同步内容，以及视图的动画，还有设置发布。</p>
<h3 id="创建-Share-Extension"><a href="#创建-Share-Extension" class="headerlink" title="创建 Share Extension"></a>创建 Share Extension</h3><p>创建的过程类似于之前写的 <a href="http://cepheussun.com/TodayExtension.html">面向 Extension 开发 🌞 Today Extension</a></p>
<p>唯一不同的是 Today Extension 有唯一的一个 宿主 app 而 Share Extension 在使用的时候， 可能有很多的宿主 app 所以在运行的时候，需要选择一个宿主 app。 一般都是选择的 Safari 然后，随便打开一个网页，下面的分享按钮就可用了，点击之后，在分享列表里面就能够看到你的 app 咯。</p>
<blockquote>
<p>需要注意的是，这个时候看到的 Share Extension 的名称是你 Share Extension 的名称，这个是可以更app 名称不一样的。只要改 Share Extension 的 info.plist 中的 Bundle display name 为你想要的名称就可以了。</p>
</blockquote>
<h3 id="这篇文章要做什么？"><a href="#这篇文章要做什么？" class="headerlink" title="这篇文章要做什么？"></a>这篇文章要做什么？</h3><p>写到这里, 基本上已经完成了准备工作了。可能还有 创建 app groups 之类的工作，这块将在下面的内容中介绍。花了几天时间断断续续的研究 <code>Share Extension</code>，对比了系统中本来就存在的facebook twitter 以及国内的微博什么的。我将在本文中模仿着做一个类似的效果出来。</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/2017-07-07-live.gif" alt=""></p>
<p>这是最终效果的 gif 图。这只是第一步。好了，我们开始吧。</p>
<h4 id="基本设置"><a href="#基本设置" class="headerlink" title="基本设置"></a>基本设置</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">       <span class="keyword">super</span>.viewDidLoad()</div><div class="line">       placeholder = <span class="string">"分享到微博"</span>  <span class="comment">// 占位文字</span></div><div class="line">       charactersRemaining = <span class="number">140</span>  <span class="comment">// 左下角的文字 展示数字，可以用来倒数，还能输入几个字, 小于等于0的时候变成红色</span></div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>如注释所见，这里设置了placeholder 已经右下角的数字。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 过滤分享的内容</span></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">isContentValid</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    charactersRemaining = <span class="number">140</span> - contentText.characters.<span class="built_in">count</span> <span class="keyword">as</span> <span class="type">NSNumber</span></div><div class="line">    <span class="keyword">return</span> contentText.characters.<span class="built_in">count</span> &gt; <span class="number">2</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码用来验证用户输入的内容是否合法。这里我只是简单的设置了内容的长度不能超过140，并且不能小于2.</p>
<p>系统在<code>SLComposeServiceViewController</code>中提供了<code>open func didSelectPost()</code>、<code>open func didSelectCancel()</code> 两个方法分别是上面两个按钮的事件。</p>
<blockquote>
<p>需要注意的是，重写 cancel 的时候，需要调用 super</p>
</blockquote>
<p>接下来是设置位置，分组这些内容。这写也是在系统的api 中能找到对应的方法。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">configurationItems</span><span class="params">()</span></span> -&gt; [<span class="type">Any</span>]! &#123;</div><div class="line">       <span class="comment">// 定位</span></div><div class="line">       <span class="keyword">let</span> item1 = <span class="type">SLComposeSheetConfigurationItem</span>()</div><div class="line">       item1?.title = <span class="string">"位置"</span></div><div class="line">       item1?.value = <span class="string">"无"</span></div><div class="line">       item1?.valuePending = <span class="literal">false</span></div><div class="line">       item1?.tapHandler = &#123;</div><div class="line">           item1?.valuePending = <span class="literal">true</span></div><div class="line">           <span class="comment">// 在这里做定位的操作</span></div><div class="line">           <span class="comment">// 模拟花了3s时间</span></div><div class="line">           delay(<span class="number">3</span>, task: &#123;</div><div class="line">               item1?.value = <span class="string">""</span></div><div class="line">               item1?.valuePending = <span class="literal">false</span></div><div class="line">               item1?.value = <span class="string">"四川省 成都市"</span></div><div class="line">           &#125;)</div><div class="line">       &#125;</div><div class="line">       </div><div class="line">       <span class="comment">// 跳转</span></div><div class="line">       <span class="keyword">let</span> item2 = <span class="type">SLComposeSheetConfigurationItem</span>()</div><div class="line">       item2?.title = <span class="string">"可见组"</span></div><div class="line">       item2?.value = <span class="string">""</span></div><div class="line">       </div><div class="line">       item2?.tapHandler = &#123;</div><div class="line">           <span class="keyword">let</span> list = <span class="type">ListController</span>()</div><div class="line">           list.callbackClosure = &#123;</div><div class="line">               item2?.value = $<span class="number">0</span></div><div class="line">           &#125;</div><div class="line">           <span class="keyword">self</span>.pushConfigurationViewController(list)</div><div class="line">       &#125;</div><div class="line">       </div><div class="line">       <span class="comment">// 测试预览</span></div><div class="line">       <span class="comment">/*</div><div class="line">       let item3 = SLComposeSheetConfigurationItem()</div><div class="line">       item3?.title = "预览"</div><div class="line">       item3?.tapHandler = &#123;</div><div class="line">           let pre = self.loadPreviewView()// 这个方法实际上是用来获取右边的图片的</div><div class="line">           pre?.frame = self.view.bounds</div><div class="line">           self.view.addSubview(pre!)</div><div class="line">       &#125;</div><div class="line">       */</span></div><div class="line">       <span class="keyword">return</span> [item1!, item2!]</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>这个方法返回了一个数组，就是对应的按钮等内容。每个按钮其实也很简单。只有 <code>title</code>，<code>value</code>， <code>tapHandler</code>， <code>valuePending</code> 四个属性。</p>
<ul>
<li>title: 左边的文字</li>
<li>value: 右边的文字</li>
<li>tapHandler： 处理这个 item 事件的 closure</li>
<li>valuePending： 左边转菊花的indicator，是一个 bool 类型的属性。</li>
</ul>
<p>在上面的代码里，我用 <code>self.pushConfigurationViewController(list)</code> 这行代码push 到了另外的界面，用来让用户选择他们要把消息分享到的具体分组。这个操作是在 Facebook 的 share extension 中看见的。在实际中，我们也可以这样做其他很多的事情。</p>
<blockquote>
<p>需要注意的是，推出来的 Controller 需要设置背景为clear，cell 也要设置背景为 clear 这是为了保证界面跟系统统一（模糊效果）。</p>
</blockquote>
<p>然后就是要把用户选择的内容分享出去了。</p>
<h4 id="通过-Share-Extension-分享内容"><a href="#通过-Share-Extension-分享内容" class="headerlink" title="通过 Share Extension 分享内容"></a>通过 Share Extension 分享内容</h4><p>要将内容分享出去，需要解决几个问题。</p>
<ul>
<li>用户信息</li>
<li>获取分享的内容</li>
</ul>
<p>因为 App Extension 和主 App 是两个不同的 Target， 这就需要我们在这个获取到主 app 中用户的登录信息。至少需要知道我们要把内容分享到哪个用户的数据流中吧。</p>
<p>这个其实也是很简单的事情。在 Today 中我们已经知道了 App Groups 这个东西。也知道了如何共享部分代码。</p>
<p>所以在 Share Extension 中</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">fetchUserInfomation</span><span class="params">()</span></span> -&gt; <span class="type">String</span>? &#123;</div><div class="line">    <span class="keyword">let</span> userdefault = <span class="type">UserDefaults</span>.<span class="keyword">init</span>(suiteName: <span class="string">"group.sunny.com"</span>)</div><div class="line">    <span class="keyword">let</span> info = userdefault?.value(forKey: <span class="string">"userInformation"</span>) <span class="keyword">as</span>? [<span class="type">String</span>: <span class="type">String</span>]</div><div class="line">    <span class="keyword">return</span> info?[<span class="string">"token"</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后在主app 中</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> userdefault = <span class="type">UserDefaults</span>(suiteName: <span class="string">"group.sunny.com"</span>)</div><div class="line">userdefault?.<span class="keyword">set</span>([<span class="string">"token"</span>: <span class="string">"this the user token"</span>], forKey: <span class="string">"userInformation"</span>)</div><div class="line">userdefault?.synchronize()</div></pre></td></tr></table></figure>
<p>就实现了数据之间的交换。到这儿，可能会想到另外一个问题。如果没有登录的话需要跳转到主 app 中进行登录操作。这里也没有什么问题通过 openurl 就可以。</p>
<ol>
<li>设置主app 的url type</li>
<li>跳转</li>
</ol>
<p>所以我在 <code>viewDidload</code> 方法中添加了以下代码</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> fetchUserInfomation() == <span class="literal">nil</span> &#123;</div><div class="line">            </div><div class="line">	<span class="keyword">let</span> alert = <span class="type">UIAlertController</span>(title: <span class="string">"还没有登录"</span>, message: <span class="literal">nil</span>, preferredStyle: .alert)</div><div class="line">	alert.addAction(<span class="type">UIAlertAction</span>(title: <span class="string">"取消"</span>, style: .cancel) &#123;<span class="number">_</span> <span class="keyword">in</span></div><div class="line">		<span class="keyword">self</span>.cancel()</div><div class="line">	&#125;)</div><div class="line">	alert.addAction(<span class="type">UIAlertAction</span>(title: <span class="string">"去登录"</span>, style: .<span class="keyword">default</span>) &#123;<span class="number">_</span> <span class="keyword">in</span></div><div class="line">	<span class="keyword">self</span>.extensionContext?.open(<span class="type">NSURL</span>(string: <span class="string">"sunny://action=login"</span>)! <span class="keyword">as</span> <span class="type">URL</span>, completionHandler: &#123; (success) <span class="keyword">in</span></div><div class="line">		<span class="keyword">self</span>.cancel()</div><div class="line">		<span class="built_in">print</span>(success)</div><div class="line">	&#125;)</div><div class="line">&#125;)</div><div class="line">	present(alert, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>判断登录状态，然后弹窗。取消或者去登录。如果选择去登录的话，就通过 openUrl 去打开主 app。</p>
<p>很完美吧！<strong>but it doesn’t work!!!</strong>， 我在 stackoverflow 上找到了些资料。</p>
<ul>
<li><a href="https://stackoverflow.com/questions/24895093/openurl-doesnt-work-in-share-extension">openURL doesn’t work in Share extension</a></li>
<li><a href="https://stackoverflow.com/questions/24297273/openurl-not-work-in-action-extension">openURL not work in Action Extension</a></li>
</ul>
<blockquote>
<p>苹果爸爸只允许 Today Extension 通过 extensionContext 的 openUrl 打开主app</p>
</blockquote>
<p>但是这个需求总是需要实现的。其实还是有解决方法。</p>
<h5 id="方法一-在-Extension-中实现登录操作"><a href="#方法一-在-Extension-中实现登录操作" class="headerlink" title="方法一:  在 Extension 中实现登录操作"></a>方法一:  在 Extension 中实现登录操作</h5><p>这个确实没什么好说的。也是弹出一个 alert，然后输入用户名，密码，登录。完成所有操作。或者是其他什么方案，都可以。这个就不再详细描述了。Share Extension 来实现登录行为，然后 主 app 也能够共享等了状态。这仿佛也是解决了这种问题。</p>
<p>当然，强迫症笔者，还是想通过打开主 app 的方法来解决这个问题。</p>
<h5 id="方法二-另类的-openUrl"><a href="#方法二-另类的-openUrl" class="headerlink" title="方法二: 另类的 openUrl"></a>方法二: 另类的 openUrl</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// For skip compile error.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">openURL</span><span class="params">(<span class="number">_</span> url: URL)</span></span> &#123;</div><div class="line">    <span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">openContainerApp</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> responder: <span class="type">UIResponder</span>? = <span class="keyword">self</span> <span class="keyword">as</span> <span class="type">UIResponder</span></div><div class="line">    <span class="keyword">let</span> selector = #selector(openURL(<span class="number">_</span>:))</div><div class="line">    <span class="keyword">while</span> responder != <span class="literal">nil</span> &#123;</div><div class="line">        <span class="keyword">if</span> responder!.responds(to: selector) &amp;&amp; responder != <span class="keyword">self</span> &#123;</div><div class="line">            responder!.perform(selector, with: <span class="type">URL</span>(string: <span class="string">"sunny://action=login"</span>)!)</div><div class="line">            <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        responder = responder?.next</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当然，上面的两个链接还有一些其他的方法，就不一一列举了。</p>
<p>解决了最开始的用户信息的问题。接下来就是要获取分享的内容这个问题了。在ShareExtension 中，相信已经看见了。需要两个东西，第一个是用户关于这个内容的评论，以及这个内容本身（url、照片等）。关于用户对内容的评论这点其实很简单。</p>
<h5 id="用户评论"><a href="#用户评论" class="headerlink" title="用户评论"></a>用户评论</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Convenience. This returns the current text from the textView.</span></div><div class="line">open <span class="keyword">var</span> contentText: <span class="type">String</span>! &#123; <span class="keyword">get</span> &#125;</div></pre></td></tr></table></figure>
<p>系统提供的这个 api 就能够解决这个问题。</p>
<h5 id="附件内容"><a href="#附件内容" class="headerlink" title="附件内容"></a>附件内容</h5><p>暂且叫做附件内容吧！我也不知道应该怎么叫。这个东西，我们还是看看 <code>extensionContext</code> 这个东西吧！</p>
<p><code>NSExtensionContext</code> 这个类一共暴露了四个api出来。我们看第一个</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// The list of input NSExtensionItems associated with the context. If the context has no input items, this array will be empty.</span></div><div class="line">open <span class="keyword">var</span> inputItems: [<span class="type">Any</span>] &#123; <span class="keyword">get</span> &#125;</div></pre></td></tr></table></figure>
<p>看样子就是这个了。</p>
<blockquote>
<p>看注释内容，突然感觉，apple 的api 也有设计的不是很好的地方，既然注释都明确说了 NSExtensionItems 数组应该不是 Any 的吧😂</p>
</blockquote>
<p>既然这样, 我们再看看 <code>NSExtensionItem</code> 这个类吧！</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// (optional) title for the item</span></div><div class="line"><span class="meta">@NSCopying</span> open <span class="keyword">var</span> attributedTitle: <span class="type">NSAttributedString</span>?</div><div class="line"><span class="comment">// (optional) content text</span></div><div class="line"><span class="meta">@NSCopying</span> open <span class="keyword">var</span> attributedContentText: <span class="type">NSAttributedString</span>?</div><div class="line"><span class="comment">// (optional) Contains images, videos, URLs, etc. This is not meant to be an array of alternate data formats/types, but instead a collection to include in a social media post for example. These items are always typed NSItemProvider.</span></div><div class="line">open <span class="keyword">var</span> attachments: [<span class="type">Any</span>]?</div><div class="line"><span class="comment">// (optional) dictionary of key-value data. The key/value pairs accepted by the service are expected to be specified in the extension's Info.plist. The values of NSExtensionItem's properties will be reflected into the dictionary.</span></div><div class="line">open <span class="keyword">var</span> userInfo: [<span class="type">AnyHashable</span> : <span class="type">Any</span>]?</div></pre></td></tr></table></figure>
<p>注释太复杂了，整理成一个表格就是这样的:</p>
<table>
<thead>
<tr>
<th style="text-align:center">Properties</th>
<th style="text-align:center">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">attributedTitle</td>
<td style="text-align:center">标题 optional</td>
</tr>
<tr>
<td style="text-align:center">attributedContentText</td>
<td style="text-align:center">内容 optional</td>
</tr>
<tr>
<td style="text-align:center">attachments</td>
<td style="text-align:center">所有的附件<code>NSItemProvider</code>组成一个数组 optional</td>
</tr>
<tr>
<td style="text-align:center">userInfo</td>
<td style="text-align:center">一个key－value结构的数据。NSExtensionItem中的属性都会在这个属性中一一映射。注释中讲到的在 info.plist 中要设置的部分会在后面提到</td>
</tr>
</tbody>
</table>
<p> 下面的表格就是 <code>userInfo</code> 中的 key :</p>
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">NSExtensionItemAttributedTitleKey</td>
<td style="text-align:center">标题 的键名</td>
</tr>
<tr>
<td style="text-align:center">NSExtensionItemAttributedContentTextKey</td>
<td style="text-align:center">内容 的键名</td>
</tr>
<tr>
<td style="text-align:center">NSExtensionItemAttachmentsKey</td>
<td style="text-align:center">附件 的键名</td>
</tr>
</tbody>
</table>
<p>上面又提到了 <code>NSItemProvider</code> 这个东西。这相必须就是我们需要的附件了吧！</p>
<table>
<thead>
<tr>
<th>Api</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td>initWithItem:typeIdentifier：</td>
<td>初始化方法，item为附件的数据，typeIdentifier是附件对应的类型标识,对应UTI的描述。</td>
</tr>
<tr>
<td>initWithContentsOfURL:</td>
<td>根据制定的文件路径来初始化。</td>
</tr>
<tr>
<td>registerItemForTypeIdentifier:loadHandler:</td>
<td>为一种资源类型自定义加载过程。这个方法主要针对自定义资源使用，例如自己定义的类或者文件格式等。当调用loadItemForTypeIdentifier:options:completionHandler:方法时就会触发定义的加载过程。</td>
</tr>
<tr>
<td>hasItemConformingToTypeIdentifier:</td>
<td>用于判断是否有typeIdentifier(UTI)所指定的资源存在。存在则返回YES，否则返回NO。该方法结合loadItemForTypeIdentifier:options:completionHandler:使用。</td>
</tr>
<tr>
<td>loadItemForTypeIdentifier:options:completionHandler:</td>
<td>加载typeIdentifier指定的资源。加载是一个异步过程，加载完成后会触发completionHandler。</td>
</tr>
<tr>
<td>loadPreviewImageWithOptions:completionHandler:</td>
<td>加载资源的预览图片。</td>
</tr>
</tbody>
</table>
<p>这时候看看整体的结构：(<a href="http://www.jianshu.com/p/863ce6729455">这个图是在看到的</a>)</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/2017-07-09-5D4D49E7-5087-4D01-B78A-D3BCF979E979.png" alt=""></p>
<p>到这里，应该已经知道了应该怎么做了吧！</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 点击发表的事件</span></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didSelectPost</span><span class="params">()</span></span> &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">self</span>.extensionContext?.inputItems.forEach(&#123; (item) <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(<span class="string">"//////////////////////////"</span>)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> ext = item <span class="keyword">as</span>! <span class="type">NSExtensionItem</span></div><div class="line">        ext.attachments?.forEach(&#123;</div><div class="line">            <span class="keyword">let</span> atta = $<span class="number">0</span> <span class="keyword">as</span>! <span class="type">NSItemProvider</span></div><div class="line">            <span class="built_in">print</span>(atta)</div><div class="line">            <span class="comment">// 分享的是网页</span></div><div class="line">            <span class="keyword">if</span> atta.hasItemConformingToTypeIdentifier(<span class="string">"public.url"</span>) &#123;</div><div class="line">                atta.loadItem(forTypeIdentifier: <span class="string">"public.url"</span>) &#123; (item, error) <span class="keyword">in</span></div><div class="line">                    <span class="built_in">print</span>(<span class="string">"//////////////////////////"</span>)</div><div class="line">                    <span class="built_in">print</span>(item!)</div><div class="line">                &#125;</div><div class="line">                <span class="built_in">print</span>(<span class="string">"//////////////////////////"</span>)</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 分享的是图片</span></div><div class="line">            <span class="keyword">if</span> atta.hasItemConformingToTypeIdentifier(<span class="string">"public.jpeg"</span>) &#123;</div><div class="line">                atta.loadItem(forTypeIdentifier: <span class="string">"public.jpeg"</span>) &#123; (item, error) <span class="keyword">in</span></div><div class="line">                    <span class="built_in">print</span>(<span class="string">"//////////////////////////"</span>)</div><div class="line">                    <span class="built_in">print</span>(item!)</div><div class="line">                &#125;</div><div class="line">                <span class="built_in">print</span>(<span class="string">"//////////////////////////"</span>)</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        <span class="keyword">self</span>.extensionContext!.completeRequest(returningItems: [], completionHandler: <span class="literal">nil</span>)</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码中分别是分享网页和图片两个东西。这一步解决了找到分享的内容的代码。</p>
<p><strong>具体分享的行为可以有两个办法来解决</strong></p>
<ul>
<li>将需要分享的内容功过 apps group 保存，然后在打开主 app 的时候，在主 app 中取出然后发送给sever。</li>
<li>直接在 Share Extension 中分享。</li>
</ul>
<p>这个过程就不再叙述了。</p>
<h4 id="info-plist"><a href="#info-plist" class="headerlink" title="info.plist"></a>info.plist</h4><p>既然说到了 info.plist 中的设置，就再看看这部分是说的什么吧！都是一些很固定的内容，我随便挑两个说说吧！</p>
<table>
<thead>
<tr>
<th>Key</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>NSExtensionActivationSupportsAttachmentsWithMaxCount</td>
<td>附件最大个数</td>
</tr>
<tr>
<td>NSExtensionActivationSupportsAttachmentsWithMinCount</td>
<td>附件最小个数</td>
</tr>
<tr>
<td>NSExtensionActivationSupportsFileWithMaxCount</td>
<td>附件种类限制</td>
</tr>
<tr>
<td>NSExtensionActivationSupportsMovieWithMaxCount</td>
<td>视频个数限制</td>
</tr>
<tr>
<td>NSExtensionActivationSupportsImageWithMaxCount</td>
<td>图片个数限制</td>
</tr>
<tr>
<td>NSExtensionActivationSupportsText</td>
<td>是否支持文本类型</td>
</tr>
<tr>
<td>NSExtensionActivationSupportsWebURLWithMaxCount</td>
<td>web 链接最多限制</td>
</tr>
<tr>
<td>NSExtensionActivationSupportsWebPageWithMaxCount</td>
<td>web 页面最多限制</td>
</tr>
</tbody>
</table>
<p>如果要设置你的 extension 只支持图片，url 什么的。只需要把个数限制写成 0！</p>
<p>但是设置的时候需要注意是将NSExtensionActivationRule 改成 Dictionary 类型并添加：</p>
<ul>
<li>NSExtensionActivationSupportsAttachmentsWithMaxCount</li>
<li>NSExtensionActivationSupportsAttachmentsWithMinCount</li>
<li>NSExtensionActivationSupportsImageWithMaxCount</li>
<li>NSExtensionActivationSupportsMovieWithMaxCount</li>
<li>NSExtensionActivationSupportsWebPageWithMaxCount</li>
<li>NSExtensionActivationSupportsWebURLWithMaxCount</li>
</ul>
<p>这就基本上完成了，我们要在 系统或者 外部 app 中将内容分享到我们自己的 app 中。这好像还是有很大的限制。毕竟如果我们的产品不是像微博qq这样的社交app 的话，这个东西就没什么作用了。</p>
<p><strong>另外注意这个警告</strong></p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/2017-07-09-133823.jpg" alt=""></p>
<h3 id="在自己的app-中调起-Share-Extension"><a href="#在自己的app-中调起-Share-Extension" class="headerlink" title="在自己的app 中调起 Share Extension"></a>在自己的app 中调起 Share Extension</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> activity = <span class="type">UIActivityViewController</span>(activityItems: [<span class="string">"百度"</span>, <span class="type">URL</span>(string: <span class="string">"http://www.baidu.com"</span>)!], applicationActivities: <span class="literal">nil</span>)</div><div class="line"><span class="comment">// 不分享到 airDrop 和 粘贴板</span></div><div class="line">activity.excludedActivityTypes = [.airDrop, .copyToPasteboard]</div><div class="line">present(activity, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</div></pre></td></tr></table></figure>
<p>当然还有 <code>UIActivityViewControllerCompletionHandler</code> 这个东西，来回调分享的结果。</p>
<p><strong>另外一种方法</strong>可以直接调起某个系统的分享。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 判断是否支持 微博</span></div><div class="line">     </div><div class="line">     <span class="keyword">if</span> !<span class="type">SLComposeViewController</span>.isAvailable(forServiceType: <span class="type">SLServiceTypeSinaWeibo</span>) &#123;</div><div class="line">         <span class="comment">// 应该是没有登录的原因, 所以一直不会返回</span></div><div class="line">         <span class="built_in">print</span>(<span class="string">"不可用"</span>)</div><div class="line">         <span class="keyword">return</span></div><div class="line">     &#125;</div><div class="line">     </div><div class="line">     <span class="keyword">let</span> composeVC = <span class="type">SLComposeViewController</span>(forServiceType: <span class="type">SLServiceTypeSinaWeibo</span>)</div><div class="line">     <span class="comment">//        // 添加要分享的图片</span></div><div class="line">     <span class="comment">//        composeVC?.add(UIImage(named: "Nameless"))</span></div><div class="line">     <span class="comment">//        // 添加要分享的文字</span></div><div class="line">     <span class="comment">//        composeVC?.setInitialText("分享到XXX")</span></div><div class="line">     <span class="comment">//        // 添加要分享的url</span></div><div class="line">     <span class="comment">//        composeVC?.add(URL(string: "http://www.baidu.com"))</span></div><div class="line">     <span class="comment">//        // 弹出分享控制器</span></div><div class="line">     <span class="keyword">self</span>.present(composeVC!, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</div><div class="line">     <span class="comment">//        // 监听用户点击事件</span></div><div class="line">     composeVC?.completionHandler = &#123;</div><div class="line">         <span class="keyword">if</span> $<span class="number">0</span> == .done &#123;</div><div class="line">             <span class="type">NSLog</span>(<span class="string">"点击了发送"</span>);</div><div class="line">         &#125; <span class="keyword">else</span> <span class="keyword">if</span> $<span class="number">0</span> == .cancelled &#123;</div><div class="line">             <span class="type">NSLog</span>(<span class="string">"点击了取消"</span>);</div><div class="line">         &#125;</div><div class="line">     &#125;</div></pre></td></tr></table></figure>
<p>这种方式有一个缺陷，就是，这样的分享只能对系统的分享，微信什么的就不能这么做了。</p>
<h3 id="最后的话"><a href="#最后的话" class="headerlink" title="最后的话"></a>最后的话</h3><p>Share Extension 写到这里就差不多了。初步的入门步骤也已经完成了。最后，我看了一下，微信的 Share Extension 做的事情，感觉用他还能做很多的事情。这个也需要在开发中根据实际需求去拓展了，另外还有自定义 UI 等，也是很简单的事情。只是用自己 UIViewController 就好了。这个就不再详细的说了。到此，我能想到的功能，就基本上完成了。如果有更多需求也可以跟我讨论。</p>
<p><a href="https://github.com/CepheusSun/ShareExtension"><strong>demo地址</strong></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Share Extension 使用户在使用其他的app 的时候, 更加方便的将其内容分享出去，像是社会化分享还有上传服务器。比如说， 在一个 app 中有个分享按钮， 用户可以选择其中一个 Share Extension 来发表评论或者内容。&lt;/p&gt;
    
    </summary>
    
      <category term="App Extension" scheme="http://www.CepheusSun.com/categories/App-Extension/"/>
    
    
      <category term="iOS" scheme="http://www.CepheusSun.com/tags/iOS/"/>
    
      <category term="App Extension" scheme="http://www.CepheusSun.com/tags/App-Extension/"/>
    
  </entry>
  
  <entry>
    <title>面向 Extension 开发 🌞 Today Extension</title>
    <link href="http://www.CepheusSun.com/TodayExtension.html"/>
    <id>http://www.CepheusSun.com/TodayExtension.html</id>
    <published>2017-06-30T10:41:38.000Z</published>
    <updated>2017-07-09T13:42:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>app extension 让我们在用户正在使用其他 app 的时候, 拓展我们 app 的功能。</p>
<p>Today Extension 也叫做 widget。 它能够让一些重要的消息更快速的到达你的用户。比如说, 用户可以通过它查看天气，或者股票价格, 查看日程表等等。苹果在官方文档中说到， 一个 widget 应该有以下的特点。</p>
<ul>
<li>确保内容是最新的</li>
<li>响应的用户事件</li>
<li>性能好(在iOS上占用大量内存，系统可能会kill掉这个widget)</li>
</ul>
<a id="more"></a>
<h3 id="创建-Today-Extension"><a href="#创建-Today-Extension" class="headerlink" title="创建 Today Extension"></a>创建 Today Extension</h3><p>Xcode -&gt; File -&gt; New -&gt; Target -&gt; TodayExtension</p>
<p>跟创建一个新的项目一样, 设置创建好之后, 项目中会多一个 Target, 修改Scheme 为你刚刚创建的 Extension 再运行, 就能在 通知中心的 Today 里面看到你刚刚创建的 widget 了, 上面写着“Hello world”</p>
<p>另外 Xcode 给你创建了默认的模版文件。</p>
<ul>
<li>TodayViewController.swift(如果是 OC 对应会是 <code>.h</code> 和 <code>.m</code> 文件)</li>
<li>MainInterface.storyboard</li>
<li>Info.plist</li>
</ul>
<p><strong>注意:</strong> 默认是使用这个 storyboard 作为这个 widget 的入口。如果不需要使用storyboard 可以删除掉这个storyboard并且将Info.plist 中的</p>
<ul>
<li><code>NSExtensionMainStoryboard</code> 改成 <code>NSExtensionPrincipalClass</code></li>
<li><code>MainInterface</code> 改成 <code>TodayViewController</code></li>
</ul>
<h3 id="设置界面"><a href="#设置界面" class="headerlink" title="设置界面"></a>设置界面</h3><p>完成了上面的步骤之后, 不论你是选择用 stroyboard 作为你 widget 的入口, 还是选择用代码来做这件事情。都是一样的。</p>
<blockquote>
<p>由于不知道什么原因, 我在网上看到的文章都是使用代码来做的这件事情。所以在这篇文章以及后面的示例代码中都将使用 Xcode 默认的 storyboard 来做这个 widget 的布局。</p>
</blockquote>
<h3 id="我将解决的问题"><a href="#我将解决的问题" class="headerlink" title="我将解决的问题"></a>我将解决的问题</h3><ul>
<li>在 widget 中打开主 app 并传递参数</li>
<li>widget 和 主 app 共享数据</li>
<li>widget 和 主 app 共用资源</li>
<li>widget 的打开和折叠</li>
</ul>
<h3 id="我遇到的坑"><a href="#我遇到的坑" class="headerlink" title="我遇到的坑"></a>我遇到的坑</h3><p>也没什么坑, 毕竟 Today Extension 并不是什么很难的东西。</p>
<ul>
<li>测试的时候, 由于 widget 和 主app 是两个不同的 target, 所以在传递参数的时候, 在 appdelegate 中打印对应的值没有效果。最开始我还以为是因为设置的 scheme 是 widget 所以在 主 app 中的修改是无效的。但是实际是并不是这样。将参数以 alert 的形式表现出来, 这时候能够发现, 其实主 app 是跑起来了的。</li>
</ul>
<h3 id="先说说我做的准备工作吧"><a href="#先说说我做的准备工作吧" class="headerlink" title="先说说我做的准备工作吧"></a>先说说我做的准备工作吧</h3><p>为了不扯那么多没用的东西。先说说我做了那些跟今天主题没什么关系的事情。</p>
<h4 id="写主app"><a href="#写主app" class="headerlink" title="写主app"></a>写主app</h4><p>在主 app 中我写了一个 UITableView, 并使用 Userdefault 将我要持久化的数据保存下来。然后对应给 Todo list 做了，添加，和删除的功能。</p>
<h4 id="widget"><a href="#widget" class="headerlink" title="widget"></a>widget</h4><p>在 widget 中我也下了同样的一个 UITableView 只有查看的功能。</p>
<h4 id="要做的事情"><a href="#要做的事情" class="headerlink" title="要做的事情"></a>要做的事情</h4><h5 id="widget-和-主-app-共用资源"><a href="#widget-和-主-app-共用资源" class="headerlink" title="widget 和 主 app 共用资源"></a>widget 和 主 app 共用资源</h5><p>widget 和 主app 共享代码和资源。作为一个工程师, 我们在任何事情的时候都要想到高类聚低耦合着句不变的真理。所以我们还是要尽可能的让 widget 和 主 app 共享代码。</p>
<p>主要有两个方案:</p>
<ul>
<li>framework</li>
<li>直接共享</li>
</ul>
<p>framework 的话，就拿 cocoapods 来说吧， 由于 widget 是一个新的target, 所以只需要在 podfile 中对应添加代码就能够在 widget 中使用。</p>
<p>另外一个是 直接共享, 这个就很简单了。我在示例中让主app 和 widget 共享了一张图片，一个 TodoCell 类(包括xib 文件)。我做的唯一的一件事情就是在 Xcode 中选中这个文件，然后在 Xcode右边的 TargetMenberShip 中勾选对应的 target.</p>
<h5 id="widget-和-主-app-共享数据"><a href="#widget-和-主-app-共享数据" class="headerlink" title="widget 和 主 app 共享数据"></a>widget 和 主 app 共享数据</h5><p>严格来说 widget 和 app 是不同的两个 app 了, 他们之间要共享数据的话只能使用 <strong>App Groups</strong> 了。</p>
<p>首先在主 app</p>
<p>target -&gt; capabilities -&gt; app groups</p>
<p>打开 app groups 功能, 点击 <code>+</code> , 设置 id 。如果重复了就改一个。</p>
<p>widget app</p>
<p>target -&gt; capabilities -&gt; app groups</p>
<p>这时候的 group 列表就能够看到对应的 group 了。勾选即可。</p>
<p>这时候已经完成了widget 和 主app共享数据的前提条件。</p>
<p>接下来还需要做的事情, 就是将我们准备工作里面Userdefault相关代码进行调整。</p>
<p>将 <code>UserDefaults.standard</code> 改成 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">UserDefaults(suiteName: &quot;your group id&quot;)</div></pre></td></tr></table></figure>
<p>这样就可以在 widget 中 使用</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> userdefault = <span class="type">UserDefaults</span>(suiteName: <span class="string">"group.com.sunny.group"</span>)</div></pre></td></tr></table></figure>
<p>获得在主 app 中持久化的数据了。关于 app groups 其他的用法，可以继续深入研究。</p>
<h5 id="widget-的折叠和展开"><a href="#widget-的折叠和展开" class="headerlink" title="widget 的折叠和展开"></a>widget 的折叠和展开</h5><p>苹果的官方文档里面明确的说了，widget 的界面是不能滑动的。毕竟 widget 和通知中心的滑动不能冲突啊。</p>
<p>所以有时候我们需要将 widget 折叠起来，毕竟太长的 widget 实在是令人讨厌啊。</p>
<p>主要还是说说iOS10 上怎么做的吧，毕竟没有iOS10 以下的设备。</p>
<p>在 TodayViewController 的 didLoad 中添加</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">        <span class="comment">// iOS10 添加折叠按钮</span></div><div class="line">        <span class="keyword">if</span> #available(iOSApplicationExtension <span class="number">10.0</span>, *) &#123;</div><div class="line">            extensionContext?.widgetLargestAvailableDisplayMode = .expanded</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="comment">// iOS8 、iOS9 上需要自己添加折叠按钮</span></div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>然后实现 <code>NCWidgetProviding</code> 协议中的方法</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">widgetActiveDisplayModeDidChange</span><span class="params">(<span class="number">_</span> activeDisplayMode: NCWidgetDisplayMode, withMaximumSize maxSize: CGSize)</span></span> &#123;</div><div class="line"><span class="comment">// 由于 iOS8 、iOS9 上没有这个代理。需要对自己添加的按钮设置 target-action 然后进行修改</span></div><div class="line">        <span class="keyword">switch</span> activeDisplayMode &#123;</div><div class="line">        <span class="keyword">case</span> .compact:</div><div class="line">            preferredContentSize = maxSize</div><div class="line">        <span class="keyword">case</span> .expanded:</div><div class="line">            preferredContentSize = <span class="type">CGSize</span>(width: <span class="number">0.0</span>, height: <span class="number">60</span> * <span class="type">CGFloat</span>(dataSource.<span class="built_in">count</span>))</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>在 iOS8 和 iOS9 中, 由于系统没有这个功能。我们只能自己写一个按钮然后再来做这些事情了。</p>
<h5 id="widget-打开-主app"><a href="#widget-打开-主app" class="headerlink" title="widget 打开 主app"></a>widget 打开 主app</h5><p>widget 打开主 app 还是老思路，openurl 就可以了，然后在url 中添加对应需要的参数。</p>
<p><strong>准备工作</strong> </p>
<p>主app -&gt; target -&gt; info -&gt; UrlTypes </p>
<p>添加一个 URlType 然后设置 URL Scheme 为你自定义的字符串。 比如 “sunny”。</p>
<p>在 widget 中需要跳转的地方写这样的代码</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">self</span>.extensionContext?.open(<span class="type">NSURL</span>(string: <span class="string">"sunny://action=<span class="subst">\(dataSource[indexPath.row])</span>"</span>)</div></pre></td></tr></table></figure>
<p>参数传递也就是按照上文, 在url中拼接了。上文有提到, widget 和 app 可以共享数据。这也可能是一种传递参数的方式。</p>
<p>这个时候打开主要 app 就是直接进入主要界面了。如果我们需要做一些其他的事情应该怎么做呢？</p>
<p>想想以前做微信或者支付宝支付的时候， 都要在 appdelegate 中写一些代码。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(<span class="number">_</span> app: UIApplication, open url: URL, options: [UIApplicationOpenURLOptionsKey : Any] = [:])</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">let</span> <span class="keyword">prefix</span> = <span class="string">"sunny://"</span><span class="comment">// 判断是否是可靠的地方传递过来的</span></div><div class="line">    <span class="keyword">if</span> url.absoluteString.hasPrefix(<span class="keyword">prefix</span>) &#123;</div><div class="line">    <span class="comment">// 参数过来了！ 做对应的事情</span></div><div class="line">        <span class="keyword">let</span> a = <span class="type">UIAlertController</span>(title: url.absoluteString, message: <span class="literal">nil</span>, preferredStyle: .alert)</div><div class="line">        a.addAction(<span class="type">UIAlertAction</span>(title: <span class="string">"取消"</span>, style: .cancel, handler: <span class="literal">nil</span>))</div><div class="line">        <span class="keyword">self</span>.window?.rootViewController?.present(a, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="others"><a href="#others" class="headerlink" title="others"></a>others</h4><h5 id="高度"><a href="#高度" class="headerlink" title="高度"></a>高度</h5><p>widget的默认高度是有限制的。</p>
<p>compact 下:</p>
<ul>
<li>max = 110</li>
<li>mim = 110</li>
</ul>
<p>expanded 下:</p>
<ul>
<li>min = 110</li>
<li>max = 根据不同的机型二不同。</li>
</ul>
<p>无论怎么设置, 都不回超出这个范围</p>
<h5 id="widgetPerformUpdate"><a href="#widgetPerformUpdate" class="headerlink" title="widgetPerformUpdate"></a>widgetPerformUpdate</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">func widgetPerformUpdate(completionHandler: (@escaping (NCUpdateResult) -&gt; Void)) &#123;</div><div class="line">    // Perform any setup necessary in order to update the view.</div><div class="line">    </div><div class="line">    // If an error is encountered, use NCUpdateResult.Failed</div><div class="line">    // If there&apos;s no update required, use NCUpdateResult.NoData</div><div class="line">    // If there&apos;s an update, use NCUpdateResult.NewData</div><div class="line">    </div><div class="line">    completionHandler(NCUpdateResult.newData)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个方法用来选择 widget 再出现的时候会不会重新刷新。</p>
<h5 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h5><p><del>在 <code>NSExtensionContext</code> 中看到的几个通知貌似不是给 TodayExtension 用的。</del></p>
<p><code>NSExtensionContext</code> 中能看到几个通知他们都是监听 host app 的状态的。所以对于widget 来说， host app 就是 Today 这个东西啦。</p>
<h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>抛砖引玉，本文用Today Extension做了一个很简单的功能。 当然, 我们能用他做的事情可不止这些。这就需要我们发动我们的聪明才智了。</p>
<p><a href="https://github.com/CepheusSun/TodayExtension">示例代码下载链接</a>由于使用swift写的, 由于众所周知的原因, 你发现编译不过了。可以联系我, 我将做适配。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;app extension 让我们在用户正在使用其他 app 的时候, 拓展我们 app 的功能。&lt;/p&gt;
&lt;p&gt;Today Extension 也叫做 widget。 它能够让一些重要的消息更快速的到达你的用户。比如说, 用户可以通过它查看天气，或者股票价格, 查看日程表等等。苹果在官方文档中说到， 一个 widget 应该有以下的特点。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确保内容是最新的&lt;/li&gt;
&lt;li&gt;响应的用户事件&lt;/li&gt;
&lt;li&gt;性能好(在iOS上占用大量内存，系统可能会kill掉这个widget)&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="App Extension" scheme="http://www.CepheusSun.com/categories/App-Extension/"/>
    
    
      <category term="iOS" scheme="http://www.CepheusSun.com/tags/iOS/"/>
    
      <category term="App Extension" scheme="http://www.CepheusSun.com/tags/App-Extension/"/>
    
  </entry>
  
  <entry>
    <title>Handing non-optional optionals in Swift</title>
    <link href="http://www.CepheusSun.com/Handing%20non-optional%20optionals%20in%20Swift.html"/>
    <id>http://www.CepheusSun.com/Handing non-optional optionals in Swift.html</id>
    <published>2017-06-09T02:05:23.000Z</published>
    <updated>2017-06-09T02:22:15.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>optional</strong>, 可以说是 Swift 中最为重要的特性, 也是它跟 <code>Objective-C</code> 不同的关键特征。在编码的时候强制处理那些可能为空的值, 可以让程序更具有可预测性, 减少错误发生的机会。</p>
<p>然而在开发中我们经常会遇到一些变量, 明明是 <code>optional</code> 的, 但在逻辑又一定是非空的。比如说 <code>controller</code> 中的 <code>view</code></p>
<a id="more"></a>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ViewModel</span></span>&#123;&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TableViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> tableView: <span class="type">UITableView</span>?</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        tableView = <span class="type">UITableView</span>.<span class="keyword">init</span>(frame: view.bounds)</div><div class="line">        view.addSubview(tableView!)</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">viewModelDidUpdate</span><span class="params">(<span class="number">_</span> viewModel: ViewModel)</span></span> &#123;</div><div class="line">        tableView?.reloadData()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如何处理这种情况在 <code>Swift</code> 程序员之间的争议, 就使用 <code>tab</code> 还是 <code>space</code>来缩进一样。</p>
<blockquote>
<p>既然是可选类型, 我们就应该正确的使用它。 使用<code>if let</code> 或者 <code>guard</code></p>
</blockquote>
<p>也有人持有相反的态度: </p>
<blockquote>
<p>既然都知道这个变量非空, 那就强制解包。就算崩溃也不能让程序进入不可控的状态。</p>
</blockquote>
<p>上面的讨论基本上都是围绕着<strong>是否有必要进行防御性编程</strong>展开的。应该让程序从未定义的状态中恢复, 还是应该让程序直接崩溃。</p>
<p>如果非要回答这个问题, 我可能会选择后者。未定义的状态会导致很难追踪的 bug, 可能会执行不必要的代码。而且防御性的代码往往也很难维护。</p>
<p>但是我觉得, 研究一些避免出现这种情况的技巧更实在一些。</p>
<h3 id="Is-it-really-optional"><a href="#Is-it-really-optional" class="headerlink" title="Is it really optional?"></a>Is it really optional?</h3><p>变量和属性是不是可选取决于你代码的逻辑。如果在设计程序的时候, 根本就没有想过这个变量会是 <code>nil</code>。或者说在设计之初, 这个变量就不会出现为空的情况。这个变量就不应该是 <code>optional</code> </p>
<p>即使在和一些系统 API 交互的时候, 可选类型基本上都是无法避免的。但是也有一些办法让我们尽可能的避免使用 <code>optional</code> 类型。</p>
<h3 id="Being-lazy-is-better-than-being-non-optionally-optional"><a href="#Being-lazy-is-better-than-being-non-optionally-optional" class="headerlink" title="Being lazy is better than being non-optionally optional"></a>Being lazy is better than being non-optionally optional</h3><p>对于一个对象来说, 如果它的属性会在这个对象初始化之后赋值。比如说 <code>UIController</code> 上面的 <code>View</code> 应该在 <code>viewDidLoad()</code> 中初始化。就可以使用 <code>lazy</code> 属性。一个懒加载属性是不可空的, 即使他在这个对象的初始化方法中没有被赋值。因为在第一次访问的时候, 它就会被初始化出来。</p>
<p>我们来更新一下刚才的代码。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ViewModel</span></span>&#123;&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TableViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> tableView = <span class="type">UITableView</span>()</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        tableView = <span class="type">UITableView</span>.<span class="keyword">init</span>(frame: view.bounds)</div><div class="line">        view.addSubview(tableView)</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">viewModelDidUpdate</span><span class="params">(<span class="number">_</span> viewModel: ViewModel)</span></span> &#123;</div><div class="line">        tableView.reloadData()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>没有可空类型了。🎉</p>
<h3 id="Proper-dependency-management-is-better-than-non-optional-optionals"><a href="#Proper-dependency-management-is-better-than-non-optional-optionals" class="headerlink" title="Proper dependency management is better than non-optional optionals"></a>Proper dependency management is better than non-optional optionals</h3><p>为了打破循环依赖我们也经常会使用可选类型。比如：在A、B两个类互相依赖的时候: </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comment</span> </span>&#123;</div><div class="line">    <span class="keyword">init</span>(text: <span class="type">String</span>) &#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserManager</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">weak</span> <span class="keyword">var</span> commentManager: <span class="type">CommentManager</span>?</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">userDidpostComment</span><span class="params">(<span class="number">_</span> comment: Comment)</span></span> &#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">logOutCurrentUser</span><span class="params">()</span></span> &#123;</div><div class="line">        commentManager?.clearCache()</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommentManager</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">weak</span> <span class="keyword">var</span> userManager: <span class="type">UserManager</span>?</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">composer</span><span class="params">(<span class="number">_</span> composer: Comment)</span></span> &#123;</div><div class="line">        userManager?.userDidpostComment(composer)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">clearCache</span><span class="params">()</span></span> &#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看上面的代码我们可以发现一个很明显的循环引用 <code>UserManager</code> - <code>CommentManager</code> 任何一个都没有持有另外一个, 但是它们也依赖另外一个来完成自己的业务逻辑。😅</p>
<p>解决这样的问题, 我们可以让 <code>CommentComposer</code> 来做为中间人。 他来通知 <code>UserManger</code> 还有 <code>CommentManager</code> 一条评论消息产生了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommentComposer</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">let</span> commentManager: <span class="type">CommentManager</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">let</span> userManager: <span class="type">UserManager</span></div><div class="line">    <span class="keyword">private</span> <span class="built_in">lazy</span> <span class="keyword">var</span> textView = <span class="type">UITextView</span>()</div><div class="line">    </div><div class="line">    <span class="keyword">init</span>(commentManager: <span class="type">CommentManager</span>,</div><div class="line">         userManager: <span class="type">UserManager</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.commentManager = commentManager</div><div class="line">        <span class="keyword">self</span>.userManager = userManager</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">postComment</span><span class="params">()</span></span>  &#123;</div><div class="line">        <span class="keyword">let</span> comment = <span class="type">Comment</span>(text: textView.text)</div><div class="line">        commentManager.composer(comment)</div><div class="line">        userManager.userDidpostComment(comment)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样的话 <code>UserManager</code> 就可以强引用 <code>CommentManager</code> 了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserManager</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">let</span> commentManager: <span class="type">CommentManager</span></div><div class="line">    </div><div class="line">    <span class="keyword">init</span>(commentManager: <span class="type">CommentManager</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.commentManager = commentManager</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">userDidpostComment</span><span class="params">(<span class="number">_</span> comment: Comment)</span></span> &#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">logOutCurrentUser</span><span class="params">()</span></span> &#123;</div><div class="line">        commentManager.clearCache()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>optional</code> 也消失了🎉</p>
<h3 id="Crashing-gracefully"><a href="#Crashing-gracefully" class="headerlink" title="Crashing gracefully"></a>Crashing gracefully</h3><p>上面的例子中，我们看到了两个通过调整我们的代码, 来控制代码中的不确定性。但是在有些情况下这么做是不可能的。我们来假设一下, 你正在加载一个包含了你程序的配置信息的 JSON 文件。这就天然的存在一些可能会出错的情况。此时需要做的就是尽可能的错误处理。</p>
<p>拿到了错误的配置文件, 如果继续往下执行的话, 程序进入我们没有定义的状态中。这种情况下, 最好的办法是让程序崩溃, 然后 QA 中, 通过日志, 将这个问题解决掉。</p>
<p>那么我们应该怎么来让程序崩溃呢。最简单的办法就是使用 <code>!</code> 操作符。当这个变量为空的时候强制解包, 就会导致程序崩溃。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> configuration = loadConfiguration()!</div></pre></td></tr></table></figure>
<p>虽然这种方法很简单, 但是它也有很大的缺点。如果这个代码 crash。 我们得到的日志是这样的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fatal error: unexpectedly found nil while unwrapping an Optional value</div></pre></td></tr></table></figure>
<p>没有错误原因, 也没有错误发生的地点。这样的错误信息基本上没有什么能够让我们迅速的解决这个 bug 的信息。</p>
<p>更好的方法是在 <code>guard</code> 表达式中使用 <code>preconditionFailure()</code> 函数让程序发生崩溃, 抛出自定义的错误信息。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">guard</span> <span class="keyword">let</span> configuration = loadConfiguration() <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">preconditionFailure</span>(<span class="string">"Configuration couldn't be loaded + verifu that Config.JSON is valid"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样的话, 在程序崩溃的时候我们就能得到有用的信息了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fatal error: <span class="type">Configuration</span> couldn’t be loaded. <span class="type">Verify</span> that <span class="type">Config</span>.<span class="type">JSON</span> <span class="keyword">is</span> valid.: file /<span class="type">Users</span>/<span class="type">John</span>/<span class="type">AmazingApp</span>/<span class="type">Sources</span>/<span class="type">AppDelegate</span>.swift, line <span class="number">17</span></div></pre></td></tr></table></figure>
<h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>处理不可空的可选类型有一下几个方法:</p>
<ol>
<li>用懒加载属性, 替代不可空的可选类型。</li>
<li>适当的依赖管理, 替代不可空的可选类型。</li>
<li>在遇到这种情况的时候, 让程序崩溃, 并抛出异常。</li>
</ol>
<h3 id="That’s-it"><a href="#That’s-it" class="headerlink" title="That’s it!"></a>That’s it!</h3><p><a href="https://medium.com/@johnsundell/handling-non-optional-optionals-in-swift-e5706390f56f">原文地址</a></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>我是一名来自中国的 iOS 程序员, 对技术有着浓厚的兴趣, 在学习的过程中, 发现了很多来自国外的优秀博客。为了更好的学习这些文章, 产生了将这些文章翻译成中文的想法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;optional&lt;/strong&gt;, 可以说是 Swift 中最为重要的特性, 也是它跟 &lt;code&gt;Objective-C&lt;/code&gt; 不同的关键特征。在编码的时候强制处理那些可能为空的值, 可以让程序更具有可预测性, 减少错误发生的机会。&lt;/p&gt;
&lt;p&gt;然而在开发中我们经常会遇到一些变量, 明明是 &lt;code&gt;optional&lt;/code&gt; 的, 但在逻辑又一定是非空的。比如说 &lt;code&gt;controller&lt;/code&gt; 中的 &lt;code&gt;view&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Swift" scheme="http://www.CepheusSun.com/categories/Swift/"/>
    
    
      <category term="iOS" scheme="http://www.CepheusSun.com/tags/iOS/"/>
    
      <category term="Swift" scheme="http://www.CepheusSun.com/tags/Swift/"/>
    
      <category term="翻译" scheme="http://www.CepheusSun.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>Swifty Tips ⚡️</title>
    <link href="http://www.CepheusSun.com/Swifty%20Tips.html"/>
    <id>http://www.CepheusSun.com/Swifty Tips.html</id>
    <published>2017-05-29T16:05:23.000Z</published>
    <updated>2017-05-29T17:23:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>Swift 开发中的一些小的技巧</p>
<p>刚开始的时候, 特别好奇大厂是怎么搞的, 他们的项目长什么样子, 他们用哪些库…想在巨人的肩膀上开发, 免得浪费时间在那些已经有很好解决方案的事情上。</p>
<p>四年前，我和团队中很多很厉害的人讨论过一些编程实践。今天就分享一些东西吧。</p>
<p>欢迎指正！🚀</p>
<a id="more"></a>
<h2 id="滥用引用类型"><a href="#滥用引用类型" class="headerlink" title="滥用引用类型"></a>滥用引用类型</h2><p>只有“动态”对象才使用引用类型。这里的“动态”对象是什么呢？看下面的代码:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Car</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> model: <span class="type">String</span></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CarManager</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span>(<span class="keyword">set</span>) <span class="keyword">var</span> cars: [<span class="type">Car</span>]</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">fetchCars</span><span class="params">()</span></span> &#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">registerCar</span><span class="params">(<span class="number">_</span> car: Car)</span></span> &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>🚗 在这里只是一个值。他代表的就是一些数据。就像 <code>1</code>、<code>2</code>、<code>3</code>。 这种数据是“静态”的数据(死的)。 它不会处理任何东西, 所以它也没有必要是“动态”的, 也就是说, 没必要把它定义成引用类型。</p>
<p><strong>另一方面:</strong></p>
<p><code>CarManager</code> 就需要是一个“动态”的对象。因为这个对象会发起网络请求, 然后将请求结果保存起来。在值类型对象中是不能执行异步任务的, 因为他们是“静态”的数据。我们需要的 <code>CarManager</code> 对象在一定的范围内是应该是动态的, 他会请求数据, 也会注册新的 <code>Car</code>。</p>
<p>这个主题完全可以写一篇文章来深入。推荐看看 <a href="https://news.realm.io/news/andy-matuschak-controlling-complexity/">Andy Matuschak 的文章</a>, 和 <a href="https://developer.apple.com/videos/play/wwdc2015/414/">WWDC</a></p>
<h2 id="隐式解包可选类型"><a href="#隐式解包可选类型" class="headerlink" title="隐式解包可选类型(!)"></a>隐式解包可选类型(<code>!</code>)</h2><p>默认不要隐式解包可选类型。 在大多数场景中你都可能会忘掉这件事情。但是在一些特殊情况下应该这样做来减少编译器的压力。而且我们也需要去理解这件事情背后的逻辑。</p>
<p>基本上, 如果这个属性在初始化的过程中必须为 <code>nil</code> 但是之后就会被赋值,  就可以定义这个属性为 optional。因为你肯定不会在赋值之前访问这个属性, 如果编译器一直警告这个值可能为 <code>nil</code> 真的挺讨厌的。</p>
<p>看看xib中拖出来的属性:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeView</span>: <span class="title">UIView</span> </span>&#123;</div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">let</span> nameLabel: <span class="type">UILabel</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果这样定义的话, 编译器就会让你在初始化方法中给<code>nameLabel</code>赋值。因为这行代码告诉编译器这个 <code>View</code> 无论什么时候都有 <code>nameLabel</code>。 但是, 有病啊！肯定不能这么干啊。因为其实在 <code>initWithCoder</code> 中已经帮我们实现了 <code>xib</code> 中的 <code>label</code> 和这个属性之间的关联。明白了吗？ 这个值永远都不可能为空, 就没有必要判断这个东西是不是存在了。所以也不需要去赋值了啊。</p>
<blockquote>
<p>你:这玩意儿肯定不可能是空, 别瞎几把报错了<br>编译器: 好的!</p>
</blockquote>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeView</span>: <span class="title">UIView</span> </span>&#123;</div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">var</span> nameLabel: <span class="type">UILabel</span>!</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Q:</strong> 在dequeue一个tableviewCell 的时候能不能(<code>!</code>)?<br><strong>A:</strong> 还是不要吧！至少给一个 Crash 啊</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">guard</span> <span class="keyword">let</span> cell = tableView.dequeueCell(...) <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">fatalError</span>(<span class="string">"Cannot dequeue cell with identifier <span class="subst">\(cellID)</span>"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="滥用-AppDelegate"><a href="#滥用-AppDelegate" class="headerlink" title="滥用 AppDelegate"></a>滥用 AppDelegate</h2><p><code>AppDelegate</code> 不是拿来给你做保存全局变量的容器的(全局属性、工具方法、管理类等等。)他只是一个用来实现一些协议的类而已。放过它吧！</p>
<p>在 <code>applicationDidFinishLaunching</code> 方法里肯定都会做一些很重要的事情, 但是当项目不断变大的时候这种情况很容易变的很恐怖。创建新的类(文件)来做这些事情吧！</p>
<p><strong>👎 Don’t:</strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> persistentStoreCoordinator: <span class="type">NSPersistentStoreCoordinator</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">rgb</span><span class="params">(r: CGFloat, g: CGFloat, b: CGFloat)</span></span> -&gt; <span class="type">UIColor</span> &#123; ... &#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">appDidFinishLaunching</span>... </span>&#123;</div><div class="line">    <span class="type">Firebase</span>.setup(<span class="string">"3KDSF-234JDF-234D"</span>)</div><div class="line">    <span class="type">Firebase</span>.logLevel = .verbose</div><div class="line">    <span class="type">AnotherSDK</span>.start()</div><div class="line">    <span class="type">AnotherSDK</span>.enableSomething()</div><div class="line">    <span class="type">AnotherSDK</span>.disableSomething()</div><div class="line">    <span class="type">AnotherSDK</span>.anotherConfiguration()</div><div class="line">    persistentStoreCoordinator = ...</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>👍 Do:</strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">appDidFinishLaunching</span>... </span>&#123;</div><div class="line">    <span class="type">DependencyManager</span>.configure()</div><div class="line">    <span class="type">CoreDataStack</span>.setup()</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h2><p>给一个方法的某些参数设置默认值是非常方便的事情。如果没有这个特性的话, 可能就需要给同一个功能写好几个方法了。像下面一样:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">print</span><span class="params">(<span class="number">_</span> string: String, options: String?)</span></span> &#123; ... &#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">print</span><span class="params">(<span class="number">_</span> string: String)</span></span> &#123;</div><div class="line">  <span class="built_in">print</span>(string, options: <span class="literal">nil</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果有默认参数值, 就可以是这样的:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">print</span><span class="params">(<span class="number">_</span> string: String, options: String? = <span class="literal">nil</span>)</span></span> &#123;...&#125;</div></pre></td></tr></table></figure>
<p>很简单对吧！ 给自定义 UI 组件设置默认颜色、提供默认的参数、给网络请求添加默认的超时时间等等。但是, 使用这个语法糖在遇到依赖注入的时候就要小心了。</p>
<p>看下面的例子:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TicketsViewModel</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> service: <span class="type">TicketService</span></div><div class="line">    <span class="keyword">let</span> database: <span class="type">TicketDatabase</span></div><div class="line">    <span class="keyword">init</span>(service: <span class="type">TicketService</span>,</div><div class="line">       database: <span class="type">TicketDatabase</span>) &#123; ... &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 App target:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> model = <span class="type">TicketsViewModel</span>(</div><div class="line">  service: <span class="type">LiveTicketService</span>()</div><div class="line">  database: <span class="type">LiveTicketDatabase</span>()</div><div class="line">)</div></pre></td></tr></table></figure>
<p>在 Test target:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> model = <span class="type">TicketsViewModel</span>(</div><div class="line">    service: <span class="type">MockTicketService</span>()</div><div class="line">    database: <span class="type">MockTicketDatabase</span>()</div><div class="line">)</div></pre></td></tr></table></figure>
<p>在这里使用协议的原因就是把这些功能从具体的类中抽象出来。这就使得你可以向这个 <code>viewModel</code> 中注入任何你想要的具体实现。 如果这里你把 <code>LiveTicketService</code> 作为默认的参数, 这就使得<code>TicketsViewModel</code> 依赖了 <code>LiveTicketService</code>这么一个具体的类型。这跟最初想要达到的目的有了一些冲突。</p>
<p><strong>现在没那么方便了吧？</strong></p>
<p>想象一下在你 App 还有 Test 两个 target 中。 <code>TicketsViewModel</code> 会被同时添加到两个 target 中, 然后把 <code>LiveTicketService</code> 和 <code>MockTicketService</code> 分别添加。如果 <code>TicketsViewModel</code>添加了对 <code>LiveTicketService</code> 的依赖。 Test target 肯定就编译不过了。</p>
<h2 id="可变参数函数"><a href="#可变参数函数" class="headerlink" title="可变参数函数"></a>可变参数函数</h2><p>这… 就是很爽啊！</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(<span class="number">_</span> numbers: Int...)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">return</span> numbers.<span class="built_in">reduce</span>(<span class="number">0</span>, +)</div><div class="line">&#125;</div><div class="line">sum(<span class="number">1</span>,<span class="number">2</span>)      <span class="comment">// 3</span></div><div class="line">sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)    <span class="comment">// 6</span></div><div class="line">sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)  <span class="comment">// 10</span></div></pre></td></tr></table></figure>
<h2 id="使用类型嵌套"><a href="#使用类型嵌套" class="headerlink" title="使用类型嵌套"></a>使用类型嵌套</h2><p>Swift 支持内部类。所以有用就可以这么做：</p>
<p><strong>👎 Don’t:</strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">PhotoCollectionViewCellStyle</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> <span class="keyword">default</span></div><div class="line">    <span class="keyword">case</span> photoOnly</div><div class="line">    <span class="keyword">case</span> photoAndDescription</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个枚举可能在 <code>PhotoCollectionViewCell</code> 之外就不会再使用到了。没理由把这个枚举声明成全局的。</p>
<p><strong>👍 Do:</strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhotoCollectionViewCell</span> </span>&#123;</div><div class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Style</span> </span>&#123;</div><div class="line">        <span class="keyword">case</span> <span class="keyword">default</span></div><div class="line">        <span class="keyword">case</span> photoOnly</div><div class="line">        <span class="keyword">case</span> photoAndDescription</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">let</span> style: <span class="type">Style</span> = .<span class="keyword">default</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这很容易理解, 毕竟 <code>Style</code> 本来就是用来标记 <code>PhotoCollectionViewCell</code> 的。而且还少了23个字符呢。</p>
<h2 id="使用-final-关键字-🏁"><a href="#使用-final-关键字-🏁" class="headerlink" title="使用 final 关键字 🏁"></a>使用 final 关键字 🏁</h2><p>如果你不需要拓展某些类, 也不希望这些类被拓展, 使用 <code>final</code> 修饰它。不用担心犯错, 比如 <code>PhotoCollectionViewCell</code> 这个类, 你还有可能继承它吗？</p>
<p>而且:<strong>这么做可以节约编译时间。</strong></p>
<h2 id="给常量命名空间"><a href="#给常量命名空间" class="headerlink" title="给常量命名空间"></a>给常量命名空间</h2><p>在 OC 中是通过在全局的常量前面加 <code>PFX</code> 或者 <code>k</code> 来给这些常量命名空间的。但是 Swift 可不这样。</p>
<p><strong>👎 Don’t:</strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> ket kAnimationDuration: <span class="type">TimeInterval</span> = <span class="number">0.3</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">let</span> kLowAlpha = <span class="number">0.2</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">let</span> kAPIKey = <span class="string">"13511-5234-5234-59234"</span></div></pre></td></tr></table></figure>
<p><strong>👍 Do:</strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Constant</span> </span>&#123;</div><div class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">UI</span> </span>&#123;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">let</span> animationDuration: <span class="type">TimeInterval</span> = <span class="number">0.3</span></div><div class="line">        <span class="keyword">static</span> <span class="keyword">let</span> lowAlpha: <span class="type">CGFloat</span> = <span class="number">0.2</span>  </div><div class="line">    &#125;</div><div class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Analytics</span> </span>&#123;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">let</span> apiKey = <span class="string">"13511-5234-5234-59234"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我个人的偏好是使用 <code>C</code> 来代替 <code>Constant</code>, 他已经够清晰了。这个可以看你自己喜欢了。</p>
<p><strong>Before:</strong> <code>kAnimationDuration</code> 或者 <code>kAnalyticsAPIKey</code><br><strong>After:</strong> <code>C.UI.animationDuration</code> 或者 <code>C.Analytics.apiKey</code></p>
<h2 id="的使用"><a href="#的使用" class="headerlink" title="_ 的使用"></a><code>_</code> 的使用</h2><p><code>_</code> 是对没有使用到的变量的占位符。他就是告诉编译器”这个值是什么不重要”。 不然编译器会有警告⚠️。</p>
<p><strong>👎 Don’t</strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> <span class="number">_</span> = name &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Name is not nil."</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>optional</code>就像一个盒子。可以直接看他是不是空的, 没必要每次都把里面的东西拿出来。</p>
<p><strong>👍 Do:</strong></p>
<ul>
<li>判空</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> name != <span class="literal">nil</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Name is not nil."</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>返回值没用</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">_</span> = manager.removeCar(car) <span class="comment">// 成功返回true</span></div></pre></td></tr></table></figure>
<ul>
<li>ConpletionHandler</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">service.fetchItems &#123;data, error , <span class="number">_</span> <span class="keyword">in</span></div><div class="line">    <span class="comment">// 第三个参数我不在乎他是什么</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="方法命名"><a href="#方法命名" class="headerlink" title="方法命名"></a>方法命名</h2><p>这点适用于所有需要人类去阅读的语言。代码总是不那么容易理解的, 不要浪费别人的精力。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">driver.driving()</div></pre></td></tr></table></figure>
<p>这是在干什么？</p>
<ul>
<li>是把 <code>driver</code> 标记成 <code>driving</code> 状态？</li>
<li>还是检查 <code>driver</code> 是不是 <code>driving</code> 状态, 并且返回一个 <code>bool</code> 值？</li>
</ul>
<p><strong>如果要点进去看才知道这方法是干什么的, 这个命名就是失败了。</strong>多人协同开发或者处理遗留项目的时候, 你读别人代码的时间比你写代码的时间都要长。所以在命名的时候想着别让看你代码的人痛苦。</p>
<h2 id="关于-print"><a href="#关于-print" class="headerlink" title="关于 print"></a>关于 print</h2><p>很严肃的说, 不要得到一个 <code>error</code> 或者 <code>response</code> 就在控制台打印出来。你这么做还不如不打印呢！搞得控制台一堆乱七八糟的东西看起来真的很爽吗？</p>
<p><strong>Do:</strong></p>
<ul>
<li>在 <code>framework</code> 中使用 <code>error</code> 级的 <code>log level</code>。</li>
<li>使用一些能够让你有不同输出级别的 log 库。<em>XGGLogger</em>、<em>SwiftyBeaver</em></li>
<li>不要用 log 来 debug 了。Xcode 有很多有用的工具<a href="https://www.objc.io/issues/19-debugging/debugging-case-study/">Debugging: A Case Study</a></li>
</ul>
<h2 id="没用的代码"><a href="#没用的代码" class="headerlink" title="没用的代码"></a>没用的代码</h2><p>经常在一些老项目里面见到被注释掉的代码, 但是出来没有通过把这些代码打开来解决过问题。所以, 既然这些代码都没有什么用了, 就删了它! 还能增加代码的可读性, 看起来整洁的代码总要让人舒服一些。</p>
<p><strong>最后推荐一个好文<a href="https://medium.com/@gokselkoksal/swifty-tips-%EF%B8%8F-8564553ba3ec">Using SwiftLint and Danger for Swift Best Practices</a></strong></p>
<p><strong><a href="https://medium.com/@gokselkoksal/swifty-tips-%EF%B8%8F-8564553ba3ec">原文地址</a></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Swift 开发中的一些小的技巧&lt;/p&gt;
&lt;p&gt;刚开始的时候, 特别好奇大厂是怎么搞的, 他们的项目长什么样子, 他们用哪些库…想在巨人的肩膀上开发, 免得浪费时间在那些已经有很好解决方案的事情上。&lt;/p&gt;
&lt;p&gt;四年前，我和团队中很多很厉害的人讨论过一些编程实践。今天就分享一些东西吧。&lt;/p&gt;
&lt;p&gt;欢迎指正！🚀&lt;/p&gt;
    
    </summary>
    
      <category term="Swift" scheme="http://www.CepheusSun.com/categories/Swift/"/>
    
    
      <category term="iOS" scheme="http://www.CepheusSun.com/tags/iOS/"/>
    
      <category term="Swift" scheme="http://www.CepheusSun.com/tags/Swift/"/>
    
      <category term="翻译" scheme="http://www.CepheusSun.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>Swift Syntax Cheat Codes</title>
    <link href="http://www.CepheusSun.com/Swift%20Syntax%20Cheat%20Codes.html"/>
    <id>http://www.CepheusSun.com/Swift Syntax Cheat Codes.html</id>
    <published>2017-05-23T16:05:23.000Z</published>
    <updated>2017-05-24T03:24:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章主要介绍一些很常见的语法。</p>
<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">() -&gt; <span class="type">Void</span></div></pre></td></tr></table></figure>
<p>也叫做 <code>匿名函数</code>。闭包是自包含的函数代码块，可以在代码中被传递和使用。在 <code>C</code> 和 <code>OC</code> 中有 <code>block</code> 与之对应。</p>
<p>如果你之前就有 iOS 开发经验, 你肯定看到过 UIView 动画的 API</p>
<a id="more"></a>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">animate</span>(<span class="title">withDuration</span> <span class="title">duration</span>: <span class="title">NSTimeInterval</span>,</div><div class="line"> <span class="title">animations</span>: @<span class="title">escaping</span>() -&gt; <span class="title">Void</span>)</span></div></pre></td></tr></table></figure>
<p><code>animations</code>就是动画的参数。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="type">UIView</span>.animate(withDuration: <span class="number">10.0</span>, animations: &#123;</div><div class="line">    button.alpha = <span class="number">0</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p><code>animationWithDuration</code> 方法就会使用这个闭包做一件事情:让button慢慢的消失。</p>
<h3 id="尾随闭包"><a href="#尾随闭包" class="headerlink" title="尾随闭包"></a>尾随闭包</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="type">UIView</span>.animate(withDuration: <span class="number">10.0</span>) &#123; </div><div class="line">    button.alpha = <span class="number">0</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这是 Swift 的特性之一, 这样可以节省一些没什么必要存在的代码。看这段的代码, 跟上面的代码调用的是同一个 API, 只是这段代码使用了更简洁的语法。</p>
<p>因为 <code>animate</code> 这个方法的最后一个参数是一个闭包—<strong>尾随闭包</strong>。尾随闭包允许我们在编码的时候省略掉最后的参数名, 并让他从参数列表那个括号里面移出来。这样会让代码更优雅简洁。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">say</span><span class="params">(<span class="number">_</span> message: String, completion: @escaping <span class="params">()</span></span></span> -&gt; <span class="type">Void</span>) &#123;</div><div class="line">    <span class="built_in">print</span>(message)</div><div class="line">    completion()</div><div class="line">&#125;</div><div class="line"><span class="comment">// 没有使用尾随闭包</span></div><div class="line">say(<span class="string">"Hello"</span>, completion: &#123;</div><div class="line">    <span class="comment">// prints: "Hello" </span></div><div class="line">    <span class="comment">// Do some other stuff</span></div><div class="line">&#125;)</div><div class="line"><span class="comment">// 使用了尾随闭包</span></div><div class="line">say(<span class="string">"Hello"</span>) &#123;</div><div class="line">    <span class="comment">// prints: "Hello"</span></div><div class="line">    <span class="comment">// Do some other stuff</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typealias</span></div></pre></td></tr></table></figure>
<p>类型别名是一个很有用的小工具, 能尽可能少的减少重复代码。看下面的例子:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">dance</span><span class="params">(<span class="keyword">do</span>:<span class="params">(Int, String, Double)</span></span></span> -&gt; (<span class="type">Int</span>, <span class="type">String</span>, <span class="type">Double</span>)) &#123;&#125;</div></pre></td></tr></table></figure>
<p>这段代码的功能其实很简单, 但是如果在其他方法中也需要传递这个闭包的话, 我们就应该记住这个闭包, 并且保证在任何我们使用它的地方都是一致的, 不然编译器可能就不高兴了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">dance</span><span class="params">(<span class="keyword">do</span>: <span class="params">(Int, String, Double)</span></span></span> -&gt; (<span class="type">Int</span>, <span class="type">String</span>, <span class="type">Double</span>)) &#123; &#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">sing</span><span class="params">(<span class="keyword">do</span>: <span class="params">(Int, String, Double)</span></span></span> -&gt; (<span class="type">Int</span>, <span class="type">String</span>, <span class="type">Double</span>)) &#123; &#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">act</span><span class="params">(<span class="keyword">do</span>: <span class="params">(Int, String, Double)</span></span></span> -&gt; (<span class="type">Int</span>, <span class="type">String</span>, <span class="type">Double</span>)) &#123; &#125;</div></pre></td></tr></table></figure>
<p>但是如果某个时刻我们需要修改一下这个闭包。这就尴尬了, 上面三个方法都需要去修改。 这就是使用<strong>类型别名</strong>的场景。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typealias</span> <span class="type">TripleThreat</span> = (<span class="type">Int</span>, <span class="type">String</span>, <span class="type">Double</span>) -&gt; (<span class="type">Int</span>, <span class="type">String</span>, <span class="type">Double</span>)</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">dance</span><span class="params">(dance: TripleThreat)</span></span> &#123; &#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">act</span><span class="params">(act: TripleThreat)</span></span> &#123; &#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">sing</span><span class="params">(sing: TripleThreat)</span></span> &#123; &#125;</div></pre></td></tr></table></figure>
<p>这样写的话, 只要我们需要修改这个闭包的时候, 就只需要修改一个地方了。</p>
<p><strong>喜闻乐见的类型别名</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">typealias Void = ()</div><div class="line">typealias NSTimeInterval = Double</div></pre></td></tr></table></figure>
<h3 id="参数名缩写"><a href="#参数名缩写" class="headerlink" title="参数名缩写"></a>参数名缩写</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$<span class="number">0</span>,$<span class="number">1</span>,$<span class="number">2</span></div></pre></td></tr></table></figure>
<p>一个闭包内有参数的情况下, 你可以在闭包定义中省略参数列表，并且对应参数名称缩写的类型会 通过函数类型进行推断。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">say</span><span class="params">(<span class="number">_</span> message: String, completion: <span class="params">(<span class="number">_</span> goodbye: String)</span></span></span> -&gt; <span class="type">Void</span>) &#123;</div><div class="line">    <span class="built_in">print</span>(message)</div><div class="line">    completion(<span class="string">"Goodbye"</span>)</div><div class="line">&#125;</div><div class="line">...</div><div class="line">say(<span class="string">"Hi"</span>) &#123; (goodbye: <span class="type">String</span>) -&gt; <span class="type">Void</span> <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(goodbye)</div><div class="line">&#125;</div><div class="line"><span class="comment">// prints: "Hi"</span></div><div class="line"><span class="comment">// prints: "Goodbye"</span></div></pre></td></tr></table></figure>
<p>这个例子中，这个尾随闭包有一个 <code>String</code> 类型的 <code>goodbye</code> 参数。Xcode 会自动把它放在一个元组里面。用 <code>in</code> 来表示参数、返回值的结束。并另起一行来实现我们想要的功能。当这个闭包很小的时候，这样写就显得代码非常的冗长了。我们来改造一下段代码。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(goodbye: <span class="type">String</span>) -&gt; <span class="type">Void</span> <span class="keyword">in</span></div></pre></td></tr></table></figure>
<p>这段代码完全没有必要写出来。使用参数名缩写就好了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">say(<span class="string">"Hi"</span>) &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line"><span class="comment">// prints: "Hi"</span></div><div class="line"><span class="comment">// prints: "Goodbye"</span></div></pre></td></tr></table></figure>
<p>你看, 这样写完全省略掉了闭包的参数还有返回值声明的代码。因为在这个场景中，我们完全没有必要使用参数名。每个参数都按照声明的顺序命名好了。这么简单, 直接放在一行代码里就可以了。</p>
<p>如果有不止一个参数的时候应该怎么弄呢？我也不想解释了, 直接看下面的代码: </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(goodbye: <span class="type">String</span>, name: <span class="type">String</span>, age: <span class="type">Int</span>) -&gt; <span class="type">Void</span> <span class="keyword">in</span></div><div class="line"><span class="comment">// $0: goodbye</span></div><div class="line"><span class="comment">// $1: name</span></div><div class="line"><span class="comment">// $2: age</span></div></pre></td></tr></table></figure>
<h3 id="返回-Self"><a href="#返回-Self" class="headerlink" title="返回 Self"></a>返回 Self</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-&gt; <span class="type">Self</span></div></pre></td></tr></table></figure>
<p>Swift2.0 带来的一大堆操作符(map, flatmap), 这些操作符更给力的是让我们能够使用 <code>.</code> 语法链式的调用一系列方法。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[<span class="number">1</span> , <span class="number">2</span>, <span class="number">3</span>, <span class="literal">nil</span>, <span class="number">5</span>]</div><div class="line">    .flatMap &#123;$<span class="number">0</span>&#125;    <span class="comment">// 移除空</span></div><div class="line">    .<span class="built_in">filter</span> &#123;$<span class="number">0</span> &lt; <span class="number">3</span>&#125; <span class="comment">// 过滤大于2的值</span></div><div class="line">    .<span class="built_in">map</span> &#123;$<span class="number">0</span> * <span class="number">100</span>&#125;  <span class="comment">// 每个值放大100倍</span></div><div class="line"><span class="comment">// [100, 200]</span></div></pre></td></tr></table></figure>
<p>这样太优雅了, 既可读又易于理解。</p>
<p>假设我们为<code>String</code>建一个扩展, 在字符串的本身上执行一些操作, 而不使函数返回 <code>Void</code> 而是他自己.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// extension UIView</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">with</span><span class="params">(backgroundColor: UIColor)</span></span> -&gt; <span class="type">Self</span> &#123;</div><div class="line">    backgroundColor = color</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">with</span><span class="params">(cornerRadius: CGFloat)</span></span> -&gt; <span class="type">Self</span> &#123;</div><div class="line">    layer.cornerRadius = <span class="number">3</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> view = <span class="type">UIView</span>(frame: <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="number">10</span>, height: <span class="number">10</span>))</div><div class="line">          .with(backgroundColor: .black)</div><div class="line">          .with(cornerRadius: <span class="number">3</span>)</div></pre></td></tr></table></figure>
<h3 id="That’s-it"><a href="#That’s-it" class="headerlink" title="That’s it!"></a>That’s it!</h3><p><a href="https://medium.com/swift-programming/swift-syntax-cheat-codes-9ce4ab4bc82e">原文地址</a></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>我是一名来自中国的 iOS 程序员, 对技术有着浓厚的兴趣, 在学习的过程中, 发现了很多来自国外的优秀博客。为了更好的学习这些文章, 产生了将这些文章翻译成中文的想法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章主要介绍一些很常见的语法。&lt;/p&gt;
&lt;h3 id=&quot;闭包&quot;&gt;&lt;a href=&quot;#闭包&quot; class=&quot;headerlink&quot; title=&quot;闭包&quot;&gt;&lt;/a&gt;闭包&lt;/h3&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;() -&amp;gt; &lt;span class=&quot;type&quot;&gt;Void&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;也叫做 &lt;code&gt;匿名函数&lt;/code&gt;。闭包是自包含的函数代码块，可以在代码中被传递和使用。在 &lt;code&gt;C&lt;/code&gt; 和 &lt;code&gt;OC&lt;/code&gt; 中有 &lt;code&gt;block&lt;/code&gt; 与之对应。&lt;/p&gt;
&lt;p&gt;如果你之前就有 iOS 开发经验, 你肯定看到过 UIView 动画的 API&lt;/p&gt;
    
    </summary>
    
      <category term="Swift" scheme="http://www.CepheusSun.com/categories/Swift/"/>
    
    
      <category term="iOS" scheme="http://www.CepheusSun.com/tags/iOS/"/>
    
      <category term="Swift" scheme="http://www.CepheusSun.com/tags/Swift/"/>
    
      <category term="翻译" scheme="http://www.CepheusSun.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>Picking the right way of failing in Swift</title>
    <link href="http://www.CepheusSun.com/Picking%20the%20right%20way%20of%20failing%20in%20Swift.html"/>
    <id>http://www.CepheusSun.com/Picking the right way of failing in Swift.html</id>
    <published>2017-05-20T04:37:45.000Z</published>
    <updated>2017-05-20T04:37:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>Swift 的一大特色就是编译安全。这使得我们开发者能够更容易的编写出可预测性的代码, 并且能勾减少运行时错误的发生。但是, 在实际的情况中, 错误发生的原因是千奇百怪的。</p>
<p>我们今天来看一下如果正确的去处理各类错误, 以及我们有什么工具来做这件事情。上一篇文章研究了如何处理 <code>non-optional</code>。 在那篇文章中我使用 <code>guard</code> + <code>preconditionFailure()</code> 代替了强制解包。</p>
<p>之后很多人都在问 <code>preconditionFailure()</code> 和 <code>assert()</code> 有什么区别。 在这篇文章中。我们再仔细的看看这些语言特性。最重要的是在什么情况下使用哪一种？</p>
<a id="more"></a>
<h3 id="Let’s-start-with-a-list"><a href="#Let’s-start-with-a-list" class="headerlink" title="Let’s start with a list"></a>Let’s start with a list</h3><p>我先把我知道的所有异常处理方法列举出来。</p>
<ul>
<li><strong>返回 <code>nil</code> 或者是一个 error 枚举值</strong>, 最简单的异常处理机制就是直接在发生错误的方法中返回 <code>nil</code> 或者是 <code>.error</code>(使用了一个枚举来做为返回值类型的时候)。这中做法在很多的场景中都是有效的, 但是如果任何情况下都这么干的话。可能会导致你代码中的 API 编的非常繁琐。也会带来一些逻辑的错误。</li>
<li><strong>抛出错误信息</strong>, 这要求在处理潜在的错误是使用<code>do</code>、<code>try</code>、<code>catch</code> 语句。另外如果使用 <code>try？</code>错误会被忽略掉。</li>
<li><strong>使用断言 <code>assert()</code> 和 <code>assertionFailure()</code></strong>, 来确定这个表达式是不是成立。默认情况下, 在 Debug 环境下会导致异常的抛出。在 release 下一场会被忽略。所以无法保证这个断言在出发的时候, 程序会立马停止。所以这种模式也可以被理解运行时警告。</li>
<li><strong>使用 <code>precondition()</code> 和 <code>preconditionFailure()</code></strong>来代替断言。跟断义最大的区别就是它们在任何情况下都会发生, 可以确保在发生异常的时候程序会立马停止。</li>
<li><strong>调用 <code>fataError()</code></strong>, 这个函数在 Xcode 自动生成的 <code>init(coder:)</code> 中大概都看到过。只要这个方法被调用就会立马杀掉当前进程。</li>
<li><strong>调用 <code>exit()</code></strong>, 使用这个代码直接结束进程。这在命令行还有脚本中是非常有效的方法。</li>
</ul>
<h3 id="是否可恢复"><a href="#是否可恢复" class="headerlink" title="是否可恢复"></a>是否可恢复</h3><p>这个异常发生之后程序还能否从异常中恢复是选择异常处理方式的重要因素。</p>
<p>比如说。我们向服务器发强请求, 然后得到了错误的请求结果。这种情况无论我们是多么牛逼的程序员, 我们使用了多么强大的服务器基本上肯定都会发生。把这种异常看作是致命异常或者是不可恢复的异常可能就不对了。这种场景中, 我们希望的可能就是给用户展示一些错误信息就可以了。</p>
<p>既然这样, 在这种场景中, 选择什么样的方法来处理异常呢？如果你仔细看了上面的列表, 我们其实可以把这些按照是否可恢复归位两类:</p>
<p><strong>可恢复的</strong></p>
<ul>
<li>返回 <code>nil</code> 或者一个 <code>error</code> 枚举值。</li>
<li>抛出错误信息。</li>
</ul>
<p><strong>不可恢复的</strong></p>
<ul>
<li>assert()</li>
<li>precondition()</li>
<li>fatalError()</li>
<li>exit()</li>
</ul>
<p>既然我们处理的是一个异步的任务, 返回 <code>nil</code> 或者 <code>error</code> 枚举值就是最好的选择了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataLoader</span> </span>&#123;</div><div class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Result</span> </span>&#123;</div><div class="line">        <span class="keyword">case</span> success(<span class="type">Data</span>)</div><div class="line">        <span class="keyword">case</span> failure(<span class="type">Error</span>?)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">loadData</span><span class="params">(from url: URL, completionHandler: @escaping <span class="params">(Result)</span></span></span> -&gt; <span class="type">Void</span>) &#123;</div><div class="line">        <span class="keyword">let</span> task = <span class="type">URLSession</span>.shared.dataTask(with: url) &#123;</div><div class="line">            data, response, error <span class="keyword">in</span></div><div class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> data = data <span class="keyword">else</span> &#123;</div><div class="line">                completionHandler(.failure(error))</div><div class="line">                <span class="keyword">return</span></div><div class="line">            &#125;</div><div class="line">            completionHandler(.success(data))</div><div class="line">        &#125;</div><div class="line">        task.resume()</div><div class="line">    &#125;   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果任务是同步的, 抛出错误应该是最好的方法了。毕竟 API 也是这样设计的。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringFormatter</span> </span>&#123;</div><div class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Error</span>: <span class="title">Swift</span>.<span class="title">Error</span> </span>&#123;</div><div class="line">        <span class="keyword">case</span> emptyString</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">format</span><span class="params">(<span class="number">_</span> string:String)</span></span> <span class="keyword">throws</span> -&gt; <span class="type">String</span> &#123;</div><div class="line">        <span class="keyword">guard</span> !string.isEmpty <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="type">Error</span>.emptyString</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> string.replacingOccurrences(of: <span class="string">"\n"</span>, with: <span class="string">" "</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在有些情况下, 错误是不可恢复的。比如说, 我们需要在程序启动的时候加载配置文件。如果这个配置文件丢失了, 这会把程序带入未定义的状态中。所以这种情况下 crash 可能就要比让程序就运行好得多了。这种情况下, 使用更强的并且不可恢复的方法来让程序崩溃会是更合适的。</p>
<p>在这个例子中, 使用 <code>preconditionFailure()</code> 来停止运行。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">guard</span> <span class="keyword">let</span> config = <span class="type">FileLoader</span>().loadFile(name: <span class="string">"Config.json"</span>) <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">preconditionFailure</span>(<span class="string">"Failed to load config file"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="程序错误和运行错误"><a href="#程序错误和运行错误" class="headerlink" title="程序错误和运行错误"></a>程序错误和运行错误</h3><p>另外一个重要的标准是:异常的发生原因是逻辑还是配置, 或者说这个错误是不是程序流程中合法的部分。基本上判断的标准就是这个错误的原因是因为程序员还是外部因素。</p>
<p>为了减少麻烦, 可能你更愿意使用不可恢复的方法来处理各类错误。这样你就不用写各种代码来处理各种特殊情况了, 并且如果测试做得好的话, 这些错误就能够早的被捕获到了。</p>
<p>比如。 我们在做一个界面, 需要一个 <code>viewModel</code> 在使用之前跟他做好绑定。这个 <code>viewModel</code> 在我们的代码中是一个 <code>optional</code> 类型, 但是我们又不希望每次使用的时候都要强制解包。我们也不希望在这个 <code>viewmodel</code> 莫名其妙消失的时候程序在生产环境中崩溃。使用断言在 <code>debug</code> 下获得错误信息就足够了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DetailView</span>: <span class="title">UIView</span> </span>&#123;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ViewModel</span> </span>&#123;</div><div class="line">        <span class="keyword">var</span> title: <span class="type">String</span></div><div class="line">        <span class="keyword">var</span> subtitle: <span class="type">String</span></div><div class="line">        <span class="keyword">var</span> action: <span class="type">String</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> viewModel: <span class="type">ViewModel</span>?</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> titleLabel = <span class="type">UILabel</span>()</div><div class="line">    <span class="keyword">let</span> subtitleLabel = <span class="type">UILabel</span>()</div><div class="line">    <span class="keyword">let</span> actionButton = <span class="type">UIButton</span>()</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didMoveToSuperview</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didMoveToSuperview()</div><div class="line">        </div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> viewModel = viewModel <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">assertionFailure</span>(<span class="string">"No view model assigned to DetailView."</span>)</div><div class="line">            <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        titleLabel.text = viewModel.title</div><div class="line">        subtitleLabel.text = viewModel.subtitle</div><div class="line">        actionButton.setTitle(viewModel.action, <span class="keyword">for</span>: .normal)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>需要注意的是: 我们必须在上面的 <code>guard</code> 表达式中 <code>return</code>, 不然在 <code>release</code> 条件下 <code>assertFailure()</code> 也没什么作用。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>我希望这篇文章有助于让你理解到各种异常处理方法的区别。我的建议是不要只是专注于技术, 而是要在不同的场景中尝试使用不同的方法。一般情况下, 我更建议大家尽量在程序出错的时候恢复过来, 除非异常是致命的, 都不要影响用户体验。</p>
<p>另外 <code>print(error)</code> 并不是一个异常处理机制。</p>
<p>Thanks for reading! 🚀</p>
<h3 id="That’s-it"><a href="#That’s-it" class="headerlink" title="That’s it!"></a>That’s it!</h3><p><a href="https://medium.com/@johnsundell/picking-the-right-way-of-failing-in-swift-e89125a6b5b5">原文地址</a></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>我是一名来自中国的 iOS 程序员, 对技术有着浓厚的兴趣, 在学习的过程中, 发现了很多来自国外的优秀博客。为了更好的学习这些文章, 产生了将这些文章翻译成中文的想法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Swift 的一大特色就是编译安全。这使得我们开发者能够更容易的编写出可预测性的代码, 并且能勾减少运行时错误的发生。但是, 在实际的情况中, 错误发生的原因是千奇百怪的。&lt;/p&gt;
&lt;p&gt;我们今天来看一下如果正确的去处理各类错误, 以及我们有什么工具来做这件事情。上一篇文章研究了如何处理 &lt;code&gt;non-optional&lt;/code&gt;。 在那篇文章中我使用 &lt;code&gt;guard&lt;/code&gt; + &lt;code&gt;preconditionFailure()&lt;/code&gt; 代替了强制解包。&lt;/p&gt;
&lt;p&gt;之后很多人都在问 &lt;code&gt;preconditionFailure()&lt;/code&gt; 和 &lt;code&gt;assert()&lt;/code&gt; 有什么区别。 在这篇文章中。我们再仔细的看看这些语言特性。最重要的是在什么情况下使用哪一种？&lt;/p&gt;
    
    </summary>
    
      <category term="Swift" scheme="http://www.CepheusSun.com/categories/Swift/"/>
    
    
      <category term="iOS" scheme="http://www.CepheusSun.com/tags/iOS/"/>
    
      <category term="Swift" scheme="http://www.CepheusSun.com/tags/Swift/"/>
    
      <category term="翻译" scheme="http://www.CepheusSun.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>Using lazy properties in Swift</title>
    <link href="http://www.CepheusSun.com/Using%20lazy%20properties%20in%20Swift.html"/>
    <id>http://www.CepheusSun.com/Using lazy properties in Swift.html</id>
    <published>2017-05-20T04:36:45.000Z</published>
    <updated>2017-05-20T04:37:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>懒加载属于让你可以在需要的时候才初始化, 而不是在初始化这个对象的时候就必须要。懒加载可以用来避免 optional 的使用, 当某个属性的初始化耗费很多资源的时候会提升性能。当然使用懒加载也能让对象的初始化方法看起来很清爽, 因为某些设置会在这个对象的生命周期中被推迟。</p>
<p>这周我们来学习一下 Swift 中懒加载的定义, 以及使用。</p>
<a id="more"></a>
<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>定义一个懒加载属性最简单的办法就是在 <code>var</code> 前加一个 <code>lazy</code> 关键字, 并且还要给 出默认的值。这个默认值会在这个属性被第一次访问的时候被指定, 也就是说在这个对象的初始化方法中这个就不需要再去初始化这个属性了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileLoader</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="built_in">lazy</span> <span class="keyword">var</span> cahce = <span class="type">Cache</span>&lt;<span class="type">File</span>&gt;()</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">loadFile</span><span class="params">(name name: String)</span></span> <span class="keyword">throws</span> -&gt; <span class="type">File</span> &#123;</div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> cachedFile = cahce[name] &#123;</div><div class="line">            <span class="keyword">return</span> cachedFile</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">let</span> file = <span class="keyword">try</span> loadFileFromDisk(fileName: name)</div><div class="line">        cahce[name] = file</div><div class="line">        <span class="keyword">return</span> file</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用工厂方法"><a href="#使用工厂方法" class="headerlink" title="使用工厂方法"></a>使用工厂方法</h3><p>有些时候我们可能需要在这个属性在懒加载的时候设置一些东西, 只是简单的使用它的初始化方法可能就没有那么方便了。这种情况下, 更方便的方法是把这个属性的初始化代理给一个工厂方法。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Scene</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="built_in">lazy</span> <span class="keyword">var</span> eventManager: <span class="type">EventManager</span> = <span class="keyword">self</span>.makeEventManager()</div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">makeEventManager</span><span class="params">()</span></span> -&gt; <span class="type">EventManager</span>&#123;</div><div class="line">        <span class="keyword">let</span> manager = <span class="type">EventManager</span>()</div><div class="line">        <span class="keyword">return</span> manager</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果你不希望你的类里面全是各种 <code>make..()</code> 这类工厂方法, 你可以把这些方法放在一个专门的 <code>extension</code> 中</p>
<h3 id="使用自执行闭包"><a href="#使用自执行闭包" class="headerlink" title="使用自执行闭包"></a>使用自执行闭包</h3><p>除了使用工厂方法来返回这个属性值以外, 你也可以选择在这个属性声明的地方通过一个自执行的闭包来出初始化这个属性。我们看看上面这个情况, 我们应该怎么做吧！</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="built_in">lazy</span> <span class="keyword">var</span> eventManager: <span class="type">EventManager</span> = &#123;</div><div class="line">   <span class="keyword">let</span> manager = <span class="type">EventManager</span>()</div><div class="line">    <span class="keyword">return</span> manager</div><div class="line">&#125;()</div></pre></td></tr></table></figure>
<p>这要做有一个好处: 让这个属性的在同一个地方声明和设置。当然阅读这些代码可能会比较不爽。特别是在这个属性的设置需要很长的代码的时候。我自己的规则是当这个属性的初始化方法只有两三行代码的时候。就是使用这样的方法来初始化懒加载属性。</p>
<h3 id="使用静态工厂方法"><a href="#使用静态工厂方法" class="headerlink" title="使用静态工厂方法"></a>使用静态工厂方法</h3><p>对于那些设置起来更复杂属性, 把这些代码放到其他的类中, 会是更好的办法。这么做, 可以让这个类更加专注于它自己的职责, 让这个类不至于那么复杂。当然这也可以在不使用子类的条件下, 在多个类中共享代码。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="built_in">lazy</span> <span class="keyword">var</span> actionButton: <span class="type">UIButton</span> = <span class="type">ViewFactory</span>.makeActionButton()</div></pre></td></tr></table></figure>
<p>在这个例子中, <code>ViewFactory</code> 这个类包含了这个 <code>controller</code> 中所有控件的初始化方法。不用引入更多的类, 也不用让继承树变复杂。如果我们希望在另外一个 <code>controller</code> 中使用这个按钮, 也只需要调用同一个 API 就好了 <code>ViewFactory.makeActionButton()</code></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>可能有人会问, 有没有什么大一统的方法来使用懒加载呢？ 个人认为没有. 写代码就是这样, 选择最合适的方法来处理不同的业务需求才是最正确的做法。而且我自己也在日常开发中使用上面所有的方法。</p>
<p>Twitter 又一个问题: 使用不同的方法, 对编译时间有什么影响呢？我做了一些基本的测试, 并没有发现这其中有什么差别。当然这也跟这个懒加载属性有关。</p>
<p>Thanks for reading! 🚀</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;懒加载属于让你可以在需要的时候才初始化, 而不是在初始化这个对象的时候就必须要。懒加载可以用来避免 optional 的使用, 当某个属性的初始化耗费很多资源的时候会提升性能。当然使用懒加载也能让对象的初始化方法看起来很清爽, 因为某些设置会在这个对象的生命周期中被推迟。&lt;/p&gt;
&lt;p&gt;这周我们来学习一下 Swift 中懒加载的定义, 以及使用。&lt;/p&gt;
    
    </summary>
    
      <category term="Swift" scheme="http://www.CepheusSun.com/categories/Swift/"/>
    
    
      <category term="iOS" scheme="http://www.CepheusSun.com/tags/iOS/"/>
    
      <category term="Swift" scheme="http://www.CepheusSun.com/tags/Swift/"/>
    
      <category term="翻译" scheme="http://www.CepheusSun.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>Protocol Oriented Programming View in Swift 3</title>
    <link href="http://www.CepheusSun.com/Protocol%20Oriented%20Programming%20View%20in%20Swift%203.html"/>
    <id>http://www.CepheusSun.com/Protocol Oriented Programming View in Swift 3.html</id>
    <published>2017-05-14T09:28:23.000Z</published>
    <updated>2017-05-14T09:28:46.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>学习如何在不创建一大堆类的前提下做按钮、label、图片的动画。</p>
</blockquote>
<p>掌握了足够的知识而不去使用它, 就像你长了满口的牙齿, 但是成天都喝牛奶一样。 掌握了足够的理论知识, 在项目中怎么使用 POP 呢？🤔</p>
<a id="more"></a>
<h3 id="What-I-think-you-will-learn"><a href="#What-I-think-you-will-learn" class="headerlink" title="What I think you will learn"></a>What I think you will learn</h3><p>使用协议让 UI 组件做动画。也会用传统的方法来更 POP 比较。😎</p>
<h4 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h4><p>这个 demo 叫 “Welcome to My House Party”。 我写这个app 来验证你是否被邀请。你得输入你的邀请码。<strong>这个 app 没有逻辑相关的东西，按下这个按钮之后, 上面的控件都会动起来</strong> 界面上有4个组件会动。 <code>passcodeTextField</code>、<code>loginButton</code>、<code>errorMessageLabel</code>、<code>profileImageView</code>.</p>
<p>一共有两种动画类型 </p>
<ol>
<li>Buzzing </li>
<li>Popping</li>
</ol>
<center><br><img src="https://cdn-images-1.medium.com/max/1600/1*uN6sB588ehZIivOmmAsLPg.gif" alt=""><br></center>

<p>不要担心跟不上，只需要跟着节奏往下走就行了。如果你没信心了，滑到最后面，把 Demo 下下来, 直接看代码就行了。</p>
<h4 id="Things-Back-Then"><a href="#Things-Back-Then" class="headerlink" title="Things Back Then"></a>Things Back Then</h4><p>要真正掌握在实际情况中 POP 的魔力，我们先比较一下传统的写法。你可能会创造两个子类然后给她添加一个方法。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuzzableButton</span>: <span class="title">UIButton</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">buzz</span><span class="params">()</span></span> &#123;<span class="comment">// Animation Logic&#125;</span></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuzzableLabel</span>: <span class="title">UILabel</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">buzz</span><span class="params">()</span></span> &#123;<span class="comment">// Animation Logic&#125;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后让他动起来，当你点击这个按钮</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> errorMessageLabel: <span class="type">BuzzableLabel</span>!</div><div class="line"><span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> loginButton: <span class="type">BuzzableButton</span>!</div><div class="line"></div><div class="line"><span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">didtapLoginButton</span><span class="params">(<span class="number">_</span> sender: UIButton)</span></span> &#123;</div><div class="line">    errorMessageLabel.buzz()</div><div class="line">    loginButton.buzz()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>你看到我们重复了几次相同的事情了吗？ 动画的逻辑至少都需要5行代码。既然用 extension 是更好的办法。 UILabel 和 UIButton 都继承了 UIView。 我们可以这样。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIView</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">buzz</span><span class="params">()</span></span> &#123; <span class="comment">// Animation Logic &#125;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在 <code>BuzzableButton</code> 还有 <code>BuzzableLabel</code> 都有 <code>buzz</code> 这个方法了。 现在我们就没有重复了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuzzableButton</span>: <span class="title">UIButton</span> </span>&#123;&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuzzableLabel</span>: <span class="title">UILabel</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> errorMessageLabel: <span class="type">BuzzableLabel</span>!</div><div class="line"><span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> loginButton: <span class="type">BuzzableButton</span>!</div><div class="line"></div><div class="line"><span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">didTapLoginButton</span><span class="params">(<span class="number">_</span> sender: UIButton)</span></span> &#123;</div><div class="line"> errorMessageLabel.buzz()</div><div class="line"> loginButton.buzz() </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Okay-then-why-POP-🤔"><a href="#Okay-then-why-POP-🤔" class="headerlink" title="Okay, then why POP? 🤔"></a>Okay, then why POP? 🤔</h4><p>你应该也看见了那个写着 “Please enter valid code 😂” 的<code>errorMessageLabel</code> 还有另外一个动画。她先是出现然后在消失。所以, 之前的方法是怎么样的呢？</p>
<p>有两个方法来做这件事情。首先你需要再给 <code>UIView</code> 添加一个方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// Extend UIView</div><div class="line">extension UIView &#123;</div><div class="line">    func buzz() &#123; // Animation Logic&#125;</div><div class="line">    func pop() &#123; // UILable Animation Logic &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但是如果我们给 UIView 添加了这个方法。这个方法在其他的组件上也有了。包括他的子类 <code>UILabel</code>。 我们继承了没有必要的方法。这些组件也莫名其妙的变的很臃肿了。</p>
<p>还有一个方法是给 <code>UILabel</code> 添加一个子类，</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Subclass UILabel</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuzzableLabel</span>: <span class="title">UILabel</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pop</span><span class="params">()</span></span> &#123; <span class="comment">// UILabel Animation Logic &#125;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这也能实现。但是可能我们还需要把这个类的名字改一下，然它更直观一点.换成 <code>BuzzablePoppableLabel</code> 吧！</p>
<p>如果你想给这个 Label 添加更多的方法。为了让这个 Label 更直观的表达它的作用，可能名字又得改了 <code>BuzzablePoppableFlashableDopeFancyLovelyLabel</code> 这显然非常的不可持续。</p>
<h3 id="Protocol-Oriented-Programming"><a href="#Protocol-Oriented-Programming" class="headerlink" title="Protocol Oriented Programming"></a>Protocol Oriented Programming</h3><p>用子类来实现就是这样的。选择我们先写一个协议吧！ Buzzing</p>
<p>因为动画的代码都比较长，我没有在这里写出来。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Buzzable</span> </span>&#123;&#125;</div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Buzzable</span> <span class="title">where</span> <span class="title">Self</span>: <span class="title">UIview</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">buzz</span><span class="params">()</span></span> &#123; <span class="comment">// Animation Logic&#125;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>只要遵守了这个协议的 UI 组件就都有 Buzz 这个方法了。与 extension 不同的是，只有遵守的这个协议才会有这个方法。并且我是用了 <code>where Self: UIView</code> 来声明这个协议只能被 UIView 及其子类遵守。</p>
<p>既然这样，我们就先给 <code>loginButton</code>, <code>passcodeTextField</code>, <code>errorMessageLabel</code>、<code>profileImageView</code> 加上这个协议吧。<br>对了，还有 pop</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Poppable</span> </span>&#123;&#125;</div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Poppable</span> <span class="title">where</span> <span class="title">Self</span>: <span class="title">UIView</span> </span>&#123;</div><div class="line"> <span class="function"><span class="keyword">func</span> <span class="title">pop</span><span class="params">()</span></span> &#123; <span class="comment">// Pop Animation Logic &#125;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>好了现在可以开始写了</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuzzableTextField</span>: <span class="title">UITextField</span>, <span class="title">Buzzable</span> </span>&#123;&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuzzableButton</span>: <span class="title">UIButton</span>, <span class="title">Buzzable</span> </span>&#123;&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuzzableImageView</span>: <span class="title">UIImageView</span>, <span class="title">Buzzable</span> </span>&#123;&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuzzablePoppableLabel</span>: <span class="title">UILabel</span>, <span class="title">Buzzable</span>, <span class="title">Poppable</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line">  <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> passcodTextField: <span class="type">BuzzableTextField</span>!</div><div class="line">  <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> loginButton: <span class="type">BuzzableButton</span>!</div><div class="line">  <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> errorMessageLabel: <span class="type">BuzzablePoppableLabel</span>!</div><div class="line">  <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> profileImageView: <span class="type">BuzzableImageView</span>!</div><div class="line">  </div><div class="line">  <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">didTabLoginButton</span><span class="params">(<span class="number">_</span> sender: UIButton)</span></span> &#123;</div><div class="line">    passcodTextField.buzz()</div><div class="line">    loginButton.buzz()</div><div class="line">    errorMessageLabel.buzz()</div><div class="line">    errorMessageLabel.pop()</div><div class="line">    profileImageView.buzz()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最方便的事情是我们都不需要使用子类就可能给任何的 UI 组件添加 pop 这个方法了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">class MyImageView: UIImageVIew, Buzzable, Poppable</div></pre></td></tr></table></figure>
<p>现在，类的名称就可以变的更加的灵活了。因为你已经知道了这些协议的方法，并且这些协议也描述了这些类，所以也不用 <code>MyBuzzablePoppableProfileImage</code> 了。</p>
<ul>
<li>没有子类</li>
<li>类名更灵活</li>
<li>更 Swifty</li>
</ul>
<p><a href="https://github.com/CepheusSun/Translate/tree/master/demos/Protocol%20Oriented%20Programming%20View%20in%20Swift%203">SourceCode</a></p>
<h3 id="That’s-it"><a href="#That’s-it" class="headerlink" title="That’s it!"></a>That’s it!</h3><p><a href="https://blog.bobthedeveloper.io/protocol-oriented-programming-view-in-swift-3-8bcb3305c427">原文地址</a></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>我是一名来自中国的 iOS 程序员, 对技术有着浓厚的兴趣, 在学习的过程中, 发现了很多来自国外的优秀博客。为了更好的学习这些文章, 产生了将这些文章翻译成中文的想法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;学习如何在不创建一大堆类的前提下做按钮、label、图片的动画。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;掌握了足够的知识而不去使用它, 就像你长了满口的牙齿, 但是成天都喝牛奶一样。 掌握了足够的理论知识, 在项目中怎么使用 POP 呢？🤔&lt;/p&gt;
    
    </summary>
    
      <category term="POP" scheme="http://www.CepheusSun.com/categories/POP/"/>
    
    
      <category term="iOS" scheme="http://www.CepheusSun.com/tags/iOS/"/>
    
      <category term="Swift" scheme="http://www.CepheusSun.com/tags/Swift/"/>
    
      <category term="翻译" scheme="http://www.CepheusSun.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="POP" scheme="http://www.CepheusSun.com/tags/POP/"/>
    
  </entry>
  
  <entry>
    <title>Introduction to Protocol Oriented Programming in Swift</title>
    <link href="http://www.CepheusSun.com/Introduction%20to%20Protocol%20Oriented%20Programming%20in%20Swift.html"/>
    <id>http://www.CepheusSun.com/Introduction to Protocol Oriented Programming in Swift.html</id>
    <published>2017-05-13T16:05:23.000Z</published>
    <updated>2017-05-13T16:07:48.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>OOP is okay, but could’ve been better</p>
</blockquote>
<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>即使你还不知道 Class 和 Struct 基本的区别, 你也可以看这个文章。都知道 Struct 不能继承, 但是, 为什么呢？</p>
<p>如果你还不知道上面这个问题的答案, 花两分钟时间读一下下面这段代码。这些代码是写在 playground 上的</p>
<a id="more"></a>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HumanClass</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> name: <span class="type">String</span></div><div class="line">    <span class="keyword">init</span>(name: <span class="type">String</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.name = name</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> classHuman = <span class="type">HumanClass</span>(name: <span class="string">"Bob"</span>)</div><div class="line"><span class="comment">// "Bob"</span></div><div class="line">classHuman.name</div><div class="line"><span class="comment">// Created a "copied" object</span></div><div class="line"><span class="keyword">var</span> newClassHuman = classHuman</div><div class="line">newClassHuman.name = <span class="string">"Bobby"</span></div><div class="line">classHuman.name <span class="comment">//"Bobby"</span></div></pre></td></tr></table></figure>
<p>等我们改变 <code>newClassHuman</code> 的 <code>name</code> 属性为 <code>“Bobby”</code> 之后, <code>classHuman</code> 的 <code>name</code> 属性也变成 <code>“Bobby”</code> 了。</p>
<p>我们再看看 Struct </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">HumanStruct</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> name: <span class="type">String</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> humanStruct = <span class="type">HumanStruct</span>(name: <span class="string">"Bob"</span>)</div><div class="line"><span class="keyword">var</span> newHumanStruct = humanStruct</div><div class="line">newHumanStruct.name = <span class="string">"Bobby"</span></div><div class="line">humanStruct.name  <span class="comment">// "Bobby"</span></div></pre></td></tr></table></figure>
<p>看出来区别了吗？ 改变复制出来的 <code>newHumanStruct</code> 的 <code>name</code> 属性比呢没有改变原始的 <code>humanStruct</code> 的 <code>name</code> 属性。</p>
<p>对于 Class 来说, 这样的复制出来的对象, 和原来的对象都指向的是内存中的同一个对象。对任何一个对象的改变, 都会改变其他的对象(引用类型)。 对于 Struct 来说, 在传递和赋值的时候会创造一个新的对象(值类型)</p>
<p><a href="https://www.youtube.com/watch?v=MNnfUwzJ4ig">这里有一个介绍这个概念的视频</a></p>
<h3 id="Bye-OOP"><a href="#Bye-OOP" class="headerlink" title="Bye OOP"></a>Bye OOP</h3><p>你可能会比较好奇为什么我讲了半天跟面向协议编程没关系的东西。在我开始将 POP 对比 OOP 的优势之前， 你得理解引用类型和值类型的区别。</p>
<p>这里有一些毋庸置疑的 OOP 的优势, 也是劣势。</p>
<ol>
<li>创建一个子类, 这个子类会继承一些并不需要的属性和方法。这会让这个子类变的臃肿。</li>
<li>当你有很多的继承关系的时候, 找到各个类之间的关系, 就变的比较困难了。</li>
<li>当对象指向的内存中的同一块地址的时候, 如果对其中一个进行了修改, 所有的都会变。</li>
</ol>
<p>顺便看一下 UIKit 中的 OOP 吧</p>
<center><br><img src="https://cdn-images-1.medium.com/max/1600/1*hjEXB3PGUOSbxet0qUJRNA.png" alt=""><br>2015 WWDC_Hideous Structure<br></center>

<p>如果你是刚进苹果的工程师, 你能够搞定这些东西吗？我们在使用它的时候总觉的会比较混乱。</p>
<p>有人说 OOP 是一个让你的代码变的想意大利面那样乱的模块化方案。如果你想要更多吐槽 OOP 的内容. <a href="https://content.pivotal.io/blog/all-evidence-points-to-oop-being-bullshit">这儿</a><a href="https://krakendev.io/blog/subclassing-can-suck-and-heres-why">这儿</a><a href="http://www.smashcompany.com/technology/object-oriented-programming-is-an-expensive-disaster-which-must-end">这儿</a><a href="https://www.leaseweb.com/labs/2015/08/object-oriented-programming-is-exceptionally-bad/">还有这儿</a></p>
<h3 id="Welcome-POP"><a href="#Welcome-POP" class="headerlink" title="Welcome POP"></a>Welcome POP</h3><p>你可能已经猜到了, POP 的基础不是类, 而是值类型变量。没有引用，不像刚刚看到的金字塔结构。 POP 喜欢扁平的, 没那么多嵌套关系的代码。</p>
<p>只是吓你一下啦, 下面我们看看苹果爸爸的官方定义。</p>
<blockquote>
<p>“A protocol defines a blueprint of methods, properties… The protocol can then be adopted by a class, structure, or enumeration” — Apple</p>
<p>协议定义了方法属性的蓝图, 协议可以被类、结构体、还有枚举实现。</p>
</blockquote>
<h3 id="Getting-Real-with-POP"><a href="#Getting-Real-with-POP" class="headerlink" title="Getting Real with POP"></a>Getting Real with POP</h3><p>首先我们设计一下 human 这个东西。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Human</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> name: <span class="type">String</span> &#123;<span class="keyword">get</span> <span class="keyword">set</span>&#125;</div><div class="line">    <span class="keyword">var</span> race: <span class="type">String</span> &#123;<span class="keyword">get</span> <span class="keyword">set</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">sayHi</span><span class="params">()</span></span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这个协议中, 我没有申明 <code>drinking</code>. 它只是声明一些一定存在的东西。现在先不要纠结 <code>{get set}</code>. 它只是表明你可以给这个属性赋值也可以取值。先不要担心, 除非你要使用计算属性。</p>
<p>我们在定义一个韩国人 🇰🇷 结构体, 来实现这个协议。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Korean</span>: <span class="title">Human</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> name: <span class="type">String</span> = <span class="string">"Bob Lee"</span></div><div class="line">    <span class="keyword">var</span> race: <span class="type">String</span> = <span class="string">"Asian"</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">sayHi</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"Hi, I'm <span class="subst">\(name)</span>"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>只要这个结构体遵守了这个协议，它就必须要实现这个协议中的多有方法和属性。如果没有的话 Xcode 就会报错😡</p>
<p>只要是遵守了这个蓝图。你就可以做其他任何事情了, 盖一座长城也没关系。</p>
<p>我们在来实现一个美国人 🇺🇸</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Korean</span>: <span class="title">Human</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> name: <span class="type">String</span> = <span class="string">"Joe Smith"</span></div><div class="line">    <span class="keyword">var</span> race: <span class="type">String</span> = <span class="string">"White"</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">sayHi</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"Hi, I'm <span class="subst">\(name)</span>"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>很酷吧！ 不需要用那些 <code>init</code> <code>override</code> 关键字。 开始感兴趣了吗？</p>
<p><a href="https://www.youtube.com/watch?v=lyzcERHGH_8&amp;t=2s&amp;list=PL8btZwalbjYm5xDXDURW9u86vCtRKaHML&amp;index=1">Intro to Protocol Lesson</a></p>
<h3 id="Protocol-Inheritance"><a href="#Protocol-Inheritance" class="headerlink" title="Protocol Inheritance"></a>Protocol Inheritance</h3><p>如果你想要一个 <code>superman</code> 的协议。这个协议也需要遵守 <code>Human</code> 这个协议呢？</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">SuperHuman</span>: <span class="title">Human</span> </span>&#123;</div><div class="line"> <span class="keyword">var</span> canFly: <span class="type">Bool</span> &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125; </div><div class="line"> <span class="function"><span class="keyword">func</span> <span class="title">punch</span><span class="params">()</span></span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在如果你有一个遵守了 <code>SuperMan</code> 这个协议的类或者结构体的话，这个类也必须实现 <code>Human</code> 这个协议中的方法。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SuperSaiyan</span>: <span class="title">SuperMan</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> name: <span class="type">String</span> = <span class="string">"Goku"</span></div><div class="line">    <span class="keyword">var</span> race: <span class="type">String</span> = <span class="string">"Asian"</span></div><div class="line">    <span class="keyword">var</span> canFly: <span class="type">Bool</span> = <span class="literal">true</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">sayHi</span><span class="params">()</span></span> &#123; <span class="built_in">print</span>(<span class="string">"Hi, I'm <span class="subst">\(name)</span>"</span>) &#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">punch</span><span class="params">()</span></span> &#123; <span class="built_in">print</span>(<span class="string">"Puuooookkk"</span>) &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当然你也可以遵守多个协议。就可以实现多继承了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Example</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Example</span>: <span class="title">ProtocolOne</span>, <span class="title">ProtocolTwo</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>
<h3 id="Protocol-Extension"><a href="#Protocol-Extension" class="headerlink" title="Protocol Extension"></a>Protocol Extension</h3><p>下面才是协议最强大的特性了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Super Animal speaks English</span></div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">SuperAnimal</span> </span>&#123;</div><div class="line"> <span class="function"><span class="keyword">func</span> <span class="title">speakEnglish</span><span class="params">()</span></span> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>给这个协议加一个 <code>Extension</code></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">SuperAnimal</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">speakEnglish</span><span class="params">()</span></span> &#123; <span class="built_in">print</span>(<span class="string">"I speak English, pretty cool, huh?"</span>)&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在再创建一个遵守这个协议的类</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Donkey</span>: <span class="title">SuperAnimal</span> </span>&#123;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> ramon = <span class="type">Donkey</span>()</div><div class="line">ramon.speakEnglish()</div><div class="line"><span class="comment">//  "I speak English, pretty cool, huh?"</span></div></pre></td></tr></table></figure>
<p>如果你使用了 <code>Extension</code> 就可以给这个协议添加默认的实现和属性值了。这样不爽吗？</p>
<h3 id="Protocol-as-Type-Last"><a href="#Protocol-as-Type-Last" class="headerlink" title="Protocol as Type(Last)"></a>Protocol as Type(Last)</h3><p>如果我跟你说我能在一个数组中同时放一个对象和一个结构体呢？😮</p>
<p>我要用袋鼠打架求偶来写一个 demo 了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Fightable</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">legKick</span><span class="params">()</span></span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">StructKangaroo</span>: <span class="title">Fightable</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">legKick</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"Puuook"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassKangroo</span>: <span class="title">Fightable</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">legKick</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"Pakkkk"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后初始化俩袋鼠出来</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> structKangroo = <span class="type">StructKangaroo</span>()</div><div class="line"><span class="keyword">let</span> classKangroo = <span class="type">ClassKangroo</span>()</div></pre></td></tr></table></figure>
<p>现在就可以把他们放在一个数组中了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> kangaroos: [<span class="type">Fightable</span>] = [structKang, classKang]</div></pre></td></tr></table></figure>
<p>难以置信吧！ 再看看</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> kang <span class="keyword">in</span> kangaroos &#123; </div><div class="line"> kang.legKick() </div><div class="line">&#125;</div><div class="line"><span class="comment">// "Puuook"</span></div><div class="line"><span class="comment">// "Pakkkk"</span></div></pre></td></tr></table></figure>
<p>这很爽吧！ 想象在 OOP 中我们怎么实现这个东西呢？</p>
<h3 id="That’s-it"><a href="#That’s-it" class="headerlink" title="That’s it!"></a>That’s it!</h3><p><a href="https://blog.bobthedeveloper.io/protocol-oriented-programming-view-in-swift-3-8bcb3305c427">原文地址</a></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>我是一名来自中国的 iOS 程序员, 对技术有着浓厚的兴趣, 在学习的过程中, 发现了很多来自国外的优秀博客。为了更好的学习这些文章, 产生了将这些文章翻译成中文的想法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;OOP is okay, but could’ve been better&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;&lt;p&gt;即使你还不知道 Class 和 Struct 基本的区别, 你也可以看这个文章。都知道 Struct 不能继承, 但是, 为什么呢？&lt;/p&gt;
&lt;p&gt;如果你还不知道上面这个问题的答案, 花两分钟时间读一下下面这段代码。这些代码是写在 playground 上的&lt;/p&gt;
    
    </summary>
    
      <category term="POP" scheme="http://www.CepheusSun.com/categories/POP/"/>
    
    
      <category term="iOS" scheme="http://www.CepheusSun.com/tags/iOS/"/>
    
      <category term="Swift" scheme="http://www.CepheusSun.com/tags/Swift/"/>
    
      <category term="翻译" scheme="http://www.CepheusSun.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="POP" scheme="http://www.CepheusSun.com/tags/POP/"/>
    
  </entry>
  
  <entry>
    <title>RxSwift MVVM API Manual 📃</title>
    <link href="http://www.CepheusSun.com/RxSwift%20MVVM%20API%20Manual.html"/>
    <id>http://www.CepheusSun.com/RxSwift MVVM API Manual.html</id>
    <published>2017-05-07T11:02:57.000Z</published>
    <updated>2017-05-19T02:40:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>现在我们掌握了所有的工具, 也明确了他存在的风险以及规避的方法。现在是时候想想应该怎么样最大可能的运用它了。以 MVVM 为例。</p>
<p>又很多方法来写 RxSwift 的 API。 我怕的做法是: 利用 RxSwift 很酷的观察者模式和很方便的操作符, 管理异步的任务。可能不是 100% 纯正的 RxSwift。 在将我做过很多的尝试试图将两种编程思维统一起来,但是我都失败了。</p>
<p>下面是一些我使用 RxSwift 的方法。</p>
<a id="more"></a>
<h3 id="Be-Consistent"><a href="#Be-Consistent" class="headerlink" title="Be Consistent"></a>Be Consistent</h3><p>这是在接口设计中最重要的事情, 如果你做出了选择。就坚持下去。</p>
<p>既然如此, 现在就开始吧！<strong>input vs output</strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FilterViewModel</span> </span>&#123;</div><div class="line">    <span class="comment">//Input</span></div><div class="line">    <span class="keyword">let</span> filterButtonEvents: <span class="type">BehaviorSubject</span>&lt;<span class="type">Int</span>&gt;</div><div class="line">    <span class="keyword">let</span> filterSelectionEvent: <span class="type">PublishSubject</span>&lt;<span class="type">Int</span>&gt;</div><div class="line">    </div><div class="line">    <span class="comment">//OutPut</span></div><div class="line">    <span class="keyword">let</span> currentFilter: <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;</div><div class="line">    <span class="keyword">let</span> shouldShowFilter: <span class="type">Observable</span>&lt;<span class="type">Bool</span>&gt;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有好几个可以用来声明 inout 和 output 的组合。这是我最喜欢的一个。</p>
<h4 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h4><p>通过将 <code>input</code> 声明成 <code>subject</code> 类型。我可以很方便的使用 <code>RxSwift</code> 中的各种操作符。我用的最多的应该是 <strong>throttle</strong>。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filterButtonEvents</div><div class="line">    .throttle(<span class="number">0.5</span>, scheduler: <span class="type">MainScheduler</span>.instance)</div><div class="line">    .subscribe(onNext: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] (counter) <span class="keyword">in</span></div><div class="line">    <span class="keyword">self</span>?.makeRequest()</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>当然用 observable 做 input 也是可以的。</p>
<h4 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h4><p>记住 <code>output</code> 应该是 <code>Observable</code>, 甚至是 <code>Subject</code>。 如果不这样的话，一些外部的类可能会错误的把这他当做是 <code>input</code> 这样就打破了封装了。当我想要发出一个变量的时候, 就是强制的释放。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(observable <span class="keyword">as</span>! <span class="type">PublishSubject</span>)</div><div class="line">    .onNext(<span class="string">"Ugly..."</span>)</div></pre></td></tr></table></figure>
<p>如果你知道有更好的方法, 一定要告诉我。我感觉这么干是在是不优雅😱。</p>
<h3 id="Safety"><a href="#Safety" class="headerlink" title="Safety"></a>Safety</h3><p>如果在一个简单的 Demo 中, 你可能记得做所有的细节。但在一个复杂的 app 中, 你几乎不可能记得住所有的实现细节。这里面可能有好几百个订阅者。 <code>Observable</code> 又是一个非常广泛的类型。都还没有说这个信号是热信号还是冷信号, 他是在主线程还是在后台线程中运行。这也是 <code>Driver</code> 被设计出来的原因, 为了让 API 更加明确。我们鼓励自己去创建一些单元。</p>
<p><strong>Driver</strong> 是一个热信号, 而且是运行在主线程当中的。好想忽略掉了冷信号？没关系, 创造一个就是了。我称他作 <strong>Template</strong> 因为冷信号就是是一个模版, 在这个模版中你可以用 <code>subscribe</code> 来运行他。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Template</span>&lt;<span class="title">Element</span>&gt; </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> observable: <span class="type">Observable</span>&lt;<span class="type">Element</span>&gt;</div><div class="line">    </div><div class="line">    <span class="keyword">init</span>(<span class="number">_</span> subscribe: @escaping (<span class="type">AnyObserver</span>&lt;<span class="type">Element</span>&gt;) -&gt; <span class="type">Disposable</span>) &#123;</div><div class="line">        observable = <span class="type">Observable</span>.create(subscribe)</div><div class="line">            .subscribeOn(<span class="type">MainScheduler</span>.instance)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样 <code>Template</code> 就能确保是一个在主线程中执行的冷信号。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">class MyViewModel &#123;</div><div class="line"> //Cold ❄️</div><div class="line"> let createRequest : Template&lt;Int&gt;</div><div class="line"> //Hot 🌶</div><div class="line"> let shouldShowElement : Driver&lt;Bool&gt;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样看, 程序中暴露的接口就很明确了。</p>
<h3 id="MVVM-State-Machine"><a href="#MVVM-State-Machine" class="headerlink" title="MVVM State Machine"></a>MVVM State Machine</h3><p>涉及到状态的管理的时候, <code>ViewController</code> 经常会变得很复杂。如果在 <code>viewModel</code> 中使用状态机, 来告诉 <code>ViewController</code> 在什么时候应该怎么做。<a href="http://curtclifton.net/generic-state-machine-in-swift">这里有一篇不错的文章</a></p>
<ul>
<li>把这些状态放在一个枚举里面, 而不是分散在各个地方。这样做可以极大的减少你的 <code>Observable</code>。</li>
<li>这也会强迫你吧更多的逻辑移到 <code>ViewModel</code> 里面。</li>
<li>让你的代码更加的具有声明性。<br>👋</li>
</ul>
<p><a href="http://swiftpearls.com/mvvm-state-manage.html">原文地址</a></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>我是一名来自中国的 iOS 程序员, 对技术有着浓厚的兴趣, 在学习的过程中, 发现了很多来自国外的优秀博客。为了更好的学习这些文章, 产生了将这些文章翻译成中文的想法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在我们掌握了所有的工具, 也明确了他存在的风险以及规避的方法。现在是时候想想应该怎么样最大可能的运用它了。以 MVVM 为例。&lt;/p&gt;
&lt;p&gt;又很多方法来写 RxSwift 的 API。 我怕的做法是: 利用 RxSwift 很酷的观察者模式和很方便的操作符, 管理异步的任务。可能不是 100% 纯正的 RxSwift。 在将我做过很多的尝试试图将两种编程思维统一起来,但是我都失败了。&lt;/p&gt;
&lt;p&gt;下面是一些我使用 RxSwift 的方法。&lt;/p&gt;
    
    </summary>
    
      <category term="Reactive" scheme="http://www.CepheusSun.com/categories/Reactive/"/>
    
    
      <category term="iOS" scheme="http://www.CepheusSun.com/tags/iOS/"/>
    
      <category term="Swift" scheme="http://www.CepheusSun.com/tags/Swift/"/>
    
      <category term="翻译" scheme="http://www.CepheusSun.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="Reactive" scheme="http://www.CepheusSun.com/tags/Reactive/"/>
    
  </entry>
  
  <entry>
    <title>RxSwift Safety Manual 📚</title>
    <link href="http://www.CepheusSun.com/RxSwift%20Safety%20Manual.html"/>
    <id>http://www.CepheusSun.com/RxSwift Safety Manual.html</id>
    <published>2017-05-07T09:19:57.000Z</published>
    <updated>2017-05-19T02:41:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>RxSwift 提供了大量非常好用的工具, 让写代码更爽, 但是他也可能给你带来一些头疼的地方, 也可能是bug😱。 用了三个月之后我觉得我应该也可以给出一些建议来避免一些问题。</p>
<a id="more"></a>
<h3 id="Side-Effects"><a href="#Side-Effects" class="headerlink" title="Side Effects"></a>Side Effects</h3><p>在计算机科学中副作用这个词可能没那么容易理解, 因为这是一个非常宽泛的内容。在 <a href="http://softwareengineering.stackexchange.com/questions/40297/what-is-a-side-effect">Stackoverflow</a> 有一些比较好的讨论。</p>
<p>简单点说, 一个函数/闭包/…如果他们改变了 app 的状态, 都有可能带来一些副作用。在下面的例子中：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    <span class="comment">// 这样写没有副作用</span></div><div class="line">    observer.onNext(<span class="number">1</span>)</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> observableWithSideEffect = <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    <span class="comment">// 这里就会有副作用: 这个 closure 改变了 counter 的值</span></div><div class="line">    counter = counter + <span class="number">1</span></div><div class="line">    observer.onNext(counter)</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为什么在 RxSwift 中这个很重要呢? 因为对于冷信号❄️来说。<strong>每次被订阅他都会执行一下里面的任务</strong></p>
<p>我们两次订阅这个 <code>observableWithSideEffect</code>: </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">observableWithSideEffect</div><div class="line">    .subscribe(onNext: &#123; (counter) <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(counter)</div><div class="line">    &#125;).addDisposableTo(disposeBag)</div><div class="line"></div><div class="line">observableWithSideEffect</div><div class="line">    .subscribe(onNext: &#123; (counter) <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(counter)</div><div class="line">    &#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>我们可能希望他输出的是两个2.但是事实上它会输出2，3. 因为每次订阅都会分别执行, 所以在闭包里面的代码会被执行两次。<strong>所以 counter + 1 会执行两次</strong></p>
<p>也就是说, 如果你在这里面房里两个网络请求。<strong>它会发出两次请求</strong></p>
<p>我们怎么来解决这个问题呢？ 把这个冷信号转换成热信号💡。 使用 <strong>publish</strong> connect 还有 refCount 就可以了,这是<a href="http://www.tailec.com/blog/understanding-publish-connect-refcount-share">完整细节</a>。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> counter = <span class="number">1</span></div><div class="line"><span class="keyword">let</span> observableWithSideEffect = <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    counter = counter + <span class="number">1</span></div><div class="line">    observer.onNext(counter)</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;.publish()</div><div class="line"><span class="comment">// publish returns an observable with a shared subscription(hot).</span></div><div class="line"><span class="comment">// It's not active yet</span></div><div class="line"></div><div class="line">observableWithSideEffect</div><div class="line">    .subscribe(onNext: &#123; (counter) <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(counter)</div><div class="line">    &#125;).addDisposableTo(disposeBag)</div><div class="line"></div><div class="line">observableWithSideEffect</div><div class="line">    .connect()</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>这会输出 2，2</p>
<p>大多数情况下这就够了。但是还有一个更高级的 <em>shareReplay</em> 操作符。他使用了 <code>refCont</code> 操作符合 <code>replay</code>. <code>refCount</code> 也是一种 <code>connect</code> 但是它是自动管理的。他会在第一次订阅开始的时候开始。 replay 会把一些元素发送给那些 “迟到了” 的订阅者/</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> counter = <span class="number">1</span></div><div class="line"><span class="keyword">let</span> observableWithSideEffect = <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    counter = counter + <span class="number">1</span></div><div class="line">    observer.onNext(counter)</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">    &#125;.shareReplay(<span class="number">1</span>)</div><div class="line"></div><div class="line">observableWithSideEffect</div><div class="line">    .subscribe(onNext: &#123; (counter) <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(counter)</div><div class="line">    &#125;).addDisposableTo(disposeBag)</div><div class="line"></div><div class="line">observableWithSideEffect</div><div class="line">    .subscribe(onNext: &#123; (counter) <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(counter)</div><div class="line">    &#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<h3 id="Main-Queue"><a href="#Main-Queue" class="headerlink" title="Main Queue"></a>Main Queue</h3><p>当订阅行为是发生在 viewcontroller 上, 然后你不知道订阅行为是在那个线程中进行的。在刷新 UI 的时候确定这是在主线程中进行的。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">observableWithSideEffect</div><div class="line">    .observeOn(<span class="type">MainScheduler</span>.instance)</div><div class="line">    .subscribe(onNext: &#123; (counter) <span class="keyword">in</span></div><div class="line">        <span class="comment">// update UI</span></div><div class="line">    &#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<h3 id="Error-Events"><a href="#Error-Events" class="headerlink" title="Error Events"></a>Error Events</h3><p>如果你把好几个 <code>Observerable</code> 合并在了一起。如果其中有一个发生了错误。所有的 <code>Observerable</code> 都会结束。如果最开始是UI的话, 他就会停止响应。你应该好好的设计你的代码, 考虑好如果发生了 <code>complete</code> 或者 <code>error</code> 会发生什么。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">viewModel.importantText</div><div class="line">    .bindTo(myImportantLabel.rx.text)</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>如果 viewModel.importantText 因为什么原因发送出来一个error事件。这个 <code>bingding</code> 订阅也会结束。</p>
<p>如果你想避免这种情况的发生你可以使用 <strong>catchErrorJustReturn</strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">viewModel.importantText</div><div class="line">    .catchErrorJustReturn(<span class="string">"default text"</span>)</div><div class="line">    .bind(to: lable.rx.text)</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<h3 id="Driver"><a href="#Driver" class="headerlink" title="Driver"></a>Driver</h3><p><strong>Driver</strong> 是一个能够 <code>observeOn</code>、<code>catchErrorJustReturn</code>、<code>shareReplay</code> <strong>Observable</strong>.如果你想在viewModel中暴露一个安全的API。使用 <strong>Driver</strong> 是更好的做法。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">viewModel.importantText</div><div class="line">    .asDriver(onErrorJustReturn: <span class="string">"default text"</span>)</div><div class="line">    .drive(lable.rx.text)</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<h3 id="Reference-Cycles"><a href="#Reference-Cycles" class="headerlink" title="Reference Cycles"></a>Reference Cycles</h3><p>防止内存泄漏需要在话很多心思在避免引用循环上，当我们使用在订阅闭包中使用外部变量的时候。这个变量会被捕获为一个强引用。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">viewModel.priceString</div><div class="line">    .subscribe(onNext: &#123;(text) <span class="keyword">in</span></div><div class="line">        <span class="keyword">self</span>.priceLabel.text = text</div><div class="line">    &#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>这个 vc 强引用了 viewModel。现在这个 viewmodel 又因为在这个闭包中强引用了这个 vc。这就带来了循环引用。 <a href="https://krakendev.io/blog/weak-and-unowned-references-in-swift">“WEAK, STRONG, UNOWNED, OH MY!” - A GUIDE TO REFERENCES IN SWIFT</a></p>
<p>下面是解决办法</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">viewModel.priceString</div><div class="line">    .subscribe(onNext: &#123;[<span class="keyword">unowned</span> <span class="keyword">self</span>] (text) <span class="keyword">in</span></div><div class="line">        <span class="keyword">self</span>.priceLabel.text = text</div><div class="line">    &#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>使用 <strong>[unowned self]</strong> 语句之后就不用去考虑这个问题了🤗。</p>
<p>self 并不是唯一一个你需要担心的东西。你可能需要考虑所有你在在闭包中捕获的变量。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// out side the view controller</span></div><div class="line">        viewModel.priceString</div><div class="line">            .subscribe(onNext: &#123;[<span class="keyword">weak</span> viewController] (text) <span class="keyword">in</span></div><div class="line">                viewController?.priceLabel.text = text</div><div class="line">            &#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>这可能会比较复杂。这也是我<strong>强烈建议你尽量让你的闭包很短</strong>的原因。如果一个闭包超过了3、4行代码的话。可以考虑把这部分逻辑放在一个新的方法里面去。这样的话，这些依赖关系就会变的很明确了。你才能够很好的去考虑强弱应用的问题。</p>
<h3 id="Managing-your-subscriptions"><a href="#Managing-your-subscriptions" class="headerlink" title="Managing your subscriptions"></a>Managing your subscriptions</h3><p>记住要把你不需要订阅的订阅清楚掉。我曾经遇到过一次, 由于我没有及时的清除掉我的订阅, 当 <code>cell</code> 被重用的时候, 就会创建一个新的订阅, 导致了非常壮观的 <strong>bug</strong>。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> reuseBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="comment">// Called each time a cell is reused</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">configCell</span><span class="params">()</span></span> &#123;</div><div class="line">    viewModel</div><div class="line">        .subscribe(onNext: &#123; [<span class="keyword">unowned</span> <span class="keyword">self</span>] (element) <span class="keyword">in</span></div><div class="line">            <span class="keyword">self</span>.sendOpenNewDetailsScreen()</div><div class="line">        &#125;)</div><div class="line">&#125;</div><div class="line"><span class="comment">// Creating a new bag for each cell</span></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">prepareForReuse</span><span class="params">()</span></span> &#123;</div><div class="line">    reuseBag = <span class="type">DisposeBag</span>()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>RxSwift 是非常复杂的东西。但是如果你设定好了自己的一套规则, 然后在编码的时候坚持这个规则。这也没什么好难受的😇。 在使用 RxSwift 做的时候在每一层中考虑清楚你需要把哪些 API 暴露出来。这也能帮助你很快的发现 bug。</p>
<p><a href="http://swiftpearls.com/RxSwift-Safety-Manual.html">原文地址</a></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>我是一名来自中国的 iOS 程序员, 对技术有着浓厚的兴趣, 在学习的过程中, 发现了很多来自国外的优秀博客。为了更好的学习这些文章, 产生了将这些文章翻译成中文的想法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;RxSwift 提供了大量非常好用的工具, 让写代码更爽, 但是他也可能给你带来一些头疼的地方, 也可能是bug😱。 用了三个月之后我觉得我应该也可以给出一些建议来避免一些问题。&lt;/p&gt;
    
    </summary>
    
      <category term="Reactive" scheme="http://www.CepheusSun.com/categories/Reactive/"/>
    
    
      <category term="iOS" scheme="http://www.CepheusSun.com/tags/iOS/"/>
    
      <category term="Swift" scheme="http://www.CepheusSun.com/tags/Swift/"/>
    
      <category term="翻译" scheme="http://www.CepheusSun.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="Reactive" scheme="http://www.CepheusSun.com/tags/Reactive/"/>
    
  </entry>
  
  <entry>
    <title>RxSwift For Dummies 🐣 Part3</title>
    <link href="http://www.CepheusSun.com/RxSwift%20For%20Dummies%20Part3.html"/>
    <id>http://www.CepheusSun.com/RxSwift For Dummies Part3.html</id>
    <published>2017-05-07T07:27:57.000Z</published>
    <updated>2017-05-19T02:41:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>好了, 接下来是第三个部分。<strong>Subjects</strong></p>
<p>学了之前内容. 我们可能已经发现了。之前学习的内容都是 <code>Observables</code> 输出事件的部分。我们可以订阅他, 就能知道他输出的事件了。但是我们还不能改变他。</p>
<a id="more"></a>
<p><strong>Subject</strong> 也是一个 <code>Observable</code> 但是他是能够同时输入和输出的。也就是说, 我们可以动态(强制)的在一个序列中发出信号。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> subject = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</div><div class="line"><span class="comment">// 可以直接转换，因为他也是一个 `Observable`</span></div><div class="line"><span class="keyword">let</span> observable: <span class="type">Observable</span>&lt;<span class="type">String</span>&gt; = subject</div><div class="line">observable.subscribe(onNext: &#123; (text) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(text)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div><div class="line"><span class="comment">// 只要你想发出一个新的事件, 就可以用 onNext 方法 </span></div><div class="line">subject.onNext(<span class="string">"Hey!"</span>)</div><div class="line">subject.onNext(<span class="string">"I'm back!"</span>)</div></pre></td></tr></table></figure>
<p><strong>onNext</strong> 是一个输出事件的方法。最后控制台会输出</p>
<blockquote>
<p>“Hey!”<br>“I’m back!”</p>
</blockquote>
<p><code>Subject</code> 到底有什么用呢? 为了很轻松的将 Rxswift 中声明式的世界和我们平常的世界连接起来。让我们在需要写实现式的代码的时候更 Rx </p>
<p>在一个纯正的 Rx 的世界里。当你需要有一个更完美的流的时候, 不用去管这个 <code>Observable</code> 是怎么实现的。这个东西我会另外的解释。反正, 如果你需要， 大胆的用吧。</p>
<p>上面式关于 Subject 最基本的内容。接下来我们学习一下怎么更好的使用 <strong>Subject</strong></p>
<h3 id="Hot🔥-vs-Cold❄️"><a href="#Hot🔥-vs-Cold❄️" class="headerlink" title="Hot🔥 vs Cold❄️"></a>Hot🔥 vs Cold❄️</h3><p>在第一篇文章中就已经提到过了热信号🔥和冷信号❄️。今天我们在深入的了解一点吧，因为 <strong>Subject</strong> 实际上是我们第一次接触到真正的热信号。</p>
<p>我们一定确定了，当我们使用 <strong>create</strong> 创建一个 <strong>Observable</strong> 的时候, 由于没有人订阅他，所以她是不会发送消息的。只有被 <strong>subscribe</strong>(订阅)之后才会开始发送消息出来。这就是我们叫它为冷信号❄️的原因。如果很不幸你忘了这个知识点。你可以回到第一篇文章去看看。热信号🔥 就是那种即使没有被订阅也会发出消息的信号, 这也是 <code>subject</code> 做的事情。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> subject = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</div><div class="line"><span class="keyword">let</span> observable: <span class="type">Observable</span>&lt;<span class="type">String</span>&gt; = subject</div><div class="line"><span class="comment">// 这个信号还没有被订阅, 所以这个值不回被接受到</span></div><div class="line">subject.onNext(<span class="string">"Am I too early for the party?"</span>)</div><div class="line"></div><div class="line">observable</div><div class="line">    .subscribe(onNext: &#123; (text) <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(text)</div><div class="line">    &#125;).addDisposableTo(disposeBag)</div><div class="line"><span class="comment">// 这个值发出来的时候已经有一个订阅者了, 所以这个值会打印出来</span></div><div class="line">subject.onNext(<span class="string">"🎉🎉🎉"</span>)</div></pre></td></tr></table></figure>
<p>很简单直接吧。如果在第一篇中你理解了冷信号的话, 理解热信号也是很自然的事情。</p>
<h3 id="Subject-Types"><a href="#Subject-Types" class="headerlink" title="Subject Types"></a>Subject Types</h3><p>常用的 <code>Subject</code> 有三种。 他们其实都差不多, 唯一的区别就是: 在订阅之前, 它会干什么。</p>
<h4 id="Publish-Subject"><a href="#Publish-Subject" class="headerlink" title="Publish Subject"></a>Publish Subject</h4><p>在上面的例子中已经说到了。 <strong>PublishSubject</strong> 会忽略掉在订阅之前发出来的信号。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> subject = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</div><div class="line"><span class="keyword">let</span> observable: <span class="type">Observable</span>&lt;<span class="type">String</span>&gt; = subject</div><div class="line">subject.onNext(<span class="string">"Ignored..."</span>)</div><div class="line">observable.subscribe(onNext: &#123; (text) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(text)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div><div class="line">subject.onNext(<span class="string">"Printed!"</span>)</div></pre></td></tr></table></figure>
<p>当你只关注你订阅之后发生了什么的时候, 就可以使用 <code>PublishSubject</code></p>
<h4 id="Replay-Subjects"><a href="#Replay-Subjects" class="headerlink" title="Replay Subjects"></a>Replay Subjects</h4><p><strong>ReplaySubject</strong> 会将最后 n 个值发出来, 即使是订阅发生之前的值。 这个 n 个值被被放在一个环从区里面。在这个例子中会缓有 3 个值被保留。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> subject = <span class="type">ReplaySubject</span>&lt;<span class="type">String</span>&gt;.create(bufferSize: <span class="number">3</span>)</div><div class="line"><span class="keyword">let</span> observable: <span class="type">Observable</span>&lt;<span class="type">String</span>&gt; = subject</div><div class="line"></div><div class="line">subject.onNext(<span class="string">"Not printed!"</span>)</div><div class="line">subject.onNext(<span class="string">"Printed"</span>)</div><div class="line">subject.onNext(<span class="string">"Printed!"</span>)</div><div class="line">subject.onNext(<span class="string">"Printed!"</span>)</div><div class="line"></div><div class="line">observable.subscribe(onNext: &#123; (text) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(text)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div><div class="line">subject .onNext(<span class="string">"Printed!"</span>)</div></pre></td></tr></table></figure>
<p>当我们需要知道订阅之前发生了什么的时候, 我们就需要使用 <code>ReplaySubject</code> 了。</p>
<h4 id="Behavior-Subject"><a href="#Behavior-Subject" class="headerlink" title="Behavior Subject"></a>Behavior Subject</h4><p><strong>BehaviorSubject</strong> 只会重复最后一个值。 更其他的 Subject 的同， 他在创建的时候就需要给定一个初始值。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> subject = <span class="type">BehaviorSubject</span>&lt;<span class="type">String</span>&gt;(value: <span class="string">"Initial value"</span>)</div><div class="line"><span class="keyword">let</span> observable: <span class="type">Observable</span>&lt;<span class="type">String</span>&gt; = subject</div><div class="line"></div><div class="line">subject.onNext(<span class="string">"Not printed!"</span>)</div><div class="line">subject.onNext(<span class="string">"Not printed!"</span>)</div><div class="line">subject.onNext(<span class="string">"Printed!"</span>)</div><div class="line"></div><div class="line">observable.subscribe(onNext: &#123; (text) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(text)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div><div class="line">subject.onNext(<span class="string">"Printed!"</span>)</div></pre></td></tr></table></figure>
<p>当你只需要知道最后一个值的时候。就需要使用 <code>BehaviorSubject</code></p>
<h3 id="Binding"><a href="#Binding" class="headerlink" title="Binding"></a>Binding</h3><p>你可以把一个 <code>Observable</code> 和 <code>Subject</code> 绑定到一起。也就是说可以让这个 <code>Observable</code> 将它的序列里的所有值都发送给这个 <code>Subject</code></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> subject = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</div><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.just(<span class="string">"I'm being passed around 😲"</span>)</div><div class="line">subject.subscribe(onNext: &#123; (text) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(text)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div><div class="line"></div><div class="line">observable.subscribe &#123; (event) <span class="keyword">in</span></div><div class="line">    subject.on(event)</div><div class="line">&#125;.addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>有一个语法糖来简化这些代码。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> subject = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</div><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.just(<span class="string">"I'm being passed around 😲"</span>)</div><div class="line">subject.subscribe(onNext: &#123; (text) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(text)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div><div class="line"></div><div class="line">observable.bind(to: subject).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>输出</p>
<blockquote>
<p>I’m being passed around 😲</p>
</blockquote>
<p><strong>Warning</strong></p>
<p>Binding 不仅仅会传递值, 他也会把完成和错误都传递过来。这种情况下这个 <code>Subject</code> 就会被释放。</p>
<h3 id="Quick-Example"><a href="#Quick-Example" class="headerlink" title="Quick Example"></a>Quick Example</h3><p>还是把第一篇文章中的 Demo 稍微修改一下吧。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Foundation</div><div class="line"><span class="keyword">import</span> RxCocoa</div><div class="line"><span class="keyword">import</span> RxSwift</div><div class="line"></div><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">GoogleModel</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> googleString = <span class="type">BehaviorSubject</span>&lt;<span class="type">String</span>&gt;(value: <span class="string">""</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">fetchNetString</span><span class="params">()</span></span>  &#123;</div><div class="line">        <span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">            <span class="keyword">let</span> session = <span class="type">URLSession</span>.shared</div><div class="line">            <span class="keyword">let</span> task = session.dataTask(with: <span class="type">URL</span>(string: <span class="string">"https://www.google.com"</span>)!, completionHandler: &#123; (data, response, error) <span class="keyword">in</span></div><div class="line">                </div><div class="line">                <span class="type">DispatchQueue</span>.main.async &#123;</div><div class="line">                    <span class="keyword">if</span> <span class="keyword">let</span> err = error &#123;</div><div class="line">                        observer.onError(err)</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        <span class="keyword">let</span> googleString = <span class="type">NSString</span>(data: data!, encoding: <span class="number">1</span>) <span class="keyword">as</span> <span class="type">String</span>?</div><div class="line">                        </div><div class="line">                        observer.onNext(googleString!)</div><div class="line">                        observer.onCompleted()</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">            task.resume()</div><div class="line">            <span class="keyword">return</span> <span class="type">Disposables</span>.create&#123;</div><div class="line">                task.cancel()</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">// Bind the observable to the subject</span></div><div class="line">        observable.bind(to: googleString).addDisposableTo(disposeBag)</div><div class="line">    &#125;</div><div class="line">&#125;        </div><div class="line"><span class="comment">// Bind the observable to the subject</span></div><div class="line">observable.bind(to: googleString).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>可以看到，在这个例子中，我们有一个视图模型将 <code>googleString</code> 这个 <code>subject</code> 暴露出来。让 <code>ViewController</code> 能够订阅。我们将这个 <code>observable</code> 绑定到这个 <code>subject</code> 上, 这样我们就可以在网络请求有结果的时候, 立马将请求结果传递到这给 <code>subject</code>。</p>
<h3 id="Bonus-Variable"><a href="#Bonus-Variable" class="headerlink" title="Bonus: Variable"></a>Bonus: Variable</h3><p>距离完完全全的 Rx 还差最后一点了。强行的获取之前发送出来的值。</p>
<p>这就是为什么会有 <strong>Variable</strong> 这个东西了。Variable 是对 BehaviorSubject 的简单包装。<a href="https://github.com/ReactiveX/RxSwift/blob/master/RxSwift/Subjects/Variable.swift">可以看一下</a> 它的实现是非常简单的。但它却非常的方便。</p>
<p>还是用一个小例子来说明这个问题吧。在这个例子中, 我们需要在任何时间都可以得到 “googleString” “当前” 的值。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> googleString = <span class="type">Variable</span>(<span class="string">"currentString"</span>)</div><div class="line"><span class="comment">// get</span></div><div class="line"><span class="built_in">print</span>(googleString.value)</div><div class="line"><span class="comment">// set</span></div><div class="line">googleString.value = <span class="string">"newString"</span></div><div class="line"><span class="comment">// 订阅</span></div><div class="line">googleString.asObservable().subscribe(onNext: &#123; (text) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(text)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>你一定会爱上他的。这基本上就是 <strong>RxSwift</strong> 的简单模式了。</p>
<p>看起来很简单吧，但是别忘了，还是有很多的坑的。还是小心为上。下一篇文章我会讲讲: 怎么写 Rxswift 最保险。</p>
<h3 id="That’s-it"><a href="#That’s-it" class="headerlink" title="That’s it!"></a>That’s it!</h3><p>你知道了太多了。剩下的就是 <code>Subjects</code> 了</p>
<p><a href="http://swiftpearls.com/RxSwift-for-dummies-3-Subjects.html">原文地址</a></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>我是一名来自中国的 iOS 程序员, 对技术有着浓厚的兴趣, 在学习的过程中, 发现了很多来自国外的优秀博客。为了更好的学习这些文章, 产生了将这些文章翻译成中文的想法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好了, 接下来是第三个部分。&lt;strong&gt;Subjects&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;学了之前内容. 我们可能已经发现了。之前学习的内容都是 &lt;code&gt;Observables&lt;/code&gt; 输出事件的部分。我们可以订阅他, 就能知道他输出的事件了。但是我们还不能改变他。&lt;/p&gt;
    
    </summary>
    
      <category term="Reactive" scheme="http://www.CepheusSun.com/categories/Reactive/"/>
    
    
      <category term="iOS" scheme="http://www.CepheusSun.com/tags/iOS/"/>
    
      <category term="Swift" scheme="http://www.CepheusSun.com/tags/Swift/"/>
    
      <category term="翻译" scheme="http://www.CepheusSun.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="Reactive" scheme="http://www.CepheusSun.com/tags/Reactive/"/>
    
  </entry>
  
  <entry>
    <title>RxSwift For Dummies 🐣 Part2</title>
    <link href="http://www.CepheusSun.com/RxSwift%20For%20Dummies%20Part2.html"/>
    <id>http://www.CepheusSun.com/RxSwift For Dummies Part2.html</id>
    <published>2017-05-06T16:26:57.000Z</published>
    <updated>2017-05-19T02:42:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们在上一篇文章中介绍了 RxSwift 基础的部分. 现在我们来学习一些操作符, 来学习一下 <strong>FRP</strong> 中的<strong>F</strong>(unctional) 部分</p>
<a id="more"></a>
<h3 id="Schedulers"><a href="#Schedulers" class="headerlink" title="Schedulers"></a>Schedulers</h3><p>我们先学习一下之前就已经提到过的, 但是没有详细介绍的 <strong>Schedulers</strong></p>
<p><strong>Schedulers</strong> 最常见的用法就是告诉 <code>Observables</code> 和订阅者 应该在哪个线程或者队列中发送事件,或者通知。</p>
<p>关于 <code>Schedulers</code> 最常见的操作符是<code>observerOn</code> 和 <code>subscribleOn</code></p>
<p>通常情况下 <code>Observables</code> 会在它被订阅的那个线程发送事件或者通知。</p>
<h4 id="ObserveOn"><a href="#ObserveOn" class="headerlink" title="ObserveOn"></a>ObserveOn</h4><p><strong>ObserveOn</strong> 指定 <code>Observables</code> 发送事件的线程或者队列。它不会改变它执行的线程。</p>
<p>举一个跟 part1 很相似的例子：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    <span class="type">DispatchQueue</span>.global(qos: .<span class="keyword">default</span>).async &#123;</div><div class="line">        <span class="type">Thread</span>.sleep(forTimeInterval: <span class="number">10</span>)</div><div class="line">        <span class="type">DispatchQueue</span>.main.async &#123;</div><div class="line">            observer.onNext(<span class="string">"Hello dummy 🐥"</span>)</div><div class="line">            observer.onCompleted()</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>假设订阅者是一个 UI 层的东西， 比如说是一个 <code>UIViewController</code> 或者 <code>UIView</code></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="type">DispatchQueue</span>.global(qos: .<span class="keyword">default</span>).async</div></pre></td></tr></table></figure>
<p>我们把这个任务放在子线程中去执行， 以免阻塞 UI </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DispatchQueue.main.async&#123; ...</div></pre></td></tr></table></figure>
<p>我们需要在主线程中去更新 UI, 你应该知道 <code>UIKit</code> 要求对 <code>UI</code> 的操作都必须在主线程中进行。所以这些操作对你来说一定是很熟悉的了。</p>
<p>记下来使用 <strong>ObserveOn</strong> 来重构一下这段代码</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create(&#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    <span class="type">DispatchQueue</span>.global(qos: .<span class="keyword">default</span>).async &#123;</div><div class="line">        <span class="type">Thread</span>.sleep(forTimeInterval: <span class="number">10</span>)</div><div class="line">        observer.onNext(<span class="string">"Hello dummy 🐥"</span>)</div><div class="line">        observer.onCompleted()</div><div class="line">    &#125;</div><div class="line">        <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">    &#125;).observeOn(<span class="type">MainScheduler</span>.instance)</div></pre></td></tr></table></figure>
<p>我们删掉了 <code>DispatchQueue.main.async {}</code> 然后添加了 <code>.observeOn(MainScheduler.instance)</code>。 这个就可以让所有的事件都在主线程中被发送出去。就是这么简单。 <code>&quot;Hello dummy 🐥&quot;</code> 这个元素就能够很安全的被发送给 UI 的元素， 因为我们可以很确定他会在主线程中被发送出去。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">observable.subscribe(onNext: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] (element) <span class="keyword">in</span></div><div class="line">    <span class="keyword">self</span>?.label.text = element</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p><strong>ObserveOn</strong> 大概是最常见的线程调度操作符了。你希望 <code>Observables</code> 包含了所有的逻辑, 和线程操作, 让订阅者尽可能的简单。所以我们接下来再了解一下 <code>subscribeOn</code> 这个操作符。</p>
<h4 id="SubscribeOn-Optional"><a href="#SubscribeOn-Optional" class="headerlink" title="SubscribeOn (Optional)"></a>SubscribeOn (Optional)</h4><p>这是一个非常先进的操作符。你可以先跳过这部分, 以后再来研究🐤</p>
<p><code>subscribeOn</code> 跟 <code>ObserveOn</code> 非常的相似。<strong>但是他只能改变 <code>Observable</code> 将要执行的任务所在的线程。</strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    <span class="type">Thread</span>.sleep(forTimeInterval: <span class="number">10</span>)</div><div class="line">    observer.onNext(<span class="string">"Hello dummy 🐥"</span>)</div><div class="line">    observer.onCompleted()</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125; </div><div class="line">observable</div><div class="line">    .subscribeOn(<span class="type">ConcurrentDispatchQueueScheduler</span>(qos: .<span class="keyword">default</span>))</div><div class="line">    .subscribe(onNext: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] (element) <span class="keyword">in</span></div><div class="line">        <span class="keyword">self</span>?.label.text = element</div><div class="line">    &#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>上面的代码中, 我删掉了 <code>Observable</code> 中的 <code>DispatchQueue.global(qos: .default).async {}</code>  是这个订阅者告诉他应该在一个 <code>global queue</code> 中执行下面的操作, 以免阻塞 UI. 很明显这回导致一个异常的抛出, 之前提到过： 这回导致 <code>Observable</code> 在全局队列中执行, <strong>也会在全局队列中发出事件</strong>。只需要添加在 <code>Observable</code> 中添加 <code>.observeOn(MainScheduler.instance)</code>就能避免这个问题。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    <span class="type">Thread</span>.sleep(forTimeInterval: <span class="number">10</span>)</div><div class="line">    observer.onNext(<span class="string">"Hello dummy 🐥"</span>)</div><div class="line">    observer.onCompleted()</div><div class="line">        <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;.observeOn(<span class="type">MainScheduler</span>.instance)      </div><div class="line">observable</div><div class="line">    .subscribeOn(<span class="type">ConcurrentDispatchQueueScheduler</span>(qos: .<span class="keyword">default</span>))</div><div class="line">    .subscribe(onNext: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] (element) <span class="keyword">in</span></div><div class="line">        <span class="keyword">self</span>?.label.text = element</div><div class="line">    &#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>添加之后，就能够发现刚刚说到的问题已经解决掉了。</p>
<p>我们什么时候应该用 <code>observeOn</code> 呢？最常见的场景是:如果在 <code>Observable</code> 不需要在后台执行耗时操作(读取数据, 大的计算任务)的话.我不认为这是非常频繁的事情。但是，come on!  多知道一个你能用的工具 🛠不是件很 cool 的事情吗？</p>
<h4 id="Scheduler-Types"><a href="#Scheduler-Types" class="headerlink" title="Scheduler Types"></a>Scheduler Types</h4><p>做为 RxSwift 菜鸟, 好奇 <code>observeOn</code> 和 <code>MainScheduler.instance</code> 没什么关系。你可以自己创建一个线程或者直接使用已经创建好了的。如果你很好奇的话<a href="https://github.com/ReactiveX/RxSwift/blob/master/Documentation/Schedulers.md">这里有很多</a>。 这也没什么好复杂的， 就是对 GCD 和 NSOperation 的封装而已。</p>
<h3 id="Transforming-Operators"><a href="#Transforming-Operators" class="headerlink" title="Transforming Operators"></a>Transforming Operators</h3><p>现在你已经知道两种操作符了: 创建操作符(<code>create</code>、<code>interval</code>、<code>just</code>)  和 功能操作符(<code>observeOn</code>, <code>subscribeOn</code>)。 现在再学一些转换操作符吧！</p>
<h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><p>这是非常简单，但非常有用的操作符。它也可能是你未来最常用的一个操作符号。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observerable = <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    observer.onNext(<span class="number">1</span>)</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;        </div><div class="line"><span class="keyword">let</span> boolObservable: <span class="type">Observable</span>&lt;<span class="type">Bool</span>&gt; = observerable.<span class="built_in">map</span>&#123;(element) -&gt; <span class="type">Bool</span> <span class="keyword">in</span></div><div class="line">    <span class="keyword">if</span> element == <span class="number">0</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">&#125;</div><div class="line">boolObservable.subscribe(onNext: &#123; (boolElement) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(boolElement)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p><strong>Map</strong> 操作符号，改变了序列中值的类型。他映射了一个 <code>Observable</code> 所以他以你告诉他的新的方式发送事件。在这个例子中, 我们将一个 <code>Int</code> 类型的 <code>Observable</code> 映射成了一个 <code>Bool</code> 类型。 </p>
<p>所以这个例子的结果是</p>
<blockquote>
<p>true</p>
</blockquote>
<h4 id="Scan"><a href="#Scan" class="headerlink" title="Scan"></a>Scan</h4><p><strong>scan</strong> 要复杂一些了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    observer.onNext(<span class="string">"D"</span>)</div><div class="line">    observer.onNext(<span class="string">"U"</span>)</div><div class="line">    observer.onNext(<span class="string">"M"</span>)</div><div class="line">    observer.onNext(<span class="string">"M"</span>)</div><div class="line">    observer.onNext(<span class="string">"Y"</span>)</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;</div><div class="line">observable.scan(<span class="string">""</span>) &#123; (lastValue, currentValue) -&gt; <span class="type">String</span> <span class="keyword">in</span></div><div class="line">    <span class="keyword">return</span> lastValue + currentValue</div><div class="line">&#125;.subscribe(onNext: &#123; (element) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(element)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>在这个例子中会输出</p>
<blockquote>
<p>D<br>DU<br>DUM<br>DUMM<br>DUMMY</p>
</blockquote>
<p><strong>scan</strong>操作符, 让你可以通过上一个值来改变这一个值。他也被称作元素堆积。上面代码中的 <code>“”</code>是扫描参数传递的起始值。还是想着能干什么呢？</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    observer.onNext(<span class="number">1</span>)</div><div class="line">    observer.onNext(<span class="number">2</span>)</div><div class="line">    observer.onNext(<span class="number">3</span>)</div><div class="line">    observer.onNext(<span class="number">4</span>)</div><div class="line">    observer.onNext(<span class="number">5</span>)</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;</div><div class="line">observable.scan(<span class="number">1</span>) &#123; (lastValue, currentValue) -&gt; <span class="type">Int</span> <span class="keyword">in</span></div><div class="line">    <span class="keyword">return</span> lastValue + currentValue</div><div class="line">&#125;.subscribe(onNext: &#123; (element) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(element)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>这是通过 <strong>scan</strong> 操作符计算 5 的阶层。 算出来的答案是: 120</p>
<p><a href="http://rx-marin.com/post/rxswift-state-with-scan/">Marin 给了一个更有用的例子</a> 关于按钮的 selected 状态</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> button = <span class="type">UIButton</span>()</div><div class="line">button.rx.tap.scan(<span class="literal">false</span>) &#123; last, new <span class="keyword">in</span></div><div class="line">    <span class="keyword">return</span> !last</div><div class="line">&#125;.subscribe(onNext: &#123; (element) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(<span class="string">"tap: <span class="subst">\(element)</span>"</span>)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>现在你知道他能干什么了吧？ 当然还有很多其他的转换操作符。</p>
<h3 id="Filtering-Operators"><a href="#Filtering-Operators" class="headerlink" title="Filtering Operators"></a>Filtering Operators</h3><p>发出事件是很重要的事情, 但是很多情况下我们还需要过滤掉一些没用的事件。这就是 filter 操作符所做的事什么。</p>
<h4 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h4><p>决定那些事件是要响应的那些是要过滤掉的。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observerable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    observer.onNext(<span class="string">"🎁"</span>)</div><div class="line">    observer.onNext(<span class="string">"💩"</span>)</div><div class="line">    observer.onNext(<span class="string">"💩"</span>)</div><div class="line">    observer.onNext(<span class="string">"💩"</span>)</div><div class="line">    observer.onNext(<span class="string">"🎁"</span>)</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;</div><div class="line">observerable.<span class="built_in">filter</span> &#123; (element) -&gt; <span class="type">Bool</span> <span class="keyword">in</span></div><div class="line">    <span class="keyword">return</span> element == <span class="string">"🎁"</span></div><div class="line">&#125;.subscribe(onNext: &#123; (element) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(element)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>输出</p>
<blockquote>
<p>🎁<br>🎁</p>
</blockquote>
<h4 id="Debounce"><a href="#Debounce" class="headerlink" title="Debounce"></a>Debounce</h4><p>简单且有用</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">observerable</div><div class="line">    .debounce(<span class="number">2</span>, scheduler: <span class="type">MainScheduler</span>.instance)</div><div class="line">    .subscribe(onNext: &#123; (element) <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(element)</div><div class="line">    &#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p><strong>debounce</strong> 会过滤掉2秒以内的所有事件, 如果事件a在上一次事件之后的0.5秒被发送出来。那么他就会被过滤掉。如果他在上次事件的2.5秒被发送出来。那么他就会被接受到。需要注意的是, 如果就算当前时间之后没有其他的事件，他也要在2秒之后被发送出来。</p>
<blockquote>
<p>译者: 需要注意的 <code>debounce</code> 和 <code>throttle</code> 的区别。还有 Obj-C 中的 <code>ReactiveCocoa</code> 中的 throttle 的区别。</p>
</blockquote>
<h3 id="Combining-Operator"><a href="#Combining-Operator" class="headerlink" title="Combining Operator"></a>Combining Operator</h3><p>联合操作符让你可以把多个 <code>Observable</code> 转换成一个。</p>
<h4 id="Merge"><a href="#Merge" class="headerlink" title="Merge"></a>Merge</h4><p>合并只是将多个 <code>Observable</code> 发送的事件合并到一个 <code>Observable</code> 中。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    observer.onNext(<span class="string">"🎁"</span>)</div><div class="line">    observer.onNext(<span class="string">"🎁"</span>)</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> observable2 = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    observer.onNext(<span class="string">"💩"</span>)</div><div class="line">    observer.onNext(<span class="string">"💩"</span>)</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;</div><div class="line"><span class="type">Observable</span>.of(observable, observable2).merge().subscribe(onNext: &#123; (element) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(element)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<blockquote>
<p>🎁<br>🎁<br>💩<br>💩</p>
</blockquote>
<h4 id="Zip"><a href="#Zip" class="headerlink" title="Zip"></a>Zip</h4><p><strong>Zip</strong> 将每个 <code>Observable</code> 发出来的值合并成一个值。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    observer.onNext(<span class="string">"🎁"</span>)</div><div class="line">    observer.onNext(<span class="string">"🎁"</span>)</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> observable2 = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    observer.onNext(<span class="string">"💩"</span>)</div><div class="line">    observer.onNext(<span class="string">"💩"</span>)</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;</div><div class="line"><span class="type">Observable</span>.<span class="built_in">zip</span>(observable ,observable2).subscribe(onNext: &#123; (element) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(element)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<blockquote>
<p>🎁💩<br>🎁💩</p>
</blockquote>
<p>这是一个很有用的操作符。还是举一个例子吧！ 假如你有两个网络请求, 你需要等到他们都结束之后再进行下一步操作。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    <span class="type">DispatchQueue</span>.main.async &#123;</div><div class="line">        <span class="type">Thread</span>.sleep(forTimeInterval: <span class="number">3</span>)</div><div class="line">        observer.onNext(<span class="string">"fetched from sever 1"</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> observable2 = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    <span class="type">DispatchQueue</span>.main.async &#123;</div><div class="line">        <span class="type">Thread</span>.sleep(forTimeInterval: <span class="number">2</span>)</div><div class="line">        observer.onNext(<span class="string">"fetched from sever 2"</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;</div><div class="line"><span class="type">Observable</span>.<span class="built_in">zip</span>(observable, observable2)</div><div class="line">    .subscribe(onNext: &#123; (element) <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(element)</div><div class="line">    &#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p><strong>Zip</strong> 会等到两个 <code>Observable</code> 都结束之后将两个请求的结果合并成一个值发送出来。</p>
<h3 id="Other-Operators"><a href="#Other-Operators" class="headerlink" title="Other Operators"></a>Other Operators</h3><p>还有很多有趣的操作符, 比如 <code>reduce</code>、 <code>takeUntil</code> 等等。我认为如果你什么时候有了一些想法, 你也会很容易的找到他们。他们非常的强大, 能让你快速简单的操作事件序列。</p>
<h3 id="Mixing-Operators"><a href="#Mixing-Operators" class="headerlink" title="Mixing Operators"></a>Mixing Operators</h3><p>这个教程不需要具体的实例项目, 但是能快的将各种操作符搭配使用。我们来做一个实验吧：工具根据事件改变视图的颜色。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="type">Observable</span>&lt;<span class="type">NSDate</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    <span class="type">DispatchQueue</span>.global(qos: .<span class="keyword">default</span>).async &#123;</div><div class="line">        <span class="keyword">while</span> <span class="literal">true</span> &#123;</div><div class="line">            <span class="type">Thread</span>.sleep(forTimeInterval: <span class="number">0.01</span>)</div><div class="line">            observer.onNext(<span class="type">NSDate</span>())</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">    &#125;<span class="comment">// 需要在主线程中刷新 UI</span></div><div class="line">    .observeOn(<span class="type">MainScheduler</span>.instance)</div><div class="line">    <span class="comment">// 我们只需要能够被2整除的事件</span></div><div class="line">    .<span class="built_in">filter</span> &#123; (date) -&gt; <span class="type">Bool</span> <span class="keyword">in</span></div><div class="line">        <span class="keyword">return</span> <span class="type">Int</span>(date.timeIntervalSince1970) % <span class="number">2</span> == <span class="number">0</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 将数据转换成颜色</span></div><div class="line">    .<span class="built_in">map</span> &#123; (date) -&gt; <span class="type">UIColor</span> <span class="keyword">in</span></div><div class="line">        <span class="keyword">let</span> interval: <span class="type">Int</span> = <span class="type">Int</span>(date.timeIntervalSince1970)</div><div class="line">        <span class="keyword">let</span> color1 = <span class="type">CGFloat</span>( <span class="type">Double</span>(((interval * <span class="number">1</span>) % <span class="number">255</span>)) / <span class="number">255.0</span>)</div><div class="line">        <span class="keyword">let</span> color2 = <span class="type">CGFloat</span>( <span class="type">Double</span>(((interval * <span class="number">2</span>) % <span class="number">255</span>)) / <span class="number">255.0</span>)</div><div class="line">        <span class="keyword">let</span> color3 = <span class="type">CGFloat</span>( <span class="type">Double</span>(((interval * <span class="number">3</span>) % <span class="number">255</span>)) / <span class="number">255.0</span>)</div><div class="line">        <span class="keyword">return</span> <span class="type">UIColor</span>(red: color1, green: color2, blue: color3, alpha: <span class="number">1</span>)</div><div class="line">    &#125;</div><div class="line">    .subscribe(onNext: &#123;[<span class="keyword">weak</span> <span class="keyword">self</span>] (color) <span class="keyword">in</span></div><div class="line">        <span class="keyword">self</span>?.demoView.backgroundColor = color</div><div class="line">    &#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>You can find more examples in the <a href="https://github.com/ReactiveX/RxSwift/blob/master/Rx.playground/Pages/Combining_Operators.xcplaygroundpage/Contents.swift">RxSwfit playgrounds</a></p>
<h3 id="That’s-it"><a href="#That’s-it" class="headerlink" title="That’s it!"></a>That’s it!</h3><p>你知道了太多了。剩下的就是 <code>Subjects</code> 了</p>
<p><a href="http://swiftpearls.com/RxSwift-for-dummies-2-Operators.html">原文地址</a></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>我是一名来自中国的 iOS 程序员, 对技术有着浓厚的兴趣, 在学习的过程中, 发现了很多来自国外的优秀博客。为了更好的学习这些文章, 产生了将这些文章翻译成中文的想法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们在上一篇文章中介绍了 RxSwift 基础的部分. 现在我们来学习一些操作符, 来学习一下 &lt;strong&gt;FRP&lt;/strong&gt; 中的&lt;strong&gt;F&lt;/strong&gt;(unctional) 部分&lt;/p&gt;
    
    </summary>
    
      <category term="Reactive" scheme="http://www.CepheusSun.com/categories/Reactive/"/>
    
    
      <category term="iOS" scheme="http://www.CepheusSun.com/tags/iOS/"/>
    
      <category term="Swift" scheme="http://www.CepheusSun.com/tags/Swift/"/>
    
      <category term="翻译" scheme="http://www.CepheusSun.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="Reactive" scheme="http://www.CepheusSun.com/tags/Reactive/"/>
    
  </entry>
  
  <entry>
    <title>RxSwift For Dummies 🐣 Part1</title>
    <link href="http://www.CepheusSun.com/RxSwift%20For%20Dummies%20Part1.html"/>
    <id>http://www.CepheusSun.com/RxSwift For Dummies Part1.html</id>
    <published>2017-05-06T10:41:59.000Z</published>
    <updated>2017-05-19T02:42:26.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>RxSwift</strong> 真的是一个非常值得学习的东西。非常遗憾的是我没有研究所有的架构模式MVVM VIPER Routing。</p>
<p>要非常好的讲出来RxSwift到底是个什么东西，我也说不好。毕竟他能做太多的事情了。普遍认为，他是函数响应式编程中非常重要的观察者模式。在最初的定义中,他并不就是函数响应式编程。他最初的设计灵感就是来自于函数响应式(<strong>FRP</strong>), 所以也可以说它包含了函数响应式的特性。</p>
<p>如果你不知道什么是 <strong>FRP</strong> 的话, 不用担心, 在这个教程中你会自然而然的理解什么是 <strong>FRP</strong>。</p>
<p>通过对 RXSwift 的深入研究, 我得到了很多的启发, 同时也被很多的问题困扰。相信你也会这样。</p>
<p>需要花很多个小时的时间来适应新的思维模式，唯一能确定的是，一旦你适应了，你就再也不想回到从前了。</p>
<p>在这个教程中，我会尽可能的节约你的时间，并且解释的尽可能的详细。想教幼儿园的小朋友一样。</p>
<p>开始学习之前, 请确定你已经掌握了 Swift 和 UIkit 的基础知识. </p>
<a id="more"></a>
<h3 id="The-Why"><a href="#The-Why" class="headerlink" title="The Why?"></a>The Why?</h3><p>写 UI 的时候经常会处理一些异步的操作。我们很早就知道要使用观察者模式来实现这个东西。我相信你现在已经非常熟悉代理模式了。代理模式是一种很酷的设计模式。但是写起来真的很烦😡。</p>
<center><br><img src="http://swiftpearls.com/images/cry.jpg" alt=""><br></center>

<ul>
<li>代理模式需要些很多的模版代码: 创建一个协议, 声明一个 <code>delegate</code> 变量, 遵守协议, 设置代理…</li>
<li>写完这么多模版代码,可能你不小心就忘了其中的某个步骤。 比如说 <code>object.delegete = self</code></li>
<li>管理起来非常麻烦。他需要在好几个文件中跳跃。</li>
</ul>
<p>RxSwift 解决了这个问题。他能够让你通过声明的方式使用观察者模式。减少了管理的负担, 当然，也不用写那么多模版代码。</p>
<p>我刚刚开始了一个项目，在这个项目中，至今还没有写一个 <code>delegate</code></p>
<h3 id="Basic-Example"><a href="#Basic-Example" class="headerlink" title="Basic Example"></a>Basic Example</h3><p>talk is cheap, show you the code.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleClass</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">runExample</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="comment">// OBSERVABLE //</span></div><div class="line">        <span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span></div><div class="line">            <span class="type">DispatchQueue</span>.global(qos: .<span class="keyword">default</span>).async &#123;</div><div class="line">                <span class="type">Thread</span>.sleep(forTimeInterval: <span class="number">10</span>)</div><div class="line">                observer.onNext(<span class="string">"Hello dummy 🐣"</span>)</div><div class="line">                observer.onCompleted()</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// OBSERVER //</span></div><div class="line">        </div><div class="line">        observable.subscribe(onNext:&#123; (element) <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(element)</div><div class="line">        &#125;).addDisposableTo(disposeBag)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这就是最基本的例子, 在这个示例中, 我们声明了一个 runExample 方法。在这个方法中执行的是一些 RxSwift 中的事情。想一下在这个例子中发生了什么吧。</p>
<h3 id="Observable-📡"><a href="#Observable-📡" class="headerlink" title="Observable 📡"></a>Observable 📡</h3><p>我们还是从 RxSwift 中最基本的构建单元开始吧。 <code>Observable</code>。 它其实非常的简单。 <code>Observable</code> 执行某些动作, 然后观察者能够对此作出一些反应。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span></div><div class="line">    <span class="type">DispatchQueue</span>.global(qos: .<span class="keyword">default</span>).async &#123;</div><div class="line">        <span class="comment">// Simulate some work</span></div><div class="line">        <span class="type">Thread</span>.sleep(forTimeInterval: <span class="number">10</span>)</div><div class="line">        observer.onNext(<span class="string">"Hello dummy 🐣"</span>)</div><div class="line">        observer.onCompleted()</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;</div><div class="line">                </div><div class="line">observable.subscribe(onNext:&#123; (element) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(element)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>现在我们有了一个 <code>Observable</code> 信号了。这种信号只有在被订阅之后才会执行它也被叫做:冷信号❄️。相反热信号🔥是那种既是没有被订阅也会执行的信号。</p>
<p>在下一步们我们会具体的讲解二者的区别。现在你只需要理解的是: 因为你初始化出来的是一个冷❄️信号<code>Hello dummy 🐣</code>这个值是不会被发送出来的。冷信号❄️只有在有东西订阅之后才会发送消息。</p>
<p>我们一步一步的来分析一下这究竟是什么意思。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="type">DispatchQueue</span>.global(qos: .<span class="keyword">default</span>).async &#123;...&#125;</div></pre></td></tr></table></figure>
<p>这行代码保证这个 <code>Observable</code> 信号在主线程中发送消息。其实 RxSwift 是有一个调度机制, 但是我现在还不想那么早告诉你, 不然你该记不值了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">observer.onNext(<span class="string">"Hello dummy 🐣"</span>)</div></pre></td></tr></table></figure>
<p>一个 <code>Observable</code> 信号发出的消息从时间上来看, 可以被看作是一个 <strong>序列</strong>。在这个序列中可能有无限多的值。我们可以通过 <code>onNext</code> 方法类将这些值发送出来。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">observer.onCompleted()</div></pre></td></tr></table></figure>
<p>当这个序列已经发送完了所有的值之后，它可以发送一个 <code>Completed</code> 或者 <code>Error</code>出来。之后这个信号就不能在产生更多的值了, 然后就会随着一个闭包被释放掉。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> <span class="type">Disposables</span>.create()</div></pre></td></tr></table></figure>
<p>每一个  <code>Observable</code> 信号都要返回一个 <code>Disposable</code>.</p>
<p>使用 <code>Disposables.create()</code> 如果你不想在信号被释放的时候处理其他事情。你可以看看<a href="https://github.com/ReactiveX/RxSwift/blob/master/RxSwift/Disposables/NopDisposable.swift">NopDisposable</a>的实现，你会发现，他什么事情都没有做，只是一些空方法。</p>
<h3 id="Disposable"><a href="#Disposable" class="headerlink" title="Disposable"></a>Disposable</h3><p><code>Disposable</code> 对象必须要在 <code>Observable</code> 中返回, 它是用来在<code>Observable</code>不能再正常的完成的时候清除掉这些信号的。比如说你可以使用 <strong>AnonymousDisposable</strong>:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> <span class="type">Disposables</span>.create(with: &#123;</div><div class="line">    connection.close()</div><div class="line">    database.closeImportantSomething()</div><div class="line">    cache.clear()</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>只有当信号被提前释放或者程序手动调用了 <code>dispose()</code> 方法, <code>Disposable</code> 才会被调用。但是在多数情况下, <code>dispose()</code> 方法都是通过 <strong>Dispose Bags</strong> 自动调用的。别着急，你可以在一些更具体的例子中自己实现这个东西。</p>
<h3 id="Observer-🕵"><a href="#Observer-🕵" class="headerlink" title="Observer 🕵"></a>Observer 🕵</h3><p>我们创建的 <code>Observable</code> 是冷信号❄️。 除非我们订阅了它，不然它是不会发送信号的。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">observable.subscribe(onNext: &#123;(element) <span class="keyword">in</span></div><div class="line">  <span class="built_in">print</span>(element)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>这就是订阅信号的方法。在 <code>subscribeNext</code> 方法中一个订阅就发生了。这个方法也会返回一个 <code>Disposable</code>.这个 <code>Disposable</code> 就是对这个订阅的记录</p>
<p>这个 <code>Observable</code> 就开始工作了, 10秒之后, 你就会在控制台看见</p>
<blockquote>
<p>Hello dummy 🐣</p>
</blockquote>
<p><code>subscribe(onNext:)</code> 只会在Next事件发送出来的时候响应。也可以使用 <code>subscribe(onCompleted:)</code> 和 <code>subscribe(onError:)</code> 响应对应的事件。</p>
<h3 id="Dispose-Bag-🗑"><a href="#Dispose-Bag-🗑" class="headerlink" title="Dispose Bag 🗑"></a>Dispose Bag 🗑</h3><p>唯一一个还有点神秘的东西就是 <code>addDisposableTo</code> 这个方法了。</p>
<blockquote>
<p>Dispose bags are used to return ARC like behavior to RX. When a DisposeBag is deallocated, it will call dispose on each of the added disposables.</p>
<p>Dispose bags 就像是一个垃圾筐。就像是 AutoreleasePool 一样，当这个垃圾筐被释放的时候, 里面的所有东西都会被释放掉。</p>
</blockquote>
<p>当你订阅一个信号的时候, 你就需要把你创建出来的 <code>Disposable</code> 添加到这个框里面。当这的框被释放的时候(ExampleClass 对象 dealloc 的时候)。这些没有执行完的<code>Disposable</code>就会被释放掉。</p>
<p>它被用作释放在闭包中引用的值, 以及没用的资源, 比如说, 一个 HTTP 网络连接, 数据库连接, 或者是缓存的对象。</p>
<p>如果你还是不懂, 一会儿再举一个例子。</p>
<h3 id="Observable-operators"><a href="#Observable-operators" class="headerlink" title="Observable operators"></a>Observable operators</h3><p><code>create</code> 只是信号诸多操作方法中的一个而已，它被用来创建一个新的信号。可以看一下 ReactiveX<br>的<a href="http://reactivex.io/documentation/operators.html">官方文档</a>。哪里有所有的操作方法。我只是举一些常见的例子。</p>
<h4 id="Just"><a href="#Just" class="headerlink" title="Just"></a>Just</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.just(<span class="string">"Hello again dummy 🐥"</span>);</div><div class="line">observable.subscribe(onNext: &#123; (element) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(element)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div><div class="line">        </div><div class="line">observable.subscribe(onCompleted: &#123; </div><div class="line">    <span class="built_in">print</span>(<span class="string">"I'm done"</span>)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<blockquote>
<p>Hello again dummy 🐥<br>I’m done</p>
</blockquote>
<p><strong>Just</strong> just 创建了一个智能释放一个值的信号。所以在这个信号序列中的事件，是这样的:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.Next(&quot;Hello&quot;) -&gt;  .Completed</div></pre></td></tr></table></figure>
<h4 id="Interval"><a href="#Interval" class="headerlink" title="Interval"></a>Interval</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.interval(<span class="number">0.3</span>, scheduler: <span class="type">MainScheduler</span>.instance)</div><div class="line">observable.subscribe(onNext: &#123; (element) <span class="keyword">in</span></div><div class="line">   <span class="built_in">print</span>(element)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<blockquote>
<p>0<br>1<br>2<br>3<br>…</p>
</blockquote>
<p><strong>Interval</strong> 是一个非常具体的操作符号。在这个例子中, 它从 0 每0.3秒递增, <code>scheduler</code> 是用来定义异步行为的。</p>
<h4 id="Repeat"><a href="#Repeat" class="headerlink" title="Repeat"></a>Repeat</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.repeatElement(<span class="string">"This is fun 🙄"</span>)</div><div class="line">observable.subscribe(onNext: &#123; (element) <span class="keyword">in</span></div><div class="line">   <span class="built_in">print</span>(element)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<blockquote>
<p>This is fun 🙄<br>This is fun 🙄<br>This is fun 🙄<br>This is fun 🙄<br>…</p>
</blockquote>
<p><strong>repeat</strong> 会无限的重复我们给定的值。你可以通过定义 <code>scheduler</code> 类型的方法来控制线程的行为。</p>
<p>目前为止, 可能都不是非常的给力。但是知道其他的操作是必要的。另外一件很重要的事情涘，这是 RxSwift 最有用的一部分。</p>
<h3 id="Real-life-example"><a href="#Real-life-example" class="headerlink" title="Real life example"></a>Real life example</h3><p>现在我们开始快速的通过一个例子巩固一下这些知识。我们对 RxSwift 的了解目前为止是非常有限的。所有我们先使用一个简单的 MVC 的例子。我们先创建一个模型， 它可以从 google 上获取数据。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Foundation</div><div class="line"><span class="keyword">import</span> RxCocoa</div><div class="line"><span class="keyword">import</span> RxSwift</div><div class="line"></div><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">GoogleModel</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">createGoogleDataObservable</span><span class="params">()</span></span> -&gt; <span class="type">Observable</span>&lt;<span class="type">String</span>&gt; &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create(&#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">            </div><div class="line">            <span class="keyword">let</span> session = <span class="type">URLSession</span>.shared</div><div class="line">            <span class="keyword">let</span> task = session.dataTask(with: <span class="type">URL</span>(string: <span class="string">"https://www.google.com"</span>)!) &#123; (data, response, error) <span class="keyword">in</span></div><div class="line">                </div><div class="line">                <span class="comment">// 我们需要在主线程中更新</span></div><div class="line">                <span class="type">DispatchQueue</span>.main.async &#123;</div><div class="line">                    <span class="keyword">if</span> <span class="keyword">let</span> err = error &#123;</div><div class="line">                        <span class="comment">// 如果请求失败, 直接发处失败的事件</span></div><div class="line">                        observer.onError(err)</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        <span class="comment">// 解析数据</span></div><div class="line">                        <span class="keyword">if</span> <span class="keyword">let</span> googleString = <span class="type">String</span>(data: data!, encoding: .ascii) &#123;</div><div class="line">                            <span class="comment">// 将数据发送出去</span></div><div class="line">                            observer.onNext(googleString)</div><div class="line">                        &#125; <span class="keyword">else</span> &#123;</div><div class="line">                            <span class="comment">// 如果解析失败发送失败的事件</span></div><div class="line">                            observer.onNext(<span class="string">"Error! Unable to parse the response data from google!"</span>)</div><div class="line">                        &#125;</div><div class="line">                        <span class="comment">// 结束这个序列</span></div><div class="line">                        observer.onCompleted()</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            task.resume()</div><div class="line">            </div><div class="line">            <span class="comment">// 返回一个 AnonymousDisposable</span></div><div class="line">            <span class="keyword">return</span> <span class="type">Disposables</span>.create(with: &#123;</div><div class="line">                <span class="comment">// 取消请求</span></div><div class="line">                task.cancel()</div><div class="line">            &#125;)</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这是非常简单的。 <code>createGoogleDataObservable</code>中我们创建了一个可以被订阅的信号。这个信号创建了一个从 google 获取数据的任务。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="type">DispatchQueue</span>.main.async &#123;...&#125;</div></pre></td></tr></table></figure>
<p>URLSession 的任务是在后台线程中进行的, 所以我们需要在 UI 线程中更新。记住还有一个 <code>schedulers</code> 这会在更高级的阶段介绍出来。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> <span class="type">Disposables</span>.create(with: &#123;</div><div class="line"> task.cancel()</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p><code>Disposable</code> 是一个给长给力的机制： 如果订阅者停止订阅这个信号了。这个任务就会被取消。</p>
<p>接下来是订阅者这部分的内容了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"><span class="keyword">import</span> RxCocoa</div><div class="line"><span class="keyword">import</span> RxSwift</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// 通常就是这样创建 DisposeBag 的</span></div><div class="line">    <span class="comment">// 当这个 controller 被释放掉的时候，disposebag</span></div><div class="line">    <span class="comment">// 也会释放掉, 并且所有 bag 中的元素都会调用 dispose() 方法</span></div><div class="line">    <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">    <span class="keyword">let</span> model = <span class="type">GoogleModel</span>()</div><div class="line">    </div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> googleText: <span class="type">UITextView</span>!</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        </div><div class="line">        <span class="comment">// 记住使用 [weak self] 或者 [unowned self] 来避免循环引用</span></div><div class="line">        model.createGoogleDataObservable()</div><div class="line">            .subscribe(onNext: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] (element) <span class="keyword">in</span></div><div class="line">                <span class="keyword">self</span>?.googleText.text = element</div><div class="line">            &#125;).addDisposableTo(disposeBag)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>神奇吗？没有协议, 没有代理。只是声明了一下在一个事情发生的时候应该做什么。</p>
<p>在闭包中记得使用 <code>[weak self]</code> 或者 <code>[unowned self]</code> 来避免循环引用</p>
<p>还有一种更响应式的方法来为 <code>UITextView</code> 绑定文本, 绑定。但那是更高级的内容。</p>
<h3 id="Dispose-Bag-Example"><a href="#Dispose-Bag-Example" class="headerlink" title="Dispose Bag Example"></a>Dispose Bag Example</h3><p>你可能已经发现了 <code>disposeBag</code> 是 <code>ViewController</code> 的一个成员变量。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div></pre></td></tr></table></figure>
<p>当这个控制器被释放的时候，它也会释放掉这个 <code>disposeBag</code> .</p>
<p>如果这个 <code>disposeBag</code> 被释放掉之后, 它我们添加到这个 bag 里面所有的信号都会被释放掉。而这个网络请求任务如果还没有结束的话也会被取消。<br>希望我讲清楚了 <code>DisposeBag</code> 的机制。</p>
<h3 id="That‘s-it！"><a href="#That‘s-it！" class="headerlink" title="That‘s it！"></a>That‘s it！</h3><p>Demo 我已经放在 <a href="https://github.com/CepheusTeam/Translate">GitHub</a> 上了。</p>
<p>到现在, 我们已经学到了如何创建一个 Observable 和 订阅者。以及 disposing 机制是怎么回事。希望你能够理解到这样做比平常的观察者模式有什么优势。</p>
<p>下一篇是关于 RxSwift 操作符的。</p>
<p><a href="http://swiftpearls.com/RxSwift-for-dummies-1-Observables.html#basic-example">原文地址</a></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>我是一名来自中国的 iOS 程序员, 对技术有着浓厚的兴趣, 在学习的过程中, 发现了很多来自国外的优秀博客。为了更好的学习这些文章, 产生了将这些文章翻译成中文的想法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;RxSwift&lt;/strong&gt; 真的是一个非常值得学习的东西。非常遗憾的是我没有研究所有的架构模式MVVM VIPER Routing。&lt;/p&gt;
&lt;p&gt;要非常好的讲出来RxSwift到底是个什么东西，我也说不好。毕竟他能做太多的事情了。普遍认为，他是函数响应式编程中非常重要的观察者模式。在最初的定义中,他并不就是函数响应式编程。他最初的设计灵感就是来自于函数响应式(&lt;strong&gt;FRP&lt;/strong&gt;), 所以也可以说它包含了函数响应式的特性。&lt;/p&gt;
&lt;p&gt;如果你不知道什么是 &lt;strong&gt;FRP&lt;/strong&gt; 的话, 不用担心, 在这个教程中你会自然而然的理解什么是 &lt;strong&gt;FRP&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;通过对 RXSwift 的深入研究, 我得到了很多的启发, 同时也被很多的问题困扰。相信你也会这样。&lt;/p&gt;
&lt;p&gt;需要花很多个小时的时间来适应新的思维模式，唯一能确定的是，一旦你适应了，你就再也不想回到从前了。&lt;/p&gt;
&lt;p&gt;在这个教程中，我会尽可能的节约你的时间，并且解释的尽可能的详细。想教幼儿园的小朋友一样。&lt;/p&gt;
&lt;p&gt;开始学习之前, 请确定你已经掌握了 Swift 和 UIkit 的基础知识. &lt;/p&gt;
    
    </summary>
    
      <category term="Reactive" scheme="http://www.CepheusSun.com/categories/Reactive/"/>
    
    
      <category term="iOS" scheme="http://www.CepheusSun.com/tags/iOS/"/>
    
      <category term="Swift" scheme="http://www.CepheusSun.com/tags/Swift/"/>
    
      <category term="翻译" scheme="http://www.CepheusSun.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="Reactive" scheme="http://www.CepheusSun.com/tags/Reactive/"/>
    
  </entry>
  
  <entry>
    <title>MVVM design pattern and RxSwift</title>
    <link href="http://www.CepheusSun.com/MVVM%20design%20pattern%20and%20RxSwift.html"/>
    <id>http://www.CepheusSun.com/MVVM design pattern and RxSwift.html</id>
    <published>2017-05-05T17:35:57.000Z</published>
    <updated>2017-05-19T02:44:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文翻译自(<a href="http://lukagabric.com/mvvm-design-pattern-and-rxswift/">http://lukagabric.com/mvvm-design-pattern-and-rxswift/</a>)</p>
<h3 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h3><p>MVVM 是一种设计模式。他是程序的代码分离成三个部分: <code>Model</code>、<code>View</code>、<code>ViewModel</code>。 <code>Model</code> 代表数据的表现, <code>View</code> 代表用户看到的界面，<code>ViewModel</code> 代表着模型层和视图层的主要关联关系。</p>
<a id="more"></a>
<h4 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h4><p><code>Model</code> 就是数据层。他包括一定范围内的模型，和业务逻辑。 <code>Model</code> 并不只是你程序中的那些模型结构体或者数据库, 他也包含了一些 Service 或者组件, 比如说 <code>Alamofire</code>和一些 SDK 等等。</p>
<p><code>Model</code> 层执行所有跟数据有关的操作。比如常见的增删改查等等。这些操作由 <code>ViewModel</code> 发起。当 <code>Model</code>操作完了数据之后它再告诉 <code>ViewModel</code> 结果。</p>
<p><code>Model</code> 被 ViewModel 持有。他也并不知道视图层和 <code>ViewModel</code> 层的事情。因为他是和这两个东西完全隔离开的。</p>
<h4 id="View"><a href="#View" class="headerlink" title="View"></a>View</h4><p><code>View</code> 是程序中数据的可视化展示。它没有逻辑相关的东西。他主要有接受用户交互事件，和将数据展示在界面上两个人物。它将用户交互的事件转发到 <code>ViewModel</code> 中进行处理。<code>View</code> 观察 <code>ViewModel</code> 中数据的变化, 并且将这些变化展现出来。</p>
<p><code>View</code> 和 <code>Model</code> 之间没有任何直接的关联。 他们通过 <code>View</code> 持有的 <code>ViewModel</code> 产生关联。</p>
<p>界面信息在 <code>xib</code> 或者 <code>StoryBoard</code> 中通过 <code>UIKit</code> 中的组件被定义。<code>ViewController</code> 是直接跟 <code>xib</code> 或者 <code>StoryBoard</code> 关联的。它包含了 <code>Xib</code> 或者 <code>StoryBoard</code> 中的 <code>outlets</code> 和一些定义 UI 的额外配置。他也负责管理 <code>View</code> 的生命周期。 在 MVVM 中他和 <code>View</code> 的关联是非常紧密的, 他其实就是 <code>View</code> 层的一部分。</p>
<h4 id="ViewModel"><a href="#ViewModel" class="headerlink" title="ViewModel"></a>ViewModel</h4><p><code>ViewModel</code> 是程序的逻辑层。他处理用户交互行为。然后更新数据。然后在通知 <code>View</code> 新的数据和显示的方式。举一个很平常的例子。一个 ViewModel 从Model层中请求到了一些包含 <code>Date</code> 的模型。 这个 Date 值并不会被告诉给 View, ViewModel 告诉 View 的应该是被格式化之后的字符串。视图不会操作数据本身，他只负责将 ViewModel 准备好的数据展示出来。</p>
<h4 id="Similar-to-MVC"><a href="#Similar-to-MVC" class="headerlink" title="Similar to MVC"></a>Similar to MVC</h4><p>在 MVC 设计模式中, <code>ViewController</code> 是 <code>Model</code> 和 <code>View</code> 之间的桥梁。他只有视图, 管理视图的结构，管理用户的交互。他还负责管理视图的生命周期,加载、显示、消失等。他具有的另外一个指责是更新模型数据, 这就包括了显示数据的相关逻辑(也就是数据的处理,如上文提到的讲 <code>Date</code> 转化成 <code>String</code> 的逻辑)。因为他具有这么多的职责，所以很多情况下 <code>Viewcontroller</code> 就会变的非常大。所以也有人称MVC 为 Massive View Controller</p>
<p>出现复杂的 <code>viewController</code> 主要有两个原因。由于 <code>Controller</code> 有很多的职责。代码就会变的非常的复杂。这很明显就违背了单一职责这个原则。这也让测试 <code>Controller</code> 中的逻辑变成一件很麻烦的事情。<code>Controller</code> 和 <code>View</code> 的高度耦合。<code>view</code> 的生命周期使得逻辑的分离变的不那么容易。我们就需要花很大的精力来处理视图的生命周期。</p>
<p>MVVM 和 MVC 非常相似。 正如前文所说。 MVC 中的 <code>Controller</code> 同时包含了视图和程序的逻辑。将逻辑相关的代码从 <code>Controller</code> 中分离出来, 放到他自己抽象出来的类里面去。这时候的 <code>Controller</code>就只关注视图相关的事情。刚刚分离出来的这个类处理相关的逻辑。这个类就是 ViewModel。他和 <code>Controller</code> 具有一一对应关系。所以说 MVVM 就是将逻辑代码从 <code>controller</code>中分离到 <code>ViewModel</code> 中的 MVC</p>
<h4 id="Binding-data-from-ViewModel-to-View"><a href="#Binding-data-from-ViewModel-to-View" class="headerlink" title="Binding data from ViewModel to View"></a>Binding data from ViewModel to View</h4><p>有很多将数据绑定的机制, 比如 Swift 中的属性观察。视图可以对外提供一个 Closure 来进行视图的更新。这个 Closure 用来通知 View 他关联的属性的更新。除了熟悉观察。我们的程序还经常需要处理各种异步操作，比如网络请求，和通知或者事件的流信息。函数响应式编程(FRP)框架简直就是为了处理这类事件而生的。现在也有很多FRP 框架，对 iOS 开发来说，最出名的应该是 <code>RxSwift</code> 和 <code>ReactiveCocoa</code>了。之前在一篇对比文章中有提到过, 不管怎样，我更喜欢 <code>RxSwift</code> </p>
<h3 id="RxSwift"><a href="#RxSwift" class="headerlink" title="RxSwift"></a>RxSwift</h3><p>指令式编程是基于一步一步明确的指令来执行的。他详细的描述了程序的运行过程。值做为状态而存在。由于程序是一步一步的执行的,所以如果其中一个值在之后发生了改变，这一改变也不会被传到下一步。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 指令式编程</span></div><div class="line">a = <span class="number">1</span></div><div class="line">b = <span class="number">2</span></div><div class="line"><span class="built_in">c</span> = a + b  <span class="comment">// c = 3</span></div><div class="line">a = <span class="number">5</span>   <span class="comment">// c = 3</span></div></pre></td></tr></table></figure>
<p>响应式编程,跟指令式相反。他是基于变化的。他基于声明式编程，这就意味着他关注的是程序应该完成什么，而不是程序是怎么运行的。它是通过数学运算和其他像是 <code>filter</code> <code>map</code> <code>reduce</code> 之类的运算操作的运用来实现的。如何准确的运行被交给底层的程序语言或者框架来考虑了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 响应式编程</span></div><div class="line">a = <span class="number">1</span></div><div class="line">b = <span class="number">2</span></div><div class="line"><span class="built_in">c</span> = a + b <span class="comment">// c = 3</span></div><div class="line">a = <span class="number">5</span>     <span class="comment">// c = 7</span></div></pre></td></tr></table></figure>
<p>RxSwift 让你能用通过函数响应式编程来编写你的代码。使用 RxSwift 可以很轻松的创建事件或者数据流。这些事件或者数据流可以互相组合、转换。并且最终被观察到，基于值来进行一些操作。</p>
<p>正如前文所说，在 MVVM 中 View 观察 ViewModel 中模型的数据。RxSwift 提供了一个非常简单并且干净的方法来观察这些值，并绑定到对应的 View 上。</p>
<h4 id="Observable"><a href="#Observable" class="headerlink" title="Observable"></a>Observable</h4><p>Observable 是 RxSwift 的主要构成部分。他是一个可以异步的接受元素的序列。这个序列可以有0个或者很多个的元素。有三种事件能够基于它发生。下一步(Next)、完成(Completed)、错误(Error)</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Event</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> next(<span class="type">Element</span>)   <span class="comment">// 这个序列的下一个元素</span></div><div class="line">    <span class="keyword">case</span> error(<span class="type">Swift</span>.<span class="type">Error</span>)<span class="comment">// 这个序列发生了错误</span></div><div class="line">    <span class="keyword">case</span> completed      <span class="comment">// 这个序列成功的完成的所有人任务</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以使用 <code>Observable</code> 的 <code>subscribe</code> 方法来订阅这些事件。 用这种方法可以分别处理这个事件的各种情况。</p>
<ul>
<li>OnNext: 可以使用被订阅的元素值。</li>
<li>OnCompleted: 当这个序列成功的发送完所有元素之后会被调用。</li>
<li>OnError: 当这个序列不能完成的时候被调用。</li>
</ul>
<p>只要 <code>Complete</code> 或者 <code>Error</code> 被观察到了, 这个序列就不能产生任何新的元素了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">observable.subscribe(</div><div class="line">    onNext: &#123; element <span class="keyword">in</span> ... &#125;, </div><div class="line">    onError: &#123; error <span class="keyword">in</span> ... &#125;,</div><div class="line">    onCompleted: &#123; ... &#125;</div><div class="line">)</div></pre></td></tr></table></figure>
<h4 id="Hot-and-cold-observables"><a href="#Hot-and-cold-observables" class="headerlink" title="Hot and cold observables"></a>Hot and cold observables</h4><p>即使没有被观察也会发送消息的信号被称作热信号。想象一下 <code>NotificationCenter</code> 技术没有其他对象接受通知, 也也然会发送出来。如果你在某个时候订阅了这个信号, 之前发出来的消息你就会错过。</p>
<p>那些只有被订阅之后才开始发送消息的信号被称作冷信号。这些资源会被分配给每个订阅对象。(比如说，你每次订阅的网络请求就会被释放)但是这些资源可以被多个对象共享(只有一个网络请求被释放了,但可能这被很多个观察者订阅)</p>
<h4 id="Driver"><a href="#Driver" class="headerlink" title="Driver"></a>Driver</h4><p>Driver 是 RxCocoa 框架中的一个值类型。它是对一个可订阅的序列的封装，如果要把一个简单的值绑定到View上, 它会是一个更简单的方法。如果 <code>Observables</code> 发生了错误, 你需要很方便的将一些东西展示出来。每个信号都可以很容易的被转换成 <code>Driver</code>。 当你提供了这个信号发生错误的返回什么的时候，只需要使用 <code>asDriver</code> 方法就可以了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.asDriver(onErrorJustReturn: <span class="string">"No items to display."</span>)</div></pre></td></tr></table></figure>
<p>想象一下异步操作的场景。比如说网络请求。我们需要在界面上展示返回值的个数。在这个场景中，我们需要将返回值的个数映射成一个字符串。可能这个字符串的格式可能是 <code>&quot;X item(s)&quot;</code> <code>Driver</code> 还能够确保我们需要修改 UI 的这个订阅是发生在主线程当中的。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> results: <span class="type">Observable</span>&lt;[<span class="type">SomeItem</span>]&gt; = ...</div><div class="line"><span class="keyword">let</span> resultsCountDriver = results</div><div class="line">    .<span class="built_in">map</span> &#123; <span class="string">"<span class="subst">\($<span class="number">0</span>.<span class="built_in">count</span>)</span> item(s)"</span> &#125;</div><div class="line">    .asDriver(onErrorJustReturn: <span class="string">"No items to display."</span>)</div></pre></td></tr></table></figure>
<p>把这个数据绑定到 Label 中就很简单了</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">resultsCountDriver.drive(resultCountLabel.rx.text).disposed(by: disposeBag)</div></pre></td></tr></table></figure>
<h4 id="DisposeBag"><a href="#DisposeBag" class="headerlink" title="DisposeBag"></a>DisposeBag</h4><p>如果一个序列停止了, 但是它并没有被释放掉。在他就会造成资源的浪费和内存的泄漏。知道他完成了或者处错了。如果一个序列没有停止，也没有出错，这个资源就会被永久的占用。这就是为什么我们要在需要订阅的对象中生命一个 <code>DisposeBag</code> 的成员变量的原因了。这样的话，只要这个对象呗释放掉了，所有相关的资源都会被释放并且被系统回收。</p>
<h4 id="Variable"><a href="#Variable" class="headerlink" title="Variable"></a>Variable</h4><p><code>Variable</code>表示可以被订阅的状态。它是信号和功能范式之间的桥梁。<code>Variable</code> 总是包含了提供给构造函数的初始值当你订阅当前的值的时候，这个初始值会立马被发送到过来。(只有最新和当前值会被发出，旧的值不会)。也可以直接获取或者设置 <code>Variable</code> 的值。他内部的信号可以通过 <code>asObservable</code> 方法获取到。另外, <code>Variable</code> 永远都不会出错。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> variable = <span class="type">Variable</span>(<span class="string">"My Variable"</span>)</div><div class="line">variable.value = <span class="string">"Some value"</span></div><div class="line"><span class="keyword">let</span> variableObservable = variable.asObservable()</div><div class="line">variableObservable.subscribe(onNext: &#123; value <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(value) <span class="comment">//prints "Some value"</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>最后， 我写了一个 Demo 来演示 MVVM + RxSwift. 这是一个简单的程序获取并且显示天气的数据。这个app有三种状态， 加载中，显示中，错误。有两种对错误的处理，一是，我们只显示错误。另一个是显示之前的数据。如果没有，就显示错误。这两种处理方式都是通过响应式编程和指令式编程实现的。</p>
<p>在这些例子中，只有 ViewMoel 会发生改变。你可以看到给功能增加复杂性(显示错误或者旧的数据)。如果使用指令式编程，可能会对代码带来很多的变动。而使用响应式编程，只需要增加额外的状态而已。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文翻译自(&lt;a href=&quot;http://lukagabric.com/mvvm-design-pattern-and-rxswift/&quot;&gt;http://lukagabric.com/mvvm-design-pattern-and-rxswift/&lt;/a&gt;)&lt;/p&gt;
&lt;h3 id=&quot;MVVM&quot;&gt;&lt;a href=&quot;#MVVM&quot; class=&quot;headerlink&quot; title=&quot;MVVM&quot;&gt;&lt;/a&gt;MVVM&lt;/h3&gt;&lt;p&gt;MVVM 是一种设计模式。他是程序的代码分离成三个部分: &lt;code&gt;Model&lt;/code&gt;、&lt;code&gt;View&lt;/code&gt;、&lt;code&gt;ViewModel&lt;/code&gt;。 &lt;code&gt;Model&lt;/code&gt; 代表数据的表现, &lt;code&gt;View&lt;/code&gt; 代表用户看到的界面，&lt;code&gt;ViewModel&lt;/code&gt; 代表着模型层和视图层的主要关联关系。&lt;/p&gt;
    
    </summary>
    
      <category term="Reactive" scheme="http://www.CepheusSun.com/categories/Reactive/"/>
    
    
      <category term="iOS" scheme="http://www.CepheusSun.com/tags/iOS/"/>
    
      <category term="Swift" scheme="http://www.CepheusSun.com/tags/Swift/"/>
    
      <category term="翻译" scheme="http://www.CepheusSun.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="Reactive" scheme="http://www.CepheusSun.com/tags/Reactive/"/>
    
      <category term="设计模式" scheme="http://www.CepheusSun.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>RxSwift and the awesome things you can do with Reactive Programming — Part I</title>
    <link href="http://www.CepheusSun.com/RxSwift%20and%20the%20awesome%20things%20you%20can%20do%20with%20Reactive%20Programming%E2%80%8A%E2%80%94%E2%80%8APart%20I.html"/>
    <id>http://www.CepheusSun.com/RxSwift and the awesome things you can do with Reactive Programming — Part I.html</id>
    <published>2017-05-04T16:00:00.000Z</published>
    <updated>2017-05-23T07:32:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文翻译自国外的美女工程师 <a href="https://medium.com/@kenzai">Kenza Iraki</a> 的文章 <a href="https://medium.com/@kenzai/rxswift-and-the-awesome-things-you-can-do-with-reactive-programming-part-i-3921137d251">RxSwift and the awesome things you can do with Reactive Programming — Part I</a></p>
<p>第一次听见响应式编程，我的表情是这样的</p>
<center><br><img src="https://cdn-images-1.medium.com/max/1600/1*28RdzpfQBHklPcgLGsg0jw.png"><br></center>

<p>接下来的几次几次接触, 也并没有什么改变。整整两个星期之后,即使我在项目中写了一些响应式代码。我依然是这种感觉。</p>
<p>现在我才知道有很多的人在第一次遇见响应式编程的时候跟我有一样的感觉。我也知道很多人看过响应式的代码之后再也不想再见到它了，因为她的学习曲线太过陡峭了。但是我能告诉你一个事实, 我还没听说过一个人， 在最终理解了他是怎么回事之后,后悔学习响应式编程。</p>
<p>我知道网上有很多关于响应式编程理论和思想还有 RxSwift 的的资源, 也有很多教你用Rx来做各种事情的教程(文末我会给出一些链接)。这篇文章不是是一个教程, 也不会解释 <code>stream</code> 和 <code>observables</code> 是怎么回事。 我要做的是提供一个直接、明确并且尽量少的理论总结来告诉你 RxSwift 能做什么, 并且告诉你为什么你会喜欢上它。由于 Rx 的世界深似海, 所以我打算写三篇文章来讨论这件事情, 这是第一篇。</p>
<h2 id="Part1-Data-Binding-control-events-and-gesture-recognizers"><a href="#Part1-Data-Binding-control-events-and-gesture-recognizers" class="headerlink" title="Part1: Data Binding, control events and gesture recognizers"></a>Part1: Data Binding, control events and gesture recognizers</h2><h3 id="Data-Binding"><a href="#Data-Binding" class="headerlink" title="Data Binding"></a>Data Binding</h3><p>数据绑定看起来像是一个高端的词语, 但是它却是一件非常简单的事情。假如你有一个 App 需要用户在 <code>UITextField</code> 中输入它们的名字。当他们在打字的时候, 用 “你好 + 用户输入的文字” 展示在界面上。这样一个很基本的场景。如果在不是响应式的程序中, 我们需要遵守 <code>UITextFieldDelegate</code> 这个协议, 然后在 <code>ViewController</code> 中实现 <code>textFieldDidEndEditing</code> 这个方法, 来监听用户用户的行为，然后给 <code>Label</code> 赋值。</p>
<p>虽然很简单，但是假如有很多的 <code>UITextField</code> 我们还要在代理方法中判断, 又或者, 我们需要用户在输入的过程中时时的刷新 <code>Label</code>。这种场景, 我们的代码，看起来就会很糟糕。至少不会很优雅吧。</p>
<p>在响应式中, 这种情况就可以用数据绑定来实现。说白了,就是将用户在 <code>UITextField</code> 中输入的文字绑定到 <code>UILabel</code> 上。在 <code>RxSwift</code> 的世界里,  没有什么比处理数据绑定更简单的了。刚才描述的需求, 我们只需要通过以下代码就可以实现了。</p>
<a id="more"></a>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> namefield = <span class="type">UITextField</span>()</div><div class="line"><span class="keyword">var</span> helloLabel = <span class="type">UILabel</span>()</div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    nameField.rx.text.<span class="built_in">map</span> &#123; <span class="string">"Hello <span class="subst">\($<span class="number">0</span>)</span>"</span> &#125;</div><div class="line">                     .bindTo(helloLabel.rx.text)</div></pre></td></tr></table></figure>
<p>上面的代码， 我们首先是获取到了 <code>UITextField</code> 的文字。 然后我们将这段文字映射成想要的格式，然后赋值给 <code>UILabel</code>。 在这里，我们之间见到的在文字前面加了一个 <code>&#39;hello&#39;</code>， 因为 map 是一个闭包, 可以简单的被看作一个匿名函数, 它的参数:<code>$0</code>(第一个参数)、<code>$1</code>(第二个参数)以此类推。然后将映射后的文字绑定到 <code>UILabel</code> 的 <code>text</code> 属性上。就这么简单，这个需求就完成了。没有使用代理，也没有用各种 if 语句, 就简单明了的几行代码。</p>
<p>你先在肯定在想,”是，这是很神奇, 但是真的有很多 app 在这样做吗” 我可以告诉你，是的。不要仅仅是限制在这简单的几个例子中。能够将数据绑定到视图是非常强大的事情。你想想看，如果我们有一个视图的背景颜色需要根据天气用户的地理位置而改变。基于可能变化的数据和一些简单的逻辑, 不需要太过深入的研究它背后的东西。这就是数据绑定最主要的思想。</p>
<h3 id="Control-Events-and-Gesture-Recognizers"><a href="#Control-Events-and-Gesture-Recognizers" class="headerlink" title="Control Events and Gesture Recognizers"></a>Control Events and Gesture Recognizers</h3><p>简单的说一下什么是事件吧！事件基本上是用户能在你的 app 上操作的所有行为，点击、滑动、拖拽等等。当用户按下一个按钮的时候，你的程序会监听到一个 <code>UIControlEvent</code> 的事件类型 <code>.touchUpInSide</code>。 如果你用的是 <code>StoryBoary</code> ，你可能在创建 <code>IBAction</code> 的时候，没有想过这个按钮的行为。我已经写了一篇<a href="">why I never use storyboards</a> 。如果你跟我一样,这段代码你肯定会很熟悉了</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> button = <span class="type">UIButton</span>()</div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    button.addTarget(#selector(<span class="type">ViewController</span>.loginUser), target: <span class="keyword">self</span>, event: .touchUpInside</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">loginUser</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="comment">// Implementation here</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我真的很讨厌 Selector, 这些代码太不明确了，让代码看起来很乱，也让我们更容易犯错。但是用 Rx 这样就可以了：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> button = <span class="type">UIButton</span>()</div><div class="line"><span class="keyword">var</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    button.rx.tap.subscribe &#123; onNext <span class="number">_</span> <span class="keyword">in</span></div><div class="line">        <span class="comment">// Implementation here</span></div><div class="line">    &#125;.addDisposableTo(disposeBag)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不要太过纠结 <code>disposeBag</code> 和 <code>subscribe</code> 这些东西。你只要知道这些是一些必须的动作就可以了。(下面会有介绍)</p>
<p>当你需要给不具有 control event 的控件添加一些逻辑事件, 比如给 <code>UILabel</code> 或者 <code>UIImageView</code> 添加点击事件的时候。我们只能给他添加手势。(这是我做讨厌的 UIKit 特点之一)。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> label = <span class="type">UILabel</span>()</div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="comment">// Show example of gesture recognizers</span></div><div class="line">    <span class="keyword">let</span> gestureRecognizer = <span class="type">UITapGestureRecognizer</span>(target: <span class="keyword">self</span>, action: “handleTap:”)</div><div class="line">    label.addGestureRecognizer(gestureRecognizer)</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleTap</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="comment">// Your logic here</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其他的手势，如果你需要响应的话。你就需要给这个控件添加多个 <code>gesture recognizer</code> ,你要创建多个手势，然后挨个添加到这个控件上。这不仅是很多样板代码这么简单，这也可能带来一些难以想象的混乱和潜在的错误。</p>
<p>你可以已经想到了。Rx 让这个东西变的异常的简单：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> label = <span class="type">UILabel</span>()</div><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    label.rx.gesture(.tap).subscribe &#123;onNext (gesture) <span class="keyword">in</span></div><div class="line">        <span class="comment">// Your logic here</span></div><div class="line">    &#125;.addDisposableTo(disposeBag)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>假如你需要添加多个手势的话:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> label = <span class="type">UILabel</span>()</div><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    label.rx.gesture(.tap, .pan, .swipeUp).subscribe &#123; onNext (gesture) <span class="keyword">in</span></div><div class="line">        <span class="keyword">switch</span> gesture &#123;</div><div class="line">        <span class="keyword">case</span> .tap: <span class="comment">// Do something</span></div><div class="line">        <span class="keyword">case</span> .pan: <span class="comment">// Do something</span></div><div class="line">        <span class="keyword">case</span> .swipeUp: <span class="comment">// Do something </span></div><div class="line">        <span class="keyword">default</span>: <span class="keyword">break</span>       </div><div class="line">        &#125;        </div><div class="line">    &#125;.addDisposableTo(disposeBag)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这些都是一个叫 <a href="https://github.com/RxSwiftCommunity/RxGesture">RxGesture</a> 的 RxSwift 库提供的。</p>
<p><strong>参考资料</strong></p>
<p><a href="https://github.com/ReactiveX/RxSwift">ReactiveX/RxSwift</a></p>
<p><a href="https://realm.io/news/altconf-ash-furrow-functional-reactive-swift/">Functional Reactive Awesomeness With Swift</a></p>
<p><a href="https://medium.com/swift-programming/reactive-swift-3b6050375534">My journey with reactive programming in Swift — and the iOS app that came out of it.</a></p>
<p><a href="https://github.com/DTVD/The-introduction-to-RxSwift-you-have-been-missing">DTVD/The-introduction-to-RxSwift-you-have-been-missing</a></p>
<p><a href="https://www.thedroidsonroids.com/blog/ios/rxswift-by-examples-1-the-basics/">RxSwift by Examples #1 – The basics.</a></p>
<p><a href="https://news.realm.io/news/tryswift-Marin-Todorov-I-create-iOS-apps-is-RxSwift-for-me/">I create iOS apps - is RxSwift for me?</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文翻译自国外的美女工程师 &lt;a href=&quot;https://medium.com/@kenzai&quot;&gt;Kenza Iraki&lt;/a&gt; 的文章 &lt;a href=&quot;https://medium.com/@kenzai/rxswift-and-the-awesome-things-you-can-do-with-reactive-programming-part-i-3921137d251&quot;&gt;RxSwift and the awesome things you can do with Reactive Programming — Part I&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;第一次听见响应式编程，我的表情是这样的&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1600/1*28RdzpfQBHklPcgLGsg0jw.png&quot;&gt;&lt;br&gt;&lt;/center&gt;

&lt;p&gt;接下来的几次几次接触, 也并没有什么改变。整整两个星期之后,即使我在项目中写了一些响应式代码。我依然是这种感觉。&lt;/p&gt;
&lt;p&gt;现在我才知道有很多的人在第一次遇见响应式编程的时候跟我有一样的感觉。我也知道很多人看过响应式的代码之后再也不想再见到它了，因为她的学习曲线太过陡峭了。但是我能告诉你一个事实, 我还没听说过一个人， 在最终理解了他是怎么回事之后,后悔学习响应式编程。&lt;/p&gt;
&lt;p&gt;我知道网上有很多关于响应式编程理论和思想还有 RxSwift 的的资源, 也有很多教你用Rx来做各种事情的教程(文末我会给出一些链接)。这篇文章不是是一个教程, 也不会解释 &lt;code&gt;stream&lt;/code&gt; 和 &lt;code&gt;observables&lt;/code&gt; 是怎么回事。 我要做的是提供一个直接、明确并且尽量少的理论总结来告诉你 RxSwift 能做什么, 并且告诉你为什么你会喜欢上它。由于 Rx 的世界深似海, 所以我打算写三篇文章来讨论这件事情, 这是第一篇。&lt;/p&gt;
&lt;h2 id=&quot;Part1-Data-Binding-control-events-and-gesture-recognizers&quot;&gt;&lt;a href=&quot;#Part1-Data-Binding-control-events-and-gesture-recognizers&quot; class=&quot;headerlink&quot; title=&quot;Part1: Data Binding, control events and gesture recognizers&quot;&gt;&lt;/a&gt;Part1: Data Binding, control events and gesture recognizers&lt;/h2&gt;&lt;h3 id=&quot;Data-Binding&quot;&gt;&lt;a href=&quot;#Data-Binding&quot; class=&quot;headerlink&quot; title=&quot;Data Binding&quot;&gt;&lt;/a&gt;Data Binding&lt;/h3&gt;&lt;p&gt;数据绑定看起来像是一个高端的词语, 但是它却是一件非常简单的事情。假如你有一个 App 需要用户在 &lt;code&gt;UITextField&lt;/code&gt; 中输入它们的名字。当他们在打字的时候, 用 “你好 + 用户输入的文字” 展示在界面上。这样一个很基本的场景。如果在不是响应式的程序中, 我们需要遵守 &lt;code&gt;UITextFieldDelegate&lt;/code&gt; 这个协议, 然后在 &lt;code&gt;ViewController&lt;/code&gt; 中实现 &lt;code&gt;textFieldDidEndEditing&lt;/code&gt; 这个方法, 来监听用户用户的行为，然后给 &lt;code&gt;Label&lt;/code&gt; 赋值。&lt;/p&gt;
&lt;p&gt;虽然很简单，但是假如有很多的 &lt;code&gt;UITextField&lt;/code&gt; 我们还要在代理方法中判断, 又或者, 我们需要用户在输入的过程中时时的刷新 &lt;code&gt;Label&lt;/code&gt;。这种场景, 我们的代码，看起来就会很糟糕。至少不会很优雅吧。&lt;/p&gt;
&lt;p&gt;在响应式中, 这种情况就可以用数据绑定来实现。说白了,就是将用户在 &lt;code&gt;UITextField&lt;/code&gt; 中输入的文字绑定到 &lt;code&gt;UILabel&lt;/code&gt; 上。在 &lt;code&gt;RxSwift&lt;/code&gt; 的世界里,  没有什么比处理数据绑定更简单的了。刚才描述的需求, 我们只需要通过以下代码就可以实现了。&lt;/p&gt;
    
    </summary>
    
      <category term="Reactive" scheme="http://www.CepheusSun.com/categories/Reactive/"/>
    
    
      <category term="iOS" scheme="http://www.CepheusSun.com/tags/iOS/"/>
    
      <category term="Swift" scheme="http://www.CepheusSun.com/tags/Swift/"/>
    
      <category term="翻译" scheme="http://www.CepheusSun.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="Reactive" scheme="http://www.CepheusSun.com/tags/Reactive/"/>
    
  </entry>
  
  <entry>
    <title>RAC 最基本的东西-- RACSignal</title>
    <link href="http://www.CepheusSun.com/RAC%20%E6%9C%80%E5%9F%BA%E6%9C%AC%E7%9A%84%E4%B8%9C%E8%A5%BF--%20RACSignal.html"/>
    <id>http://www.CepheusSun.com/RAC 最基本的东西-- RACSignal.html</id>
    <published>2017-04-26T16:00:00.000Z</published>
    <updated>2017-04-27T09:20:19.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h3><ul>
<li>创建信号</li>
<li>订阅信号</li>
<li>发送信号</li>
</ul>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1.创建信号(cold)</span></div><div class="line">RACSignal *signal = [RACSignal createSignal:^RACDisposable * _Nullable(<span class="keyword">id</span>&lt;RACSubscriber&gt;  _Nonnull subscriber) &#123;</div><div class="line">    <span class="comment">// 3.发送信号</span></div><div class="line">    [subscriber sendNext:<span class="string">@"hello, RAC."</span>];</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 2.订阅信号(hot)</span></div><div class="line">[signal subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, x);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>在创建 RACSignal 的时候, </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">+ (RACSignal&lt;ValueType&gt; *)createSignal:(RACDisposable * _Nullable (^)(id&lt;RACSubscriber&gt; subscriber))didSubscribe;</div></pre></td></tr></table></figure>
<p>方法传入的 block 会返回一个 <code>RACDisposable</code> 对象。</p>
<p>将以上代码中的 <code>return nil；</code> 替换成如下代码</p>
<a id="more"></a>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> [RACDisposable disposableWithBlock:^&#123;</div><div class="line"><span class="comment">// 订阅者释放时会自动取消订阅信号, 但是只要订阅者没有释放, 就不会取消订阅信号.</span></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"信号被取消订阅了!"</span>);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>这个时候在 <code>[subscriber sendComplete]</code> 的时候会执行创建 <code>RACDisposable</code> 传入的 <code>block</code> </p>
<p><strong>如何主动取消订阅</strong></p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">_disposable = [signal subscribeNext:^(<span class="keyword">id</span> x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, x);</div><div class="line">&#125;];<span class="comment">// 可以看出来，这里的 subscribeNext 返回的就是取消订阅这个 signal 的 RACDisoisable</span></div><div class="line"><span class="comment">// 不管 在创建 signal 的时候 return 的是 nil 还是 RACDisposable 对象</span></div><div class="line">[_disposable dispose]</div></pre></td></tr></table></figure>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;ReactiveObjC.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) RACDisposable *disposable;    </div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    RACSignal *signal = [RACSignal createSignal:^RACDisposable *(<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber ) &#123;       </div><div class="line">        [subscriber sendNext:<span class="string">@"hello, RAC."</span>];</div><div class="line">        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">            [subscriber sendNext:<span class="string">@"2"</span>];</div><div class="line">            dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">                [subscriber sendNext:<span class="string">@"2"</span>];</div><div class="line">                dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">                    [subscriber sendNext:<span class="string">@"2"</span>];</div><div class="line">                    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">                        [subscriber sendNext:<span class="string">@"2"</span>];</div><div class="line">                        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">                            [subscriber sendNext:<span class="string">@"2"</span>];</div><div class="line">                            dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">                                [subscriber sendNext:<span class="string">@"2"</span>];</div><div class="line">                                dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">                                    [subscriber sendNext:<span class="string">@"2"</span>];</div><div class="line">                                    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">                                        [subscriber sendNext:<span class="string">@"2"</span>];</div><div class="line">                                        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">                                            [subscriber sendNext:<span class="string">@"2"</span>];</div><div class="line">                                        &#125;);</div><div class="line">                                    &#125;);</div><div class="line">                                &#125;);</div><div class="line">                            &#125;);</div><div class="line">                        &#125;);</div><div class="line">                    &#125;);</div><div class="line">                &#125;);</div><div class="line">            &#125;);</div><div class="line">        &#125;);</div><div class="line">        <span class="comment">// 如果信号不再发送数据, 最好调用信号的发送完成方法, 该方法会调用 [RACDisposable disposable] 取消订阅信号.</span></div><div class="line">        <span class="comment">//[subscriber sendCompleted];</span></div><div class="line">        </div><div class="line">        <span class="keyword">return</span> [RACDisposable disposableWithBlock:^&#123;</div><div class="line">            <span class="comment">// 订阅者释放时会自动取消订阅信号, 但是只要订阅者没有释放, 就不会取消订阅信号.</span></div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"信号被取消订阅了!"</span>);</div><div class="line">        &#125;];</div><div class="line">        <span class="comment">//如果取消订阅的时候不需要做什么事情, return nil 也没有关系</span></div><div class="line">        <span class="comment">//return nil;</span></div><div class="line">    &#125;];</div><div class="line">    _disposable = [signal subscribeNext:^(<span class="keyword">id</span> x) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, x);</div><div class="line">    &#125;];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</div><div class="line">    <span class="comment">// 主动取消订阅信号</span></div><div class="line">    [_disposable dispose];</div><div class="line">&#125;  </div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h3 id="timer"><a href="#timer" class="headerlink" title="timer"></a>timer</h3><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[[RACSignal interval:<span class="number">2.0</span> onScheduler:[RACScheduler currentScheduler]] subscribeNext:^(<span class="keyword">id</span> x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, x);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h3 id="delay"><a href="#delay" class="headerlink" title="delay"></a>delay</h3><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"first"</span>);</div><div class="line">[[[RACSignal createSignal:^RACDisposable *(<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</div><div class="line">    [subscriber sendNext:<span class="string">@"send，signal"</span>];</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;] </div><div class="line">delay:<span class="number">2.0</span>] <span class="comment">// 信号延迟两秒</span></div><div class="line">subscribeNext:^(<span class="keyword">id</span> x) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h3 id="timeout"><a href="#timeout" class="headerlink" title="timeout"></a>timeout</h3><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">RACSignal *signal = [[RACSignal createSignal:^RACDisposable *(<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</div><div class="line">    [subscriber sendNext:<span class="string">@"send，signal"</span>];</div><div class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">3</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">        [subscriber sendNext:<span class="string">@"send，signal2"</span>];</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;] timeout:<span class="number">2.0</span> onScheduler:[RACScheduler currentScheduler]];</div><div class="line"><span class="comment">// 2s 后发送错误信号。2s 之后的信号被忽略</span></div><div class="line"></div><div class="line">[signal subscribeNext:^(<span class="keyword">id</span> x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125; error:^(<span class="built_in">NSError</span> *error) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,error);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h3 id="retry"><a href="#retry" class="headerlink" title="retry"></a>retry</h3><p>重试, 遇到 error 就会重新执行创建信号中的block,直到成功. 也可以传入 retry 的次数，如果超过这个次数还是 error 则返回 error</p>
<h2 id="对-RACSignal-的操作"><a href="#对-RACSignal-的操作" class="headerlink" title="对 RACSignal 的操作"></a>对 RACSignal 的操作</h2><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">RACSignal *signal = [RACSignal createSignal:^RACDisposable * _Nullable(<span class="keyword">id</span>&lt;RACSubscriber&gt;  _Nonnull subscriber) &#123;</div><div class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">5</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">        [subscriber sendNext:<span class="string">@"1"</span>];</div><div class="line">        [subscriber sendNext:<span class="string">@"2"</span>];</div><div class="line">        [subscriber sendNext:<span class="string">@"3"</span>];</div><div class="line">        [subscriber sendNext:<span class="string">@"3"</span>];</div><div class="line">        [subscriber sendNext:<span class="string">@"5"</span>];</div><div class="line">        [subscriber sendNext:<span class="string">@"3"</span>];</div><div class="line">        [subscriber sendNext:<span class="string">@"6"</span>];</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h3 id="map-映射"><a href="#map-映射" class="headerlink" title="map 映射"></a>map 映射</h3><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</div><div class="line">Map使用步骤:</div><div class="line">1.传入一个block,类型是返回对象，参数是value</div><div class="line">2.value就是源信号的内容，直接拿到源信号的内容做处理</div><div class="line">3.把处理好的内容，直接返回就好了，不用包装成信号，返回的值，就是映射的值。</div><div class="line">*/</span></div><div class="line">[[signal map:^<span class="keyword">id</span> _Nullable(<span class="keyword">id</span>  _Nullable value) &#123;</div><div class="line">    <span class="keyword">return</span> @([value integerValue] * <span class="number">10</span>);</div><div class="line">&#125;] subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 10,20,30,50,30,60</span></div></pre></td></tr></table></figure>
<h4 id="flattenMap"><a href="#flattenMap" class="headerlink" title="flattenMap"></a>flattenMap</h4><p>把源信号的内容映射成一个新的信号，信号可以是任意类型。</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</div><div class="line">flattenMap使用步骤:</div><div class="line">1.传入一个block，block类型是返回值RACStream，参数value</div><div class="line">2.参数value就是源信号的内容，拿到源信号的内容做处理</div><div class="line">3.包装成RACReturnSignal信号，返回出去。</div><div class="line">*/</span></div><div class="line">[[signal flattenMap:^__kindof RACSignal * _Nullable(<span class="keyword">id</span>  _Nullable value) &#123;</div><div class="line">    <span class="keyword">return</span> [RACReturnSignal <span class="keyword">return</span>:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@%@"</span>,value,value]];</div><div class="line">&#125;]</div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h4 id="flattenmap-和-map-的区别"><a href="#flattenmap-和-map-的区别" class="headerlink" title="flattenmap 和 map 的区别"></a>flattenmap 和 map 的区别</h4><ol>
<li>FlatternMap中的Block返回信号。</li>
<li>Map中的Block返回对象。</li>
<li>开发中，如果信号发出的值不是信号，映射一般使用Map</li>
<li>开发中，如果信号发出的值是信号，映射一般使用flatternMap。</li>
</ol>
<h4 id="mapReplace"><a href="#mapReplace" class="headerlink" title="mapReplace"></a>mapReplace</h4><p>传入一个值 x , 将每个信号的值都改为 x</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[[signal mapReplace:<span class="string">@"4"</span>]</div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line">    <span class="comment">// 4,4,4,4,4,4,4</span></div></pre></td></tr></table></figure>
<h3 id="filter-过滤"><a href="#filter-过滤" class="headerlink" title="filter 过滤"></a>filter 过滤</h3><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><p>传入一个 block , 当这个 block 返回 YES 的时候才能响应</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">RACSignal *signal = [RACSignal createSignal:^RACDisposable * _Nullable(<span class="keyword">id</span>&lt;RACSubscriber&gt;  _Nonnull subscriber) &#123;</div><div class="line">    [subscriber sendNext:<span class="string">@"1"</span>];</div><div class="line">    [subscriber sendNext:<span class="string">@"2"</span>];</div><div class="line">    [subscriber sendNext:<span class="string">@"3"</span>];</div><div class="line">    [subscriber sendNext:<span class="string">@"3"</span>];</div><div class="line">    [subscriber sendNext:<span class="string">@"5"</span>];</div><div class="line">    [subscriber sendNext:<span class="string">@"3"</span>];</div><div class="line">    [subscriber sendNext:<span class="string">@"6"</span>];</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;];</div><div class="line">[[signal filter:^<span class="built_in">BOOL</span>(<span class="keyword">id</span>  _Nullable value) &#123;</div><div class="line"><span class="comment">// 只有 value 为 @“3” 的时候才进入下一步</span></div><div class="line">    <span class="keyword">return</span> [value isEqualToString:<span class="string">@"3"</span>];</div><div class="line">&#125;]</div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h4 id="ignore"><a href="#ignore" class="headerlink" title="ignore"></a>ignore</h4><p>传入一个参数 x 忽略 value == x 的信号</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[[signal ignore:<span class="string">@"3"</span>]</div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 1,2,5,6</span></div></pre></td></tr></table></figure>
<h4 id="distinctUntilChanged"><a href="#distinctUntilChanged" class="headerlink" title="distinctUntilChanged"></a>distinctUntilChanged</h4><blockquote>
<p>如果这次受到的信号 <code>value</code> 跟上次的信号 <code>value</code> 相同, 这次信号被忽略。</p>
</blockquote>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[[signal distinctUntilChanged] </div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 1,2,3,5,3,6</span></div></pre></td></tr></table></figure>
<h4 id="startWith"><a href="#startWith" class="headerlink" title="startWith"></a>startWith</h4><p>传入一个参数 x , 订阅的时候首先收到 value = x 的信号。 类似于在创建 RACSignal 的第一行 <code>[subscriber sendNext:x];</code></p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[[signal startWith:<span class="string">@"1"</span>]</div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 1,1,2,3,3,5,3,6</span></div></pre></td></tr></table></figure>
<h4 id="take"><a href="#take" class="headerlink" title="take"></a>take</h4><p>传入一个数组 n， 表明只响应前 n 个信号</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[[signal take:<span class="number">3</span>]</div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 1,2,3</span></div></pre></td></tr></table></figure>
<h4 id="takeLast"><a href="#takeLast" class="headerlink" title="takeLast"></a>takeLast</h4><p>传入一个数值 n, 取最后 n 个信号</p>
<p>只有收到了complete才知道结果。</p>
<h4 id="takeUntilBlock"><a href="#takeUntilBlock" class="headerlink" title="takeUntilBlock"></a>takeUntilBlock</h4><p>一直响应，直到传入的 block 第一次返回 YES</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[[signal takeUntilBlock:^<span class="built_in">BOOL</span>(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="keyword">return</span> [x isEqualToString:<span class="string">@"5"</span>];</div><div class="line">&#125;]</div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 1,2,3,3</span></div></pre></td></tr></table></figure>
<h4 id="takeWhileBlock"><a href="#takeWhileBlock" class="headerlink" title="takeWhileBlock"></a>takeWhileBlock</h4><p>一直响应，直到传入的 block 第一次返回 NO</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[[signal takeWhileBlock:^<span class="built_in">BOOL</span>(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="keyword">return</span> [x integerValue] &lt; <span class="number">5</span>;</div><div class="line">&#125;]</div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 1,2,3,3</span></div></pre></td></tr></table></figure>
<h4 id="skip"><a href="#skip" class="headerlink" title="skip"></a>skip</h4><p>传入一个数字 n 表明忽略前面第 n 个信号, 第 n + 1 个信号开始响应。</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[[signal skip:<span class="number">3</span>]</div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 3,5,3,6</span></div></pre></td></tr></table></figure>
<h4 id="skipUntilBlock"><a href="#skipUntilBlock" class="headerlink" title="skipUntilBlock"></a>skipUntilBlock</h4><p>一直忽略信号, 直到传入的 block 第一次返回 YES</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[[signal skipUntilBlock:^<span class="built_in">BOOL</span>(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="keyword">return</span> ![x isEqualToString:<span class="string">@"1"</span>];</div><div class="line">&#125;]</div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 2，3，3，5，3，6</span></div></pre></td></tr></table></figure>
<h4 id="skipWhileBlock"><a href="#skipWhileBlock" class="headerlink" title="skipWhileBlock"></a>skipWhileBlock</h4><p>一直忽略信号, 直到传入的 block 第一次返回 NO</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[[signal skipWhileBlock:^<span class="built_in">BOOL</span>(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="keyword">return</span> [x isEqualToString:<span class="string">@"1"</span>];</div><div class="line">&#125;]</div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 2，3，3，5，3，6</span></div></pre></td></tr></table></figure>
<h4 id="scanWithStart-reduce"><a href="#scanWithStart-reduce" class="headerlink" title="scanWithStart:reduce"></a>scanWithStart:reduce</h4><p>解决类似数组求和的问题</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">RACSequence *number = @[@<span class="number">1</span>,@<span class="number">2</span>,@<span class="number">3</span>,@<span class="number">4</span>].rac_sequence;</div><div class="line">RACSequence *sums =[number scanWithStart:@<span class="number">2</span> reduce:^<span class="keyword">id</span> _Nullable(<span class="built_in">NSNumber</span> *running, <span class="built_in">NSNumber</span> *next) &#123;</div><div class="line">    <span class="keyword">return</span> @(running.integerValue + next.integerValue);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 第一个参数是起点值, 第二个是便利的block block 中第一个是上一次便利的结果， 第二个是当前位置的值</span></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, sums.array);</div><div class="line"><span class="comment">//3,5,8,12</span></div></pre></td></tr></table></figure>
<h3 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h3><h4 id="contact"><a href="#contact" class="headerlink" title="contact"></a>contact</h4><p>把signalA拼接到signalB后，signalA发送完成，signalB才会被激活。</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">RACSignal *signal = [RACSignal createSignal:^RACDisposable * _Nullable(<span class="keyword">id</span>&lt;RACSubscriber&gt;  _Nonnull subscriber) &#123;  dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">2</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">        [subscriber sendNext:<span class="string">@"1"</span>];</div><div class="line">        [subscriber sendCompleted];<span class="comment">// 必须conpleted 才会到第二个 signal</span></div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;];</div><div class="line">RACSignal *singnal2 = [RACSignal createSignal:^RACDisposable * _Nullable(<span class="keyword">id</span>&lt;RACSubscriber&gt;  _Nonnull subscriber) &#123;</div><div class="line">    [subscriber sendNext:<span class="string">@"11"</span>];</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;];</div><div class="line">RACSignal *contact = [signal concat:singnal2];</div><div class="line">[contact subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 1,11</span></div></pre></td></tr></table></figure>
<h4 id="then"><a href="#then" class="headerlink" title="then"></a>then</h4><p>类似 contact 将两个 signal 链接</p>
<ol>
<li>只有等第一个 signal 介绍之后才会激活第二个 signal。 </li>
<li>在第一个 signal 结束之前 signal2 的信号会被忽略。  </li>
<li>第一个 signal 只关注 <code>complete</code> sendNext 被忽略</li>
</ol>
<p><strong>区别: contact signal1 的 sendNext 会响应, 而 then 的不会。</strong></p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// signal complete 发出之后 signal 的信号才会响应.</span></div><div class="line">RACSignal *then = [signal then:^RACSignal * _Nonnull&#123;</div><div class="line">    <span class="keyword">return</span> singnal2;</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h4 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h4><p>将两个 signal 合并为一个 signal 原先的信号发出 都会响应, 没有前后顺序。</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">RACSignal *merge = [signal merge:singnal2];    </div><div class="line">[merge subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h4 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h4><p>将两个signal 合并之后的 next 合并为一个 tuple 返回回来。 一一对应关系，一个信号的 next 等到第二个信号有 next 之后 包装成 signal 返回。<br>返回的 zip 第一个值就是第一个信号的next。</p>
<h4 id="combineLatest"><a href="#combineLatest" class="headerlink" title="combineLatest"></a>combineLatest</h4><p>将多个信号合并起来，并且拿到各个信号的最新的值,必须每个合并的signal至少都有过一次sendNext，才会触发合并的信号。</p>
<p><strong>zip 和 combineLatest 的区别</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">signal1-----1----2-----3------4-------5-------6--------7-----</div><div class="line"></div><div class="line">signal2----------------5----------------------7--------------</div><div class="line"></div><div class="line"></div><div class="line">combine 返回 (3，5)  （6，7）</div><div class="line">zip 返回     (1,5)    (2,7)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基础用法&quot;&gt;&lt;a href=&quot;#基础用法&quot; class=&quot;headerlink&quot; title=&quot;基础用法&quot;&gt;&lt;/a&gt;基础用法&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;创建信号&lt;/li&gt;
&lt;li&gt;订阅信号&lt;/li&gt;
&lt;li&gt;发送信号&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight obj-c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 1.创建信号(cold)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;RACSignal *signal = [RACSignal createSignal:^RACDisposable * _Nullable(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;&amp;lt;RACSubscriber&amp;gt;  _Nonnull subscriber) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 3.发送信号&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [subscriber sendNext:&lt;span class=&quot;string&quot;&gt;@&quot;hello, RAC.&quot;&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 2.订阅信号(hot)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[signal subscribeNext:^(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;  _Nullable x) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;%@&quot;&lt;/span&gt;, x);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;];&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在创建 RACSignal 的时候, &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;+ (RACSignal&amp;lt;ValueType&amp;gt; *)createSignal:(RACDisposable * _Nullable (^)(id&amp;lt;RACSubscriber&amp;gt; subscriber))didSubscribe;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;方法传入的 block 会返回一个 &lt;code&gt;RACDisposable&lt;/code&gt; 对象。&lt;/p&gt;
&lt;p&gt;将以上代码中的 &lt;code&gt;return nil；&lt;/code&gt; 替换成如下代码&lt;/p&gt;
    
    </summary>
    
      <category term="Reactive" scheme="http://www.CepheusSun.com/categories/Reactive/"/>
    
    
      <category term="iOS" scheme="http://www.CepheusSun.com/tags/iOS/"/>
    
      <category term="Reactive" scheme="http://www.CepheusSun.com/tags/Reactive/"/>
    
  </entry>
  
  <entry>
    <title>突然想聊聊 throttle</title>
    <link href="http://www.CepheusSun.com/%E7%AA%81%E7%84%B6%E6%83%B3%E8%81%8A%E8%81%8A%20throttle.html"/>
    <id>http://www.CepheusSun.com/突然想聊聊 throttle.html</id>
    <published>2017-04-25T16:00:00.000Z</published>
    <updated>2017-04-27T01:22:28.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>如果我们将水龙头拧紧知道水是以水滴的形式流出, 不难发现, 每隔一段时间, 就会有一滴水流出来。</p>
</blockquote>
<p>如果我们预先设置一个执行周期, 当第一次调用动作(滴水)和第二次调用动作之间的间隔大于执行周期, 则执行这个动作。反正, 不执行。</p>
<p>直接翻译 <code>throttle</code> 这个单词。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">throttle</div><div class="line"></div><div class="line">n.	节流阀; 喉咙，气管; [机] 风门;</div><div class="line">vt.	扼杀，压制; 勒死，使窒息; 使节流; （用节汽阀等） 调节;</div><div class="line">vi.	节流，减速; 窒息;</div></pre></td></tr></table></figure>
<p>不难理解, throttle 其实就是一种控制数据或者流量大小的机制。</p>
<p>MrPeak 曾经写的文章中介绍过 <code>I/O Throttle</code> 在 <code>DISPATCH_QUEUE_PRIORITY_BACKGROUND</code> queue 的使用场景。在没有非常严苛的实时性要求的情况下, 对于重度依赖磁盘的后台任务, 使用 <code>DISPATCH_QUEUE_PRIORITY_BACKGROUND</code> 的 queue 会更加友好。文中也引用了官方文档的一段话 </p>
<blockquote>
<p>Items dispatched to the queue run at background priority; the queue is scheduled for execution after all high priority queues have been scheduled and the system runs items on a thread whose priority is set for background status. Such a thread has the lowest priority and any disk I/O is throttled to minimize the impact on the system.</p>
</blockquote>
<p>意思是说, 这种 Global Queue 会在其他所有的 queue 结束之后才会在后台执行。 这是最低优先级的。并且一些磁盘 I/O 操作会因为最小化对系统的影响而被节流。</p>
<a id="more"></a>
<p>文中也介绍了 ASI 和 AFN 中也出现了的 throttle。</p>
<blockquote>
<p>我们通过HTTP请求发送数据的时候，实际上数据是以Packet的形式存在于一个Send Buffer中的，应用层平时感知不到这个Buffer的存在。TCP提供可靠的传输，在弱网环境下，一个Packet一次传输失败的概率会升高，即使一次失败，TCP并不会马上认为请求失败了，而是会继续重试一段时间，同时TCP还保证Packet的有序传输，意味着前面的Packet如果不被ack，后面的Packet就会继续等待，如果我们一次往Send Buffer中写入大量的数据，那么在弱网环境下，排在后面的Packet失败的概率会变高，也就意味着我们HTTP请求失败的几率会变大。</p>
</blockquote>
<p>所以在弱网环境下, 使用 <code>Network Throttle</code> 机制 延迟发起一些请求或者减少往 Send Buffer 中的数据量。 也会大大的提高请求成功率。</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</div><div class="line"> Throttles request bandwidth by limiting the packet size and adding a delay for each chunk read from the upload stream.</div><div class="line"></div><div class="line"> When uploading over a 3G or EDGE connection, requests may fail with "request body stream exhausted". Setting a maximum packet size and delay according to the recommended values (`kAFUploadStream3GSuggestedPacketSize` and `kAFUploadStream3GSuggestedDelay`) lowers the risk of the input stream exceeding its allocated bandwidth. Unfortunately, there is no definite way to distinguish between a 3G, EDGE, or LTE connection over `NSURLConnection`. As such, it is not recommended that you throttle bandwidth based solely on network reachability. Instead, you should consider checking for the "request body stream exhausted" in a failure block, and then retrying the request with throttled bandwidth.</div><div class="line"></div><div class="line"> @param numberOfBytes Maximum packet size, in number of bytes. The default packet size for an input stream is 16kb.</div><div class="line"> @param delay Duration of delay each time a packet is read. By default, no delay is set.</div><div class="line"> */</span></div><div class="line"><span class="comment">// AFN 中的方法</span></div><div class="line">- (<span class="keyword">void</span>)throttleBandwidthWithPacketSize:(<span class="built_in">NSUInteger</span>)numberOfBytes</div><div class="line">                                  delay:(<span class="built_in">NSTimeInterval</span>)delay;</div></pre></td></tr></table></figure>
<h2 id="RAC-中的-throttle"><a href="#RAC-中的-throttle" class="headerlink" title="RAC 中的 throttle"></a>RAC 中的 throttle</h2><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[[[<span class="keyword">self</span>.button rac_signalForControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>] throttle:<span class="number">2</span>] subscribeNext:^(<span class="keyword">id</span> x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"throttle"</span>);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>RAC 中的 <code>throttle</code> 接受一个时间间隔 <code>interval</code> 作为参数, 如果 <code>RACSignal</code> 发出的 <code>next</code> 事件之后的 interval 时间内不再发出 next 那么, 他返回的 RACSignal 会将这个事件发出。也就是说，这个方法会将发送比较频繁的 <code>next</code> 事件舍弃,只保留着一段时间之前的 next 事件。</p>
<p>使用场景:</p>
<p><strong>1、处理用户输入框的信号</strong></p>
<p>在处理搜索这样的需求的时候,有时候可能会在用户在输入框输入之后自动跟服务器交互。然后在下面列表中展示处理结果。如果用户打字很快,这个时候可能几秒钟之内连续发去好几个请求，其实没有什么意义。 这个时候使用 throttle 可以将保留用户输入的少数几个结果, 然后返回一个信号, 将最后的文字作为 next 发出。</p>
<p><strong>2、监听按钮点击</strong></p>
<p>界面上又一个按钮, 然后点击这个按钮, 发起网络请求, 跟上面的例子类似。如果用户快速的点击这个按钮也比较蛋疼。按照以前的写法, 我们可能会设置一个 <code>flag</code> 在点击的时候将这个 <code>flag</code> 设置为 no, 然后在 <code>button</code> 的 <code>action</code> 中判断是否发起请求,然后在请求结果回来之后, 把这个 <code>flag</code> 改回来。 想想都比较蛋疼。这时候使用 <code>throttle</code> 将按钮的点击事件节流一下, 就好了。</p>
<p>这个直接搬用 MrPeak <a href="http://mp.weixin.qq.com/s/MsPEZ9GUwCSZN1kngBkJxw">iOS编程中throttle那些事</a>中的swift代码。 毕竟 OC 的意见在上面了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">button.rx_tap</div><div class="line">   .throttle(<span class="number">0.5</span>, <span class="type">MainScheduler</span>.instance)</div><div class="line">   .subscribeNext &#123; <span class="number">_</span> <span class="keyword">in</span> </div><div class="line">      <span class="built_in">print</span>(<span class="string">"Hello World"</span>)</div><div class="line">   &#125;</div><div class="line">   .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p><strong>在 OC 的 demo 中(ReactiveCocoa 2.5.0) 我也发现了一个问题。第一次的点击也会在这个间隔之后响应。之后又使用了 ReactiveObjc(3.0) 中也发现了这个问题,而在 swift 的 demo 中并没有这种情况。</strong></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实 throttle 并没有减少实际逻辑处理过程的执行来提高事件处理函数运行性能的手段, 并没有减少事件的触发次数。写到最后, 发现文章有点变成学习心得了😂😂😂😂</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;如果我们将水龙头拧紧知道水是以水滴的形式流出, 不难发现, 每隔一段时间, 就会有一滴水流出来。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果我们预先设置一个执行周期, 当第一次调用动作(滴水)和第二次调用动作之间的间隔大于执行周期, 则执行这个动作。反正, 不执行。&lt;/p&gt;
&lt;p&gt;直接翻译 &lt;code&gt;throttle&lt;/code&gt; 这个单词。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;throttle&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;n.	节流阀; 喉咙，气管; [机] 风门;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;vt.	扼杀，压制; 勒死，使窒息; 使节流; （用节汽阀等） 调节;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;vi.	节流，减速; 窒息;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不难理解, throttle 其实就是一种控制数据或者流量大小的机制。&lt;/p&gt;
&lt;p&gt;MrPeak 曾经写的文章中介绍过 &lt;code&gt;I/O Throttle&lt;/code&gt; 在 &lt;code&gt;DISPATCH_QUEUE_PRIORITY_BACKGROUND&lt;/code&gt; queue 的使用场景。在没有非常严苛的实时性要求的情况下, 对于重度依赖磁盘的后台任务, 使用 &lt;code&gt;DISPATCH_QUEUE_PRIORITY_BACKGROUND&lt;/code&gt; 的 queue 会更加友好。文中也引用了官方文档的一段话 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Items dispatched to the queue run at background priority; the queue is scheduled for execution after all high priority queues have been scheduled and the system runs items on a thread whose priority is set for background status. Such a thread has the lowest priority and any disk I/O is throttled to minimize the impact on the system.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;意思是说, 这种 Global Queue 会在其他所有的 queue 结束之后才会在后台执行。 这是最低优先级的。并且一些磁盘 I/O 操作会因为最小化对系统的影响而被节流。&lt;/p&gt;
    
    </summary>
    
      <category term="Reactive" scheme="http://www.CepheusSun.com/categories/Reactive/"/>
    
    
      <category term="iOS" scheme="http://www.CepheusSun.com/tags/iOS/"/>
    
      <category term="Reactive" scheme="http://www.CepheusSun.com/tags/Reactive/"/>
    
  </entry>
  
</feed>
