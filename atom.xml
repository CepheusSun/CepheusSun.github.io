<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CepheusSun的博客</title>
  <subtitle>CepheusSun的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://CepheusSun.github.io/"/>
  <updated>2017-05-05T17:35:04.000Z</updated>
  <id>https://CepheusSun.github.io/</id>
  
  <author>
    <name>CepheusSun</name>
    <email>cd_sunyang@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MVVM design pattern and RxSwift</title>
    <link href="https://CepheusSun.github.io/2017/05/06/MVVM%20design%20pattern%20and%20RxSwift/"/>
    <id>https://CepheusSun.github.io/2017/05/06/MVVM design pattern and RxSwift/</id>
    <published>2017-05-05T16:00:00.000Z</published>
    <updated>2017-05-05T17:35:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文翻译自(<a href="http://lukagabric.com/mvvm-design-pattern-and-rxswift/">http://lukagabric.com/mvvm-design-pattern-and-rxswift/</a>)</p>
<h3 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h3><p>MVVM 是一种设计模式。他是程序的代码分离成三个部分: <code>Model</code>、<code>View</code>、<code>ViewModel</code>。 <code>Model</code> 代表数据的表现, <code>View</code> 代表用户看到的界面，<code>ViewModel</code> 代表着模型层和视图层的主要关联关系。</p>
<h4 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h4><p><code>Model</code> 就是数据层。他包括一定范围内的模型，和业务逻辑。 <code>Model</code> 并不只是你程序中的那些模型结构体或者数据库, 他也包含了一些 Service 或者组件, 比如说 <code>Alamofire</code>和一些 SDK 等等。</p>
<p><code>Model</code> 层执行所有跟数据有关的操作。比如常见的增删改查等等。这些操作由 <code>ViewModel</code> 发起。当 <code>Model</code>操作完了数据之后它再告诉 <code>ViewModel</code> 结果。</p>
<p><code>Model</code> 被 ViewModel 持有。他也并不知道视图层和 <code>ViewModel</code> 层的事情。因为他是和这两个东西完全隔离开的。</p>
<h4 id="View"><a href="#View" class="headerlink" title="View"></a>View</h4><p><code>View</code> 是程序中数据的可视化展示。它没有逻辑相关的东西。他主要有接受用户交互事件，和将数据展示在界面上两个人物。它将用户交互的事件转发到 <code>ViewModel</code> 中进行处理。<code>View</code> 观察 <code>ViewModel</code> 中数据的变化, 并且将这些变化展现出来。</p>
<p><code>View</code> 和 <code>Model</code> 之间没有任何直接的关联。 他们通过 <code>View</code> 持有的 <code>ViewModel</code> 产生关联。</p>
<p>界面信息在 <code>xib</code> 或者 <code>StoryBoard</code> 中通过 <code>UIKit</code> 中的组件被定义。<code>ViewController</code> 是直接跟 <code>xib</code> 或者 <code>StoryBoard</code> 关联的。它包含了 <code>Xib</code> 或者 <code>StoryBoard</code> 中的 <code>outlets</code> 和一些定义 UI 的额外配置。他也负责管理 <code>View</code> 的生命周期。 在 MVVM 中他和 <code>View</code> 的关联是非常紧密的, 他其实就是 <code>View</code> 层的一部分。</p>
<h4 id="ViewModel"><a href="#ViewModel" class="headerlink" title="ViewModel"></a>ViewModel</h4><p><code>ViewModel</code> 是程序的逻辑层。他处理用户交互行为。然后更新数据。然后在通知 <code>View</code> 新的数据和显示的方式。举一个很平常的例子。一个 ViewModel 从Model层中请求到了一些包含 <code>Date</code> 的模型。 这个 Date 值并不会被告诉给 View, ViewModel 告诉 View 的应该是被格式化之后的字符串。视图不会操作数据本身，他只负责将 ViewModel 准备好的数据展示出来。</p>
<h4 id="Similar-to-MVC"><a href="#Similar-to-MVC" class="headerlink" title="Similar to MVC"></a>Similar to MVC</h4><p>在 MVC 设计模式中, <code>ViewController</code> 是 <code>Model</code> 和 <code>View</code> 之间的桥梁。他只有视图, 管理视图的结构，管理用户的交互。他还负责管理视图的生命周期,加载、显示、消失等。他具有的另外一个指责是更新模型数据, 这就包括了显示数据的相关逻辑(也就是数据的处理,如上文提到的讲 <code>Date</code> 转化成 <code>String</code> 的逻辑)。因为他具有这么多的职责，所以很多情况下 <code>Viewcontroller</code> 就会变的非常大。所以也有人称MVC 为 Massive View Controller</p>
<p>出现复杂的 <code>viewController</code> 主要有两个原因。由于 <code>Controller</code> 有很多的职责。代码就会变的非常的复杂。这很明显就违背了单一职责这个原则。这也让测试 <code>Controller</code> 中的逻辑变成一件很麻烦的事情。<code>Controller</code> 和 <code>View</code> 的高度耦合。<code>view</code> 的生命周期使得逻辑的分离变的不那么容易。我们就需要花很大的精力来处理视图的生命周期。</p>
<p>MVVM 和 MVC 非常相似。 正如前文所说。 MVC 中的 <code>Controller</code> 同时包含了视图和程序的逻辑。将逻辑相关的代码从 <code>Controller</code> 中分离出来, 放到他自己抽象出来的类里面去。这时候的 <code>Controller</code>就只关注视图相关的事情。刚刚分离出来的这个类处理相关的逻辑。这个类就是 ViewModel。他和 <code>Controller</code> 具有一一对应关系。所以说 MVVM 就是将逻辑代码从 <code>controller</code>中分离到 <code>ViewModel</code> 中的 MVC</p>
<h4 id="Binding-data-from-ViewModel-to-View"><a href="#Binding-data-from-ViewModel-to-View" class="headerlink" title="Binding data from ViewModel to View"></a>Binding data from ViewModel to View</h4><p>有很多将数据绑定的机制, 比如 Swift 中的属性观察。视图可以对外提供一个 Closure 来进行视图的更新。这个 Closure 用来通知 View 他关联的属性的更新。除了熟悉观察。我们的程序还经常需要处理各种异步操作，比如网络请求，和通知或者事件的流信息。函数响应式编程(FRP)框架简直就是为了处理这类事件而生的。现在也有很多FRP 框架，对 iOS 开发来说，最出名的应该是 <code>RxSwift</code> 和 <code>ReactiveCocoa</code>了。之前在一篇对比文章中有提到过, 不管怎样，我更喜欢 <code>RxSwift</code> </p>
<h3 id="RxSwift"><a href="#RxSwift" class="headerlink" title="RxSwift"></a>RxSwift</h3><p>指令式编程是基于一步一步明确的指令来执行的。他详细的描述了程序的运行过程。值做为状态而存在。由于程序是一步一步的执行的,所以如果其中一个值在之后发生了改变，这一改变也不会被传到下一步。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 指令式编程</span></div><div class="line">a = <span class="number">1</span></div><div class="line">b = <span class="number">2</span></div><div class="line"><span class="built_in">c</span> = a + b  <span class="comment">// c = 3</span></div><div class="line">a = <span class="number">5</span>   <span class="comment">// c = 3</span></div></pre></td></tr></table></figure>
<p>响应式编程,跟指令式相反。他是基于变化的。他基于声明式编程，这就意味着他关注的是程序应该完成什么，而不是程序是怎么运行的。它是通过数学运算和其他像是 <code>filter</code> <code>map</code> <code>reduce</code> 之类的运算操作的运用来实现的。如何准确的运行被交给底层的程序语言或者框架来考虑了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 响应式编程</span></div><div class="line">a = <span class="number">1</span></div><div class="line">b = <span class="number">2</span></div><div class="line"><span class="built_in">c</span> = a + b <span class="comment">// c = 3</span></div><div class="line">a = <span class="number">5</span>     <span class="comment">// c = 7</span></div></pre></td></tr></table></figure>
<p>RxSwift 让你能用通过函数响应式编程来编写你的代码。使用 RxSwift 可以很轻松的创建事件或者数据流。这些事件或者数据流可以互相组合、转换。并且最终被观察到，基于值来进行一些操作。</p>
<p>正如前文所说，在 MVVM 中 View 观察 ViewModel 中模型的数据。RxSwift 提供了一个非常简单并且干净的方法来观察这些值，并绑定到对应的 View 上。</p>
<a id="more"></a>
<h4 id="Observable"><a href="#Observable" class="headerlink" title="Observable"></a>Observable</h4><p>Observable 是 RxSwift 的主要构成部分。他是一个可以异步的接受元素的序列。这个序列可以有0个或者很多个的元素。有三种事件能够基于它发生。下一步(Next)、完成(Completed)、错误(Error)</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Event</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> next(<span class="type">Element</span>)   <span class="comment">// 这个序列的下一个元素</span></div><div class="line">    <span class="keyword">case</span> error(<span class="type">Swift</span>.<span class="type">Error</span>)<span class="comment">// 这个序列发生了错误</span></div><div class="line">    <span class="keyword">case</span> completed      <span class="comment">// 这个序列成功的完成的所有人任务</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以使用 <code>Observable</code> 的 <code>subscribe</code> 方法来订阅这些事件。 用这种方法可以分别处理这个事件的各种情况。</p>
<ul>
<li>OnNext: 可以使用被订阅的元素值。</li>
<li>OnCompleted: 当这个序列成功的发送完所有元素之后会被调用。</li>
<li>OnError: 当这个序列不能完成的时候被调用。</li>
</ul>
<p>只要 <code>Complete</code> 或者 <code>Error</code> 被观察到了, 这个序列就不能产生任何新的元素了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">observable.subscribe(</div><div class="line">    onNext: &#123; element <span class="keyword">in</span> ... &#125;, </div><div class="line">    onError: &#123; error <span class="keyword">in</span> ... &#125;,</div><div class="line">    onCompleted: &#123; ... &#125;</div><div class="line">)</div></pre></td></tr></table></figure>
<h4 id="Hot-and-cold-observables"><a href="#Hot-and-cold-observables" class="headerlink" title="Hot and cold observables"></a>Hot and cold observables</h4><p>即使没有被观察也会发送消息的信号被称作热信号。想象一下 <code>NotificationCenter</code> 技术没有其他对象接受通知, 也也然会发送出来。如果你在某个时候订阅了这个信号, 之前发出来的消息你就会错过。</p>
<p>那些只有被订阅之后才开始发送消息的信号被称作冷信号。这些资源会被分配给每个订阅对象。(比如说，你每次订阅的网络请求就会被释放)但是这些资源可以被多个对象共享(只有一个网络请求被释放了,但可能这被很多个观察者订阅)</p>
<h4 id="Driver"><a href="#Driver" class="headerlink" title="Driver"></a>Driver</h4><p>Driver 是 RxCocoa 框架中的一个值类型。它是对一个可订阅的序列的封装，如果要把一个简单的值绑定到View上, 它会是一个更简单的方法。如果 <code>Observables</code> 发生了错误, 你需要很方便的将一些东西展示出来。每个信号都可以很容易的被转换成 <code>Driver</code>。 当你提供了这个信号发生错误的返回什么的时候，只需要使用 <code>asDriver</code> 方法就可以了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.asDriver(onErrorJustReturn: <span class="string">"No items to display."</span>)</div></pre></td></tr></table></figure>
<p>想象一下异步操作的场景。比如说网络请求。我们需要在界面上展示返回值的个数。在这个场景中，我们需要将返回值的个数映射成一个字符串。可能这个字符串的格式可能是 <code>&quot;X item(s)&quot;</code> <code>Driver</code> 还能够确保我们需要修改 UI 的这个订阅是发生在主线程当中的。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> results: <span class="type">Observable</span>&lt;[<span class="type">SomeItem</span>]&gt; = ...</div><div class="line"><span class="keyword">let</span> resultsCountDriver = results</div><div class="line">    .<span class="built_in">map</span> &#123; <span class="string">"<span class="subst">\($<span class="number">0</span>.<span class="built_in">count</span>)</span> item(s)"</span> &#125;</div><div class="line">    .asDriver(onErrorJustReturn: <span class="string">"No items to display."</span>)</div></pre></td></tr></table></figure>
<p>把这个数据绑定到 Label 中就很简单了</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">resultsCountDriver.drive(resultCountLabel.rx.text).disposed(by: disposeBag)</div></pre></td></tr></table></figure>
<h4 id="DisposeBag"><a href="#DisposeBag" class="headerlink" title="DisposeBag"></a>DisposeBag</h4><p>如果一个序列停止了, 但是它并没有被释放掉。在他就会造成资源的浪费和内存的泄漏。知道他完成了或者处错了。如果一个序列没有停止，也没有出错，这个资源就会被永久的占用。这就是为什么我们要在需要订阅的对象中生命一个 <code>DisposeBag</code> 的成员变量的原因了。这样的话，只要这个对象呗释放掉了，所有相关的资源都会被释放并且被系统回收。</p>
<h4 id="Variable"><a href="#Variable" class="headerlink" title="Variable"></a>Variable</h4><p><code>Variable</code>表示可以被订阅的状态。它是信号和功能范式之间的桥梁。<code>Variable</code> 总是包含了提供给构造函数的初始值当你订阅当前的值的时候，这个初始值会立马被发送到过来。(只有最新和当前值会被发出，旧的值不会)。也可以直接获取或者设置 <code>Variable</code> 的值。他内部的信号可以通过 <code>asObservable</code> 方法获取到。另外, <code>Variable</code> 永远都不会出错。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> variable = <span class="type">Variable</span>(<span class="string">"My Variable"</span>)</div><div class="line">variable.value = <span class="string">"Some value"</span></div><div class="line"><span class="keyword">let</span> variableObservable = variable.asObservable()</div><div class="line">variableObservable.subscribe(onNext: &#123; value <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(value) <span class="comment">//prints "Some value"</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>最后， 我写了一个 Demo 来演示 MVVM + RxSwift. 这是一个简单的程序获取并且显示天气的数据。这个app有三种状态， 加载中，显示中，错误。有两种对错误的处理，一是，我们只显示错误。另一个是显示之前的数据。如果没有，就显示错误。这两种处理方式都是通过响应式编程和指令式编程实现的。</p>
<p>在这些例子中，只有 ViewMoel 会发生改变。你可以看到给功能增加复杂性(显示错误或者旧的数据)。如果使用指令式编程，可能会对代码带来很多的变动。而使用响应式编程，只需要增加额外的状态而已。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文翻译自(&lt;a href=&quot;http://lukagabric.com/mvvm-design-pattern-and-rxswift/&quot;&gt;http://lukagabric.com/mvvm-design-pattern-and-rxswift/&lt;/a&gt;)&lt;/p&gt;
&lt;h3 id=&quot;MVVM&quot;&gt;&lt;a href=&quot;#MVVM&quot; class=&quot;headerlink&quot; title=&quot;MVVM&quot;&gt;&lt;/a&gt;MVVM&lt;/h3&gt;&lt;p&gt;MVVM 是一种设计模式。他是程序的代码分离成三个部分: &lt;code&gt;Model&lt;/code&gt;、&lt;code&gt;View&lt;/code&gt;、&lt;code&gt;ViewModel&lt;/code&gt;。 &lt;code&gt;Model&lt;/code&gt; 代表数据的表现, &lt;code&gt;View&lt;/code&gt; 代表用户看到的界面，&lt;code&gt;ViewModel&lt;/code&gt; 代表着模型层和视图层的主要关联关系。&lt;/p&gt;
&lt;h4 id=&quot;Model&quot;&gt;&lt;a href=&quot;#Model&quot; class=&quot;headerlink&quot; title=&quot;Model&quot;&gt;&lt;/a&gt;Model&lt;/h4&gt;&lt;p&gt;&lt;code&gt;Model&lt;/code&gt; 就是数据层。他包括一定范围内的模型，和业务逻辑。 &lt;code&gt;Model&lt;/code&gt; 并不只是你程序中的那些模型结构体或者数据库, 他也包含了一些 Service 或者组件, 比如说 &lt;code&gt;Alamofire&lt;/code&gt;和一些 SDK 等等。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Model&lt;/code&gt; 层执行所有跟数据有关的操作。比如常见的增删改查等等。这些操作由 &lt;code&gt;ViewModel&lt;/code&gt; 发起。当 &lt;code&gt;Model&lt;/code&gt;操作完了数据之后它再告诉 &lt;code&gt;ViewModel&lt;/code&gt; 结果。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Model&lt;/code&gt; 被 ViewModel 持有。他也并不知道视图层和 &lt;code&gt;ViewModel&lt;/code&gt; 层的事情。因为他是和这两个东西完全隔离开的。&lt;/p&gt;
&lt;h4 id=&quot;View&quot;&gt;&lt;a href=&quot;#View&quot; class=&quot;headerlink&quot; title=&quot;View&quot;&gt;&lt;/a&gt;View&lt;/h4&gt;&lt;p&gt;&lt;code&gt;View&lt;/code&gt; 是程序中数据的可视化展示。它没有逻辑相关的东西。他主要有接受用户交互事件，和将数据展示在界面上两个人物。它将用户交互的事件转发到 &lt;code&gt;ViewModel&lt;/code&gt; 中进行处理。&lt;code&gt;View&lt;/code&gt; 观察 &lt;code&gt;ViewModel&lt;/code&gt; 中数据的变化, 并且将这些变化展现出来。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;View&lt;/code&gt; 和 &lt;code&gt;Model&lt;/code&gt; 之间没有任何直接的关联。 他们通过 &lt;code&gt;View&lt;/code&gt; 持有的 &lt;code&gt;ViewModel&lt;/code&gt; 产生关联。&lt;/p&gt;
&lt;p&gt;界面信息在 &lt;code&gt;xib&lt;/code&gt; 或者 &lt;code&gt;StoryBoard&lt;/code&gt; 中通过 &lt;code&gt;UIKit&lt;/code&gt; 中的组件被定义。&lt;code&gt;ViewController&lt;/code&gt; 是直接跟 &lt;code&gt;xib&lt;/code&gt; 或者 &lt;code&gt;StoryBoard&lt;/code&gt; 关联的。它包含了 &lt;code&gt;Xib&lt;/code&gt; 或者 &lt;code&gt;StoryBoard&lt;/code&gt; 中的 &lt;code&gt;outlets&lt;/code&gt; 和一些定义 UI 的额外配置。他也负责管理 &lt;code&gt;View&lt;/code&gt; 的生命周期。 在 MVVM 中他和 &lt;code&gt;View&lt;/code&gt; 的关联是非常紧密的, 他其实就是 &lt;code&gt;View&lt;/code&gt; 层的一部分。&lt;/p&gt;
&lt;h4 id=&quot;ViewModel&quot;&gt;&lt;a href=&quot;#ViewModel&quot; class=&quot;headerlink&quot; title=&quot;ViewModel&quot;&gt;&lt;/a&gt;ViewModel&lt;/h4&gt;&lt;p&gt;&lt;code&gt;ViewModel&lt;/code&gt; 是程序的逻辑层。他处理用户交互行为。然后更新数据。然后在通知 &lt;code&gt;View&lt;/code&gt; 新的数据和显示的方式。举一个很平常的例子。一个 ViewModel 从Model层中请求到了一些包含 &lt;code&gt;Date&lt;/code&gt; 的模型。 这个 Date 值并不会被告诉给 View, ViewModel 告诉 View 的应该是被格式化之后的字符串。视图不会操作数据本身，他只负责将 ViewModel 准备好的数据展示出来。&lt;/p&gt;
&lt;h4 id=&quot;Similar-to-MVC&quot;&gt;&lt;a href=&quot;#Similar-to-MVC&quot; class=&quot;headerlink&quot; title=&quot;Similar to MVC&quot;&gt;&lt;/a&gt;Similar to MVC&lt;/h4&gt;&lt;p&gt;在 MVC 设计模式中, &lt;code&gt;ViewController&lt;/code&gt; 是 &lt;code&gt;Model&lt;/code&gt; 和 &lt;code&gt;View&lt;/code&gt; 之间的桥梁。他只有视图, 管理视图的结构，管理用户的交互。他还负责管理视图的生命周期,加载、显示、消失等。他具有的另外一个指责是更新模型数据, 这就包括了显示数据的相关逻辑(也就是数据的处理,如上文提到的讲 &lt;code&gt;Date&lt;/code&gt; 转化成 &lt;code&gt;String&lt;/code&gt; 的逻辑)。因为他具有这么多的职责，所以很多情况下 &lt;code&gt;Viewcontroller&lt;/code&gt; 就会变的非常大。所以也有人称MVC 为 Massive View Controller&lt;/p&gt;
&lt;p&gt;出现复杂的 &lt;code&gt;viewController&lt;/code&gt; 主要有两个原因。由于 &lt;code&gt;Controller&lt;/code&gt; 有很多的职责。代码就会变的非常的复杂。这很明显就违背了单一职责这个原则。这也让测试 &lt;code&gt;Controller&lt;/code&gt; 中的逻辑变成一件很麻烦的事情。&lt;code&gt;Controller&lt;/code&gt; 和 &lt;code&gt;View&lt;/code&gt; 的高度耦合。&lt;code&gt;view&lt;/code&gt; 的生命周期使得逻辑的分离变的不那么容易。我们就需要花很大的精力来处理视图的生命周期。&lt;/p&gt;
&lt;p&gt;MVVM 和 MVC 非常相似。 正如前文所说。 MVC 中的 &lt;code&gt;Controller&lt;/code&gt; 同时包含了视图和程序的逻辑。将逻辑相关的代码从 &lt;code&gt;Controller&lt;/code&gt; 中分离出来, 放到他自己抽象出来的类里面去。这时候的 &lt;code&gt;Controller&lt;/code&gt;就只关注视图相关的事情。刚刚分离出来的这个类处理相关的逻辑。这个类就是 ViewModel。他和 &lt;code&gt;Controller&lt;/code&gt; 具有一一对应关系。所以说 MVVM 就是将逻辑代码从 &lt;code&gt;controller&lt;/code&gt;中分离到 &lt;code&gt;ViewModel&lt;/code&gt; 中的 MVC&lt;/p&gt;
&lt;h4 id=&quot;Binding-data-from-ViewModel-to-View&quot;&gt;&lt;a href=&quot;#Binding-data-from-ViewModel-to-View&quot; class=&quot;headerlink&quot; title=&quot;Binding data from ViewModel to View&quot;&gt;&lt;/a&gt;Binding data from ViewModel to View&lt;/h4&gt;&lt;p&gt;有很多将数据绑定的机制, 比如 Swift 中的属性观察。视图可以对外提供一个 Closure 来进行视图的更新。这个 Closure 用来通知 View 他关联的属性的更新。除了熟悉观察。我们的程序还经常需要处理各种异步操作，比如网络请求，和通知或者事件的流信息。函数响应式编程(FRP)框架简直就是为了处理这类事件而生的。现在也有很多FRP 框架，对 iOS 开发来说，最出名的应该是 &lt;code&gt;RxSwift&lt;/code&gt; 和 &lt;code&gt;ReactiveCocoa&lt;/code&gt;了。之前在一篇对比文章中有提到过, 不管怎样，我更喜欢 &lt;code&gt;RxSwift&lt;/code&gt; &lt;/p&gt;
&lt;h3 id=&quot;RxSwift&quot;&gt;&lt;a href=&quot;#RxSwift&quot; class=&quot;headerlink&quot; title=&quot;RxSwift&quot;&gt;&lt;/a&gt;RxSwift&lt;/h3&gt;&lt;p&gt;指令式编程是基于一步一步明确的指令来执行的。他详细的描述了程序的运行过程。值做为状态而存在。由于程序是一步一步的执行的,所以如果其中一个值在之后发生了改变，这一改变也不会被传到下一步。&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 指令式编程&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;a = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;b = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;c&lt;/span&gt; = a + b  &lt;span class=&quot;comment&quot;&gt;// c = 3&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;a = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;   &lt;span class=&quot;comment&quot;&gt;// c = 3&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;响应式编程,跟指令式相反。他是基于变化的。他基于声明式编程，这就意味着他关注的是程序应该完成什么，而不是程序是怎么运行的。它是通过数学运算和其他像是 &lt;code&gt;filter&lt;/code&gt; &lt;code&gt;map&lt;/code&gt; &lt;code&gt;reduce&lt;/code&gt; 之类的运算操作的运用来实现的。如何准确的运行被交给底层的程序语言或者框架来考虑了。&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 响应式编程&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;a = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;b = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;c&lt;/span&gt; = a + b &lt;span class=&quot;comment&quot;&gt;// c = 3&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;a = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;     &lt;span class=&quot;comment&quot;&gt;// c = 7&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;RxSwift 让你能用通过函数响应式编程来编写你的代码。使用 RxSwift 可以很轻松的创建事件或者数据流。这些事件或者数据流可以互相组合、转换。并且最终被观察到，基于值来进行一些操作。&lt;/p&gt;
&lt;p&gt;正如前文所说，在 MVVM 中 View 观察 ViewModel 中模型的数据。RxSwift 提供了一个非常简单并且干净的方法来观察这些值，并绑定到对应的 View 上。&lt;/p&gt;
    
    </summary>
    
      <category term="Reactive" scheme="https://CepheusSun.github.io/categories/Reactive/"/>
    
    
      <category term="iOS" scheme="https://CepheusSun.github.io/tags/iOS/"/>
    
      <category term="Reactive" scheme="https://CepheusSun.github.io/tags/Reactive/"/>
    
      <category term="Swift" scheme="https://CepheusSun.github.io/tags/Swift/"/>
    
      <category term="翻译" scheme="https://CepheusSun.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="设计模式" scheme="https://CepheusSun.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>RxSwift For Dummies 🐣 Part1</title>
    <link href="https://CepheusSun.github.io/2017/05/06/RxSwift%20For%20Dummies%20Part1/"/>
    <id>https://CepheusSun.github.io/2017/05/06/RxSwift For Dummies Part1/</id>
    <published>2017-05-05T16:00:00.000Z</published>
    <updated>2017-05-06T10:48:17.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>RxSwift</strong> 真的是一个非常值得学习的东西。非常遗憾的是我没有研究所有的架构模式MVVM VIPER Routing。</p>
<p>要非常好的讲出来RxSwift到底是个什么东西，我也说不好。毕竟他能做太多的事情了。普遍认为，他是函数响应式编程中非常重要的观察者模式。在最初的定义中,他并不就是函数响应式编程。他最初的设计灵感就是来自于函数响应式(<strong>FRP</strong>), 所以也可以说它包含了函数响应式的特性。</p>
<p>如果你不知道什么是 <strong>FRP</strong> 的话, 不用担心, 在这个教程中你会自然而然的理解什么是 <strong>FRP</strong>。</p>
<p>通过对 RXSwift 的深入研究, 我得到了很多的启发, 同时也被很多的问题困扰。相信你也会这样。</p>
<p>需要花很多个小时的时间来适应新的思维模式，唯一能确定的是，一旦你适应了，你就再也不想回到从前了。</p>
<p>在这个教程中，我会尽可能的节约你的时间，并且解释的尽可能的详细。想教幼儿园的小朋友一样。</p>
<p>开始学习之前, 请确定你已经掌握了 Swift 和 UIkit 的基础知识. </p>
<h3 id="The-Why"><a href="#The-Why" class="headerlink" title="The Why?"></a>The Why?</h3><p>写 UI 的时候经常会处理一些异步的操作。我们很早就知道要使用观察者模式来实现这个东西。我相信你现在已经非常熟悉代理模式了。代理模式是一种很酷的设计模式。但是写起来真的很烦😡。</p>
<center><br><img src="http://swiftpearls.com/images/cry.jpg" alt=""><br></center>

<ul>
<li>代理模式需要些很多的模版代码: 创建一个协议, 声明一个 <code>delegate</code> 变量, 遵守协议, 设置代理…</li>
<li>写完这么多模版代码,可能你不小心就忘了其中的某个步骤。 比如说 <code>object.delegete = self</code></li>
<li>管理起来非常麻烦。他需要在好几个文件中跳跃。</li>
</ul>
<p>RxSwift 解决了这个问题。他能够让你通过声明的方式使用观察者模式。减少了管理的负担, 当然，也不用写那么多模版代码。</p>
<p>我刚刚开始了一个项目，在这个项目中，至今还没有写一个 <code>delegate</code></p>
<h3 id="Basic-Example"><a href="#Basic-Example" class="headerlink" title="Basic Example"></a>Basic Example</h3><p>talk is cheap, show you the code.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleClass</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">runExample</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="comment">// OBSERVABLE //</span></div><div class="line">        <span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span></div><div class="line">            <span class="type">DispatchQueue</span>.global(qos: .<span class="keyword">default</span>).async &#123;</div><div class="line">                <span class="type">Thread</span>.sleep(forTimeInterval: <span class="number">10</span>)</div><div class="line">                observer.onNext(<span class="string">"Hello dummy 🐣"</span>)</div><div class="line">                observer.onCompleted()</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// OBSERVER //</span></div><div class="line">        </div><div class="line">        observable.subscribe(onNext:&#123; (element) <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(element)</div><div class="line">        &#125;).addDisposableTo(disposeBag)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这就是最基本的例子, 在这个示例中, 我们声明了一个 runExample 方法。在这个方法中执行的是一些 RxSwift 中的事情。想一下在这个例子中发生了什么吧。</p>
<a id="more"></a>
<h3 id="Observable-📡"><a href="#Observable-📡" class="headerlink" title="Observable 📡"></a>Observable 📡</h3><p>我们还是从 RxSwift 中最基本的构建单元开始吧。 <code>Observable</code>。 它其实非常的简单。 <code>Observable</code> 执行某些动作, 然后观察者能够对此作出一些反应。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span></div><div class="line">    <span class="type">DispatchQueue</span>.global(qos: .<span class="keyword">default</span>).async &#123;</div><div class="line">        <span class="comment">// Simulate some work</span></div><div class="line">        <span class="type">Thread</span>.sleep(forTimeInterval: <span class="number">10</span>)</div><div class="line">        observer.onNext(<span class="string">"Hello dummy 🐣"</span>)</div><div class="line">        observer.onCompleted()</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;</div><div class="line">                </div><div class="line">observable.subscribe(onNext:&#123; (element) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(element)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>现在我们有了一个 <code>Observable</code> 信号了。这种信号只有在被订阅之后才会执行它也被叫做:冷信号❄️。相反热信号🔥是那种既是没有被订阅也会执行的信号。</p>
<p>在下一步们我们会具体的讲解二者的区别。现在你只需要理解的是: 因为你初始化出来的是一个冷❄️信号<code>Hello dummy 🐣</code>这个值是不会被发送出来的。冷信号❄️只有在有东西订阅之后才会发送消息。</p>
<p>我们一步一步的来分析一下这究竟是什么意思。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="type">DispatchQueue</span>.global(qos: .<span class="keyword">default</span>).async &#123;...&#125;</div></pre></td></tr></table></figure>
<p>这行代码保证这个 <code>Observable</code> 信号在主线程中发送消息。其实 RxSwift 是有一个调度机制, 但是我现在还不想那么早告诉你, 不然你该记不值了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">observer.onNext(<span class="string">"Hello dummy 🐣"</span>)</div></pre></td></tr></table></figure>
<p>一个 <code>Observable</code> 信号发出的消息从时间上来看, 可以被看作是一个 <strong>序列</strong>。在这个序列中可能有无限多的值。我们可以通过 <code>onNext</code> 方法类将这些值发送出来。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">observer.onCompleted()</div></pre></td></tr></table></figure>
<p>当这个序列已经发送完了所有的值之后，它可以发送一个 <code>Completed</code> 或者 <code>Error</code>出来。之后这个信号就不能在产生更多的值了, 然后就会随着一个闭包被释放掉。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> <span class="type">Disposables</span>.create()</div></pre></td></tr></table></figure>
<p>每一个  <code>Observable</code> 信号都要返回一个 <code>Disposable</code>.</p>
<p>使用 <code>Disposables.create()</code> 如果你不想在信号被释放的时候处理其他事情。你可以看看<a href="https://github.com/ReactiveX/RxSwift/blob/master/RxSwift/Disposables/NopDisposable.swift">NopDisposable</a>的实现，你会发现，他什么事情都没有做，只是一些空方法。</p>
<h3 id="Disposable"><a href="#Disposable" class="headerlink" title="Disposable"></a>Disposable</h3><p><code>Disposable</code> 对象必须要在 <code>Observable</code> 中返回, 它是用来在<code>Observable</code>不能再正常的完成的时候清除掉这些信号的。比如说你可以使用 <strong>AnonymousDisposable</strong>:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> <span class="type">Disposables</span>.create(with: &#123;</div><div class="line">    connection.close()</div><div class="line">    database.closeImportantSomething()</div><div class="line">    cache.clear()</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>只有当信号被提前释放或者程序手动调用了 <code>dispose()</code> 方法, <code>Disposable</code> 才会被调用。但是在多数情况下, <code>dispose()</code> 方法都是通过 <strong>Dispose Bags</strong> 自动调用的。别着急，你可以在一些更具体的例子中自己实现这个东西。</p>
<h3 id="Observer-🕵"><a href="#Observer-🕵" class="headerlink" title="Observer 🕵"></a>Observer 🕵</h3><p>我们创建的 <code>Observable</code> 是冷信号❄️。 除非我们订阅了它，不然它是不会发送信号的。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">observable.subscribe(onNext: &#123;(element) <span class="keyword">in</span></div><div class="line">  <span class="built_in">print</span>(element)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>这就是订阅信号的方法。在 <code>subscribeNext</code> 方法中一个订阅就发生了。这个方法也会返回一个 <code>Disposable</code>.这个 <code>Disposable</code> 就是对这个订阅的记录</p>
<p>这个 <code>Observable</code> 就开始工作了, 10秒之后, 你就会在控制台看见</p>
<blockquote>
<p>Hello dummy 🐣</p>
</blockquote>
<p><code>subscribe(onNext:)</code> 只会在Next事件发送出来的时候响应。也可以使用 <code>subscribe(onCompleted:)</code> 和 <code>subscribe(onError:)</code> 响应对应的事件。</p>
<h3 id="Dispose-Bag-🗑"><a href="#Dispose-Bag-🗑" class="headerlink" title="Dispose Bag 🗑"></a>Dispose Bag 🗑</h3><p>唯一一个还有点神秘的东西就是 <code>addDisposableTo</code> 这个方法了。</p>
<blockquote>
<p>Dispose bags are used to return ARC like behavior to RX. When a DisposeBag is deallocated, it will call dispose on each of the added disposables.</p>
<p>Dispose bags 就像是一个垃圾筐。就像是 AutoreleasePool 一样，当这个垃圾筐被释放的时候, 里面的所有东西都会被释放掉。</p>
</blockquote>
<p>当你订阅一个信号的时候, 你就需要把你创建出来的 <code>Disposable</code> 添加到这个框里面。当这的框被释放的时候(ExampleClass 对象 dealloc 的时候)。这些没有执行完的<code>Disposable</code>就会被释放掉。</p>
<p>它被用作释放在闭包中引用的值, 以及没用的资源, 比如说, 一个 HTTP 网络连接, 数据库连接, 或者是缓存的对象。</p>
<p>如果你还是不懂, 一会儿再举一个例子。</p>
<h3 id="Observable-operators"><a href="#Observable-operators" class="headerlink" title="Observable operators"></a>Observable operators</h3><p><code>create</code> 只是信号诸多操作方法中的一个而已，它被用来创建一个新的信号。可以看一下 ReactiveX<br>的<a href="http://reactivex.io/documentation/operators.html">官方文档</a>。哪里有所有的操作方法。我只是举一些常见的例子。</p>
<h4 id="Just"><a href="#Just" class="headerlink" title="Just"></a>Just</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.just(<span class="string">"Hello again dummy 🐥"</span>);</div><div class="line">observable.subscribe(onNext: &#123; (element) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(element)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div><div class="line">        </div><div class="line">observable.subscribe(onCompleted: &#123; </div><div class="line">    <span class="built_in">print</span>(<span class="string">"I'm done"</span>)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<blockquote>
<p>Hello again dummy 🐥<br>I’m done</p>
</blockquote>
<p><strong>Just</strong> just 创建了一个智能释放一个值的信号。所以在这个信号序列中的事件，是这样的:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.Next(&quot;Hello&quot;) -&gt;  .Completed</div></pre></td></tr></table></figure>
<h4 id="Interval"><a href="#Interval" class="headerlink" title="Interval"></a>Interval</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.interval(<span class="number">0.3</span>, scheduler: <span class="type">MainScheduler</span>.instance)</div><div class="line">observable.subscribe(onNext: &#123; (element) <span class="keyword">in</span></div><div class="line">   <span class="built_in">print</span>(element)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<blockquote>
<p>0<br>1<br>2<br>3<br>…</p>
</blockquote>
<p><strong>Interval</strong> 是一个非常具体的操作符号。在这个例子中, 它从 0 每0.3秒递增, <code>scheduler</code> 是用来定义异步行为的。</p>
<h4 id="Repeat"><a href="#Repeat" class="headerlink" title="Repeat"></a>Repeat</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.repeatElement(<span class="string">"This is fun 🙄"</span>)</div><div class="line">observable.subscribe(onNext: &#123; (element) <span class="keyword">in</span></div><div class="line">   <span class="built_in">print</span>(element)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<blockquote>
<p>This is fun 🙄<br>This is fun 🙄<br>This is fun 🙄<br>This is fun 🙄<br>…</p>
</blockquote>
<p><strong>repeat</strong> 会无限的重复我们给定的值。你可以通过定义 <code>scheduler</code> 类型的方法来控制线程的行为。</p>
<p>目前为止, 可能都不是非常的给力。但是知道其他的操作是必要的。另外一件很重要的事情涘，这是 RxSwift 最有用的一部分。</p>
<h3 id="Real-life-example"><a href="#Real-life-example" class="headerlink" title="Real life example"></a>Real life example</h3><p>现在我们开始快速的通过一个例子巩固一下这些知识。我们对 RxSwift 的了解目前为止是非常有限的。所有我们先使用一个简单的 MVC 的例子。我们先创建一个模型， 它可以从 google 上获取数据。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Foundation</div><div class="line"><span class="keyword">import</span> RxCocoa</div><div class="line"><span class="keyword">import</span> RxSwift</div><div class="line"></div><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">GoogleModel</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">createGoogleDataObservable</span><span class="params">()</span></span> -&gt; <span class="type">Observable</span>&lt;<span class="type">String</span>&gt; &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create(&#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">            </div><div class="line">            <span class="keyword">let</span> session = <span class="type">URLSession</span>.shared</div><div class="line">            <span class="keyword">let</span> task = session.dataTask(with: <span class="type">URL</span>(string: <span class="string">"https://www.google.com"</span>)!) &#123; (data, response, error) <span class="keyword">in</span></div><div class="line">                </div><div class="line">                <span class="comment">// 我们需要在主线程中更新</span></div><div class="line">                <span class="type">DispatchQueue</span>.main.async &#123;</div><div class="line">                    <span class="keyword">if</span> <span class="keyword">let</span> err = error &#123;</div><div class="line">                        <span class="comment">// 如果请求失败, 直接发处失败的事件</span></div><div class="line">                        observer.onError(err)</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        <span class="comment">// 解析数据</span></div><div class="line">                        <span class="keyword">if</span> <span class="keyword">let</span> googleString = <span class="type">String</span>(data: data!, encoding: .ascii) &#123;</div><div class="line">                            <span class="comment">// 将数据发送出去</span></div><div class="line">                            observer.onNext(googleString)</div><div class="line">                        &#125; <span class="keyword">else</span> &#123;</div><div class="line">                            <span class="comment">// 如果解析失败发送失败的事件</span></div><div class="line">                            observer.onNext(<span class="string">"Error! Unable to parse the response data from google!"</span>)</div><div class="line">                        &#125;</div><div class="line">                        <span class="comment">// 结束这个序列</span></div><div class="line">                        observer.onCompleted()</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            task.resume()</div><div class="line">            </div><div class="line">            <span class="comment">// 返回一个 AnonymousDisposable</span></div><div class="line">            <span class="keyword">return</span> <span class="type">Disposables</span>.create(with: &#123;</div><div class="line">                <span class="comment">// 取消请求</span></div><div class="line">                task.cancel()</div><div class="line">            &#125;)</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这是非常简单的。 <code>createGoogleDataObservable</code>中我们创建了一个可以被订阅的信号。这个信号创建了一个从 google 获取数据的任务。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="type">DispatchQueue</span>.main.async &#123;...&#125;</div></pre></td></tr></table></figure>
<p>URLSession 的任务是在后台线程中进行的, 所以我们需要在 UI 线程中更新。记住还有一个 <code>schedulers</code> 这会在更高级的阶段介绍出来。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> <span class="type">Disposables</span>.create(with: &#123;</div><div class="line"> task.cancel()</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p><code>Disposable</code> 是一个给长给力的机制： 如果订阅者停止订阅这个信号了。这个任务就会被取消。</p>
<p>接下来是订阅者这部分的内容了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"><span class="keyword">import</span> RxCocoa</div><div class="line"><span class="keyword">import</span> RxSwift</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// 通常就是这样创建 DisposeBag 的</span></div><div class="line">    <span class="comment">// 当这个 controller 被释放掉的时候，disposebag</span></div><div class="line">    <span class="comment">// 也会释放掉, 并且所有 bag 中的元素都会调用 dispose() 方法</span></div><div class="line">    <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">    <span class="keyword">let</span> model = <span class="type">GoogleModel</span>()</div><div class="line">    </div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> googleText: <span class="type">UITextView</span>!</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        </div><div class="line">        <span class="comment">// 记住使用 [weak self] 或者 [unowned self] 来避免循环引用</span></div><div class="line">        model.createGoogleDataObservable()</div><div class="line">            .subscribe(onNext: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] (element) <span class="keyword">in</span></div><div class="line">                <span class="keyword">self</span>?.googleText.text = element</div><div class="line">            &#125;).addDisposableTo(disposeBag)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>神奇吗？没有协议, 没有代理。只是声明了一下在一个事情发生的时候应该做什么。</p>
<p>在闭包中记得使用 <code>[weak self]</code> 或者 <code>[unowned self]</code> 来避免循环引用</p>
<p>还有一种更响应式的方法来为 <code>UITextView</code> 绑定文本, 绑定。但那是更高级的内容。</p>
<h3 id="Dispose-Bag-Example"><a href="#Dispose-Bag-Example" class="headerlink" title="Dispose Bag Example"></a>Dispose Bag Example</h3><p>你可能已经发现了 <code>disposeBag</code> 是 <code>ViewController</code> 的一个成员变量。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div></pre></td></tr></table></figure>
<p>当这个控制器被释放的时候，它也会释放掉这个 <code>disposeBag</code> .</p>
<p>如果这个 <code>disposeBag</code> 被释放掉之后, 它我们添加到这个 bag 里面所有的信号都会被释放掉。而这个网络请求任务如果还没有结束的话也会被取消。<br>希望我讲清楚了 <code>DisposeBag</code> 的机制。</p>
<h3 id="That‘s-it！"><a href="#That‘s-it！" class="headerlink" title="That‘s it！"></a>That‘s it！</h3><p>Demo 我已经放在 <a href="https://github.com/CepheusTeam/Translate">GitHub</a> 上了。</p>
<p>到现在, 我们已经学到了如何创建一个 Observable 和 订阅者。以及 disposing 机制是怎么回事。希望你能够理解到这样做比平常的观察者模式有什么优势。</p>
<p>下一篇是关于 RxSwift 操作符的。</p>
<p><a href="http://swiftpearls.com/RxSwift-for-dummies-1-Observables.html#basic-example">原文地址</a></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>我是一名来自中国的 iOS 程序员, 对技术有着浓厚的兴趣, 在学习的过程中, 发现了很多来自国外的优秀博客。为了更好的学习这些文章, 产生了将这些文章翻译成中文的想法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;RxSwift&lt;/strong&gt; 真的是一个非常值得学习的东西。非常遗憾的是我没有研究所有的架构模式MVVM VIPER Routing。&lt;/p&gt;
&lt;p&gt;要非常好的讲出来RxSwift到底是个什么东西，我也说不好。毕竟他能做太多的事情了。普遍认为，他是函数响应式编程中非常重要的观察者模式。在最初的定义中,他并不就是函数响应式编程。他最初的设计灵感就是来自于函数响应式(&lt;strong&gt;FRP&lt;/strong&gt;), 所以也可以说它包含了函数响应式的特性。&lt;/p&gt;
&lt;p&gt;如果你不知道什么是 &lt;strong&gt;FRP&lt;/strong&gt; 的话, 不用担心, 在这个教程中你会自然而然的理解什么是 &lt;strong&gt;FRP&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;通过对 RXSwift 的深入研究, 我得到了很多的启发, 同时也被很多的问题困扰。相信你也会这样。&lt;/p&gt;
&lt;p&gt;需要花很多个小时的时间来适应新的思维模式，唯一能确定的是，一旦你适应了，你就再也不想回到从前了。&lt;/p&gt;
&lt;p&gt;在这个教程中，我会尽可能的节约你的时间，并且解释的尽可能的详细。想教幼儿园的小朋友一样。&lt;/p&gt;
&lt;p&gt;开始学习之前, 请确定你已经掌握了 Swift 和 UIkit 的基础知识. &lt;/p&gt;
&lt;h3 id=&quot;The-Why&quot;&gt;&lt;a href=&quot;#The-Why&quot; class=&quot;headerlink&quot; title=&quot;The Why?&quot;&gt;&lt;/a&gt;The Why?&lt;/h3&gt;&lt;p&gt;写 UI 的时候经常会处理一些异步的操作。我们很早就知道要使用观察者模式来实现这个东西。我相信你现在已经非常熟悉代理模式了。代理模式是一种很酷的设计模式。但是写起来真的很烦😡。&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;http://swiftpearls.com/images/cry.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/center&gt;

&lt;ul&gt;
&lt;li&gt;代理模式需要些很多的模版代码: 创建一个协议, 声明一个 &lt;code&gt;delegate&lt;/code&gt; 变量, 遵守协议, 设置代理…&lt;/li&gt;
&lt;li&gt;写完这么多模版代码,可能你不小心就忘了其中的某个步骤。 比如说 &lt;code&gt;object.delegete = self&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;管理起来非常麻烦。他需要在好几个文件中跳跃。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;RxSwift 解决了这个问题。他能够让你通过声明的方式使用观察者模式。减少了管理的负担, 当然，也不用写那么多模版代码。&lt;/p&gt;
&lt;p&gt;我刚刚开始了一个项目，在这个项目中，至今还没有写一个 &lt;code&gt;delegate&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;Basic-Example&quot;&gt;&lt;a href=&quot;#Basic-Example&quot; class=&quot;headerlink&quot; title=&quot;Basic Example&quot;&gt;&lt;/a&gt;Basic Example&lt;/h3&gt;&lt;p&gt;talk is cheap, show you the code.&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ExampleClass&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; disposeBag = &lt;span class=&quot;type&quot;&gt;DisposeBag&lt;/span&gt;()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;runExample&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// OBSERVABLE //&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; observable = &lt;span class=&quot;type&quot;&gt;Observable&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;&amp;gt;.create &amp;#123; (observer) -&amp;gt; &lt;span class=&quot;type&quot;&gt;Disposable&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;type&quot;&gt;DispatchQueue&lt;/span&gt;.global(qos: .&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;).async &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;type&quot;&gt;Thread&lt;/span&gt;.sleep(forTimeInterval: &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                observer.onNext(&lt;span class=&quot;string&quot;&gt;&quot;Hello dummy 🐣&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                observer.onCompleted()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Disposables&lt;/span&gt;.create()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// OBSERVER //&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        observable.subscribe(onNext:&amp;#123; (element) &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(element)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;).addDisposableTo(disposeBag)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这就是最基本的例子, 在这个示例中, 我们声明了一个 runExample 方法。在这个方法中执行的是一些 RxSwift 中的事情。想一下在这个例子中发生了什么吧。&lt;/p&gt;
    
    </summary>
    
      <category term="Reactive" scheme="https://CepheusSun.github.io/categories/Reactive/"/>
    
    
      <category term="iOS" scheme="https://CepheusSun.github.io/tags/iOS/"/>
    
      <category term="Reactive" scheme="https://CepheusSun.github.io/tags/Reactive/"/>
    
      <category term="Swift" scheme="https://CepheusSun.github.io/tags/Swift/"/>
    
      <category term="翻译" scheme="https://CepheusSun.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>RxSwift and the awesome things you can do with Reactive Programming — Part I</title>
    <link href="https://CepheusSun.github.io/2017/05/05/RxSwift%20and%20the%20awesome%20things%20you%20can%20do%20with%20Reactive%20Programming%E2%80%8A%E2%80%94%E2%80%8APart%20I/"/>
    <id>https://CepheusSun.github.io/2017/05/05/RxSwift and the awesome things you can do with Reactive Programming — Part I/</id>
    <published>2017-05-04T16:00:00.000Z</published>
    <updated>2017-05-04T17:18:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文翻译自国外的美女工程师 <a href="https://medium.com/@kenzai">Kenza Iraki</a> 的文章 <a href="https://medium.com/@kenzai/rxswift-and-the-awesome-things-you-can-do-with-reactive-programming-part-i-3921137d251">RxSwift and the awesome things you can do with Reactive Programming — Part I</a></p>
<p>第一次听见响应式编程，我的表情是这样的</p>
<center><br><img src="https://cdn-images-1.medium.com/max/1600/1*28RdzpfQBHklPcgLGsg0jw.png"><br></center>

<p>接下来的几次几次接触, 也并没有什么改变。整整两个星期之后,即使我在项目中写了一些响应式代码。我依然是这种感觉。</p>
<p>现在我才知道有很多的人在第一次遇见响应式编程的时候跟我有一样的感觉。我也知道很多人看过响应式的代码之后再也不想再见到它了，因为她的学习曲线太过陡峭了。但是我能告诉你一个事实, 我还没听说过一个人， 在最终理解了他是怎么回事之后,后悔学习响应式编程。</p>
<p>我知道网上有很多关于响应式编程理论和思想还有 RxSwift 的的资源, 也有很多教你用Rx来做各种事情的教程(文末我会给出一些链接)。这篇文章不是是一个教程, 也不会解释 <code>stream</code> 和 <code>observables</code> 是怎么回事。 我要做的是提供一个直接、明确并且尽量少的理论总结来告诉你 RxSwift 能做什么, 并且告诉你为什么你会喜欢上它。由于 Rx 的世界深似海, 所以我打算写三篇文章来讨论这件事情, 这是第一篇。</p>
<h2 id="Part1-Data-Binding-control-events-and-gesture-recognizers"><a href="#Part1-Data-Binding-control-events-and-gesture-recognizers" class="headerlink" title="Part1: Data Binding, control events and gesture recognizers"></a>Part1: Data Binding, control events and gesture recognizers</h2><h3 id="Data-Binding"><a href="#Data-Binding" class="headerlink" title="Data Binding"></a>Data Binding</h3><p>数据绑定看起来像是一个高端的词语, 但是它却是一件非常简单的事情。假如你有一个 App 需要用户在 <code>UITextField</code> 中输入它们的名字。当他们在打字的时候, 用 “你好 + 用户输入的文字” 展示在界面上。这样一个很基本的场景。如果在不是响应式的程序中, 我们需要遵守 <code>UITextFieldDelegate</code> 这个协议, 然后在 <code>ViewController</code> 中实现 <code>textFieldDidEndEditing</code> 这个方法, 来监听用户用户的行为，然后给 <code>Label</code> 赋值。</p>
<p>虽然很简单，但是假如有很多的 <code>UITextField</code> 我们还要在代理方法中判断, 又或者, 我们需要用户在输入的过程中时时的刷新 <code>Label</code>。这种场景, 我们的代码，看起来就会很糟糕。至少不会很优雅吧。</p>
<p>在响应式中, 这种情况就可以用数据绑定来实现。说白了,就是将用户在 <code>UITextField</code> 中输入的文字绑定到 <code>UILabel</code> 上。在 <code>RxSwift</code> 的世界里,  没有什么比处理数据绑定更简单的了。刚才描述的需求, 我们只需要通过以下代码就可以实现了。</p>
<a id="more"></a>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> namefield = <span class="type">UITextField</span>()</div><div class="line"><span class="keyword">var</span> helloLabel = <span class="type">UILabel</span>()</div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    nameField.rx.text.<span class="built_in">map</span> &#123; <span class="string">"Hello <span class="subst">\($<span class="number">0</span>)</span>"</span> &#125;</div><div class="line">                     .bindTo(helloLabel.rx.text)</div></pre></td></tr></table></figure>
<p>上面的代码， 我们首先是获取到了 <code>UITextField</code> 的文字。 然后我们将这段文字映射成想要的格式，然后赋值给 <code>UILabel</code>。 在这里，我们之间见到的在文字前面加了一个 <code>&#39;hello&#39;</code>， 因为 map 是一个闭包, 可以简单的被看作一个匿名函数, 它的参数:<code>$0</code>(第一个参数)、<code>$1</code>(第二个参数)以此类推。然后将映射后的文字绑定到 <code>UILabel</code> 的 <code>text</code> 属性上。就这么简单，这个需求就完成了。没有使用代理，也没有用各种 if 语句, 就简单明了的几行代码。</p>
<p>你先在肯定在想,”是，这是很神奇, 但是真的有很多 app 在这样做吗” 我可以告诉你，是的。不要仅仅是限制在这简单的几个例子中。能够将数据绑定到视图是非常强大的事情。你想想看，如果我们有一个视图的背景颜色需要根据天气用户的地理位置而改变。基于可能变化的数据和一些简单的逻辑, 不需要太过深入的研究它背后的东西。这就是数据绑定最主要的思想。</p>
<h3 id="Control-Events-and-Gesture-Recognizers"><a href="#Control-Events-and-Gesture-Recognizers" class="headerlink" title="Control Events and Gesture Recognizers"></a>Control Events and Gesture Recognizers</h3><p>简单的说一下什么是事件吧！事件基本上是用户能在你的 app 上操作的所有行为，点击、滑动、拖拽等等。当用户按下一个按钮的时候，你的程序会监听到一个 <code>UIControlEvent</code> 的事件类型 <code>.touchUpInSide</code>。 如果你用的是 <code>StoryBoary</code> ，你可能在创建 <code>IBAction</code> 的时候，没有想过这个按钮的行为。我已经写了一篇<a href="">why I never use storyboards</a> 。如果你跟我一样,这段代码你肯定会很熟悉了</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> button = <span class="type">UIButton</span>()</div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    button.addTarget(#selector(<span class="type">ViewController</span>.loginUser), target: <span class="keyword">self</span>, event: .touchUpInside</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">loginUser</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="comment">// Implementation here</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我真的很讨厌 Selector, 这些代码太不明确了，让代码看起来很乱，也让我们梗容易犯错。但是用 Rx 这样就可以了：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> button = <span class="type">UIButton</span>()</div><div class="line"><span class="keyword">var</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    button.rx.tap.subscribe &#123; onNext <span class="number">_</span> <span class="keyword">in</span></div><div class="line">        <span class="comment">// Implementation here</span></div><div class="line">    &#125;.addDisposableTo(disposeBag)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不要太过纠结 <code>disposeBag</code> 和 <code>subscribe</code> 这些东西。你只要知道这些是一些必须的动作就可以了。(下面会有介绍)</p>
<p>当你需要给不具有 control event 的空间添加一些逻辑事件, 比如给 <code>UILabel</code> 或者 <code>UIImageView</code> 添加点击事件的时候。我们只能给他添加手势。(这是我做讨厌的 UIKit 特点之一)。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> label = <span class="type">UILabel</span>()</div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="comment">// Show example of gesture recognizers</span></div><div class="line">    <span class="keyword">let</span> gestureRecognizer = <span class="type">UITapGestureRecognizer</span>(target: <span class="keyword">self</span>, action: “handleTap:”)</div><div class="line">    label.addGestureRecognizer(gestureRecognizer)</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleTap</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="comment">// Your logic here</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其他的手势，如果你需要响应的话。你就需要给这个控件添加多个 <code>gesture recognizer</code> ,你要穿件多个手势，然后挨个添加到这个控件上。这不仅是很多样板代码这么简单，这也可能带来一些难以想象的混乱和潜在的错误。</p>
<p>你可以已经想到了。Rx 让这个东西变的异常的简单：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> label = <span class="type">UILabel</span>()</div><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    label.rx.gesture(.tap).subscribe &#123;onNext (gesture) <span class="keyword">in</span></div><div class="line">        <span class="comment">// Your logic here</span></div><div class="line">    &#125;.addDisposableTo(disposeBag)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>假如你需要添加多个手势的话:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> label = <span class="type">UILabel</span>()</div><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    label.rx.gesture(.tap, .pan, .swipeUp).subscribe &#123; onNext (gesture) <span class="keyword">in</span></div><div class="line">        <span class="keyword">switch</span> gesture &#123;</div><div class="line">        <span class="keyword">case</span> .tap: <span class="comment">// Do something</span></div><div class="line">        <span class="keyword">case</span> .pan: <span class="comment">// Do something</span></div><div class="line">        <span class="keyword">case</span> .swipeUp: <span class="comment">// Do something </span></div><div class="line">        <span class="keyword">default</span>: <span class="keyword">break</span>       </div><div class="line">        &#125;        </div><div class="line">    &#125;.addDisposableTo(disposeBag)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这些都是一个叫 <a href="https://github.com/RxSwiftCommunity/RxGesture">RxGesture</a> 的 RxSwift 库提供的。</p>
<p><strong>参考资料</strong></p>
<p><a href="https://github.com/ReactiveX/RxSwift">ReactiveX/RxSwift</a></p>
<p><a href="https://realm.io/news/altconf-ash-furrow-functional-reactive-swift/">Functional Reactive Awesomeness With Swift</a></p>
<p><a href="https://medium.com/swift-programming/reactive-swift-3b6050375534">My journey with reactive programming in Swift — and the iOS app that came out of it.</a></p>
<p><a href="https://github.com/DTVD/The-introduction-to-RxSwift-you-have-been-missing">DTVD/The-introduction-to-RxSwift-you-have-been-missing</a></p>
<p><a href="https://www.thedroidsonroids.com/blog/ios/rxswift-by-examples-1-the-basics/">RxSwift by Examples #1 – The basics.</a></p>
<p><a href="https://news.realm.io/news/tryswift-Marin-Todorov-I-create-iOS-apps-is-RxSwift-for-me/">I create iOS apps - is RxSwift for me?</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文翻译自国外的美女工程师 &lt;a href=&quot;https://medium.com/@kenzai&quot;&gt;Kenza Iraki&lt;/a&gt; 的文章 &lt;a href=&quot;https://medium.com/@kenzai/rxswift-and-the-awesome-things-you-can-do-with-reactive-programming-part-i-3921137d251&quot;&gt;RxSwift and the awesome things you can do with Reactive Programming — Part I&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;第一次听见响应式编程，我的表情是这样的&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1600/1*28RdzpfQBHklPcgLGsg0jw.png&quot;&gt;&lt;br&gt;&lt;/center&gt;

&lt;p&gt;接下来的几次几次接触, 也并没有什么改变。整整两个星期之后,即使我在项目中写了一些响应式代码。我依然是这种感觉。&lt;/p&gt;
&lt;p&gt;现在我才知道有很多的人在第一次遇见响应式编程的时候跟我有一样的感觉。我也知道很多人看过响应式的代码之后再也不想再见到它了，因为她的学习曲线太过陡峭了。但是我能告诉你一个事实, 我还没听说过一个人， 在最终理解了他是怎么回事之后,后悔学习响应式编程。&lt;/p&gt;
&lt;p&gt;我知道网上有很多关于响应式编程理论和思想还有 RxSwift 的的资源, 也有很多教你用Rx来做各种事情的教程(文末我会给出一些链接)。这篇文章不是是一个教程, 也不会解释 &lt;code&gt;stream&lt;/code&gt; 和 &lt;code&gt;observables&lt;/code&gt; 是怎么回事。 我要做的是提供一个直接、明确并且尽量少的理论总结来告诉你 RxSwift 能做什么, 并且告诉你为什么你会喜欢上它。由于 Rx 的世界深似海, 所以我打算写三篇文章来讨论这件事情, 这是第一篇。&lt;/p&gt;
&lt;h2 id=&quot;Part1-Data-Binding-control-events-and-gesture-recognizers&quot;&gt;&lt;a href=&quot;#Part1-Data-Binding-control-events-and-gesture-recognizers&quot; class=&quot;headerlink&quot; title=&quot;Part1: Data Binding, control events and gesture recognizers&quot;&gt;&lt;/a&gt;Part1: Data Binding, control events and gesture recognizers&lt;/h2&gt;&lt;h3 id=&quot;Data-Binding&quot;&gt;&lt;a href=&quot;#Data-Binding&quot; class=&quot;headerlink&quot; title=&quot;Data Binding&quot;&gt;&lt;/a&gt;Data Binding&lt;/h3&gt;&lt;p&gt;数据绑定看起来像是一个高端的词语, 但是它却是一件非常简单的事情。假如你有一个 App 需要用户在 &lt;code&gt;UITextField&lt;/code&gt; 中输入它们的名字。当他们在打字的时候, 用 “你好 + 用户输入的文字” 展示在界面上。这样一个很基本的场景。如果在不是响应式的程序中, 我们需要遵守 &lt;code&gt;UITextFieldDelegate&lt;/code&gt; 这个协议, 然后在 &lt;code&gt;ViewController&lt;/code&gt; 中实现 &lt;code&gt;textFieldDidEndEditing&lt;/code&gt; 这个方法, 来监听用户用户的行为，然后给 &lt;code&gt;Label&lt;/code&gt; 赋值。&lt;/p&gt;
&lt;p&gt;虽然很简单，但是假如有很多的 &lt;code&gt;UITextField&lt;/code&gt; 我们还要在代理方法中判断, 又或者, 我们需要用户在输入的过程中时时的刷新 &lt;code&gt;Label&lt;/code&gt;。这种场景, 我们的代码，看起来就会很糟糕。至少不会很优雅吧。&lt;/p&gt;
&lt;p&gt;在响应式中, 这种情况就可以用数据绑定来实现。说白了,就是将用户在 &lt;code&gt;UITextField&lt;/code&gt; 中输入的文字绑定到 &lt;code&gt;UILabel&lt;/code&gt; 上。在 &lt;code&gt;RxSwift&lt;/code&gt; 的世界里,  没有什么比处理数据绑定更简单的了。刚才描述的需求, 我们只需要通过以下代码就可以实现了。&lt;/p&gt;
    
    </summary>
    
      <category term="Reactive" scheme="https://CepheusSun.github.io/categories/Reactive/"/>
    
    
      <category term="iOS" scheme="https://CepheusSun.github.io/tags/iOS/"/>
    
      <category term="Reactive" scheme="https://CepheusSun.github.io/tags/Reactive/"/>
    
      <category term="Swift" scheme="https://CepheusSun.github.io/tags/Swift/"/>
    
      <category term="翻译" scheme="https://CepheusSun.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>RAC 最基本的东西-- RACSignal</title>
    <link href="https://CepheusSun.github.io/2017/04/27/RAC%20%E6%9C%80%E5%9F%BA%E6%9C%AC%E7%9A%84%E4%B8%9C%E8%A5%BF--%20RACSignal/"/>
    <id>https://CepheusSun.github.io/2017/04/27/RAC 最基本的东西-- RACSignal/</id>
    <published>2017-04-26T16:00:00.000Z</published>
    <updated>2017-04-27T09:20:19.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h3><ul>
<li>创建信号</li>
<li>订阅信号</li>
<li>发送信号</li>
</ul>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1.创建信号(cold)</span></div><div class="line">RACSignal *signal = [RACSignal createSignal:^RACDisposable * _Nullable(<span class="keyword">id</span>&lt;RACSubscriber&gt;  _Nonnull subscriber) &#123;</div><div class="line">    <span class="comment">// 3.发送信号</span></div><div class="line">    [subscriber sendNext:<span class="string">@"hello, RAC."</span>];</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 2.订阅信号(hot)</span></div><div class="line">[signal subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, x);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>在创建 RACSignal 的时候, </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">+ (RACSignal&lt;ValueType&gt; *)createSignal:(RACDisposable * _Nullable (^)(id&lt;RACSubscriber&gt; subscriber))didSubscribe;</div></pre></td></tr></table></figure>
<p>方法传入的 block 会返回一个 <code>RACDisposable</code> 对象。</p>
<p>将以上代码中的 <code>return nil；</code> 替换成如下代码</p>
<a id="more"></a>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> [RACDisposable disposableWithBlock:^&#123;</div><div class="line"><span class="comment">// 订阅者释放时会自动取消订阅信号, 但是只要订阅者没有释放, 就不会取消订阅信号.</span></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"信号被取消订阅了!"</span>);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>这个时候在 <code>[subscriber sendComplete]</code> 的时候会执行创建 <code>RACDisposable</code> 传入的 <code>block</code> </p>
<p><strong>如何主动取消订阅</strong></p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">_disposable = [signal subscribeNext:^(<span class="keyword">id</span> x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, x);</div><div class="line">&#125;];<span class="comment">// 可以看出来，这里的 subscribeNext 返回的就是取消订阅这个 signal 的 RACDisoisable</span></div><div class="line"><span class="comment">// 不管 在创建 signal 的时候 return 的是 nil 还是 RACDisposable 对象</span></div><div class="line">[_disposable dispose]</div></pre></td></tr></table></figure>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;ReactiveObjC.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) RACDisposable *disposable;    </div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    RACSignal *signal = [RACSignal createSignal:^RACDisposable *(<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber ) &#123;       </div><div class="line">        [subscriber sendNext:<span class="string">@"hello, RAC."</span>];</div><div class="line">        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">            [subscriber sendNext:<span class="string">@"2"</span>];</div><div class="line">            dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">                [subscriber sendNext:<span class="string">@"2"</span>];</div><div class="line">                dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">                    [subscriber sendNext:<span class="string">@"2"</span>];</div><div class="line">                    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">                        [subscriber sendNext:<span class="string">@"2"</span>];</div><div class="line">                        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">                            [subscriber sendNext:<span class="string">@"2"</span>];</div><div class="line">                            dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">                                [subscriber sendNext:<span class="string">@"2"</span>];</div><div class="line">                                dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">                                    [subscriber sendNext:<span class="string">@"2"</span>];</div><div class="line">                                    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">                                        [subscriber sendNext:<span class="string">@"2"</span>];</div><div class="line">                                        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">                                            [subscriber sendNext:<span class="string">@"2"</span>];</div><div class="line">                                        &#125;);</div><div class="line">                                    &#125;);</div><div class="line">                                &#125;);</div><div class="line">                            &#125;);</div><div class="line">                        &#125;);</div><div class="line">                    &#125;);</div><div class="line">                &#125;);</div><div class="line">            &#125;);</div><div class="line">        &#125;);</div><div class="line">        <span class="comment">// 如果信号不再发送数据, 最好调用信号的发送完成方法, 该方法会调用 [RACDisposable disposable] 取消订阅信号.</span></div><div class="line">        <span class="comment">//[subscriber sendCompleted];</span></div><div class="line">        </div><div class="line">        <span class="keyword">return</span> [RACDisposable disposableWithBlock:^&#123;</div><div class="line">            <span class="comment">// 订阅者释放时会自动取消订阅信号, 但是只要订阅者没有释放, 就不会取消订阅信号.</span></div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"信号被取消订阅了!"</span>);</div><div class="line">        &#125;];</div><div class="line">        <span class="comment">//如果取消订阅的时候不需要做什么事情, return nil 也没有关系</span></div><div class="line">        <span class="comment">//return nil;</span></div><div class="line">    &#125;];</div><div class="line">    _disposable = [signal subscribeNext:^(<span class="keyword">id</span> x) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, x);</div><div class="line">    &#125;];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</div><div class="line">    <span class="comment">// 主动取消订阅信号</span></div><div class="line">    [_disposable dispose];</div><div class="line">&#125;  </div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h3 id="timer"><a href="#timer" class="headerlink" title="timer"></a>timer</h3><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[[RACSignal interval:<span class="number">2.0</span> onScheduler:[RACScheduler currentScheduler]] subscribeNext:^(<span class="keyword">id</span> x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, x);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h3 id="delay"><a href="#delay" class="headerlink" title="delay"></a>delay</h3><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"first"</span>);</div><div class="line">[[[RACSignal createSignal:^RACDisposable *(<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</div><div class="line">    [subscriber sendNext:<span class="string">@"send，signal"</span>];</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;] </div><div class="line">delay:<span class="number">2.0</span>] <span class="comment">// 信号延迟两秒</span></div><div class="line">subscribeNext:^(<span class="keyword">id</span> x) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h3 id="timeout"><a href="#timeout" class="headerlink" title="timeout"></a>timeout</h3><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">RACSignal *signal = [[RACSignal createSignal:^RACDisposable *(<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</div><div class="line">    [subscriber sendNext:<span class="string">@"send，signal"</span>];</div><div class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">3</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">        [subscriber sendNext:<span class="string">@"send，signal2"</span>];</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;] timeout:<span class="number">2.0</span> onScheduler:[RACScheduler currentScheduler]];</div><div class="line"><span class="comment">// 2s 后发送错误信号。2s 之后的信号被忽略</span></div><div class="line"></div><div class="line">[signal subscribeNext:^(<span class="keyword">id</span> x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125; error:^(<span class="built_in">NSError</span> *error) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,error);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h3 id="retry"><a href="#retry" class="headerlink" title="retry"></a>retry</h3><p>重试, 遇到 error 就会重新执行创建信号中的block,直到成功. 也可以传入 retry 的次数，如果超过这个次数还是 error 则返回 error</p>
<h2 id="对-RACSignal-的操作"><a href="#对-RACSignal-的操作" class="headerlink" title="对 RACSignal 的操作"></a>对 RACSignal 的操作</h2><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">RACSignal *signal = [RACSignal createSignal:^RACDisposable * _Nullable(<span class="keyword">id</span>&lt;RACSubscriber&gt;  _Nonnull subscriber) &#123;</div><div class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">5</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">        [subscriber sendNext:<span class="string">@"1"</span>];</div><div class="line">        [subscriber sendNext:<span class="string">@"2"</span>];</div><div class="line">        [subscriber sendNext:<span class="string">@"3"</span>];</div><div class="line">        [subscriber sendNext:<span class="string">@"3"</span>];</div><div class="line">        [subscriber sendNext:<span class="string">@"5"</span>];</div><div class="line">        [subscriber sendNext:<span class="string">@"3"</span>];</div><div class="line">        [subscriber sendNext:<span class="string">@"6"</span>];</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h3 id="map-映射"><a href="#map-映射" class="headerlink" title="map 映射"></a>map 映射</h3><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</div><div class="line">Map使用步骤:</div><div class="line">1.传入一个block,类型是返回对象，参数是value</div><div class="line">2.value就是源信号的内容，直接拿到源信号的内容做处理</div><div class="line">3.把处理好的内容，直接返回就好了，不用包装成信号，返回的值，就是映射的值。</div><div class="line">*/</span></div><div class="line">[[signal map:^<span class="keyword">id</span> _Nullable(<span class="keyword">id</span>  _Nullable value) &#123;</div><div class="line">    <span class="keyword">return</span> @([value integerValue] * <span class="number">10</span>);</div><div class="line">&#125;] subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 10,20,30,50,30,60</span></div></pre></td></tr></table></figure>
<h4 id="flattenMap"><a href="#flattenMap" class="headerlink" title="flattenMap"></a>flattenMap</h4><p>把源信号的内容映射成一个新的信号，信号可以是任意类型。</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</div><div class="line">flattenMap使用步骤:</div><div class="line">1.传入一个block，block类型是返回值RACStream，参数value</div><div class="line">2.参数value就是源信号的内容，拿到源信号的内容做处理</div><div class="line">3.包装成RACReturnSignal信号，返回出去。</div><div class="line">*/</span></div><div class="line">[[signal flattenMap:^__kindof RACSignal * _Nullable(<span class="keyword">id</span>  _Nullable value) &#123;</div><div class="line">    <span class="keyword">return</span> [RACReturnSignal <span class="keyword">return</span>:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@%@"</span>,value,value]];</div><div class="line">&#125;]</div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h4 id="flattenmap-和-map-的区别"><a href="#flattenmap-和-map-的区别" class="headerlink" title="flattenmap 和 map 的区别"></a>flattenmap 和 map 的区别</h4><ol>
<li>FlatternMap中的Block返回信号。</li>
<li>Map中的Block返回对象。</li>
<li>开发中，如果信号发出的值不是信号，映射一般使用Map</li>
<li>开发中，如果信号发出的值是信号，映射一般使用flatternMap。</li>
</ol>
<h4 id="mapReplace"><a href="#mapReplace" class="headerlink" title="mapReplace"></a>mapReplace</h4><p>传入一个值 x , 将每个信号的值都改为 x</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[[signal mapReplace:<span class="string">@"4"</span>]</div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line">    <span class="comment">// 4,4,4,4,4,4,4</span></div></pre></td></tr></table></figure>
<h3 id="filter-过滤"><a href="#filter-过滤" class="headerlink" title="filter 过滤"></a>filter 过滤</h3><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><p>传入一个 block , 当这个 block 返回 YES 的时候才能响应</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">RACSignal *signal = [RACSignal createSignal:^RACDisposable * _Nullable(<span class="keyword">id</span>&lt;RACSubscriber&gt;  _Nonnull subscriber) &#123;</div><div class="line">    [subscriber sendNext:<span class="string">@"1"</span>];</div><div class="line">    [subscriber sendNext:<span class="string">@"2"</span>];</div><div class="line">    [subscriber sendNext:<span class="string">@"3"</span>];</div><div class="line">    [subscriber sendNext:<span class="string">@"3"</span>];</div><div class="line">    [subscriber sendNext:<span class="string">@"5"</span>];</div><div class="line">    [subscriber sendNext:<span class="string">@"3"</span>];</div><div class="line">    [subscriber sendNext:<span class="string">@"6"</span>];</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;];</div><div class="line">[[signal filter:^<span class="built_in">BOOL</span>(<span class="keyword">id</span>  _Nullable value) &#123;</div><div class="line"><span class="comment">// 只有 value 为 @“3” 的时候才进入下一步</span></div><div class="line">    <span class="keyword">return</span> [value isEqualToString:<span class="string">@"3"</span>];</div><div class="line">&#125;]</div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h4 id="ignore"><a href="#ignore" class="headerlink" title="ignore"></a>ignore</h4><p>传入一个参数 x 忽略 value == x 的信号</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[[signal ignore:<span class="string">@"3"</span>]</div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 1,2,5,6</span></div></pre></td></tr></table></figure>
<h4 id="distinctUntilChanged"><a href="#distinctUntilChanged" class="headerlink" title="distinctUntilChanged"></a>distinctUntilChanged</h4><blockquote>
<p>如果这次受到的信号 <code>value</code> 跟上次的信号 <code>value</code> 相同, 这次信号被忽略。</p>
</blockquote>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[[signal distinctUntilChanged] </div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 1,2,3,5,3,6</span></div></pre></td></tr></table></figure>
<h4 id="startWith"><a href="#startWith" class="headerlink" title="startWith"></a>startWith</h4><p>传入一个参数 x , 订阅的时候首先收到 value = x 的信号。 类似于在创建 RACSignal 的第一行 <code>[subscriber sendNext:x];</code></p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[[signal startWith:<span class="string">@"1"</span>]</div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 1,1,2,3,3,5,3,6</span></div></pre></td></tr></table></figure>
<h4 id="take"><a href="#take" class="headerlink" title="take"></a>take</h4><p>传入一个数组 n， 表明只响应前 n 个信号</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[[signal take:<span class="number">3</span>]</div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 1,2,3</span></div></pre></td></tr></table></figure>
<h4 id="takeLast"><a href="#takeLast" class="headerlink" title="takeLast"></a>takeLast</h4><p>传入一个数值 n, 取最后 n 个信号</p>
<p>只有收到了complete才知道结果。</p>
<h4 id="takeUntilBlock"><a href="#takeUntilBlock" class="headerlink" title="takeUntilBlock"></a>takeUntilBlock</h4><p>一直响应，直到传入的 block 第一次返回 YES</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[[signal takeUntilBlock:^<span class="built_in">BOOL</span>(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="keyword">return</span> [x isEqualToString:<span class="string">@"5"</span>];</div><div class="line">&#125;]</div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 1,2,3,3</span></div></pre></td></tr></table></figure>
<h4 id="takeWhileBlock"><a href="#takeWhileBlock" class="headerlink" title="takeWhileBlock"></a>takeWhileBlock</h4><p>一直响应，直到传入的 block 第一次返回 NO</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[[signal takeWhileBlock:^<span class="built_in">BOOL</span>(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="keyword">return</span> [x integerValue] &lt; <span class="number">5</span>;</div><div class="line">&#125;]</div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 1,2,3,3</span></div></pre></td></tr></table></figure>
<h4 id="skip"><a href="#skip" class="headerlink" title="skip"></a>skip</h4><p>传入一个数字 n 表明忽略前面第 n 个信号, 第 n + 1 个信号开始响应。</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[[signal skip:<span class="number">3</span>]</div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 3,5,3,6</span></div></pre></td></tr></table></figure>
<h4 id="skipUntilBlock"><a href="#skipUntilBlock" class="headerlink" title="skipUntilBlock"></a>skipUntilBlock</h4><p>一直忽略信号, 直到传入的 block 第一次返回 YES</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[[signal skipUntilBlock:^<span class="built_in">BOOL</span>(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="keyword">return</span> ![x isEqualToString:<span class="string">@"1"</span>];</div><div class="line">&#125;]</div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 2，3，3，5，3，6</span></div></pre></td></tr></table></figure>
<h4 id="skipWhileBlock"><a href="#skipWhileBlock" class="headerlink" title="skipWhileBlock"></a>skipWhileBlock</h4><p>一直忽略信号, 直到传入的 block 第一次返回 NO</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[[signal skipWhileBlock:^<span class="built_in">BOOL</span>(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="keyword">return</span> [x isEqualToString:<span class="string">@"1"</span>];</div><div class="line">&#125;]</div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 2，3，3，5，3，6</span></div></pre></td></tr></table></figure>
<h4 id="scanWithStart-reduce"><a href="#scanWithStart-reduce" class="headerlink" title="scanWithStart:reduce"></a>scanWithStart:reduce</h4><p>解决类似数组求和的问题</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">RACSequence *number = @[@<span class="number">1</span>,@<span class="number">2</span>,@<span class="number">3</span>,@<span class="number">4</span>].rac_sequence;</div><div class="line">RACSequence *sums =[number scanWithStart:@<span class="number">2</span> reduce:^<span class="keyword">id</span> _Nullable(<span class="built_in">NSNumber</span> *running, <span class="built_in">NSNumber</span> *next) &#123;</div><div class="line">    <span class="keyword">return</span> @(running.integerValue + next.integerValue);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 第一个参数是起点值, 第二个是便利的block block 中第一个是上一次便利的结果， 第二个是当前位置的值</span></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, sums.array);</div><div class="line"><span class="comment">//3,5,8,12</span></div></pre></td></tr></table></figure>
<h3 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h3><h4 id="contact"><a href="#contact" class="headerlink" title="contact"></a>contact</h4><p>把signalA拼接到signalB后，signalA发送完成，signalB才会被激活。</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">RACSignal *signal = [RACSignal createSignal:^RACDisposable * _Nullable(<span class="keyword">id</span>&lt;RACSubscriber&gt;  _Nonnull subscriber) &#123;  dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">2</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">        [subscriber sendNext:<span class="string">@"1"</span>];</div><div class="line">        [subscriber sendCompleted];<span class="comment">// 必须conpleted 才会到第二个 signal</span></div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;];</div><div class="line">RACSignal *singnal2 = [RACSignal createSignal:^RACDisposable * _Nullable(<span class="keyword">id</span>&lt;RACSubscriber&gt;  _Nonnull subscriber) &#123;</div><div class="line">    [subscriber sendNext:<span class="string">@"11"</span>];</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;];</div><div class="line">RACSignal *contact = [signal concat:singnal2];</div><div class="line">[contact subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 1,11</span></div></pre></td></tr></table></figure>
<h4 id="then"><a href="#then" class="headerlink" title="then"></a>then</h4><p>类似 contact 将两个 signal 链接</p>
<ol>
<li>只有等第一个 signal 介绍之后才会激活第二个 signal。 </li>
<li>在第一个 signal 结束之前 signal2 的信号会被忽略。  </li>
<li>第一个 signal 只关注 <code>complete</code> sendNext 被忽略</li>
</ol>
<p><strong>区别: contact signal1 的 sendNext 会响应, 而 then 的不会。</strong></p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// signal complete 发出之后 signal 的信号才会响应.</span></div><div class="line">RACSignal *then = [signal then:^RACSignal * _Nonnull&#123;</div><div class="line">    <span class="keyword">return</span> singnal2;</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h4 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h4><p>将两个 signal 合并为一个 signal 原先的信号发出 都会响应, 没有前后顺序。</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">RACSignal *merge = [signal merge:singnal2];    </div><div class="line">[merge subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h4 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h4><p>将两个signal 合并之后的 next 合并为一个 tuple 返回回来。 一一对应关系，一个信号的 next 等到第二个信号有 next 之后 包装成 signal 返回。<br>返回的 zip 第一个值就是第一个信号的next。</p>
<h4 id="combineLatest"><a href="#combineLatest" class="headerlink" title="combineLatest"></a>combineLatest</h4><p>将多个信号合并起来，并且拿到各个信号的最新的值,必须每个合并的signal至少都有过一次sendNext，才会触发合并的信号。</p>
<p><strong>zip 和 combineLatest 的区别</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">signal1-----1----2-----3------4-------5-------6--------7-----</div><div class="line"></div><div class="line">signal2----------------5----------------------7--------------</div><div class="line"></div><div class="line"></div><div class="line">combine 返回 (3，5)  （6，7）</div><div class="line">zip 返回     (1,5)    (2,7)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基础用法&quot;&gt;&lt;a href=&quot;#基础用法&quot; class=&quot;headerlink&quot; title=&quot;基础用法&quot;&gt;&lt;/a&gt;基础用法&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;创建信号&lt;/li&gt;
&lt;li&gt;订阅信号&lt;/li&gt;
&lt;li&gt;发送信号&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight obj-c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 1.创建信号(cold)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;RACSignal *signal = [RACSignal createSignal:^RACDisposable * _Nullable(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;&amp;lt;RACSubscriber&amp;gt;  _Nonnull subscriber) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 3.发送信号&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [subscriber sendNext:&lt;span class=&quot;string&quot;&gt;@&quot;hello, RAC.&quot;&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 2.订阅信号(hot)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[signal subscribeNext:^(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;  _Nullable x) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;%@&quot;&lt;/span&gt;, x);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;];&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在创建 RACSignal 的时候, &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;+ (RACSignal&amp;lt;ValueType&amp;gt; *)createSignal:(RACDisposable * _Nullable (^)(id&amp;lt;RACSubscriber&amp;gt; subscriber))didSubscribe;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;方法传入的 block 会返回一个 &lt;code&gt;RACDisposable&lt;/code&gt; 对象。&lt;/p&gt;
&lt;p&gt;将以上代码中的 &lt;code&gt;return nil；&lt;/code&gt; 替换成如下代码&lt;/p&gt;
    
    </summary>
    
      <category term="Reactive" scheme="https://CepheusSun.github.io/categories/Reactive/"/>
    
    
      <category term="iOS" scheme="https://CepheusSun.github.io/tags/iOS/"/>
    
      <category term="Reactive" scheme="https://CepheusSun.github.io/tags/Reactive/"/>
    
  </entry>
  
  <entry>
    <title>突然想聊聊 throttle</title>
    <link href="https://CepheusSun.github.io/2017/04/26/%E7%AA%81%E7%84%B6%E6%83%B3%E8%81%8A%E8%81%8A%20throttle/"/>
    <id>https://CepheusSun.github.io/2017/04/26/突然想聊聊 throttle/</id>
    <published>2017-04-25T16:00:00.000Z</published>
    <updated>2017-04-27T01:22:28.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>如果我们将水龙头拧紧知道水是以水滴的形式流出, 不难发现, 每隔一段时间, 就会有一滴水流出来。</p>
</blockquote>
<p>如果我们预先设置一个执行周期, 当第一次调用动作(滴水)和第二次调用动作之间的间隔大于执行周期, 则执行这个动作。反正, 不执行。</p>
<p>直接翻译 <code>throttle</code> 这个单词。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">throttle</div><div class="line"></div><div class="line">n.	节流阀; 喉咙，气管; [机] 风门;</div><div class="line">vt.	扼杀，压制; 勒死，使窒息; 使节流; （用节汽阀等） 调节;</div><div class="line">vi.	节流，减速; 窒息;</div></pre></td></tr></table></figure>
<p>不难理解, throttle 其实就是一种控制数据或者流量大小的机制。</p>
<p>MrPeak 曾经写的文章中介绍过 <code>I/O Throttle</code> 在 <code>DISPATCH_QUEUE_PRIORITY_BACKGROUND</code> queue 的使用场景。在没有非常严苛的实时性要求的情况下, 对于重度依赖磁盘的后台任务, 使用 <code>DISPATCH_QUEUE_PRIORITY_BACKGROUND</code> 的 queue 会更加友好。文中也引用了官方文档的一段话 </p>
<blockquote>
<p>Items dispatched to the queue run at background priority; the queue is scheduled for execution after all high priority queues have been scheduled and the system runs items on a thread whose priority is set for background status. Such a thread has the lowest priority and any disk I/O is throttled to minimize the impact on the system.</p>
</blockquote>
<p>意思是说, 这种 Global Queue 会在其他所有的 queue 结束之后才会在后台执行。 这是最低优先级的。并且一些磁盘 I/O 操作会因为最小化对系统的影响而被节流。</p>
<a id="more"></a>
<p>文中也介绍了 ASI 和 AFN 中也出现了的 throttle。</p>
<blockquote>
<p>我们通过HTTP请求发送数据的时候，实际上数据是以Packet的形式存在于一个Send Buffer中的，应用层平时感知不到这个Buffer的存在。TCP提供可靠的传输，在弱网环境下，一个Packet一次传输失败的概率会升高，即使一次失败，TCP并不会马上认为请求失败了，而是会继续重试一段时间，同时TCP还保证Packet的有序传输，意味着前面的Packet如果不被ack，后面的Packet就会继续等待，如果我们一次往Send Buffer中写入大量的数据，那么在弱网环境下，排在后面的Packet失败的概率会变高，也就意味着我们HTTP请求失败的几率会变大。</p>
</blockquote>
<p>所以在弱网环境下, 使用 <code>Network Throttle</code> 机制 延迟发起一些请求或者减少往 Send Buffer 中的数据量。 也会大大的提高请求成功率。</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</div><div class="line"> Throttles request bandwidth by limiting the packet size and adding a delay for each chunk read from the upload stream.</div><div class="line"></div><div class="line"> When uploading over a 3G or EDGE connection, requests may fail with "request body stream exhausted". Setting a maximum packet size and delay according to the recommended values (`kAFUploadStream3GSuggestedPacketSize` and `kAFUploadStream3GSuggestedDelay`) lowers the risk of the input stream exceeding its allocated bandwidth. Unfortunately, there is no definite way to distinguish between a 3G, EDGE, or LTE connection over `NSURLConnection`. As such, it is not recommended that you throttle bandwidth based solely on network reachability. Instead, you should consider checking for the "request body stream exhausted" in a failure block, and then retrying the request with throttled bandwidth.</div><div class="line"></div><div class="line"> @param numberOfBytes Maximum packet size, in number of bytes. The default packet size for an input stream is 16kb.</div><div class="line"> @param delay Duration of delay each time a packet is read. By default, no delay is set.</div><div class="line"> */</span></div><div class="line"><span class="comment">// AFN 中的方法</span></div><div class="line">- (<span class="keyword">void</span>)throttleBandwidthWithPacketSize:(<span class="built_in">NSUInteger</span>)numberOfBytes</div><div class="line">                                  delay:(<span class="built_in">NSTimeInterval</span>)delay;</div></pre></td></tr></table></figure>
<h2 id="RAC-中的-throttle"><a href="#RAC-中的-throttle" class="headerlink" title="RAC 中的 throttle"></a>RAC 中的 throttle</h2><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[[[<span class="keyword">self</span>.button rac_signalForControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>] throttle:<span class="number">2</span>] subscribeNext:^(<span class="keyword">id</span> x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"throttle"</span>);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>RAC 中的 <code>throttle</code> 接受一个时间间隔 <code>interval</code> 作为参数, 如果 <code>RACSignal</code> 发出的 <code>next</code> 事件之后的 interval 时间内不再发出 next 那么, 他返回的 RACSignal 会将这个事件发出。也就是说，这个方法会将发送比较频繁的 <code>next</code> 事件舍弃,只保留着一段时间之前的 next 事件。</p>
<p>使用场景:</p>
<p><strong>1、处理用户输入框的信号</strong></p>
<p>在处理搜索这样的需求的时候,有时候可能会在用户在输入框输入之后自动跟服务器交互。然后在下面列表中展示处理结果。如果用户打字很快,这个时候可能几秒钟之内连续发去好几个请求，其实没有什么意义。 这个时候使用 throttle 可以将保留用户输入的少数几个结果, 然后返回一个信号, 将最后的文字作为 next 发出。</p>
<p><strong>2、监听按钮点击</strong></p>
<p>界面上又一个按钮, 然后点击这个按钮, 发起网络请求, 跟上面的例子类似。如果用户快速的点击这个按钮也比较蛋疼。按照以前的写法, 我们可能会设置一个 <code>flag</code> 在点击的时候将这个 <code>flag</code> 设置为 no, 然后在 <code>button</code> 的 <code>action</code> 中判断是否发起请求,然后在请求结果回来之后, 把这个 <code>flag</code> 改回来。 想想都比较蛋疼。这时候使用 <code>throttle</code> 将按钮的点击事件节流一下, 就好了。</p>
<p>这个直接搬用 MrPeak <a href="http://mp.weixin.qq.com/s/MsPEZ9GUwCSZN1kngBkJxw">iOS编程中throttle那些事</a>中的swift代码。 毕竟 OC 的意见在上面了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">button.rx_tap</div><div class="line">   .throttle(<span class="number">0.5</span>, <span class="type">MainScheduler</span>.instance)</div><div class="line">   .subscribeNext &#123; <span class="number">_</span> <span class="keyword">in</span> </div><div class="line">      <span class="built_in">print</span>(<span class="string">"Hello World"</span>)</div><div class="line">   &#125;</div><div class="line">   .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p><strong>在 OC 的 demo 中(ReactiveCocoa 2.5.0) 我也发现了一个问题。第一次的点击也会在这个间隔之后响应。之后又使用了 ReactiveObjc(3.0) 中也发现了这个问题,而在 swift 的 demo 中并没有这种情况。</strong></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实 throttle 并没有减少实际逻辑处理过程的执行来提高事件处理函数运行性能的手段, 并没有减少事件的触发次数。写到最后, 发现文章有点变成学习心得了😂😂😂😂</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;如果我们将水龙头拧紧知道水是以水滴的形式流出, 不难发现, 每隔一段时间, 就会有一滴水流出来。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果我们预先设置一个执行周期, 当第一次调用动作(滴水)和第二次调用动作之间的间隔大于执行周期, 则执行这个动作。反正, 不执行。&lt;/p&gt;
&lt;p&gt;直接翻译 &lt;code&gt;throttle&lt;/code&gt; 这个单词。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;throttle&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;n.	节流阀; 喉咙，气管; [机] 风门;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;vt.	扼杀，压制; 勒死，使窒息; 使节流; （用节汽阀等） 调节;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;vi.	节流，减速; 窒息;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不难理解, throttle 其实就是一种控制数据或者流量大小的机制。&lt;/p&gt;
&lt;p&gt;MrPeak 曾经写的文章中介绍过 &lt;code&gt;I/O Throttle&lt;/code&gt; 在 &lt;code&gt;DISPATCH_QUEUE_PRIORITY_BACKGROUND&lt;/code&gt; queue 的使用场景。在没有非常严苛的实时性要求的情况下, 对于重度依赖磁盘的后台任务, 使用 &lt;code&gt;DISPATCH_QUEUE_PRIORITY_BACKGROUND&lt;/code&gt; 的 queue 会更加友好。文中也引用了官方文档的一段话 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Items dispatched to the queue run at background priority; the queue is scheduled for execution after all high priority queues have been scheduled and the system runs items on a thread whose priority is set for background status. Such a thread has the lowest priority and any disk I/O is throttled to minimize the impact on the system.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;意思是说, 这种 Global Queue 会在其他所有的 queue 结束之后才会在后台执行。 这是最低优先级的。并且一些磁盘 I/O 操作会因为最小化对系统的影响而被节流。&lt;/p&gt;
    
    </summary>
    
      <category term="Reactive" scheme="https://CepheusSun.github.io/categories/Reactive/"/>
    
    
      <category term="iOS" scheme="https://CepheusSun.github.io/tags/iOS/"/>
    
      <category term="Reactive" scheme="https://CepheusSun.github.io/tags/Reactive/"/>
    
  </entry>
  
  <entry>
    <title>我用RAC干了些什么(一)</title>
    <link href="https://CepheusSun.github.io/2017/04/21/%E6%88%91%E7%94%A8RAC%E5%B9%B2%E4%BA%86%E4%BA%9B%E4%BB%80%E4%B9%88(%E4%B8%80)/"/>
    <id>https://CepheusSun.github.io/2017/04/21/我用RAC干了些什么(一)/</id>
    <published>2017-04-20T16:00:00.000Z</published>
    <updated>2017-04-21T04:34:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>对象间的交互, 主要有 <code>target-action</code>、<code>Notification</code>、<code>KVO</code>、<code>Delegate</code></p>
<h3 id="target-action"><a href="#target-action" class="headerlink" title="target-action"></a>target-action</h3><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[[<span class="keyword">self</span>.loginBtn rac_signalForControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>] subscribeNext:^(<span class="built_in">UIButton</span> *btn) &#123;</div><div class="line"> <span class="comment">// btn, 即 self.loginBtn</span></div><div class="line"> <span class="comment">// 这里执行点击之后的操作</span></div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>可以用 BlocksKit 替代</p>
<h3 id="KVO"><a href="#KVO" class="headerlink" title="KVO"></a>KVO</h3><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[RACObserve(<span class="keyword">self</span>, name) subscribeNext:^(<span class="built_in">NSString</span> *name) &#123;</div><div class="line">  <span class="comment">// name 即 self.name</span></div><div class="line">  <span class="comment">// 一旦 name 属性改变就立即进入到这个 block</span></div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// self.myLab.text 随着 self.myTF.text 的改变而改变</span></div><div class="line">RAC(<span class="keyword">self</span>.myLab, text) = <span class="keyword">self</span>.myTF.rac_textSignal;</div></pre></td></tr></table></figure>
<h3 id="Notificaiton"><a href="#Notificaiton" class="headerlink" title="Notificaiton"></a>Notificaiton</h3><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[[[[<span class="built_in">NSNotificationCenter</span> defaultCenter] </div><div class="line">rac_addObserverForName:<span class="built_in">UIKeyboardWillChangeFrameNotification</span> object:<span class="literal">nil</span>] </div><div class="line">  <span class="comment">// 这句不可少，表示 当 self 将要 dealloc 的时候，就要释放 通知</span></div><div class="line">  takeUntil:<span class="keyword">self</span>.rac_willDeallocSignal] </div><div class="line">  subscribeNext:^(<span class="built_in">NSNotification</span> *notification) &#123;</div><div class="line">      <span class="built_in">NSLog</span>(<span class="string">@"-----%@"</span>, notification.description);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>不要忘了还是原来的方法发送通知。</p>
<p><strong>通知已经通过 RAC 内部得到了释放，所以不需要额外在 - dealloc 添加移除的代码</strong></p>
<h3 id="RACCommand"><a href="#RACCommand" class="headerlink" title="RACCommand"></a>RACCommand</h3><blockquote>
<p>A command, represented by the RACCommand class, creates and subscribes to a signal in response to some action. This makes it easy to perform side-effecting work as the user interacts with the app.</p>
</blockquote>
<p>简单的使用RACCommand 实现一个 viewModel 的网络请求。</p>
<a id="more"></a>
<h4 id="每个viewModel都有不同的事件"><a href="#每个viewModel都有不同的事件" class="headerlink" title="每个viewModel都有不同的事件"></a>每个viewModel都有不同的事件</h4><p><code>ViewModel</code> 持有一个 <code>RACCommand</code> 的属性 <code>sourceCommand</code></p>
<h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 直接构建</span></div><div class="line">- (<span class="keyword">id</span>)initWithSignalBlock:(RACSignal * (^)(<span class="keyword">id</span> input))signalBlock;</div><div class="line"></div><div class="line"><span class="comment">// 只有当enabledSignal为true时, command才执行</span></div><div class="line">- (<span class="keyword">id</span>)initWithEnabled:(RACSignal *)enabledSignal signalBlock:(RACSignal * (^)(<span class="keyword">id</span> input))signalBlock;</div><div class="line"></div><div class="line"></div><div class="line">_sourceCommand = [[RACCommand alloc] initWithSignalBlock:^RACSignal *(<span class="keyword">id</span> input) &#123;</div><div class="line">    <span class="keyword">return</span> [[SYHTTPManager shared] request:[[SFAPI_Find_SectionList alloc] init]];</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h4 id="订阅"><a href="#订阅" class="headerlink" title="订阅"></a>订阅</h4><p>失败和成功不能像订阅其他<code>signal</code>一样直接<code>Next</code>、<code>onError</code>就可以。RACCommand 的失败消息, 都被分发到了 <code>errors</code> 这个属性。所以需要在这个地方订阅失败的消息.</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 订阅成功</span></div><div class="line">[_sourceCommand.executionSignals.switchToLatest subscribeNext:^(<span class="keyword">id</span> x) &#123;</div><div class="line">    PSLog(<span class="string">@"---%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 订阅失败</span></div><div class="line">[_sourceCommand.errors subscribeNext:^(<span class="keyword">id</span> x) &#123;</div><div class="line">    PSLog(<span class="string">@"xxx%@"</span>,x);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h4 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h4><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[command execute:someParameters];</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对象间的交互, 主要有 &lt;code&gt;target-action&lt;/code&gt;、&lt;code&gt;Notification&lt;/code&gt;、&lt;code&gt;KVO&lt;/code&gt;、&lt;code&gt;Delegate&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;target-action&quot;&gt;&lt;a href=&quot;#target-action&quot; class=&quot;headerlink&quot; title=&quot;target-action&quot;&gt;&lt;/a&gt;target-action&lt;/h3&gt;&lt;figure class=&quot;highlight obj-c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.loginBtn rac_signalForControlEvents:&lt;span class=&quot;built_in&quot;&gt;UIControlEventTouchUpInside&lt;/span&gt;] subscribeNext:^(&lt;span class=&quot;built_in&quot;&gt;UIButton&lt;/span&gt; *btn) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// btn, 即 self.loginBtn&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// 这里执行点击之后的操作&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;];&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以用 BlocksKit 替代&lt;/p&gt;
&lt;h3 id=&quot;KVO&quot;&gt;&lt;a href=&quot;#KVO&quot; class=&quot;headerlink&quot; title=&quot;KVO&quot;&gt;&lt;/a&gt;KVO&lt;/h3&gt;&lt;figure class=&quot;highlight obj-c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[RACObserve(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, name) subscribeNext:^(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *name) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// name 即 self.name&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 一旦 name 属性改变就立即进入到这个 block&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;];&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight obj-c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// self.myLab.text 随着 self.myTF.text 的改变而改变&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;RAC(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.myLab, text) = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.myTF.rac_textSignal;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Notificaiton&quot;&gt;&lt;a href=&quot;#Notificaiton&quot; class=&quot;headerlink&quot; title=&quot;Notificaiton&quot;&gt;&lt;/a&gt;Notificaiton&lt;/h3&gt;&lt;figure class=&quot;highlight obj-c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[[[[&lt;span class=&quot;built_in&quot;&gt;NSNotificationCenter&lt;/span&gt; defaultCenter] &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;rac_addObserverForName:&lt;span class=&quot;built_in&quot;&gt;UIKeyboardWillChangeFrameNotification&lt;/span&gt; object:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;] &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 这句不可少，表示 当 self 将要 dealloc 的时候，就要释放 通知&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  takeUntil:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.rac_willDeallocSignal] &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  subscribeNext:^(&lt;span class=&quot;built_in&quot;&gt;NSNotification&lt;/span&gt; *notification) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;-----%@&quot;&lt;/span&gt;, notification.description);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;];&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不要忘了还是原来的方法发送通知。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;通知已经通过 RAC 内部得到了释放，所以不需要额外在 - dealloc 添加移除的代码&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;RACCommand&quot;&gt;&lt;a href=&quot;#RACCommand&quot; class=&quot;headerlink&quot; title=&quot;RACCommand&quot;&gt;&lt;/a&gt;RACCommand&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;A command, represented by the RACCommand class, creates and subscribes to a signal in response to some action. This makes it easy to perform side-effecting work as the user interacts with the app.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简单的使用RACCommand 实现一个 viewModel 的网络请求。&lt;/p&gt;
    
    </summary>
    
      <category term="Reactive" scheme="https://CepheusSun.github.io/categories/Reactive/"/>
    
    
      <category term="iOS" scheme="https://CepheusSun.github.io/tags/iOS/"/>
    
      <category term="Reactive" scheme="https://CepheusSun.github.io/tags/Reactive/"/>
    
  </entry>
  
  <entry>
    <title>使用Gitlab和Cocoapods创建私有pod</title>
    <link href="https://CepheusSun.github.io/2017/04/19/%E4%BD%BF%E7%94%A8Gitlab%E5%92%8CCocoapods%E5%88%9B%E5%BB%BA%E7%A7%81%E6%9C%89pod/"/>
    <id>https://CepheusSun.github.io/2017/04/19/使用Gitlab和Cocoapods创建私有pod/</id>
    <published>2017-04-19T14:39:27.000Z</published>
    <updated>2017-04-19T14:53:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>每个稍微有点开发经验的 iOS 工程师都很容易的发现一下几点: </p>
<ol>
<li>几乎每个 iOS 的项目都适用了 <code>Cocoapods</code> </li>
<li>几乎每个 ObjC 的 iOS 项目是使用 <code>AFNetworking</code> 、 <code>SDWebImage</code>等三方框架。</li>
<li>几乎每个 Swift 的 iOS 项目都是用了 <code>Alamofire</code>、 <code>Kingfisher</code>等三方框架</li>
<li>每一次这些框架更新之后, 无数个工程师只需要在终端执行一下’pod update’ 或 <code>pod install</code>就能对应的更新自己项目中的代码</li>
</ol>
<p>这几乎都是每个 iOS 工程师经常都会遇到的事情。目前几乎所有优秀的 iOS 开源框架都支持了 CocoaPods。 几乎所有的 iOS 项目都集成了 CocoaPods</p>
<p>但是我们在日常的开发中也常会遇到这样的问题:</p>
<ol>
<li>很多公司都有好 App 同时在进行开发。</li>
<li>这些 App 或多或少在业务或者 UI 都很很多的重合。</li>
</ol>
<p>着就意味着有很多的代码在这些 App 中都是可以复用的。由于各种各样的原因,同个公司的不同 App 可能更新不同步。 app A 可能已经升级到新版本 app B 可能还在老版本。每个 App 分别管理势必会出现混乱的局面。一起管理又存在新旧交替的问题。如果每个 App 又不同的工程师负责, 即使可能有交叉 review 的机制, 但也很难保证公司代码的统一。很多逻辑都存在多段代码。</p>
<p>如何管理公司的公共代码库就成了一个比较麻烦的问题。</p>
<p>集成 IJKMediaPlayer 的时候,想到了使用git来区别版本,然后使用 framework 来管理共有代码。然而在出现了你的代码需要使用到其他的 Framework 的时候, 或者好几个 Framework 都需要使用同一个第三方框架的时候, 这么做确实也是件恼火的事情。</p>
<a id="more"></a>
<p>去年写了三了小组件 <code>SYNetwork</code> <code>EmptyDataKit</code> <code>SYPhotoBrowser</code>。前两个已经支持了 <code>Cocoapods</code> 之后网上不断的开始有一些利用 <code>cocoapods</code>进行组件化的文章。前些天在 去直播看了 casa 的两个关于组建化的直播之后。也一直蠢蠢欲动想自己也来做一下这件事情。</p>
<p>做开源的 repo 的时候，还是比较顺利的做到了这件事情。但是当时想用 <code>OSChina</code> 来做了几次都没有成功。就一直搁置了。</p>
<p>春节之后换了个工作, 适应了公司的环境, 简单的学习了一下 Swift 之后, 公司还是决定对现有的项目进行一次梳理,然后做一次重构。 所以很自然的还是想到了使用 <code>CocoaPods</code> 将公司原有的项目进行组件化。</p>
<p>结果了半天时间的尝试,报错create gitlab账号等等。终于达到了最初的想法。 所以将这个过程记录下来。</p>
<h2 id="为什么使用-GitLab"><a href="#为什么使用-GitLab" class="headerlink" title="为什么使用 GitLab"></a>为什么使用 GitLab</h2><p>其实上面已经说到了,为什么要使用 CocoaPods 来做这件事情。也说到了为什么要做这件事情。为什么使用 gitlab 呢？ 原因很简单。 毕竟 GitHub 的私有repo 是收费的。原谅我穷, 也可以说是公司扣门儿。只能把开源的东西放在, GitHub 把不能开源的东西放在其他地方。</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>其实没什么好准备的。 但是首先你得有个 Gitlab 账号吧！ 如果没有注册之后添加 SSH 就好了。</p>
<p>然后在 Gitlab 上创建一个空的仓库:XXX 然后记住这个项目的 地址: git@gitlab.com:XXX/XXX.git </p>
<h2 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h2><p>这些可以看我去年年底写开源 Cocoapods 的时候写的东西。<a href="http://cepheussun.com/2016/12/02/%E4%BD%BF%E7%94%A8Cocoapods%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84%E9%A1%B9%E7%9B%AE/">使用 Cocoapods 管理你的项目</a></p>
<p>基本上简化一下就是以下</p>
<h3 id="创建工程-1"><a href="#创建工程-1" class="headerlink" title="创建工程"></a>创建工程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pod lib create XXX</div></pre></td></tr></table></figure>
<p>回答问题</p>
<h3 id="添加私有库到本地-pod-库-多人开发其他人也应该有这个操作"><a href="#添加私有库到本地-pod-库-多人开发其他人也应该有这个操作" class="headerlink" title="添加私有库到本地 pod 库(多人开发其他人也应该有这个操作)"></a>添加私有库到本地 pod 库(多人开发其他人也应该有这个操作)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pod repo add XXX git@gitlab.com:XXX/XXX.git</div></pre></td></tr></table></figure>
<blockquote>
<p>可以检查一下: ~./cocoapods/repos 目录下又了 XXX 文件夹</p>
</blockquote>
<h3 id="将代码放进去"><a href="#将代码放进去" class="headerlink" title="将代码放进去"></a>将代码放进去</h3><blockquote>
<p>这一步上篇文章中有。 <a href="http://cepheussun.com/2016/12/02/%E4%BD%BF%E7%94%A8Cocoapods%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84%E9%A1%B9%E7%9B%AE/">使用 Cocoapods 管理你的项目</a></p>
</blockquote>
<h4 id="修改-podspec"><a href="#修改-podspec" class="headerlink" title="修改 .podspec"></a>修改 .podspec</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">Pod::Spec.new <span class="keyword">do</span> <span class="params">|s|</span></div><div class="line">  s.name             = <span class="string">'XXX'</span></div><div class="line">  s.version          = <span class="string">'0.0.1'</span></div><div class="line">  s.summary          = <span class="string">'这是项目的基础框架,所有项目都需要集成.'</span></div><div class="line"></div><div class="line">  s.homepage         = <span class="string">'https://gitlab.com/XXX/XXX'</span></div><div class="line">  s.license          = &#123; <span class="symbol">:type</span> =&gt; <span class="string">'MIT'</span>, <span class="symbol">:file</span> =&gt; <span class="string">'LICENSE'</span> &#125;</div><div class="line">  s.author           = &#123; <span class="string">'XXX'</span> =&gt; <span class="string">'cd_sunyang@163.com'</span> &#125;</div><div class="line">  s.source           = &#123; <span class="symbol">:git</span> =&gt; <span class="string">'git@gitlab.com:XXX/XXX.git'</span>, <span class="symbol">:tag</span> =&gt; s.version &#125;</div><div class="line"></div><div class="line">  s.ios.deployment_target = <span class="string">'8.0'</span></div><div class="line"></div><div class="line">  s.source_files = <span class="string">'XXX/Classes/**/*'</span></div><div class="line">  s.frameworks = <span class="string">'UIKit'</span></div><div class="line">  s.dependency <span class="string">'AFNetworking'</span></div><div class="line">  s.dependency <span class="string">'MBProgressHUD'</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>我这个Demo引用了两个公有的repo</p>
<h4 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git add .</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git commit -m &quot;commit comments&quot;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin master</div></pre></td></tr></table></figure>
<h4 id="检查一下"><a href="#检查一下" class="headerlink" title="检查一下"></a>检查一下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ pod lib lint</div><div class="line"></div><div class="line">#或者 pod lib lint --allow-warnings 忽略警告</div></pre></td></tr></table></figure>
<p>然后也可以在项目中的 <code>podfile</code>文件中添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">pod &apos;XXX&apos;, :path =&gt; &apos;/Users/xxx/Desktop/XXX&apos;</div><div class="line"></div><div class="line">## 最后路径以实际情况为准, 有可能不在桌面</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod install</div></pre></td></tr></table></figure>
<p>成功后我们的库会出现在<code>Development Pods</code>文件夹里面。可以检查一下有没有问题。</p>
<h4 id="提交私有库"><a href="#提交私有库" class="headerlink" title="提交私有库"></a>提交私有库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git tag 0.0.1</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push --tags</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod repo push XXX XXX.podspec</div></pre></td></tr></table></figure>
<h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><h4 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h4><p>在执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pod lib lint</div></pre></td></tr></table></figure></p>
<p>的时候,如果在你的文件中引入了一些三方库, 并且在<code>.podspec</code>文件中也添加了对用的<code>.dependency</code> 依然出现</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- ERROR | xcodebuild: /Users/xinhuikeji/Library/Developer/Xcode/DerivedData/App-cpgccqdjhyrbqwcpjanyefntolkf/Build/Products/Release-iphonesimulator/wLib/wLib.framework/Headers/BaseModel.h:13:9: error: include of non-modular header inside framework module &apos;wLib.BaseModel&apos; [-Werror,-Wnon-modular-include-in-framework-module]</div></pre></td></tr></table></figure>
<p>这样的错误。</p>
<p>在命令后面添加参数 <code>--use-libraries</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ pod lib lint xxx.podspec --use-libraries</div><div class="line">$ pod repo push XXX XXX.podspec --use-libraries</div><div class="line">``` </div><div class="line"></div><div class="line">在[segmentfault](https://segmentfault.com/q/1010000006885674)中看到的答案。</div><div class="line"></div><div class="line"></div><div class="line">#### pod search 找不到</div><div class="line"></div><div class="line">最后完成之后在新建的工程中</div></pre></td></tr></table></figure>
<p>$ pod init<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">```</div><div class="line">$ vim podfile</div></pre></td></tr></table></figure></p>
<p>添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod &quot;SYBase&quot;, :git =&gt; &apos;git@gitlab.com:CepheusSun/SYBase.git&apos;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod install</div></pre></td></tr></table></figure>
<p>然后莫名其妙发现引入的 repo 是<code>0.1.0</code>或者什么巴拉巴拉版本的。这个时候更新一下pod</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod updata</div></pre></td></tr></table></figure>
<p>再<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod install</div></pre></td></tr></table></figure></p>
<h4 id="强迫症"><a href="#强迫症" class="headerlink" title="强迫症"></a>强迫症</h4><p>如果遇到强迫症想要用 1.1.1 这样的三级版本的话。</p>
<p><code>XXX.podspec</code> 文件中的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">s.source = &#123; :git =&gt; &apos;git@gitlab.com:XXX/XXX.git&apos;, :tag =&gt; s.version &#125;</div></pre></td></tr></table></figure></p>
<p>必须用 s.version</p>
<p>我也不知道为什么。</p>
<h3 id="结束篇"><a href="#结束篇" class="headerlink" title="结束篇"></a>结束篇</h3><p>好久没写文章了。终于还是继续写了下去。这段时间自己学了学Swift 学了学 函数响应式编程, 七牛云直播的认证也下来的。接下来可能要研究一下推流相关的东西。2017 的前半段老实说学到了很多的东西。一直很感恩也很珍惜这样的情况。</p>
<p><strong>参考文档</strong></p>
<p><a href="http://www.th7.cn/program/ios/201702/1119967.shtml">组件化开发之CocoaPods私有库制作</a><br><a href="http://mt.sohu.com/20160824/n465823814.shtml">使用cocoapods管理私有库</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每个稍微有点开发经验的 iOS 工程师都很容易的发现一下几点: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;几乎每个 iOS 的项目都适用了 &lt;code&gt;Cocoapods&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;几乎每个 ObjC 的 iOS 项目是使用 &lt;code&gt;AFNetworking&lt;/code&gt; 、 &lt;code&gt;SDWebImage&lt;/code&gt;等三方框架。&lt;/li&gt;
&lt;li&gt;几乎每个 Swift 的 iOS 项目都是用了 &lt;code&gt;Alamofire&lt;/code&gt;、 &lt;code&gt;Kingfisher&lt;/code&gt;等三方框架&lt;/li&gt;
&lt;li&gt;每一次这些框架更新之后, 无数个工程师只需要在终端执行一下’pod update’ 或 &lt;code&gt;pod install&lt;/code&gt;就能对应的更新自己项目中的代码&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这几乎都是每个 iOS 工程师经常都会遇到的事情。目前几乎所有优秀的 iOS 开源框架都支持了 CocoaPods。 几乎所有的 iOS 项目都集成了 CocoaPods&lt;/p&gt;
&lt;p&gt;但是我们在日常的开发中也常会遇到这样的问题:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;很多公司都有好 App 同时在进行开发。&lt;/li&gt;
&lt;li&gt;这些 App 或多或少在业务或者 UI 都很很多的重合。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;着就意味着有很多的代码在这些 App 中都是可以复用的。由于各种各样的原因,同个公司的不同 App 可能更新不同步。 app A 可能已经升级到新版本 app B 可能还在老版本。每个 App 分别管理势必会出现混乱的局面。一起管理又存在新旧交替的问题。如果每个 App 又不同的工程师负责, 即使可能有交叉 review 的机制, 但也很难保证公司代码的统一。很多逻辑都存在多段代码。&lt;/p&gt;
&lt;p&gt;如何管理公司的公共代码库就成了一个比较麻烦的问题。&lt;/p&gt;
&lt;p&gt;集成 IJKMediaPlayer 的时候,想到了使用git来区别版本,然后使用 framework 来管理共有代码。然而在出现了你的代码需要使用到其他的 Framework 的时候, 或者好几个 Framework 都需要使用同一个第三方框架的时候, 这么做确实也是件恼火的事情。&lt;/p&gt;
    
    </summary>
    
      <category term="CocoaPods" scheme="https://CepheusSun.github.io/categories/CocoaPods/"/>
    
    
      <category term="CocoaPods" scheme="https://CepheusSun.github.io/tags/CocoaPods/"/>
    
      <category term="iOS" scheme="https://CepheusSun.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>python 爬虫之一 &quot;Requests 库学习&quot;</title>
    <link href="https://CepheusSun.github.io/2017/03/07/Requests%20%E5%BA%93/"/>
    <id>https://CepheusSun.github.io/2017/03/07/Requests 库/</id>
    <published>2017-03-06T16:00:00.000Z</published>
    <updated>2017-03-10T01:54:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>这个系列的文章是用来记录我学习 python 爬虫的。这是第一篇。</p>
<a id="more"></a>
<h2 id="安装-requests-库"><a href="#安装-requests-库" class="headerlink" title="安装 requests 库"></a>安装 requests 库</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo pip install requests</div></pre></td></tr></table></figure>
<h2 id="验证安装是否成功"><a href="#验证安装是否成功" class="headerlink" title="验证安装是否成功"></a>验证安装是否成功</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ python</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment">#import requests</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(<span class="string">"http://www.baidu.com"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r.status_code</div><div class="line"><span class="number">200</span></div><div class="line">&gt;&gt;&gt;r.encoding = <span class="string">'utf-8'</span></div><div class="line">&gt;&gt;&gt;r.text</div></pre></td></tr></table></figure>
<h3 id="Requests-库的主要方法"><a href="#Requests-库的主要方法" class="headerlink" title="Requests 库的主要方法"></a>Requests 库的主要方法</h3><ul>
<li>requests.request()<blockquote>
<p>构造一个请求,支撑一下各方法的基础方法</p>
</blockquote>
</li>
<li>requests.get()<blockquote>
<p>获取HTML网页的主要方法,对应HTTP的GET</p>
</blockquote>
</li>
<li>requests.head()<blockquote>
<p>获取HTML网页头信息的方法,对应HTTP的HEAD</p>
</blockquote>
</li>
<li>requests.post()<blockquote>
<p>向HTML网页提交POST请求的方法,对应HTTP的POST</p>
</blockquote>
</li>
<li>requests.put()<blockquote>
<p>向HTML网页提交PUT请求的方法,对应HTTP的PUT</p>
</blockquote>
</li>
<li>requests.patch()<blockquote>
<p>向HTML网页提交局部修改请求,对应HTTP的POST</p>
</blockquote>
</li>
<li>requests.delete()<blockquote>
<p>向HTML网页提交删除请求,对应HTTP的POST</p>
</blockquote>
</li>
</ul>
<h3 id="Reuqest-最重要的两个对象"><a href="#Reuqest-最重要的两个对象" class="headerlink" title="Reuqest 最重要的两个对象"></a>Reuqest 最重要的两个对象</h3><h4 id="Request-对象"><a href="#Request-对象" class="headerlink" title="Request 对象"></a>Request 对象</h4><blockquote>
</blockquote>
<h4 id="Response-对象"><a href="#Response-对象" class="headerlink" title="Response 对象"></a>Response 对象</h4><blockquote>
<p>包含了爬虫返回的全部内容</p>
</blockquote>
<ul>
<li>r.status_code; 状态码,200表示成功,404表示失败</li>
<li>r.text; HTTP响应内容的字符串形式,即, URL 对应的页面内容</li>
<li><p>r.encoding; 从 HTTP header 中猜测的响应内容编码方式</p>
<blockquote>
<p>如果 header 中不存在 charset, 则认为编码是,ISO-8859-1</p>
</blockquote>
</li>
<li>r.apparent_encoding;从内容中分析出的响应内容编码方式(备选编码方式)</li>
<li>r.content; HTTP 响应内容的二进制形式</li>
</ul>
<h3 id="爬取网页的通用代码框架"><a href="#爬取网页的通用代码框架" class="headerlink" title="爬取网页的通用代码框架"></a>爬取网页的通用代码框架</h3><h4 id="Request-的异常"><a href="#Request-的异常" class="headerlink" title="Request 的异常"></a>Request 的异常</h4><ul>
<li>request.ConnectionError; 网络连接错误异常，如DNS查询失败，拒绝连接定</li>
<li>request.HTTPError; HTTP错误异常</li>
<li>request.URLRequired; URL 缺失异常</li>
<li>request.TooManyRedirects; 超过最大重定向次数,长生重定向异常</li>
<li>request.ConnectTimeout;链接远程服务器超时异常</li>
<li>requests.Timeout;请求URL超时，产生超时异常</li>
</ul>
<p>r.raise_for_status(); 如果不是200,产生已成requests.HTTPError</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -- coding: UTF-8 --</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span><span class="params">(url)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        r = requests.get(url, timeout=<span class="number">30</span>)</div><div class="line">        r.raise_for_status()</div><div class="line">        <span class="comment"># 如果状态不是200， 引发HTTPError异常</span></div><div class="line">        r.encoding = r.apparent_encoding</div><div class="line">        <span class="keyword">return</span> r.text</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">"产生异常"</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    url = <span class="string">"http://CepheusSun.com"</span></div><div class="line">    print(getHTMLText(url))</div></pre></td></tr></table></figure>
<center>通用代码框架</center>

<h4 id="HTTP-协议"><a href="#HTTP-协议" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h4><p>HTTP, Hypertext Transfer Protocol, 超文本传输协议。</p>
<p>HTTP 是一个基于”请求与响应”模式的、无状态的应用层协议。</p>
<p>HTTP 协议采用 URL 作为定位网络资源的标识。</p>
<p>URL格式: <a href="http://host[:port][path">http://host[:port][path</a>]</p>
<ul>
<li>host:合法的 Internet 主机域名或者 IP 地址</li>
<li>port:端口号,缺省端口为80</li>
<li>path:请求资源的路径</li>
</ul>
<p>URL 是通过 HTTP 协议存取资源的 Internet 路径, 一个 URL 对应一个数据资源。</p>
<p>HTTP 协议对资源的操作</p>
<p><strong>GET</strong>， 获取资源<br><strong>HEAD</strong>，获取资源头部信息<br><strong>POST</strong>，向URL位置的资源后附加新的数据<br><strong>PUT</strong>，储存一个资源，覆盖原来URL的资源<br><strong>PATCH</strong>，对原来的资源，进行局部更新<br><strong>DELETE</strong>，删除</p>
<h4 id="requests-request-method-url-kwargs"><a href="#requests-request-method-url-kwargs" class="headerlink" title="requests.request(method, url, **kwargs)"></a>requests.request(<code>method</code>, <code>url</code>, <code>**kwargs</code>)</h4><p>method: 请求方式,对应get/put/post等7种<br>url: 请求地址<br><code>**warrgs</code> 控制访问的参数，一共13个</p>
<ul>
<li><code>params</code>: 字典或字节序列，作为参数增加到url中</li>
<li><code>data</code>: 字典、字节序列或者文件对象，作为 Request 的内容</li>
<li><code>json</code>: JSON 格式的数据,作为 Request 的内容</li>
<li><code>headers</code>: 字典,HTTP定制头</li>
<li><code>cookies</code>:字典或CookieeJar, request中的cookie</li>
<li><code>auth</code>: 元组,支持HTTP认证功能</li>
<li><code>files</code>: 字典类型,传输文件</li>
<li><code>timeout</code>: 设定的超时时间，单位秒</li>
<li><p><code>proxies</code>: 字典类型,设定访问代理服务器,可以增加登录认证 </p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pxs = &#123;<span class="string">'http'</span>:<span class="string">'http//balabala'</span>,</div><div class="line"><span class="string">'https'</span>:<span class="string">'https"//balabala'</span></div><div class="line">&#125;</div><div class="line">r= requests.request(<span class="string">'GET'</span>,<span class="string">'http://www.baidu.com'</span>,proxies=pxs)</div></pre></td></tr></table></figure>
</li>
<li><p><code>allow_redirects</code>: True/False,默认True,重定向开关</p>
</li>
<li><code>stream</code>:True/False,默认True,获取内容立即下载开关</li>
<li><code>verify</code>:True/False,默认True,，认证 SSL 证书开关</li>
<li><code>cert</code>:本地SSL证书路径</li>
</ul>
<h3 id="网络爬虫的类型"><a href="#网络爬虫的类型" class="headerlink" title="网络爬虫的类型"></a>网络爬虫的类型</h3><p>按照尺寸区别</p>
<p>爬取网页，玩转网页。小规模,数据量小，爬取速度不敏感 requests 。</p>
<p>爬取网站，爬取系列网站. 中规模，数据规模较大，爬取速度敏感 Scrapy 库</p>
<p>爬取全网。大规模,搜索引擎，爬取速度关键,只能定制开发</p>
<h3 id="反爬虫"><a href="#反爬虫" class="headerlink" title="反爬虫"></a>反爬虫</h3><h4 id="来源审查-判断-User-Agent-进行限制"><a href="#来源审查-判断-User-Agent-进行限制" class="headerlink" title="来源审查: 判断 User-Agent 进行限制"></a>来源审查: 判断 User-Agent 进行限制</h4><blockquote>
<p>检查来访 HTTP 协议头的 User-Agent 域，只响应浏览器或者友好爬虫的访问。</p>
</blockquote>
<h4 id="发布公告-Robots-协议"><a href="#发布公告-Robots-协议" class="headerlink" title="发布公告 Robots 协议"></a>发布公告 Robots 协议</h4><blockquote>
<p>告知所有爬虫网站的爬取策略,要求爬虫遵守</p>
</blockquote>
<h3 id="Robots-协议"><a href="#Robots-协议" class="headerlink" title="Robots 协议"></a>Robots 协议</h3><p>Robots Exclusion Standard 网络爬虫排除标准</p>
<p>作用: 网站告知网络爬虫哪些页面可以抓取,哪些不行。<br>形式: 在网站根目录下的 robots.txt 文件<br>使用:</p>
<ul>
<li>网络爬虫：自动或者人工识别robots.txt， 再进行内容爬取</li>
<li>约束性: Robots 协议是建议但非约束性,网络爬虫可以不遵守，但是存在法律风险</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个系列的文章是用来记录我学习 python 爬虫的。这是第一篇。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://CepheusSun.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://CepheusSun.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>iOS面试集锦&amp;2017年02月22日01</title>
    <link href="https://CepheusSun.github.io/2017/02/22/interview07022201/"/>
    <id>https://CepheusSun.github.io/2017/02/22/interview07022201/</id>
    <published>2017-02-21T16:00:00.000Z</published>
    <updated>2017-03-17T17:00:38.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><code>id</code> 和 <code>instancetype</code> 的区别?</li>
<li>有方法查看当前系统内存使用的情况吗？</li>
<li>为什么 NotificationCenter 要 removeObserver? 如何实现自动 remove？</li>
<li>iOS的沙盒目录结构是怎样的？ App Bundle 里面都有什么？</li>
<li>简单描述一下客户端的缓存机制？</li>
</ol>
<p>注意： 以后的更新全部放在 GitHub 博客不再继续添加了。 毕竟好多内容放在这里也没有什么意义。<br><a id="more"></a></p>
<p>##2017-02-22</p>
<p>#####1. <code>id</code> 和 <code>instancetype</code> 的区别?</p>
<ol>
<li><p>在 ARC(Auto Reference Count)环境下:</p>
<pre><code>instancetype 用来在编译期确定实例的类型,而使用 id 的话,编译器不检查类型, 运行时检查类型.
</code></pre><p>在 MRC(Manual Reference Count)环境下:</p>
<pre><code>instancetype 和 id 一样,不做具体类型检查
</code></pre></li>
<li><p>id 可以作为方法的参数,但 instancetype 不可以<br>instancetype 只适用于初始化方法和便利构造器的返回值类型</p>
</li>
</ol>
<p>#####2. 有方法查看当前系统内存使用的情况吗？<br>一般我上手新的项目,检查内存问题三部曲;</p>
<ol>
<li>静态分析, 初步了解代码不规范的地方,或者是一些内存泄漏问题。</li>
<li>instrument, 初略的定位我们在什么地方发生了内存泄漏。</li>
<li>代码测试内存泄漏, 观察对象的生成和销毁是否配对。使用MLeaksFinder来配合检查</li>
</ol>
<ul>
<li>两个对象互相持有，主要是 delegate 使用 weak 属性, 在 iOS8 上系统 delegate 使用的是 assign 这会带来一些问题,踩过坑的老司机可以提一下。</li>
<li>有时候需要使用 removeFromSuperView 来释放, a 持有了 b ， b 被 add 到了 c 上, 而在程序设计中b 的生命周期应该和 a 相同, 这个时候使用 self.b = nil 并不会吧 b 释放, 我们应该在之前加上 <code>[b removeFromSuperView]</code></li>
</ul>
<p>#####3. 为什么 NotificationCenter 要 removeObserver? 如何实现自动 remove？</p>
<ul>
<li>如果不移除，万一注册通知的类被销毁之后又发送了通知, 程序会 crash。 因为野指针。</li>
<li>实现自动 remove;通过自动释放机制, 通过动态属性将 remove 转移给第三者,解除耦合,达到自动实现 remove 。</li>
</ul>
<p>#####4. iOS的沙盒目录结构是怎样的？ App Bundle 里面都有什么？</p>
<ol>
<li>沙盒结构<ul>
<li>Application: 存放程序源文件, 上架前经过数字签名,上架后不可修改</li>
<li>Documents: 常用目录, iCloud 备份目录,存放数据,这里不能缓存文件,否则上架不被通过</li>
<li>Library<ul>
<li>Caches: 存放体积大又不需要备份的数据, SDWebImage 就是这个</li>
<li>Preference: 设置目录, iCloud会备份设置信息。</li>
<li>tmp: 存放临时文件,不会被备份,而且这个文件下的数据有可能随时被清除</li>
</ul>
</li>
</ul>
</li>
<li>App Bundle<ul>
<li>Info.plist: 文件的配置信息,系统依赖次文件获取应用程序的相关信息。</li>
<li>可执行文件: 此文件包含应用程序的入口和通过静态链接到应用程序 target 的代码。</li>
<li>资源文件: 图片声音</li>
<li>其他: 可以潜入定制的数据资源。</li>
</ul>
</li>
</ol>
<h5 id="5-简单描述一下客户端的缓存机制？"><a href="#5-简单描述一下客户端的缓存机制？" class="headerlink" title="5.简单描述一下客户端的缓存机制？"></a>5.简单描述一下客户端的缓存机制？</h5><ul>
<li>缓存可以分为:<ul>
<li>内存数据缓存</li>
<li>数据库缓存</li>
<li>文件缓存</li>
</ul>
</li>
<li>每次想获取数据的时候<ol>
<li>检查内存中有无缓存</li>
<li>检查本地有无缓存(数据库\文件)</li>
<li>发起请求</li>
<li>将服务器返回的数据进行缓存(内存数据库文件)</li>
</ol>
</li>
</ul>
<pre><code>---
</code></pre><h5 id="写在后面的话"><a href="#写在后面的话" class="headerlink" title="写在后面的话"></a>写在后面的话</h5><p>这个系列所有的文章都是在一个QQ群里面跟小伙伴们讨论出来的,每个 topic 都已经放在了 GitHub 的一个仓库中 <a href="https://github.com/GetOfferSoldier/Objective-C"><strong>这是地址</strong></a>。 所有内容的更新的将在这个仓库中进行,在博客中将不再进行更新。有任何问题，都可以在这个仓库中给我们提 issue 或者 pull request.</p>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;code&gt;id&lt;/code&gt; 和 &lt;code&gt;instancetype&lt;/code&gt; 的区别?&lt;/li&gt;
&lt;li&gt;有方法查看当前系统内存使用的情况吗？&lt;/li&gt;
&lt;li&gt;为什么 NotificationCenter 要 removeObserver? 如何实现自动 remove？&lt;/li&gt;
&lt;li&gt;iOS的沙盒目录结构是怎样的？ App Bundle 里面都有什么？&lt;/li&gt;
&lt;li&gt;简单描述一下客户端的缓存机制？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意： 以后的更新全部放在 GitHub 博客不再继续添加了。 毕竟好多内容放在这里也没有什么意义。&lt;br&gt;
    
    </summary>
    
      <category term="iOS面试集锦" scheme="https://CepheusSun.github.io/categories/iOS%E9%9D%A2%E8%AF%95%E9%9B%86%E9%94%A6/"/>
    
    
      <category term="iOS面试集锦" scheme="https://CepheusSun.github.io/tags/iOS%E9%9D%A2%E8%AF%95%E9%9B%86%E9%94%A6/"/>
    
  </entry>
  
  <entry>
    <title>iOS面试集锦&amp;2017年02月21日01</title>
    <link href="https://CepheusSun.github.io/2017/02/21/interview07022101/"/>
    <id>https://CepheusSun.github.io/2017/02/21/interview07022101/</id>
    <published>2017-02-20T16:00:00.000Z</published>
    <updated>2017-02-21T16:02:25.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>写出中序遍历二叉树的算法(不限编程语言，已知 TreeRoot 为二叉树的根)</li>
<li>快速排序，归并排序的时间复杂度分别是什么？</li>
<li>UITableViewCell 可重用机制是什么?有什么要注意的地方?</li>
<li>OC 中的 @property 和 @synthesize 有什么用？</li>
<li>OC有没有重载(overload)和重写(overwrite)？有的话请举个例子。</li>
<li>列举出 iOS 开发中三种最常出现的循环引用的场景。</li>
<li>MVC 模式具体指什么？iOS现在流行的 MVVM 是什么？</li>
<li>iOS 中设计金钱计算和比较时，用数值应该用哪个类型来处理？</li>
<li>iOS 上触摸事件的视图检测和事件传递过程是怎样的？  </li>
<li>写一个折半查找或者快速排序</li>
</ol>
<a id="more"></a>
<p>#####1.写出中序遍历二叉树的算法(不限编程语言，已知 TreeRoot 为二叉树的根)。  </p>
<pre><code>最近在学 Python 所以整理了一个 Python 版的
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -- coding: UTF-8 --</span></div><div class="line"><span class="comment"># @Date    : 2017-02-21</span></div><div class="line"><span class="comment"># @Author  : CepheusSun</span></div><div class="line"><span class="comment"># @Version : python 2.7</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tree</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data, left, right)</span>:</span></div><div class="line">        self.data = data</div><div class="line">        self.left = left</div><div class="line">        self.right = right</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">in_visit</span><span class="params">(tree)</span>:</span></div><div class="line">    <span class="string">"""递归中序遍历"""</span></div><div class="line">    <span class="keyword">if</span> tree:</div><div class="line">        in_visit(tree.left)</div><div class="line">        <span class="keyword">print</span> (tree.data)</div><div class="line">        in_visit(tree.right)</div><div class="line">        </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">in_stack</span><span class="params">(tree)</span>:</span></div><div class="line">    <span class="string">"""堆栈中序遍历"""</span></div><div class="line">    <span class="keyword">if</span> tree:</div><div class="line">        my_stack = []</div><div class="line">        node = tree</div><div class="line">        <span class="keyword">while</span> node <span class="keyword">or</span> my_stack:</div><div class="line">            <span class="keyword">while</span> node:</div><div class="line">                my_stack.append(node)</div><div class="line">                node = node.left</div><div class="line">            node = my_stack.pop()</div><div class="line">            print(node.data)</div><div class="line">            node = node.right</div><div class="line"></div><div class="line">            <span class="keyword">print</span> my_stack2.pop().data</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    node1 = Tree(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>)</div><div class="line">    node2 = Tree(<span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>)</div><div class="line">    node3 = Tree(<span class="number">3</span>, node1, node2)</div><div class="line">    node4 = Tree(<span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>)</div><div class="line">    node5 = Tree(<span class="number">5</span>, node4, node3)</div><div class="line">    print(<span class="string">"the post_visit is ..."</span>)</div><div class="line">    post_visit(node5)</div><div class="line">    post_stack(node5)</div><div class="line">    print(<span class="string">"the pre_visit is ..."</span>)</div><div class="line">    pre_visit(node5)</div><div class="line">    pre_stack(node5)</div><div class="line">    print(<span class="string">"the in_visit is ..."</span>)</div><div class="line">    in_visit(node5)</div><div class="line">    in_stack(node5)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure>
<h5 id="2-快速排序，归并排序的时间复杂度分别是什么？"><a href="#2-快速排序，归并排序的时间复杂度分别是什么？" class="headerlink" title="2.快速排序，归并排序的时间复杂度分别是什么？"></a>2.快速排序，归并排序的时间复杂度分别是什么？</h5><ul>
<li>归并排序：稳定，时间复杂度 O(nlog n)</li>
<li>快速排序：不稳定，时间复杂度 最理想 O(nlogn) 最差时间O(n^2)</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -- coding: UTF-8 --</span></div><div class="line"><span class="comment"># @Date    : 2017-02-21</span></div><div class="line"><span class="comment"># @Author  : CepheusSun</span></div><div class="line"><span class="comment"># @Version : python 2.7</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(array, first_index, last_index)</span>:</span></div><div class="line">    <span class="string">"""快速排序"""</span></div><div class="line">    <span class="keyword">if</span> first_index &lt; last_index:</div><div class="line">        div_index = partition(array, first_index, last_index)</div><div class="line">        quick_sort(array, first_index, div_index)</div><div class="line">        quick_sort(array, div_index + <span class="number">1</span>, last_index)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(array, first_index, last_index)</span>:</span></div><div class="line">    i = first_index - <span class="number">1</span></div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(first_index, last_index):</div><div class="line">        <span class="keyword">if</span> array[j] &lt;= array[last_index]:</div><div class="line">            i += <span class="number">1</span></div><div class="line">            array[i], array[j] = array[j], array[i]</div><div class="line">    array[i + <span class="number">1</span>], array[last_index] = array[last_index], array[i + <span class="number">1</span>]</div><div class="line">    <span class="keyword">return</span> i</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(left, right)</span>:</span></div><div class="line">    i, j = <span class="number">0</span>, <span class="number">0</span></div><div class="line">    res = []</div><div class="line">    <span class="keyword">while</span> i &lt; len(left) <span class="keyword">and</span> j &lt; len(right):</div><div class="line">        <span class="keyword">if</span> left[i] &lt;= right[j]:</div><div class="line">            res.append(left[i])</div><div class="line">            i += <span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            res.append(right[j])</div><div class="line">            j += <span class="number">1</span></div><div class="line">    res += left[i:]</div><div class="line">    res += right[j:]</div><div class="line">    <span class="keyword">return</span> res</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span><span class="params">(array)</span>:</span></div><div class="line">    <span class="string">"""并归排序"""</span></div><div class="line">    <span class="keyword">if</span> len(array) &lt;= <span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> array</div><div class="line">    num = len(array) / <span class="number">2</span></div><div class="line">    left = merge_sort(array[:num])</div><div class="line">    right = merge_sort(array[num:])</div><div class="line">    <span class="keyword">return</span> merge(left, right)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    array = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">76</span>, <span class="number">5</span>, <span class="number">567</span>, <span class="number">54</span>, <span class="number">6</span>, <span class="number">54</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">0</span>]</div><div class="line">    print(<span class="string">"initial array : \n"</span>, array)</div><div class="line">    print(<span class="string">"merge sort result: \n"</span>, merge_sort(array))</div><div class="line">    quick_sort(array, <span class="number">0</span>, len(array) - <span class="number">1</span>)</div><div class="line">    print(<span class="string">"result array :\n"</span>, array)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div><div class="line"></div><div class="line">``` </div><div class="line">    </div><div class="line"><span class="comment">##### 3.UITableViewCell 可重用机制是什么?有什么要注意的地方?</span></div><div class="line"></div><div class="line">UITableView 通过重用单元格来达到节省内存的目的：通过为每个单元格指定一个重用标识符，即指定来单元格的种类，以及当单元格滚出屏幕时，允许恢复单元格以便重用。对于不同种类的单元格使用不同的ID，对于简单的表格，一个标识符就够了。</div><div class="line"></div><div class="line">需要注意的地方：</div><div class="line">    取出来的cell是有可能已经捆绑过数据或者加过子视图的，如果有必要，要清除需要用与显示的数据和remove掉add过的子视图。不然会造成错乱的情况</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">##### 4.OC 中的 @property 和 @synthesize 有什么用？</span></div><div class="line"></div><div class="line">答：</div><div class="line">iOS2<span class="number">.0</span> Apple引入 `@property` `@synthesize` 概念，两者组合使用可以自动生成 `seter` `geter`方法，iOS4<span class="number">.0</span>以后只需要 `@property` 即可实现 自动生成 `seter` `geter`方法。</div></pre></td></tr></table></figure>
<p>//setter</p>
<ul>
<li>(void)setObjStr:(NSString *)objStr {<br>   if (_ objStr != objStr) {<pre><code>[_objStr release];
 _objStr = [objStr copy];
</code></pre>   }<br>}<br>//getter</li>
<li>(NSString *)objStr {<br>   return _objStr;<br>}<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">以上代码等价于</div></pre></td></tr></table></figure>
</li>
</ul>
<p>//iOS2.0-iOS4.0<br>@interface Obj : NSObject<br>@property (nonatomic, copy) NSString *objStr;<br>@end</p>
<p>@implementation Object<br>@synthesize objStr = _ objStr;<br>@end<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iOS4.0及以后</div></pre></td></tr></table></figure></p>
<p>@interface Obj : NSObject<br>@property (nonatomic, copy) NSString *objStr;<br>@end<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">##### 5.OC有没有重载(overload)和重写(overwrite)？有的话请举个例子。</div><div class="line"></div><div class="line">答：</div><div class="line">OC 语言不支持重载</div><div class="line"></div><div class="line">```oc</div><div class="line">-(void)doSth:(NSInteger)integer;</div><div class="line">-(void)doSth:(NSString *)str; </div><div class="line">//对Objective-C而言是一样的，都叫方法doSth: 同时定义实现这两个方法是无法编译通过的。 若要达到类似重载的效果，可以这样跟不同参数：</div><div class="line">-(void)doSthWithInt:(NSInteger)integer;</div><div class="line">-(void)doSthWithStr:(NSString *)str</div></pre></td></tr></table></figure></p>
<p>OC 支持重写</p>
<pre><code>子类重写父类方法
</code></pre><h5 id="6-列举出-iOS-开发中三种最常出现的循环引用的场景。"><a href="#6-列举出-iOS-开发中三种最常出现的循环引用的场景。" class="headerlink" title="6.列举出 iOS 开发中三种最常出现的循环引用的场景。"></a>6.列举出 iOS 开发中三种最常出现的循环引用的场景。</h5><p>答：</p>
<ul>
<li>delegate 被强引用了，代理应该使用 weak (拓展 weak 干了啥使自己可以防止循环的出现)  </li>
<li>使用 block 的时候，注意是否出现互相持有。  </li>
<li>使用 NSTimer 的时候，我们可能会使<code>+scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:</code> 这个方法在建立的时候需要指定 target ，会被 timer retain 一份。因为 timer 还在一直执行，就会导致无法运行 dealloc的方法。正确的做法是在 viewDidDisappear: 的时候停止timer </li>
</ul>
<h5 id="7-MVC-模式具体指什么？iOS现在流行的-MVVM-是什么？"><a href="#7-MVC-模式具体指什么？iOS现在流行的-MVVM-是什么？" class="headerlink" title="7.MVC 模式具体指什么？iOS现在流行的 MVVM 是什么？"></a>7.MVC 模式具体指什么？iOS现在流行的 MVVM 是什么？</h5><p>MVC：</p>
<pre><code>MVC模式考虑三种对象：模型对象、视图对象和控制器对象。 模型对象负责应用程序的数据和定义操作数据的逻辑； 视图对象知道如何显示应用程序的模型数据； 控制器对象是M与V之间的协调者。
</code></pre><p>MVVM：</p>
<pre><code>MVVM 把 View Controller 作为 View
View 和 Model 之间没有紧耦合
MVVM 是在 View 和 ViewModel 之间进行绑定。
什么是 ViewModel 呢？基本上来说，它是 View 和 View 状态的独立于     UIKit 外的一个呈现，ViewModel 调用 Model 中的的变化，根据 Model 的变化进行调整，并且通过 View 和 ViewModel 的绑定，同步调整 View。
</code></pre><h5 id="8-iOS-中设计金钱计算和比较时，用数值应该用哪个类型来处理？"><a href="#8-iOS-中设计金钱计算和比较时，用数值应该用哪个类型来处理？" class="headerlink" title="8.iOS 中设计金钱计算和比较时，用数值应该用哪个类型来处理？"></a>8.iOS 中设计金钱计算和比较时，用数值应该用哪个类型来处理？</h5><ul>
<li><code>NSDecimalNumber</code> 继承于 <code>NSNumber</code>   </li>
<li><p><code>NSDecimalNumber</code> 包含  加减乘除，幂运算，指数运算，四舍五入，比较运算。  </p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line">	/** 示例 比较运算</div><div class="line">	NSOrderedAscending 升序</div><div class="line">	NSOrderedSame 相等</div><div class="line">	NSOrderedDescending 降序</div><div class="line">	- (NSComparisonResult)compare:(NSNumber *)decimalNumber;</div><div class="line">	*/</div><div class="line">	NSDecimalNumber *discount1 = [NSDecimalNumber decimalNumberWithString:@&quot;1.2&quot;];</div><div class="line">	NSDecimalNumber *discount2 = [NSDecimalNumber decimalNumberWithString:@&quot;1.3&quot;];</div><div class="line">	NSComparisonResult result = [discount1 compare:discount2];</div><div class="line">	if (result == NSOrderedAscending) &#123;</div><div class="line">	    NSLog(@&quot;1.2 &lt; 1.3&quot;);</div><div class="line">	&#125; else if (result == NSOrderedSame) &#123;</div><div class="line">	    NSLog(@&quot;1.2 == 1.3&quot;);</div><div class="line">	&#125; else if (result == NSOrderedDescending) &#123;</div><div class="line">	    NSLog(@&quot;1.2 &gt; 1.3&quot;);</div><div class="line">	&#125;</div><div class="line">	输出结果 1.2 &lt; 1.3</div><div class="line">	``` </div><div class="line"></div><div class="line">##### 9.iOS 上触摸事件的视图检测和事件传递过程是怎样的？  </div><div class="line"></div><div class="line">* 发生触摸事件后，系统会将该事件加入到一个由UIApplication管理的事件队列中。(为什么是队列而不是栈？因为队列的特定是先进先出，先产生的事件先处理才符合常理，所以把事件添加到队列。)</div><div class="line"></div><div class="line">* UIApplication会从事件队列中取出最前面的事件，并将事件分发下去以便处理，通常，先发送事件给应用程序的主窗口（keyWindow）。</div><div class="line"></div><div class="line">* 主窗口会在视图层次结构中找到一个最合适的视图来处理触摸事件，这也是整个事件处理过程的第一步。</div><div class="line">找到合适的视图控件后，就会调用视图控件的touches方法来作具体的事件处理。</div><div class="line"></div><div class="line">##### 10.写一个折半查找或者快速排序</div><div class="line"></div><div class="line">    用 Python写了一个二分查找</div><div class="line">    </div><div class="line">```python</div><div class="line"># -- coding: UTF-8 --</div><div class="line"># @Date    : 2017-02-21</div><div class="line"># @Author  : CepheusSun</div><div class="line"># @Version : python 2.7</div><div class="line"></div><div class="line"></div><div class="line">def in_bisect(word_list, word):</div><div class="line">    &quot;&quot;&quot;check weather a word is in a list using bisection search.</div><div class="line">    Precondition: the words in the list are sorted</div><div class="line"></div><div class="line">    :param word_list: list of strings</div><div class="line">    :param word: string</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    if len(word_list) == 0:</div><div class="line">        return False</div><div class="line"></div><div class="line">    # 结果四舍五入</div><div class="line">    i = len(word_list) // 2</div><div class="line">    if word_list[i] == word:</div><div class="line">        return True</div><div class="line"></div><div class="line">    if word_list[i] &gt; word:</div><div class="line">        # search the first half</div><div class="line">        return in_bisect(word_list[:i], word)</div><div class="line">    else:</div><div class="line">        # search the second half</div><div class="line">        return in_bisect(word_list[i + 1:], word)</div><div class="line"></div><div class="line"></div><div class="line">def main():</div><div class="line">    array = [&apos;1&apos;, &apos;asf&apos;, &apos;sf2&apos;, &apos;df1&apos;, &apos;2das&apos;, &apos;5asdfd&apos;, &apos;0sadf&apos;,</div><div class="line">            &apos;2ge&apos;, &apos;efc2&apos;, &apos;1eds&apos;, &apos;2ef&apos;, &apos;2apple&apos;, &apos;apple&apos;, &apos;orange&apos;]</div><div class="line">    print(in_bisect(array, &apos;1&apos;))</div><div class="line">    print(in_bisect(array, &apos;111&apos;))</div><div class="line"></div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    main()</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>参考资料</strong><br><a href="http://blog.sina.com.cn/s/blog_771849d301010ta0.html">资料1</a></p>
<p><a href="https://my.oschina.net/iamzkt/blog/126503">Objective-C 之 @property和@synthesize</a>  </p>
<p><a href="https://www.pupboss.com/property-and-synthesize/">回炉篇之（一）– @property和@synthesize</a>  </p>
<p><a href="http://arthurchen.blog.51cto.com/2483760/761426">iOS开发：Objective-C精确的货币计算</a> </p>
<p><a href="http://www.jianshu.com/p/4703d704c953">‘NSDecimalNumber–十进制数’使用方法(带例子)</a></p>
<p><a href="https://yq.aliyun.com/wenzhang/show_41715">objective c-OC中有方法重载吗？具体是怎么样？</a></p>
<p>think python</p>
<hr>
<h5 id="写在后面的话"><a href="#写在后面的话" class="headerlink" title="写在后面的话"></a>写在后面的话</h5><p>这个系列所有的文章都是在一个QQ群里面跟小伙伴们讨论出来的,每个 topic 都已经放在了 GitHub 的一个仓库中 <a href="https://github.com/GetOfferSoldier/Objective-C"><strong>这是地址</strong></a>。 所有内容的更新的将在这个仓库中进行,在博客中将不再进行更新。有任何问题，都可以在这个仓库中给我们提 issue 或者 pull request.</p>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;写出中序遍历二叉树的算法(不限编程语言，已知 TreeRoot 为二叉树的根)&lt;/li&gt;
&lt;li&gt;快速排序，归并排序的时间复杂度分别是什么？&lt;/li&gt;
&lt;li&gt;UITableViewCell 可重用机制是什么?有什么要注意的地方?&lt;/li&gt;
&lt;li&gt;OC 中的 @property 和 @synthesize 有什么用？&lt;/li&gt;
&lt;li&gt;OC有没有重载(overload)和重写(overwrite)？有的话请举个例子。&lt;/li&gt;
&lt;li&gt;列举出 iOS 开发中三种最常出现的循环引用的场景。&lt;/li&gt;
&lt;li&gt;MVC 模式具体指什么？iOS现在流行的 MVVM 是什么？&lt;/li&gt;
&lt;li&gt;iOS 中设计金钱计算和比较时，用数值应该用哪个类型来处理？&lt;/li&gt;
&lt;li&gt;iOS 上触摸事件的视图检测和事件传递过程是怎样的？  &lt;/li&gt;
&lt;li&gt;写一个折半查找或者快速排序&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="iOS面试集锦" scheme="https://CepheusSun.github.io/categories/iOS%E9%9D%A2%E8%AF%95%E9%9B%86%E9%94%A6/"/>
    
    
      <category term="iOS面试集锦" scheme="https://CepheusSun.github.io/tags/iOS%E9%9D%A2%E8%AF%95%E9%9B%86%E9%94%A6/"/>
    
  </entry>
  
  <entry>
    <title>iOS面试集锦&amp;2017年02月20日01</title>
    <link href="https://CepheusSun.github.io/2017/02/20/interview07022001/"/>
    <id>https://CepheusSun.github.io/2017/02/20/interview07022001/</id>
    <published>2017-02-19T16:00:00.000Z</published>
    <updated>2017-02-22T17:09:41.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>对内存管理的理解。</li>
<li>类别的作用</li>
<li>点击屏幕上的按钮，系统做了什么？</li>
</ol>
<a id="more"></a>
<p>##2017-02-20  Question<br>Question 1.内存管理理解不正确的是<br>A 程序A里有一段内存被成功申请完成之后，内存计数器就从0变为1 (这个过程是alloc);<br>B 程序B里要使用已存在内存，那么内存计数器从1变为2 (这个过程是retain或者copy);<br>C 紧接着程序A不需要这个内存了，那么程序A就把这个内存计数器减1 (这个过程是release);<br>D 当系统发现这个内存计数器变为小于等于0，那么就调用垃圾回收程序把这段内存回收(这个过程是dealloc)；</p>
<p>Question 2.类别的作用不正确的是<br>A 将类的实现分散到多个不同文件或多个不同框架中。<br>B 创建对私有方法的前向引用。<br>C 向对象添加非正式协议。 继承可以增加，修改或者删除方法。<br>D 不能添加属性  </p>
<p>Question 3.点击屏幕上的按钮，系统做了什么？  </p>
<h2 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h2><p>Answer 1. B  使用并不会增加引用技术，持有才会。<br>Answer 2. D  </p>
<pre><code>class-continuation分类是唯一能给添加属性的分类。而所谓的关联对象，我在52个方法中找到了这样一句话：
    * “定义关联对象时可以指定内存管理语义，用以模仿定义属性时所采用的“拥有”和“非拥有关系””
可见，关连对象跟属性是两个不同的概念，不能混为一谈。

类别的三个作用：
    * 可以将类的实现分散到多个不同文件或多个不同框架中，方便代码管理。
    * 创建对私有方法的前向引用。比如在别人的类或者框架中有一个方法的是没有说明的，这时候通过类别声明这个方法，就可以在不破坏原来框架的情况下，使用到这个方法。
    * 向对象添加非正式协议。
</code></pre><p>Answer 3.   </p>
<ul>
<li>触摸事件的传递是从父空间传递到子控件，如果父空间不能接收触摸事件，那么子控件就不能接收触摸事件  </li>
<li>发生触摸事件后，系统会将该事件加入到一个由UIApplication管理的事件队列中。(为什么是队列而不是栈？因为队列的特定是先进先出，先产生的事件先处理才符合常理，所以把事件添加到队列。)  </li>
<li>UIApplication会从事件队列中取出最前面的事件，并将事件分发下去以便处理，通常，先发送事件给应用程序的主窗口（keyWindow）。  </li>
<li>主窗口会在视图层次结构中找到一个最合适的视图来处理触摸事件，这也是整个事件处理过程的第一步。<br>找到合适的视图控件后，就会调用视图控件的touches方法来作具体的事件处理。  </li>
</ul>
<blockquote>
<p>参考<br><a href="http://www.cnblogs.com/LiLihongqiang/p/5645907.html">http://www.cnblogs.com/LiLihongqiang/p/5645907.html</a><br><a href="http://www.infocool.net/kb/IOS/201610/200104.html">http://www.infocool.net/kb/IOS/201610/200104.html</a><br><a href="http://www.cocoachina.com/ios/20160113/14896.html">http://www.cocoachina.com/ios/20160113/14896.html</a><br><a href="http://www.jianshu.com/p/2e074db792ba">http://www.jianshu.com/p/2e074db792ba</a>  </p>
</blockquote>
<hr>
<h5 id="写在后面的话"><a href="#写在后面的话" class="headerlink" title="写在后面的话"></a>写在后面的话</h5><p>这个系列所有的文章都是在一个QQ群里面跟小伙伴们讨论出来的,每个 topic 都已经放在了 GitHub 的一个仓库中 <a href="https://github.com/GetOfferSoldier/Objective-C"><strong>这是地址</strong></a>。 所有内容的更新的将在这个仓库中进行,在博客中将不再进行更新。有任何问题，都可以在这个仓库中给我们提 issue 或者 pull request.</p>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;对内存管理的理解。&lt;/li&gt;
&lt;li&gt;类别的作用&lt;/li&gt;
&lt;li&gt;点击屏幕上的按钮，系统做了什么？&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="iOS面试集锦" scheme="https://CepheusSun.github.io/categories/iOS%E9%9D%A2%E8%AF%95%E9%9B%86%E9%94%A6/"/>
    
    
      <category term="iOS面试集锦" scheme="https://CepheusSun.github.io/tags/iOS%E9%9D%A2%E8%AF%95%E9%9B%86%E9%94%A6/"/>
    
  </entry>
  
  <entry>
    <title>iOS面试集锦&amp;2017年02月19日01</title>
    <link href="https://CepheusSun.github.io/2017/02/19/interview07021901/"/>
    <id>https://CepheusSun.github.io/2017/02/19/interview07021901/</id>
    <published>2017-02-18T16:00:00.000Z</published>
    <updated>2017-02-21T16:04:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>按钮或者 View 在进行 frame 动画的时候，为什么点击 frame 动画的重点位置才能触发事件？如何在动画过程中响应事件？</p>
<a id="more"></a>  
<p>答：<br>① <del>动画开始后有两个图层：</del><br>（修改原因：不是动画开始后,而是 view 出现了的时候。只要 view 出现在试图上,他都具有这两个图层。）<br><strong>iOS 中对于 UIView 具有一个 CALayer 类的属性 layer 我们姑且叫他 rootLayer。而每一个 CALayer 都有两个属性：</strong><br><del>一个 <code>view.layer.presentationLayer</code> 用来显示动画（属性随动画过程慢慢改变)</del><br>（修改原因:感觉显示动画这个用法不大准确,我语文也不好😂）<br><strong>一个<code>resentationLayer</code> 指呈现图层,是模型图层的复制，他的属性值代表了在任何指定时刻当前的显示。所以在 UIView 没有出现的时候这个 view 的属性值为 nil， 出现之后无论 view 是否动画，这个值的内存地址每次打印都不一样。</strong></p>
<p><del>一个 <code>view.layer</code> 用来处理用户交互（动画一开始属性值立即改变到动画结束时的状态和位置)</del><br>(修改原因: CALayer 是不处理交互的,这一点可以从UIView有<code>userInteractionEnabled</code>这个属性，而CALayer没有可以看出,并且看 iOS-CoreAnimation这本书,这样使用 modelLayer 来描述更 MVC 一些)<br><strong>一个<code>modelLayer</code> 指模型层,在 view 显示出来的时候<code>view.layer</code> = <code>view.layer.presentationLayer.modelLayer</code> = <code>view.layer.view.layer.modelLayer</code>。 三者内存地址是一样的,保存实际的属性值。</strong></p>
<p><strong>最后总结：当一个图层的属性改变的时候，我们设置的属性并没有直接调用图层的外观，只是定义了图层动画结束之后将要变化的外观。</strong>具体关系见下图：</p>
<center><img src="http://ocg4av0wv.bkt.clouddn.com/layer%E7%9F%A5%E8%AF%86.png" alt=""><br>from《iOS-CoreAnimation》<br></center>

<p>② 要在移动动画的过程中处理 触摸可以重写 <code>UIView的hitTest</code> 方法<br>(总的来说，通过<code>view.layer.presentationLayer</code>的相关属性，就可以实现响应需求了，通过<code>touchbegan</code>判断用户点击的位置是否在<code>view.layer.presentationLayer.frame</code>之内，是《iOS—CoreAnimation》中另外一个实现方式)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">- (id)hitTest:(CGPoint)point withEvent:(UIEvent *)event &#123;</div><div class="line">    NSArray *subViews = self.subviews;</div><div class="line">    for (UIView *subView in subViews) &#123;</div><div class="line">        if([subView isKindOfClass:[FoamImageView class]])&#123; //是要找的图片</div><div class="line">            CALayer *layer = subView.layer.presentationLayer; //图片的显示层            </div><div class="line">            if(CGRectContainsPoint(layer.frame, point))&#123; //触摸点在显示层中，返回当前图片</div><div class="line">                return subView;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return [super hitTest:point withEvent:event];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event &#123;</div><div class="line">    CGPoint point = [[touches anyObject] locationInView:self.view];</div><div class="line">    </div><div class="line">    if (CGRectContainsPoint(button_.layer.presentationLayer.frame, point)) &#123;</div><div class="line">        NSLog(@&quot;youxiangying&quot;);</div><div class="line">        [self buttonEvent:button_];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>参考资料</strong>：<br><a href="http://www.voidcn.com/blog/lixuemei45/article/p-5021040.html">www.voidcn.com</a><br><a href="https://www.amazon.com/iOS-Core-Animation-Advanced-Techniques-ebook/dp/B00EHJCORC/ref=sr_1_1?ie=UTF8&amp;qid=1423192842&amp;sr=8-1&amp;keywords=Core+Animation+Advanced+Techniques">iOS-CoreAnimation</a></p>
<hr>
<h5 id="写在后面的话"><a href="#写在后面的话" class="headerlink" title="写在后面的话"></a>写在后面的话</h5><p>这个系列所有的文章都是在一个QQ群里面跟小伙伴们讨论出来的,每个 topic 都已经放在了 GitHub 的一个仓库中 <a href="https://github.com/GetOfferSoldier/Objective-C"><strong>这是地址</strong></a>。 所有内容的更新的将在这个仓库中进行,在博客中将不再进行更新。有任何问题，都可以在这个仓库中给我们提 issue 或者 pull request.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;按钮或者 View 在进行 frame 动画的时候，为什么点击 frame 动画的重点位置才能触发事件？如何在动画过程中响应事件？&lt;/p&gt;
    
    </summary>
    
      <category term="iOS面试集锦" scheme="https://CepheusSun.github.io/categories/iOS%E9%9D%A2%E8%AF%95%E9%9B%86%E9%94%A6/"/>
    
    
      <category term="iOS面试集锦" scheme="https://CepheusSun.github.io/tags/iOS%E9%9D%A2%E8%AF%95%E9%9B%86%E9%94%A6/"/>
    
  </entry>
  
  <entry>
    <title>python 中 str 和 list 互相转换</title>
    <link href="https://CepheusSun.github.io/2017/02/04/python%20%E4%B8%AD%20str%20%E5%92%8C%20list%20%E4%BA%92%E7%9B%B8%E8%BD%AC%E6%8D%A2/"/>
    <id>https://CepheusSun.github.io/2017/02/04/python 中 str 和 list 互相转换/</id>
    <published>2017-02-03T16:00:00.000Z</published>
    <updated>2017-02-04T09:27:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>一些相关方法、函数、运算符的整理</p>
<a id="more"></a>
<h3 id="str-gt-list"><a href="#str-gt-list" class="headerlink" title="str -&gt; list"></a>str -&gt; list</h3><h4 id="将字符串按照字符分割成字符list"><a href="#将字符串按照字符分割成字符list" class="headerlink" title="将字符串按照字符分割成字符list"></a>将字符串按照字符分割成字符list</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">s = <span class="string">'spam'</span></div><div class="line">t = list(s)</div><div class="line"><span class="keyword">print</span> t</div><div class="line"></div><div class="line"><span class="comment">#结果：['s', 'p', 'a', 'm']</span></div></pre></td></tr></table></figure>
<h4 id="将字符串按照分隔符，分割成字符-串-list"><a href="#将字符串按照分隔符，分割成字符-串-list" class="headerlink" title="将字符串按照分隔符，分割成字符(串)list"></a>将字符串按照分隔符，分割成字符(串)list</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">s = <span class="string">'spam-spam-spsm'</span></div><div class="line">delimiter = <span class="string">'-'</span></div><div class="line">s.split(delimiter)</div><div class="line"><span class="keyword">print</span> s.split(delimiter)</div><div class="line"></div><div class="line"><span class="comment">#结果：['spam', 'spam', 'spsm']</span></div></pre></td></tr></table></figure>
<h4 id="使用-split-方法将字符串分成单词"><a href="#使用-split-方法将字符串分成单词" class="headerlink" title="使用 split 方法将字符串分成单词"></a>使用 split 方法将字符串分成单词</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">s = <span class="string">'pinging for the fjords'</span></div><div class="line">t = s.split()</div><div class="line"><span class="keyword">print</span> t</div><div class="line"></div><div class="line"><span class="comment">#结果：['pinging', 'for', 'the', 'fjords']</span></div></pre></td></tr></table></figure>
<h3 id="list-gt-str"><a href="#list-gt-str" class="headerlink" title="list -&gt; str"></a>list -&gt; str</h3><h4 id="使用字符-串-将-list-串联成字符串"><a href="#使用字符-串-将-list-串联成字符串" class="headerlink" title="使用字符(串)将 list 串联成字符串"></a>使用字符(串)将 list 串联成字符串</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">t = [<span class="string">'pinging'</span>, <span class="string">'for'</span>, <span class="string">'the'</span>, <span class="string">'fjords'</span>]</div><div class="line">delimiter = <span class="string">' '</span></div><div class="line"><span class="keyword">print</span> delimiter.join(t)</div><div class="line"></div><div class="line"><span class="comment">#结果：pinging for the fjords</span></div><div class="line"><span class="comment"># 如果不需要分隔符，第二行中delimiter复制为''空字符串即可</span></div></pre></td></tr></table></figure>
<h3 id="数组-增-删-改"><a href="#数组-增-删-改" class="headerlink" title="数组 增 删 改"></a>数组 增 删 改</h3><h4 id="增"><a href="#增" class="headerlink" title="增"></a>增</h4><p><strong>直接在后面添加一个元素</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">t = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</div><div class="line">t.append(<span class="string">'d'</span>)</div><div class="line"><span class="keyword">print</span> t</div><div class="line"></div><div class="line"><span class="comment">#结果：['a', 'b', 'c', 'd']</span></div></pre></td></tr></table></figure>
<p><strong>将一个数组遍历添加在后面</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">t = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</div><div class="line">t2 = [<span class="string">'e'</span> ,<span class="string">'f'</span>]</div><div class="line">t.extend(t2)</div><div class="line"><span class="keyword">print</span> t</div><div class="line"></div><div class="line"><span class="comment">#结果：['a', 'b', 'c', 'e', 'f']</span></div></pre></td></tr></table></figure>
<h4 id="删"><a href="#删" class="headerlink" title="删"></a>删</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 以下方法运算符都可以使用切片</span></div><div class="line"></div><div class="line">t = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</div><div class="line"><span class="comment"># del 运算符 如果不需要被删除的值，使用这个</span></div><div class="line"><span class="keyword">del</span> t[<span class="number">1</span>]</div><div class="line"></div><div class="line"><span class="comment"># pop 方法 改变列表并返回被删除的元素。如果不提供索引，删除并返回最后一个元素。</span></div><div class="line"><span class="keyword">print</span> t.pop(<span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="comment"># remove 方法 删除不知道索引的元素, 只删除第一个</span></div><div class="line">t.remove(<span class="string">'a'</span>)</div><div class="line"><span class="keyword">print</span> t</div></pre></td></tr></table></figure>
<h4 id="改"><a href="#改" class="headerlink" title="改"></a>改</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">t = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</div><div class="line">t[<span class="number">0</span>] = <span class="string">'c'</span></div><div class="line"><span class="keyword">print</span> t</div><div class="line"></div><div class="line"><span class="comment">#结果：['c', 'b', 'c']</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一些相关方法、函数、运算符的整理&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://CepheusSun.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://CepheusSun.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python Debug 之一</title>
    <link href="https://CepheusSun.github.io/2017/02/02/python%20debug%20%E4%B9%8B%E4%B8%80/"/>
    <id>https://CepheusSun.github.io/2017/02/02/python debug 之一/</id>
    <published>2017-02-01T16:00:00.000Z</published>
    <updated>2017-02-01T16:14:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>错误类型:SyntaxError: Non-ASCII character ‘\xe9’ in file xxx</p>
<a id="more"></a>
<p>最近写 python 代码的时候，简单的一下代码，确出现错误。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">points = int(raw_input(<span class="string">"领先的分数："</span>))</div><div class="line">is_in_control = raw_input(<span class="string">"是否领先队控球(Y／N：)"</span>)</div><div class="line">last_seconds = int(raw_input(<span class="string">"比赛剩余秒数："</span>))</div><div class="line"></div><div class="line">points -= <span class="number">3</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> is_in_control == <span class="string">'Y'</span>:</div><div class="line">    points += <span class="number">0.5</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    points -= <span class="number">0.5</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> points &lt; <span class="number">0</span>:</div><div class="line">    points = <span class="number">0</span></div><div class="line"></div><div class="line"></div><div class="line">points = points ** <span class="number">2</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> points &gt; last_seconds:</div><div class="line">    <span class="keyword">print</span> <span class="string">"safe"</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span>  <span class="string">"unsafe"</span></div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SyntaxError: Non-ASCII character &apos;\xe9&apos; in file /Users/programersunny/PycharmProjects/pythonDemo/hello on line 58, but no encoding declared; see http://www.python.org/peps/pep-0263.html for details</div></pre></td></tr></table></figure>
<p>打开 URL 阅读了一下，找到原因：</p>
<blockquote>
<p>Python will default to ASCII as standard encoding if no other encoding hints are given.</p>
</blockquote>
<p>Python的默认编码文件是用的ASCII码，你将文件存成了UTF-8也没用。</p>
<p>解决办法很简单：</p>
<p>只要在文件开头加入<code># -*- coding: UTF-8 —</code>或者<code>#coding=utf-8</code> 就行了。</p>
<p>注意，这两行代码必须添加在<code>.py</code>文件的第一行或者第二行。如果在第三行以及以上，都没有效果，这个在这个网址上也有描述</p>
<blockquote>
<p>To define a source code encoding, a magic comment must be placed into the source files either as first or second line in the file</p>
</blockquote>
<p>翻译一下：</p>
<blockquote>
<p>为了定义源码的编码格式，一个神奇的注释需要被添加到源文件的第一行或者第二行中。</p>
</blockquote>
<p>神奇的注释已经在上文提到了。</p>
<p><a href="https://www.python.org/dev/peps/pep-0263/">上文提到的URL地址</a></p>
<p>纪念一下自己在 python 中遇到的第一个小坑。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;错误类型:SyntaxError: Non-ASCII character ‘\xe9’ in file xxx&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://CepheusSun.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://CepheusSun.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>iOS小知识集锦-NSString常用方法汇总</title>
    <link href="https://CepheusSun.github.io/2017/02/01/iOS%E5%B0%8F%E7%9F%A5%E8%AF%86%E9%9B%86%E9%94%A6-NSString%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB/"/>
    <id>https://CepheusSun.github.io/2017/02/01/iOS小知识集锦-NSString常用方法汇总/</id>
    <published>2017-01-31T16:00:00.000Z</published>
    <updated>2017-02-22T16:39:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>NSString 几乎是 iOS 开发中最常用的类了。几乎所有的地方都会用到各种各样的字符串。NSString 也有很多的方法。这篇文章记录我在使用 NSString 类的时候，会用到的知识点。也是 <code>iOS小知识集锦</code>的第一篇文章吧。</p>
<a id="more"></a>
<h3 id="创建字符串"><a href="#创建字符串" class="headerlink" title="创建字符串"></a>创建字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 直接创建字符串</div><div class="line">NSString *str1 = @&quot;this is Cepheus Sun&quot;;</div><div class="line"></div><div class="line">// 用一个字符串创建另一个字符串</div><div class="line">NSString *str2 =[[NSString alloc] initWithString:str1];</div><div class="line"></div><div class="line">// 用c的字符串创建oc的字符串</div><div class="line">NSString *str4 = [[NSString alloc] initWithUTF8String:&quot;我是程序猿&quot;];</div><div class="line"></div><div class="line">// 用格式符拼接字符串</div><div class="line">NSString *str3 = [[NSString alloc] initWithFormat:@&quot;%@%@&quot;,str1,str4];</div></pre></td></tr></table></figure>
<h3 id="读取文件来初始化字符串"><a href="#读取文件来初始化字符串" class="headerlink" title="读取文件来初始化字符串"></a>读取文件来初始化字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 先创建一个error对象，用来保存错误信息</div><div class="line">NSError *error = nil;</div><div class="line">//@&quot;/Users/xxx/Desktop/123.txt&quot;为文件路径</div><div class="line">NSString *str01 = [NSString stringWithContentsOfFile:@&quot;/Users/xxx/Desktop/123.txt&quot; encoding:NSUTF8StringEncoding error:&amp;error];</div><div class="line">        </div><div class="line">// 创建if语句判断输出</div><div class="line">if (error) &#123; // 一旦为真，说明读取文件出错了</div><div class="line">	NSLog(@&quot;读取文件出错 %@&quot;, error);</div><div class="line">&#125; else &#123;</div><div class="line">	NSLog(@&quot;读取成功:%@&quot;, str01);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="通过-URL-读取文件，初始化字符串"><a href="#通过-URL-读取文件，初始化字符串" class="headerlink" title="通过 URL 读取文件，初始化字符串"></a>通过 URL 读取文件，初始化字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">// http://www.baidu.com/image/xxxx.png</div><div class="line">// url = 协议头://主机地址/在主机里面的路径</div><div class="line"></div><div class="line">// ftp协议，传输比较大的文件</div><div class="line">// file协议，读取比较大的文件</div><div class="line"></div><div class="line">// file协议，读取文本文件</div><div class="line">NSURL *url = [NSURL URLWithString:@&quot;file://192.168.1.1/user/apple/desktop/test.txt&quot;]</div><div class="line">  </div><div class="line">// 如果不写 IP 地址，就会默认访问本机</div><div class="line">NSURL *url = [NSURL URLWithString:@&quot;file:///user/CepheusSun/desktop/123.txt&quot;]</div><div class="line">  </div><div class="line">// 将本地文件路径创建为 URL 对象(路径可以是中文)</div><div class="line"> NSURL *url = [NSURL fileURLWithPath:@&quot;/Users/CepheusSun/Desktop/123.txt&quot;];</div><div class="line"></div><div class="line">// 将对应对网络资源文件路径创建为URL对象(路径必须是英文字母)</div><div class="line">// SURL *url = [NSURL URLWithString:@&quot;file:///Users/CepheusSun/Desktop/123.txt&quot;];</div><div class="line"> </div><div class="line">// 先创建一个 error 对象，用来保存错误信息</div><div class="line">NSError *error1 = nil;</div><div class="line">// 调用URL地址的文件</div><div class="line">NSString *str03 = [NSString stringWithContentsOfURL:url encoding:NSUTF8StringEncoding error:&amp;error1];</div><div class="line">        </div><div class="line">if (error1) &#123; // 一旦为真，说明读取文件出错了</div><div class="line">	NSLog(@&quot;读取文件出错 %@&quot;, error1);</div><div class="line">&#125; else&#123;</div><div class="line">	NSLog(@&quot;读取成功:%@&quot;, str03);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="通过-url-或-file-将字符串信息写入文件"><a href="#通过-url-或-file-将字符串信息写入文件" class="headerlink" title="通过 url 或 file 将字符串信息写入文件"></a>通过 url 或 file 将字符串信息写入文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"> NSString *s001 = @&quot;dfa短发方法法德俄额度 短发舒服&quot;;</div><div class="line">        </div><div class="line">// NSURL *myurl = [NSURL fileURLWithPath:@&quot;/Users/progamersunny/Desktop/123.txt&quot;];</div><div class="line">        </div><div class="line">NSURL *myurl = [NSURL URLWithString:@&quot;file:///Users/progamersunny/Desktop/123.txt&quot;];</div><div class="line"></div><div class="line">// 调用将字符串写入URL地址文件的方法</div><div class="line">[s001 writeToURL:myurl atomically:YES encoding:NSUTF8StringEncoding error:nil];</div><div class="line">        </div><div class="line">// 调用将字符串写入本机文件的方法</div><div class="line">// [s001 writeToFile:@&quot;/Users/xlzhang/Desktop/OC基础知识点汇总/OC中NSString常用方法汇总/text1.txt1&quot; atomically:YES encoding:NSUTF8StringEncoding error:nil];</div><div class="line">        </div><div class="line">// 提取文件内容</div><div class="line">NSString *str04 = [NSString stringWithContentsOfFile:@&quot;/Users/xlzhang/Desktop/text/text/123.txt&quot; encoding:NSUTF8StringEncoding error:nil];</div></pre></td></tr></table></figure>
<h3 id="创建临时字符串"><a href="#创建临时字符串" class="headerlink" title="创建临时字符串"></a>创建临时字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 用一个字符串创建另一个临时字符串</div><div class="line">NSString *str5 = [NSString stringWithString:str2];</div><div class="line"></div><div class="line">// 用c的字符串创建oc的临时字符串</div><div class="line">NSString *str6 = [NSString stringWithUTF8String:&quot;我是程序猿&quot;];</div><div class="line">        </div><div class="line">// 用格式符拼接字符串</div><div class="line">NSString *str7 = [NSString stringWithFormat:@&quot;%@%@&quot;,str5,str3];</div></pre></td></tr></table></figure>
<h3 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">// 比较两个字符串是否相等，返回BOOL值YES或NO</div><div class="line">BOOL ret = [str6 isEqualToString: str7];</div><div class="line"></div><div class="line">// 比较并返回谁大谁小(返回值是个枚举类型: 比较的结果 ＝ －1，0，1)</div><div class="line">// typedef NS_ENUM(NSInteger, NSComparisonResult) &#123;NSOrderedAscending = -1L, NSOrderedSame, NSOrderedDescending&#125;;</div><div class="line">// 如果左边str1小于右边str4就返回－1，相等就返回0，大于就返回1</div><div class="line"></div><div class="line">NSComparisonResult ret1 = [str1 compare: str4];</div><div class="line"></div><div class="line">// 忽略大小写进行比较</div><div class="line">NSComparisonResult ret01 = [str1 caseInsensitiveCompare:str4];</div><div class="line"></div><div class="line"> // 有条件的比较谁大谁小(options的参数为限制条件)</div><div class="line"> // options: 指定比较的条件</div><div class="line"> // NSCaseInsensitiveSearch  忽略大小写</div><div class="line"> // NSBackwardsSearch  从后往前比较</div><div class="line"> // NSNumericSearch  首先比较字符串里面的字符的个数，个数一样再比较大小</div><div class="line"></div><div class="line">NSComparisonResult ret02 = [str1 compare:str4 options:NSCaseInsensitiveSearch]; // 忽略大小写进行比较</div></pre></td></tr></table></figure>
<h3 id="从一个字符串中查找子字符串"><a href="#从一个字符串中查找子字符串" class="headerlink" title="从一个字符串中查找子字符串"></a>从一个字符串中查找子字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">NSString *s1 = @&quot;I am such a poor programer.&quot;;</div><div class="line">NSString *s2 = @&quot;am&quot;;</div><div class="line"></div><div class="line">// 返回值类型是一个枚举类型NSRange,包含两个lu整型变量location(位置)和length(长度)</div><div class="line">NSRange range = [s1 rangeOfString:s2];// 查找并返回位置</div><div class="line"></div><div class="line">        </div><div class="line">// 有条件的查找,options后面为： NSCaseInsensitiveSearch 表示忽略大小写</div><div class="line">NSRange range01 = [s1 rangeOfString:s2 options:NSLiteralSearch]; // options表示查找方式</div><div class="line"></div><div class="line">BOOL b1 = [s1 containsString:s2]; // 返回值类型是一个BOOL值，YES表示s1包含有s2，NO表示没有包含</div><div class="line"></div><div class="line">// 如果查找的字符串不存在，返回的值：range.length = 0;range.location = NSNotFound (NSNotFound = -1)</div></pre></td></tr></table></figure>
<h3 id="单独提取某一个字符"><a href="#单独提取某一个字符" class="headerlink" title="单独提取某一个字符"></a>单独提取某一个字符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 创建一个可变字符串对象</div><div class="line">NSMutableString *str02 = [[NSMutableString alloc] init];</div><div class="line">// 循环获取字符中的每一个字符</div><div class="line">for (int i = 0;i &lt; [str1 length]; i++)&#123;</div><div class="line">    // 此处提取的字符是两个字节，因此可以提取汉字</div><div class="line">	unichar c = [str1 characterAtIndex:i]; </div><div class="line">	// 将获取对字符合并到可变字符串中</div><div class="line">	[str02 appendFormat:@&quot;%C&quot;,c];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="从字符串中提取某个范围点字符生成新字符串－－-从第一个字符开始到某个位置结束，从某个位置开始到字符串尾，某点开始某点结束"><a href="#从字符串中提取某个范围点字符生成新字符串－－-从第一个字符开始到某个位置结束，从某个位置开始到字符串尾，某点开始某点结束" class="headerlink" title="从字符串中提取某个范围点字符生成新字符串－－(从第一个字符开始到某个位置结束，从某个位置开始到字符串尾，某点开始某点结束)"></a>从字符串中提取某个范围点字符生成新字符串－－(从第一个字符开始到某个位置结束，从某个位置开始到字符串尾，某点开始某点结束)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">NSString *s3 = @&quot;0123456789&quot;;</div><div class="line">NSString *s4 = [s3 substringToIndex: 6 ]; </div><div class="line">// 从s3中提取从头至第6个字符(不包括第6个),生产新字符串,返回这个新字符串的地址</div><div class="line">// s4的结果为: &quot;012345&quot;</div><div class="line">        </div><div class="line">NSString *s5 = [s3 substringFromIndex: 6 ]; </div><div class="line">// 从s3中提取从第6个字符(包括第6个)到最后一个字符,生产新字符串,返回这个新字符串的地址</div><div class="line">// s5到结果为: &quot;6789&quot;</div><div class="line">        </div><div class="line">NSRange range1 = &#123;3,4&#125;; </div><div class="line">// 3表示起始位置，4表示长度，表示从第3个字符(包含第3个)开始提取连续的4个字符,生产新字符串,返回这个新字符串的地址</div><div class="line">NSString *s6 = [s3 substringWithRange:range1]; </div><div class="line">// 先定义一个range值</div><div class="line">// s6的结果为: &quot;3456&quot;</div><div class="line">        </div><div class="line">        </div><div class="line">// 也可以合并一起写</div><div class="line">NSString *s7 = [s3 substringWithRange:NSMakeRange(3, 4)]; // NSMakeRange 是一个c函数</div></pre></td></tr></table></figure>
<h3 id="字符串与其他类型的转换"><a href="#字符串与其他类型的转换" class="headerlink" title="字符串与其他类型的转换"></a>字符串与其他类型的转换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">NSString *intStr = @&quot;1234&quot;;</div><div class="line">NSString *floatStr = @&quot;5.14&quot;;</div><div class="line"></div><div class="line">int a = [intStr intValue];</div><div class="line">float f = [floatS floatValue];</div></pre></td></tr></table></figure>
<h3 id="字符串首位-前缀后缀的对比"><a href="#字符串首位-前缀后缀的对比" class="headerlink" title="字符串首位(前缀后缀的对比)"></a>字符串首位(前缀后缀的对比)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">NSString *url1 = @&quot;https://www.baidu.com/rader/p.png&quot;;</div><div class="line">BOOL b001 = [url1 hasPrefix:@&quot;https://&quot;]; // 判断字符串首位是否与输入的字符串相同</div><div class="line">BOOL b002 = [url1 hasSuffix:@&quot;p.png&quot;];   // 判断字符串尾部是否与输入的字符串相同</div></pre></td></tr></table></figure>
<h3 id="字符串中某些字符的替换"><a href="#字符串中某些字符的替换" class="headerlink" title="字符串中某些字符的替换"></a>字符串中某些字符的替换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">NSString *url2 = @&quot;http://www.baidu.com/rader/p.gdp&quot;;</div><div class="line">// 将withString:字符串内容替换掉url1中 OfString:字符串内容 后生成一个新的字符串url2</div><div class="line">NSString *url3 = [url2 stringByReplacingOccurrencesOfString:@&quot;/&quot; withString:@&quot;*&quot;];</div></pre></td></tr></table></figure>
<h3 id="去掉字符串首尾的某些连续的字符"><a href="#去掉字符串首尾的某些连续的字符" class="headerlink" title="去掉字符串首尾的某些连续的字符"></a>去掉字符串首尾的某些连续的字符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> NSString *url4 = @&quot;    http://www.baidu.com     &quot;;</div><div class="line">        </div><div class="line">NSCharacterSet *set = [NSCharacterSet whitespaceCharacterSet]; //  去除空格</div><div class="line">// lowercaseLetterCharacterSet  去除小写字母</div><div class="line">// uppercaseLetterCharacterSet  去除大写字母</div><div class="line">        </div><div class="line">NSCharacterSet *set1 = [NSCharacterSet characterSetWithCharactersInString:@&quot;指定的字符串&quot;]; // 去除指定的字符串</div><div class="line">        </div><div class="line">        </div><div class="line">// 去除字符串首尾的某些相同字符,有多少个就去掉多少个</div><div class="line">NSString *url5 = [url4 stringByTrimmingCharactersInSet:set];</div></pre></td></tr></table></figure>
<h3 id="可变字符串-以上字符串方法都可以用于可变字符串"><a href="#可变字符串-以上字符串方法都可以用于可变字符串" class="headerlink" title="可变字符串:(以上字符串方法都可以用于可变字符串)"></a>可变字符串:(以上字符串方法都可以用于可变字符串)</h3><blockquote>
<p>可变字符串是字符串的子类，所以可以使用所有NSString的所有方法，其比起字符串增加的功能主要有：增,删,改,擦</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">// 创建一个可变字符串</div><div class="line"></div><div class="line">NSMutableString *string1 = [[NSMutableString alloc] init];</div><div class="line">[string1 setString:@&quot;1234&quot;]; // 对可变字符串进行赋值</div><div class="line">        </div><div class="line">[string1 setString:@&quot;abcd&quot;]; // 已赋值的可变字符串可以重新赋值（改）</div><div class="line">[string1 appendString:@&quot;123&quot;]; // 可以增加字符串，增加后结果为:&quot;abcd123&quot;</div><div class="line">[string1 appendFormat:@&quot;%c&quot;,&apos;D&apos;]; // 可以用格式符增加相应的字符或字符串，结果为:&quot;abcd123D&quot;</div><div class="line">[string1 insertString:@&quot;xxxx&quot; atIndex:4]; // 可以把&quot;xxxx&quot;字符串插入到第4个字符开始的地方,原第四个开始的后面字符依次后移</div><div class="line">// 插入后的结果为: &quot;abcdxxxx123D&quot;</div><div class="line">        </div><div class="line">// 也可以把字符串改为另一个字符串的地址，因为它们传递的都是地址</div><div class="line">NSString *ss1 = [NSString stringWithFormat:@&quot;%d&quot;,-88];</div><div class="line">        </div><div class="line">[string1 insertString:ss1 atIndex:6]; // 结果为: string1 = &quot;abcdxx-88xx123D&quot;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">NSRange range2 = &#123;3,4&#125;; </div><div class="line">// 3表示起始位置，4表示长度，表示从第3个字符(包含第3个)开始删除连续的4个字符,后面字符依次前移</div><div class="line">[string1 deleteCharactersInRange:range2]; </div><div class="line">// 结果为: string1 = &quot;abc88xx123D&quot;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[string1 replaceCharactersInRange:NSMakeRange(3, 2) withString:@&quot;RRRRRRRRRR&quot;];</div><div class="line">// 3表示起始位置，2表示长度，表示从第3个字符(包含第3个)开始将后面的2个字符换成字符串&quot;RRRRRRRRRR&quot;,后面字符依次后移</div><div class="line">// 结果为: string1 = &quot;abcRRRRRRRRRRxx123D&quot;</div><div class="line">NSLog(@&quot;\nstring1 = %@&quot;,string1);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 擦除原有字符串内容重新设置字符串的内容</div><div class="line">[string1 setString:@&quot;---&quot;];</div><div class="line">// 等同于</div><div class="line">// string1.string = @&quot;---&quot;;</div><div class="line">        </div><div class="line">NSLog(@&quot;string1 = %@&quot;, string1);</div><div class="line">// 结果为: string1 = &quot;---&quot;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NSString 几乎是 iOS 开发中最常用的类了。几乎所有的地方都会用到各种各样的字符串。NSString 也有很多的方法。这篇文章记录我在使用 NSString 类的时候，会用到的知识点。也是 &lt;code&gt;iOS小知识集锦&lt;/code&gt;的第一篇文章吧。&lt;/p&gt;
    
    </summary>
    
      <category term="知识集锦" scheme="https://CepheusSun.github.io/categories/%E7%9F%A5%E8%AF%86%E9%9B%86%E9%94%A6/"/>
    
    
      <category term="Objective-C" scheme="https://CepheusSun.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>python 中的逻辑运算符</title>
    <link href="https://CepheusSun.github.io/2017/01/29/python%20%E4%B8%AD%E7%9A%84%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>https://CepheusSun.github.io/2017/01/29/python 中的逻辑运算符/</id>
    <published>2017-01-28T16:00:00.000Z</published>
    <updated>2017-01-29T16:05:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>从现在开始，开始了对 pyhton 这门语言的学习。</p>
<a id="more"></a>
<p>逻辑运算符其实没什么好说的，只是最近学习 python 这门语言的时候，才研究发现的一个小知识点。</p>
<h2 id="逻辑运算符有什么？"><a href="#逻辑运算符有什么？" class="headerlink" title="逻辑运算符有什么？"></a>逻辑运算符有什么？</h2><table>
<thead>
<tr>
<th style="text-align:center">关系运算符</th>
<th style="text-align:center">含义</th>
<th style="text-align:center">举例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">and</td>
<td style="text-align:center">与(全真才真)</td>
<td style="text-align:center">True and False == False</td>
</tr>
<tr>
<td style="text-align:center">or</td>
<td style="text-align:center">或(全假才假)</td>
<td style="text-align:center">True or False == True</td>
</tr>
<tr>
<td style="text-align:center">not</td>
<td style="text-align:center">非(真变假、假变真)</td>
<td style="text-align:center">not True == False</td>
</tr>
</tbody>
</table>
<h2 id="为什么123-and-456结果是456而123-or-456结果是123？"><a href="#为什么123-and-456结果是456而123-or-456结果是123？" class="headerlink" title="为什么123 and 456结果是456而123 or 456结果是123？"></a>为什么<code>123 and 456</code>结果是<code>456</code>而<code>123 or 456</code>结果是<code>123</code>？</h2><p><strong>and </strong>:</p>
<p>​    对于 and 首先计算第一个表达式，</p>
<p>​    如果第一个表达式为真，结果为第二个表达式的结果。</p>
<p>​    如果第一个表达式为假，返回假。</p>
<p><strong>or </strong>：</p>
<p>​    对于 or 首先计算第一个表达式，</p>
<p>​    如果第一个表达式为真，则返回真。</p>
<p>​    如果第一个表达式为假，则返回第二个表达式的结果    </p>
<p>所以，对于</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">123</span> <span class="keyword">and</span> <span class="number">456</span></div></pre></td></tr></table></figure>
<p>这行代码， 遵循非零为真的原则，第一个表达式为真。那么看第二个表达式，第二个表达式也大于零，所以结果为第二个表达式的结果。所以返回</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">456</span></div></pre></td></tr></table></figure>
<p>对于</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">123</span> <span class="keyword">or</span> <span class="number">456</span></div></pre></td></tr></table></figure>
<p>这行代码，第一个表达式非零，结果为第一个表达式的结果。</p>
<blockquote>
<p>Strictly speaking, the operands of the logical operators should be boolean expressions, but</p>
<p>Python is not very strict. Any nonzero number is interpreted as “true.”严格来讲，布尔运算符的运算数应该是布尔表达式， 但是Python并不严格。任何非0的数字都被解释成“真”。</p>
</blockquote>
<p>另外，因为 <code>123</code> 或者 <code>456</code> 这两个表达式，都不是逻辑运算，表达式的值就是他本身的值。所以最后得出这样的结果。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>and: </strong>从左到右计算表达式，若所有值为真，返回最后一个值。若存在假，返回第一个假值。</p>
<p><strong>or：</strong> 从左到右计算表达式，返回第一个为真的值。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从现在开始，开始了对 pyhton 这门语言的学习。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://CepheusSun.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://CepheusSun.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>SBAnimation a new Repository</title>
    <link href="https://CepheusSun.github.io/2017/01/28/SBAnimation%20a%20new%20Repository/"/>
    <id>https://CepheusSun.github.io/2017/01/28/SBAnimation a new Repository/</id>
    <published>2017-01-27T16:00:00.000Z</published>
    <updated>2017-02-22T15:47:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>看了时间，外面已经一直是在放着鞭炮声音。QQ 上收到大学同窗在美国发来的新春祝福，闲聊两句，深感在国外的科研狗的不容易。想到了昨天突然多想了一下，看到的一句话</p>
<blockquote>
<p>优秀的人太多，优秀的人也太优秀，我只要负责被惊艳就好了。</p>
</blockquote>
<p>这个世界优秀的人真是太多了，比你优秀的人又比你努力太多了。这两年深觉差距越来越大。突然有了一些懊恼。</p>
<p>借着这篇文字，写写这几天回成都之后的一些感悟。</p>
<a id="more"></a>
<p>一直想找几个人，做一些有趣的事情。回成都之前的两天，和朋友在 QQ 群里聊天，他发出来了一个不算复杂，但是还算不错的 UI 效果出来，讨论了一下，然后想着把我们做的一些有趣的效果 工具之类的东西都开源出来，放在一个 repository 里面，然后一起来维护这个东西。然后我就去 create 了一个 叫 SolarBee  的 organization 然后开始做起了这件事情。 然后把他写的东西拿出来，然后自己写了一个 demo 然后这个东西就搞出来了。</p>
<p>回成都的几天里面，逐渐把我自己写的一些东西放进来，然后慢慢的来丰富这个东西。五天了，几乎提交了去年一整年在 github 上面的代码量。完善代码，完善 demo 把各种仓库整合修改 balabala…. 痛并快乐着。</p>
<p>对了，昨天还参加了一个 python 的学习组织，正式开始“人生苦短，我用 python 了” ，激励着我开始更广泛的学习，还是因为看了一些书，看了一些文章，深深的感觉在计算机科学这一块，很厉害的人都是能够轻松的驾驭各种语言的人，还是希望自己多体验几门语言，能够在更高的角度去理解这件事情。虽然很惭愧，之前学的 java 已经忘的一干二净了。</p>
<p>后面还会更多的加入更多的东西在这个地方。不仅仅在 UI 这一方面，可能后面还会有更多方面的东西加入进来。希望自己的 2017 能够坚持下来，做这件自认为很酷的事情。</p>
<p>后面可能还会有一些计划什么的。这个可能年后很快就需要去完成。第一是，找工作。第二是，写一个 mac app 尝试一下新的领域。确实没有什么用处，只是希望方便这个东西的 contributer 更方便的把相关的资料上传到 Leancloud 里面。用这个来管理这个 demo 我感觉也是一件很 cool 的事情。当然，完成的时候，还是会把这些代码放在 GitHub 上面。</p>
<p>愿景。希望自己坚持写博客，能坚持开源。在什么时候能够就某个问题给出一套完整的解决方案。这也是我觉得的很酷的事情。另外，英语也要坚持的学下去。</p>
<p>这几天确实把自己都感动到了。每天都花很长的时间在这件事情上面。很充实，很开心。最重要的是，重新找到了对这件事情的热情。</p>
<p>上面说了那么多 <a href="https://github.com/SolarBee/SBAnimation">GitHub</a>地址还是贴出来。</p>
<p>最后，跳出舒适区很难，但这是我不得不做的事情。想了那么久 FP 也应该学起来了。</p>
<h3 id="SBAnimation"><a href="#SBAnimation" class="headerlink" title="SBAnimation"></a>SBAnimation</h3><p>SolarBee创建的一个关于一些动画和自定义有趣的View的合集的合集。</p>
<h4 id="1、仪表盘"><a href="#1、仪表盘" class="headerlink" title="1、仪表盘"></a>1、仪表盘</h4><p><img src="http://ojno1pj4x.bkt.clouddn.com/91B9BB1D47A45C3FD69A20FB5813C31F.jpg"></p>
<h4 id="2、购物车抛物线"><a href="#2、购物车抛物线" class="headerlink" title="2、购物车抛物线"></a>2、购物车抛物线</h4><p><img src="http://ojno1pj4x.bkt.clouddn.com/%E8%B4%AD%E7%89%A9%E8%BD%A6%E6%8A%9B%E7%89%A9%E7%BA%BF.gif"></p>
<h4 id="3、列表空数据展示"><a href="#3、列表空数据展示" class="headerlink" title="3、列表空数据展示"></a>3、列表空数据展示</h4><p>这个工具支持 CocoaPods 可见源作者 github 仓库 <a href="https://github.com/CepheusSun/EmptyDataKit">地址</a></p>
<p><img src="http://ojno1pj4x.bkt.clouddn.com/EmptyDataKit.gif"></p>
<h4 id="4、仿照淘宝商品详情加入购物车转场动画"><a href="#4、仿照淘宝商品详情加入购物车转场动画" class="headerlink" title="4、仿照淘宝商品详情加入购物车转场动画"></a>4、仿照淘宝商品详情加入购物车转场动画</h4><p>使用说明在作者 <a href="https://github.com/CepheusSun/SYTaoBaoAnimation">github</a></p>
<p><img src="http://ojno1pj4x.bkt.clouddn.com/ProgramerSunnyDemo.gif"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看了时间，外面已经一直是在放着鞭炮声音。QQ 上收到大学同窗在美国发来的新春祝福，闲聊两句，深感在国外的科研狗的不容易。想到了昨天突然多想了一下，看到的一句话&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;优秀的人太多，优秀的人也太优秀，我只要负责被惊艳就好了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个世界优秀的人真是太多了，比你优秀的人又比你努力太多了。这两年深觉差距越来越大。突然有了一些懊恼。&lt;/p&gt;
&lt;p&gt;借着这篇文字，写写这几天回成都之后的一些感悟。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://CepheusSun.github.io/categories/iOS/"/>
    
    
      <category term="杂记" scheme="https://CepheusSun.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
      <category term="iOS" scheme="https://CepheusSun.github.io/tags/iOS/"/>
    
      <category term="OpenSource" scheme="https://CepheusSun.github.io/tags/OpenSource/"/>
    
  </entry>
  
  <entry>
    <title>CocoaPods小知识集锦</title>
    <link href="https://CepheusSun.github.io/2017/01/20/CocoaPods%E5%B0%8F%E7%9F%A5%E8%AF%86%E9%9B%86%E9%94%A6/"/>
    <id>https://CepheusSun.github.io/2017/01/20/CocoaPods小知识集锦/</id>
    <published>2017-01-19T16:00:00.000Z</published>
    <updated>2017-01-20T06:09:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>在使用CocoaPods 的过程中遇到的问题。整理性的一遍文章，没有多少价值。</p>
<a id="more"></a>
<h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">✘ sunyang@sunny-mbp  ~<span class="regexp">/desktop/ios</span>  pod install</div><div class="line">[!] No <span class="string">`Podfile' found in the project directory.</span></div></pre></td></tr></table></figure>
<p>解决方案</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">✘ sunyang@sunny-mbp  ~<span class="regexp">/desktop/ios</span>   pod repo remove master</div><div class="line">Removing spec repo <span class="string">`master`</span></div><div class="line"></div><div class="line">✘ sunyang@sunny-mbp  ~<span class="regexp">/desktop/ios</span>  pod setup</div><div class="line">Setting up CocoaPods master repo</div><div class="line"></div><div class="line">✘ sunyang@sunny-mbp  ~<span class="regexp">/desktop/ios</span>  pod install</div><div class="line">Pod installation complete! There are <span class="number">3</span> dependencies from the Podfile <span class="keyword">and</span> <span class="number">4</span> total pods installed.</div></pre></td></tr></table></figure>
<p>原因</p>
<p>这是因为 CocoaPods 基于 GitHub 的网页编辑器的 <code>libgit2</code>的一个 bug。 正式这个 bug 导致了 git 仓库错误。</p>
<p>唯一的解决办法就是像上面一样。 </p>
<p><a href="http://blog.cocoapods.org/Repairing-Our-Broken-Specs-Repository/">相关链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用CocoaPods 的过程中遇到的问题。整理性的一遍文章，没有多少价值。&lt;/p&gt;
    
    </summary>
    
      <category term="CocoaPods" scheme="https://CepheusSun.github.io/categories/CocoaPods/"/>
    
    
      <category term="CocoaPods" scheme="https://CepheusSun.github.io/tags/CocoaPods/"/>
    
  </entry>
  
  <entry>
    <title>Swift 和 OC 混合编程</title>
    <link href="https://CepheusSun.github.io/2017/01/05/Swift%E5%92%8COC%E6%B7%B7%E5%90%88%E7%BC%96%E7%A8%8B/"/>
    <id>https://CepheusSun.github.io/2017/01/05/Swift和OC混合编程/</id>
    <published>2017-01-04T16:00:00.000Z</published>
    <updated>2017-01-10T07:49:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>自己学了一段时间的 Swift ，从最开始看 Swift 2.3 的《写给大忙人看的Swift》,在 Xcode8 下很多示例代码都不能好好玩下去，然后看到了 SwiftGG 翻译组针对 Swift 官方文档的中文译本。算是正式开始了对 Swift 的学习。对 Swift 的喜爱不仅仅是因为他是新的语言，是 iOS 开发未来的趋势。而且还有一个很重要的一点单单就是因为 Swift 代码看起来就是非常漂亮啊。</p>
<a id="more"></a>
<h2 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h2><p>对于Swift的学习根本还是一种还没有正式入门的感觉。所以没有办法像 OC 那样驾轻就熟，很多语法都还没有完全掌握，因为时间原因，也因为最近确实发生了一些事情。导致最近学习的热情比较的低，而且年关在即，很多工作上生活上的事情都需要认真梳理一遍。减少了在学习上的努力，是在是罪大恶极。技术圈在这个时候也发生了一些大事情。微信开源的组件 <a href="https://github.com/Tencent/mars#mars_cn">Mars</a>  滴滴和手Q相继 po 出了自己的动态化解决方案。下一年应该会是动态化更广泛应用的一年吧，很多 app 动态化将成为标准配置。但是唯一比较遗憾的是，这些解决方案还是基于 OC 的。但是这也并不妨碍我学习 Swift 的激情，毕竟一切 app 的生杀大权都掌握在苹果手中的，而且，苹果还有一个并不开放的动态库。</p>
<p>简单的学了一些 Swift 的相关东西，就开始手痒想要实践一下了。本来打算使用 Swift 重新写一个项目，但是苦于需求一直源源不断，重写压力也是非常的大。还有一个最大的原因，对 Swift 的掌握还没有真正算是一个 Swift 开发者。实在没有能力将原有项目中的组件转化为 Swift ，所以还是决定在原来的代码中，尝试将一些类用 Swift 来表达。</p>
<blockquote>
<p>这也解决了在 Swift 项目中，优秀的第三方库确实没有 OC 丰富，而作为现在非常热门的开发语言，很多比较好的效果什么的也只有 Swift 版本这样的问题。</p>
</blockquote>
<p>其实无论如何，其实都是 OC 和 Swift 之间的交互。</p>
<h2 id="在-Swift-中使用-OC-类"><a href="#在-Swift-中使用-OC-类" class="headerlink" title="在 Swift 中使用 OC 类"></a>在 Swift 中使用 OC 类</h2><p>如果在Swift类中使用OC的代码，那么就需要使用桥接文件了。</p>
<p>这是我们在平常的OC项目中创建一个新的类</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/34DF1870-F7E8-4522-B715-F1ACAA35DFEA.png" /></p>
<p>点击按钮 <code>Create Bridging Header</code> 。</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/CC24943D-0A36-4095-9EFF-64DBF9D96193.png" /></p>
<p>就会生成一个<code>项目名-Bridging-Header.h</code>文件，这其实貌似就是一个很平常的<code>.h</code>文件。</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/7132C9EA-C1A4-4AE9-BC83-F200006A95B1.png"></p>
<p>然后就只需要像 Import 一个普通类一样把你需要在 Swift 中使用的所有 OC 类在这个<code>.h</code> 文件中添加进来，然后就能够在 Swift 代码中正常的使用 OC 的方法了。</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/B4E7A1D8-F202-4BE8-8CDF-1A3221F42571.png"></p>
<p>这里的<code>MUserInfo</code>其实就是我项目中的一个单例类了。这里要注意的是，虽然使用的是 OC 的类，但是使用的时候依然是使用 Swift 的语法。这个也没什么需要注意的。</p>
<blockquote>
<p>需要注意的是：在 Swift 类中使用的 OC 的方法，还是需要使用 Swift 的语法。</p>
</blockquote>
<p>刚刚说的导入，就是直接在刚刚说的桥接文件中写入如下代码。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#import &quot;MUserInfo.h&quot;</div></pre></td></tr></table></figure>
<h2 id="在-OC-中使用-Swift-类"><a href="#在-OC-中使用-Swift-类" class="headerlink" title="在 OC 中使用 Swift 类"></a>在 OC 中使用 Swift 类</h2><p>这个也是非常的简单，</p>
<p>在<code>TARGETS</code>- <code>Build Settings</code>中选择<code>Swift Complier-General</code></p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/0BA5113B-03E2-40EC-81D0-A55903005F19.png" /></p>
<p>然后分别将<code>Install Objective-C Compatibility Header</code> 和 <code>Objective-C Generated Interface Header Name</code> 选项 改为 <code>YES</code> 和 <code>项目名-Swift.h</code></p>
<p>然后在使用Swift类的时候，只需要在使用的时候像导入头文件一样倒入 <code>项目名-Swift.h</code>这个文件。然后就可以愉快的使用了。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>没有解语，期待下次分享！</p>
<p>## </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自己学了一段时间的 Swift ，从最开始看 Swift 2.3 的《写给大忙人看的Swift》,在 Xcode8 下很多示例代码都不能好好玩下去，然后看到了 SwiftGG 翻译组针对 Swift 官方文档的中文译本。算是正式开始了对 Swift 的学习。对 Swift 的喜爱不仅仅是因为他是新的语言，是 iOS 开发未来的趋势。而且还有一个很重要的一点单单就是因为 Swift 代码看起来就是非常漂亮啊。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://CepheusSun.github.io/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://CepheusSun.github.io/tags/iOS/"/>
    
      <category term="Swift" scheme="https://CepheusSun.github.io/tags/Swift/"/>
    
      <category term="Objective-C" scheme="https://CepheusSun.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>2016写在年关的话</title>
    <link href="https://CepheusSun.github.io/2016/12/26/2016%E5%86%99%E5%9C%A8%E5%B9%B4%E5%85%B3%E7%9A%84%E8%AF%9D/"/>
    <id>https://CepheusSun.github.io/2016/12/26/2016写在年关的话/</id>
    <published>2016-12-25T16:00:00.000Z</published>
    <updated>2016-12-26T05:46:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>距离下一个年头也只有几张日历纸了，还是抱着一个比较好的态度来回忆一些这即将过去的2016. 从大学开始，每一年都有着一个这样的习惯，总要在每学期结束，每一年结束的时候，给自己写下点什么。开通了新的blog， 总还是要在这里留下心的印记。</p>
<a id="more"></a>
<p>写了那么多年，着实还是没有训练出来对文字驾轻就熟的能力，写出来的东西也往往还是一坨狗屎。让自己也不忍心重新回头再来看下去。每一年也就是这么简单的这么写着。</p>
<p>这一年总结下来，在技术上还是有了一些沉淀，虽然没有什么十足的进步。但，终于能够有这么一段比较长的时间，纯粹的去研究一些这些东西。五月份以来的这么一段时间里，我还是心怀感激的，有了这么个不紧不慢，也有足够多时间了足够多的空间来折腾各种好玩的东西。也开始努力的在质量上控制整个项目。也有那么几个同事愿意花时间了精力去折腾新鲜的东西。确实也是件不错的事情。</p>
<p>这么长的时间以来，感觉在技术生活上还是蛮有趣的，先是在微博上加入了一些技术比较活跃的群，然后又转到趣直播这样的平台下，跟大牛们更近距离的接触，体会到了技术世界的无边无际。再后来因为bang用上了微信读书，不多不少还是读过了一些书，更技术无关。到最后应该能凑够个50多个小时阅读时长吧。阅读总是能让人安静下来的。</p>
<p>之前学过一篇文章来记录这一年看过的书，到最后，应该还是能再加上那么一本两本。每天能够抽出那么一个把小时来阅读，也是一件值得坚持的事情。程序员还是应该花一些时间再代码以外的事情上。</p>
<p>然后不知道什么契机，下载了一个英语流利说。还是认为这是一个非常优秀的 app ，确实在我身上还是达到了他们的口号：“让你忍不住，开口说英语”, 花了100块钱参加他们的课程，每天花一些时间来学习英语，每天哇啦哇啦的说着并不流利的英语，也能切切实实的感受到自己的成长。学习英语这件事情，想来也是值得坚持的事情，多么希望一年以后再次写这样的文字的时候，能够很开心的说，这件事情，我坚持了整整一年。</p>
<p>除了这两件事情，年初或者年初的时候，还是读过一些作为程序员，应该读的一些书的。这一年开始了，并不太深入的对 iOS 底层的探索。因为最初对动态化近乎痴迷的兴趣，在看到 JSPatch 的时候，立马就开始撸Demo开干，在线上出了 bug 之后，瞬间把 bug 解决掉的之后，JSPatch 很快的被集成在了公司所有的 iOS app 中，在公司测试力度不足的情况下，也能够放心的进行开发。</p>
<p>再后来因为对 Javascript 知识的刚需，简单的学了一些 HTML 和 CSS 之类的东西，因为集成成本高，不能立马在公司项目中使用等原因，放弃了对 React Native 的探索，知道最近阿里又开源了 Weex ， 对动态化的兴趣，驱使着我在接下来的时间里，或多或少的都会花点时间去研究这些东西。对 Weex 的兴趣应该还是大于 RN 的， 比较起来，还是愿意使用国人研发的 Vue ，前端的世界果然是深似海。在海边散步，也确实折腾了我很多的精力。但是看着新出来的名词 PWA 还是希望对这一块有一些了解。对了，还有微信的小程序。</p>
<p>对技术的追求在这一年还是让我非常的应接不暇。作为客户端开发，在今年初期的时候便对动态化、组件化产生了比较大的兴趣，以至于在博客刚刚建立的时候，就写下来了对动态化和组件化时分着迷这样的文字(后来还是改了)， 相比起来，动态化算是简单的能实现了吧，一直就通过各种渠道能够猜出来 sunny 孙源在滴滴正在进行的项目也是更动态化相关的内容，在 DynamicCocoa 被公布出来的时候，还是被这样的大神折服了，sunny 对底层，对编译器的研究确实是让人难以望其项背的。到后来知道手Q很久以前就有一套类似的框架的事情，最后还是认识到了一个残酷的现实</p>
<blockquote>
<p>大厂对于小公司的碾压不仅仅是运营能力上的，他们对于小厂在技术上的碾压，对于我们来说才是更可怕的。不管你有多么好的 idea 等你实现下来并且能够完美运行的时候，你觉得十分牛逼的事情，确实人家玩剩下的。</p>
</blockquote>
<p>对新的东西的追求还是让我在这一年收集到了各种书，也驱使着我我去学习英语。也驱使着我去学习了可能已经无限趋近稳定的 Swift 3.0 ，开始看了一些现在估计也完全没有入门的前端三件套，balabala….</p>
<p>接着再说一下组件化吧，这一年确实在这一块只做了很少的工作，简单的吧一些组件网络库什么的拆分出来，使用  CocoaPods 来进行管理，看了一些相关的文章，跟一些搞过这个朋友交流过，算是积累了一些知识储备，但是在这样的时间，面对年底还是比较多的需求，实践这件事情，可能还是需要往后推一下了。</p>
<p>然后这一年从纯代码，转到了Xib ，研究了一下 iconfont 然后貌似也记不清楚再搞过什么了。只是读了写文章，看了点源码，重构了下项目，做了些需求，改了些bug，如是而已…</p>
<p>这一年，绕了一大圈，有因为一些原因跑到重庆了，再次回到这个城市生活，确实没有感受到太多的让我心里有什么波动的东西，跟往常一样，跟去到曾经到过的任何一个城市一样…只是喜欢上了这个季节的这里随处可见的黄叶。</p>
<p>外婆离开也到了第三个年头了，是不是还是会思念那个胖胖的可爱的人。生活还是继续向前走着的，毕业也三年了，还是不知道接下来应该怎样。或许，就是这样吧。</p>
<p>车也把坐垫全部换成皮的了，也算修正了买车时犯下的错误。</p>
<p>做了一丢丢有关技术管理的工作，做的不好。只能继续努力了。</p>
<p>好奇心还是那么重，看到什么都想去尝试一下，所以入门了很多东西，了解很多东西，却没能深入，算是今年最大的遗憾吧。</p>
<p>关于年初做的不好的一些事情，等真正再长大一些了再来梳理吧，确实对一些事情还是没那么精通，而且那些也算是去年的事情了吧…</p>
<p>很多想做，却没能做的事情，只能在下一个年头继续了，努力做一个可爱的人吧…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;距离下一个年头也只有几张日历纸了，还是抱着一个比较好的态度来回忆一些这即将过去的2016. 从大学开始，每一年都有着一个这样的习惯，总要在每学期结束，每一年结束的时候，给自己写下点什么。开通了新的blog， 总还是要在这里留下心的印记。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔杂记" scheme="https://CepheusSun.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="杂记" scheme="https://CepheusSun.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
</feed>
