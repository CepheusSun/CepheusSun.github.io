<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[RxSwift Safety Manual 📚]]></title>
      <url>https://CepheusSun.github.io/2017/05/07/RxSwift%20Safety%20Manual/</url>
      <content type="html"><![CDATA[<p>RxSwift 提供了大量非常好用的工具, 让写代码更爽, 但是他也可能给你带来一些头疼的地方, 也可能是bug😱。 用了三个月之后我觉得我应该也可以给出一些建议来避免一些问题。</p>
<h3 id="Side-Effects"><a href="#Side-Effects" class="headerlink" title="Side Effects"></a>Side Effects</h3><p>在计算机科学中副作用这个词可能没那么容易理解, 因为这是一个非常宽泛的内容。在 <a href="http://softwareengineering.stackexchange.com/questions/40297/what-is-a-side-effect">Stackoverflow</a> 有一些比较好的讨论。</p>
<p>简单点说, 一个函数/闭包/…如果他们改变了 app 的状态, 都有可能带来一些副作用。在下面的例子中：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    <span class="comment">// 这样写没有副作用</span></div><div class="line">    observer.onNext(<span class="number">1</span>)</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> observableWithSideEffect = <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    <span class="comment">// 这里就会有副作用: 这个 closure 改变了 counter 的值</span></div><div class="line">    counter = counter + <span class="number">1</span></div><div class="line">    observer.onNext(counter)</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为什么在 RxSwift 中这个很重要呢? 因为对于冷信号❄️来说。<strong>每次被订阅他都会执行一下里面的任务</strong></p>
<p>我们两次订阅这个 <code>observableWithSideEffect</code>: </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">observableWithSideEffect</div><div class="line">    .subscribe(onNext: &#123; (counter) <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(counter)</div><div class="line">    &#125;).addDisposableTo(disposeBag)</div><div class="line"></div><div class="line">observableWithSideEffect</div><div class="line">    .subscribe(onNext: &#123; (counter) <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(counter)</div><div class="line">    &#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>我们可能希望他输出的是两个2.但是事实上它会输出2，3. 因为每次订阅都会分别执行, 所以在闭包里面的代码会被执行两次。<strong>所以 counter + 1 会执行两次</strong></p>
<p>也就是说, 如果你在这里面房里两个网络请求。<strong>它会发出两次请求</strong></p>
<p>我们怎么来解决这个问题呢？ 把这个冷信号转换成热信号💡。 使用 <strong>publish</strong> connect 还有 refCount 就可以了,这是<a href="http://www.tailec.com/blog/understanding-publish-connect-refcount-share">完整细节</a>。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> counter = <span class="number">1</span></div><div class="line"><span class="keyword">let</span> observableWithSideEffect = <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    counter = counter + <span class="number">1</span></div><div class="line">    observer.onNext(counter)</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;.publish()</div><div class="line"><span class="comment">// publish returns an observable with a shared subscription(hot).</span></div><div class="line"><span class="comment">// It's not active yet</span></div><div class="line"></div><div class="line">observableWithSideEffect</div><div class="line">    .subscribe(onNext: &#123; (counter) <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(counter)</div><div class="line">    &#125;).addDisposableTo(disposeBag)</div><div class="line"></div><div class="line">observableWithSideEffect</div><div class="line">    .connect()</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>这会输出 2，2</p>
<p>大多数情况下这就够了。但是还有一个更高级的 <em>shareReplay</em> 操作符。他使用了 <code>refCont</code> 操作符合 <code>replay</code>. <code>refCount</code> 也是一种 <code>connect</code> 但是它是自动管理的。他会在第一次订阅开始的时候开始。 replay 会把一些元素发送给那些 “迟到了” 的订阅者/</p>
<a id="more"></a>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> counter = <span class="number">1</span></div><div class="line"><span class="keyword">let</span> observableWithSideEffect = <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    counter = counter + <span class="number">1</span></div><div class="line">    observer.onNext(counter)</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">    &#125;.shareReplay(<span class="number">1</span>)</div><div class="line"></div><div class="line">observableWithSideEffect</div><div class="line">    .subscribe(onNext: &#123; (counter) <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(counter)</div><div class="line">    &#125;).addDisposableTo(disposeBag)</div><div class="line"></div><div class="line">observableWithSideEffect</div><div class="line">    .subscribe(onNext: &#123; (counter) <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(counter)</div><div class="line">    &#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<h3 id="Main-Queue"><a href="#Main-Queue" class="headerlink" title="Main Queue"></a>Main Queue</h3><p>当订阅行为是发生在 viewcontroller 上, 然后你不知道订阅行为是在那个线程中进行的。在刷新 UI 的时候确定这是在主线程中进行的。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">observableWithSideEffect</div><div class="line">    .observeOn(<span class="type">MainScheduler</span>.instance)</div><div class="line">    .subscribe(onNext: &#123; (counter) <span class="keyword">in</span></div><div class="line">        <span class="comment">// update UI</span></div><div class="line">    &#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<h3 id="Error-Events"><a href="#Error-Events" class="headerlink" title="Error Events"></a>Error Events</h3><p>如果你把好几个 <code>Observerable</code> 合并在了一起。如果其中有一个发生了错误。所有的 <code>Observerable</code> 都会结束。如果最开始是UI的话, 他就会停止响应。你应该好好的设计你的代码, 考虑好如果发生了 <code>complete</code> 或者 <code>error</code> 会发生什么。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">viewModel.importantText</div><div class="line">    .bindTo(myImportantLabel.rx.text)</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>如果 viewModel.importantText 因为什么原因发送出来一个error事件。这个 <code>bingding</code> 订阅也会结束。</p>
<p>如果你想避免这种情况的发生你可以使用 <strong>catchErrorJustReturn</strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">viewModel.importantText</div><div class="line">    .catchErrorJustReturn(<span class="string">"default text"</span>)</div><div class="line">    .bind(to: lable.rx.text)</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<h3 id="Driver"><a href="#Driver" class="headerlink" title="Driver"></a>Driver</h3><p><strong>Driver</strong> 是一个能够 <code>observeOn</code>、<code>catchErrorJustReturn</code>、<code>shareReplay</code> <strong>Observable</strong>.如果你想在viewModel中暴露一个安全的API。使用 <strong>Driver</strong> 是更好的做法。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">viewModel.importantText</div><div class="line">    .asDriver(onErrorJustReturn: <span class="string">"default text"</span>)</div><div class="line">    .drive(lable.rx.text)</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<h3 id="Reference-Cycles"><a href="#Reference-Cycles" class="headerlink" title="Reference Cycles"></a>Reference Cycles</h3><p>防止内存泄漏需要在话很多心思在避免引用循环上，当我们使用在订阅闭包中使用外部变量的时候。这个变量会被捕获为一个强引用。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">viewModel.priceString</div><div class="line">    .subscribe(onNext: &#123;(text) <span class="keyword">in</span></div><div class="line">        <span class="keyword">self</span>.priceLabel.text = text</div><div class="line">    &#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>这个 vc 强引用了 viewModel。现在这个 viewmodel 又因为在这个闭包中强引用了这个 vc。这就带来了循环引用。 <a href="https://krakendev.io/blog/weak-and-unowned-references-in-swift">“WEAK, STRONG, UNOWNED, OH MY!” - A GUIDE TO REFERENCES IN SWIFT</a></p>
<p>下面是解决办法</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">viewModel.priceString</div><div class="line">    .subscribe(onNext: &#123;[<span class="keyword">unowned</span> <span class="keyword">self</span>] (text) <span class="keyword">in</span></div><div class="line">        <span class="keyword">self</span>.priceLabel.text = text</div><div class="line">    &#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>使用 <strong>[unowned self]</strong> 语句之后就不用去考虑这个问题了🤗。</p>
<p>self 并不是唯一一个你需要担心的东西。你可能需要考虑所有你在在闭包中捕获的变量。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// out side the view controller</span></div><div class="line">        viewModel.priceString</div><div class="line">            .subscribe(onNext: &#123;[<span class="keyword">weak</span> viewController] (text) <span class="keyword">in</span></div><div class="line">                viewController?.priceLabel.text = text</div><div class="line">            &#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>这可能会比较复杂。这也是我<strong>强烈建议你尽量让你的闭包很短</strong>的原因。如果一个闭包超过了3、4行代码的话。可以考虑把这部分逻辑放在一个新的方法里面去。这样的话，这些依赖关系就会变的很明确了。你才能够很好的去考虑强弱应用的问题。</p>
<h3 id="Managing-your-subscriptions"><a href="#Managing-your-subscriptions" class="headerlink" title="Managing your subscriptions"></a>Managing your subscriptions</h3><p>记住要把你不需要订阅的订阅清楚掉。我曾经遇到过一次, 由于我没有及时的清除掉我的订阅, 当 <code>cell</code> 被重用的时候, 就会创建一个新的订阅, 导致了非常壮观的 <strong>bug</strong>。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> reuseBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="comment">// Called each time a cell is reused</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">configCell</span><span class="params">()</span></span> &#123;</div><div class="line">    viewModel</div><div class="line">        .subscribe(onNext: &#123; [<span class="keyword">unowned</span> <span class="keyword">self</span>] (element) <span class="keyword">in</span></div><div class="line">            <span class="keyword">self</span>.sendOpenNewDetailsScreen()</div><div class="line">        &#125;)</div><div class="line">&#125;</div><div class="line"><span class="comment">// Creating a new bag for each cell</span></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">prepareForReuse</span><span class="params">()</span></span> &#123;</div><div class="line">    reuseBag = <span class="type">DisposeBag</span>()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>RxSwift 是非常复杂的东西。但是如果你设定好了自己的一套规则, 然后在编码的时候坚持这个规则。这也没什么好难受的😇。 在使用 RxSwift 做的时候在每一层中考虑清楚你需要把哪些 API 暴露出来。这也能帮助你很快的发现 bug。</p>
<p><a href="http://swiftpearls.com/RxSwift-Safety-Manual.html">原文地址</a></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>我是一名来自中国的 iOS 程序员, 对技术有着浓厚的兴趣, 在学习的过程中, 发现了很多来自国外的优秀博客。为了更好的学习这些文章, 产生了将这些文章翻译成中文的想法。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxSwift For Dummies 🐣 Part3]]></title>
      <url>https://CepheusSun.github.io/2017/05/07/RxSwift%20For%20Dummies%20Part3/</url>
      <content type="html"><![CDATA[<p>好了, 接下来是第三个部分。<strong>Subjects</strong></p>
<p>学了之前内容. 我们可能已经发现了。之前学习的内容都是 <code>Observables</code> 输出事件的部分。我们可以订阅他, 就能知道他输出的事件了。但是我们还不能改变他。</p>
<p><strong>Subject</strong> 也是一个 <code>Observable</code> 但是他是能够同时输入和输出的。也就是说, 我们可以动态(强制)的在一个序列中发出信号。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> subject = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</div><div class="line"><span class="comment">// 可以直接转换，因为他也是一个 `Observable`</span></div><div class="line"><span class="keyword">let</span> observable: <span class="type">Observable</span>&lt;<span class="type">String</span>&gt; = subject</div><div class="line">observable.subscribe(onNext: &#123; (text) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(text)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div><div class="line"><span class="comment">// 只要你想发出一个新的事件, 就可以用 onNext 方法 </span></div><div class="line">subject.onNext(<span class="string">"Hey!"</span>)</div><div class="line">subject.onNext(<span class="string">"I'm back!"</span>)</div></pre></td></tr></table></figure>
<p><strong>onNext</strong> 是一个输出事件的方法。最后控制台会输出</p>
<blockquote>
<p>“Hey!”<br>“I’m back!”</p>
</blockquote>
<p><code>Subject</code> 到底有什么用呢? 为了很轻松的将 Rxswift 中声明式的世界和我们平常的世界连接起来。让我们在需要写实现式的代码的时候更 Rx </p>
<p>在一个纯正的 Rx 的世界里。当你需要有一个更完美的流的时候, 不用去管这个 <code>Observable</code> 是怎么实现的。这个东西我会另外的解释。反正, 如果你需要， 大胆的用吧。</p>
<p>上面式关于 Subject 最基本的内容。接下来我们学习一下怎么更好的使用 <strong>Subject</strong></p>
<h3 id="Hot🔥-vs-Cold❄️"><a href="#Hot🔥-vs-Cold❄️" class="headerlink" title="Hot🔥 vs Cold❄️"></a>Hot🔥 vs Cold❄️</h3><p>在第一篇文章中就已经提到过了热信号🔥和冷信号❄️。今天我们在深入的了解一点吧，因为 <strong>Subject</strong> 实际上是我们第一次接触到真正的热信号。</p>
<p>我们一定确定了，当我们使用 <strong>create</strong> 创建一个 <strong>Observable</strong> 的时候, 由于没有人订阅他，所以她是不会发送消息的。只有被 <strong>subscribe</strong>(订阅)之后才会开始发送消息出来。这就是我们叫它为冷信号❄️的原因。如果很不幸你忘了这个知识点。你可以回到第一篇文章去看看。热信号🔥 就是那种即使没有被订阅也会发出消息的信号, 这也是 <code>subject</code> 做的事情。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> subject = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</div><div class="line"><span class="keyword">let</span> observable: <span class="type">Observable</span>&lt;<span class="type">String</span>&gt; = subject</div><div class="line"><span class="comment">// 这个信号还没有被订阅, 所以这个值不回被接受到</span></div><div class="line">subject.onNext(<span class="string">"Am I too early for the party?"</span>)</div><div class="line"></div><div class="line">observable</div><div class="line">    .subscribe(onNext: &#123; (text) <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(text)</div><div class="line">    &#125;).addDisposableTo(disposeBag)</div><div class="line"><span class="comment">// 这个值发出来的时候已经有一个订阅者了, 所以这个值会打印出来</span></div><div class="line">subject.onNext(<span class="string">"🎉🎉🎉"</span>)</div></pre></td></tr></table></figure>
<p>很简单直接吧。如果在第一篇中你理解了冷信号的话, 理解热信号也是很自然的事情。</p>
<h3 id="Subject-Types"><a href="#Subject-Types" class="headerlink" title="Subject Types"></a>Subject Types</h3><p>常用的 <code>Subject</code> 有三种。 他们其实都差不多, 唯一的区别就是: 在订阅之前, 它会干什么。</p>
<a id="more"></a>
<h4 id="Publish-Subject"><a href="#Publish-Subject" class="headerlink" title="Publish Subject"></a>Publish Subject</h4><p>在上面的例子中已经说到了。 <strong>PublishSubject</strong> 会忽略掉在订阅之前发出来的信号。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> subject = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</div><div class="line"><span class="keyword">let</span> observable: <span class="type">Observable</span>&lt;<span class="type">String</span>&gt; = subject</div><div class="line">subject.onNext(<span class="string">"Ignored..."</span>)</div><div class="line">observable.subscribe(onNext: &#123; (text) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(text)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div><div class="line">subject.onNext(<span class="string">"Printed!"</span>)</div></pre></td></tr></table></figure>
<p>当你只关注你订阅之后发生了什么的时候, 就可以使用 <code>PublishSubject</code></p>
<h4 id="Replay-Subjects"><a href="#Replay-Subjects" class="headerlink" title="Replay Subjects"></a>Replay Subjects</h4><p><strong>ReplaySubject</strong> 会将最后 n 个值发出来, 即使是订阅发生之前的值。 这个 n 个值被被放在一个环从区里面。在这个例子中会缓有 3 个值被保留。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> subject = <span class="type">ReplaySubject</span>&lt;<span class="type">String</span>&gt;.create(bufferSize: <span class="number">3</span>)</div><div class="line"><span class="keyword">let</span> observable: <span class="type">Observable</span>&lt;<span class="type">String</span>&gt; = subject</div><div class="line"></div><div class="line">subject.onNext(<span class="string">"Not printed!"</span>)</div><div class="line">subject.onNext(<span class="string">"Printed"</span>)</div><div class="line">subject.onNext(<span class="string">"Printed!"</span>)</div><div class="line">subject.onNext(<span class="string">"Printed!"</span>)</div><div class="line"></div><div class="line">observable.subscribe(onNext: &#123; (text) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(text)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div><div class="line">subject .onNext(<span class="string">"Printed!"</span>)</div></pre></td></tr></table></figure>
<p>当我们需要知道订阅之前发生了什么的时候, 我们就需要使用 <code>ReplaySubject</code> 了。</p>
<h4 id="Behavior-Subject"><a href="#Behavior-Subject" class="headerlink" title="Behavior Subject"></a>Behavior Subject</h4><p><strong>BehaviorSubject</strong> 只会重复最后一个值。 更其他的 Subject 的同， 他在创建的时候就需要给定一个初始值。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> subject = <span class="type">BehaviorSubject</span>&lt;<span class="type">String</span>&gt;(value: <span class="string">"Initial value"</span>)</div><div class="line"><span class="keyword">let</span> observable: <span class="type">Observable</span>&lt;<span class="type">String</span>&gt; = subject</div><div class="line"></div><div class="line">subject.onNext(<span class="string">"Not printed!"</span>)</div><div class="line">subject.onNext(<span class="string">"Not printed!"</span>)</div><div class="line">subject.onNext(<span class="string">"Printed!"</span>)</div><div class="line"></div><div class="line">observable.subscribe(onNext: &#123; (text) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(text)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div><div class="line">subject.onNext(<span class="string">"Printed!"</span>)</div></pre></td></tr></table></figure>
<p>当你只需要知道最后一个值的时候。就需要使用 <code>BehaviorSubject</code></p>
<h3 id="Binding"><a href="#Binding" class="headerlink" title="Binding"></a>Binding</h3><p>你可以把一个 <code>Observable</code> 和 <code>Subject</code> 绑定到一起。也就是说可以让这个 <code>Observable</code> 将它的序列里的所有值都发送给这个 <code>Subject</code></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> subject = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</div><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.just(<span class="string">"I'm being passed around 😲"</span>)</div><div class="line">subject.subscribe(onNext: &#123; (text) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(text)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div><div class="line"></div><div class="line">observable.subscribe &#123; (event) <span class="keyword">in</span></div><div class="line">    subject.on(event)</div><div class="line">&#125;.addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>有一个语法糖来简化这些代码。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> subject = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</div><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.just(<span class="string">"I'm being passed around 😲"</span>)</div><div class="line">subject.subscribe(onNext: &#123; (text) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(text)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div><div class="line"></div><div class="line">observable.bind(to: subject).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>输出</p>
<blockquote>
<p>I’m being passed around 😲</p>
</blockquote>
<p><strong>Warning</strong></p>
<p>Binding 不仅仅会传递值, 他也会把完成和错误都传递过来。这种情况下这个 <code>Subject</code> 就会被释放。</p>
<h3 id="Quick-Example"><a href="#Quick-Example" class="headerlink" title="Quick Example"></a>Quick Example</h3><p>还是把第一篇文章中的 Demo 稍微修改一下吧。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Foundation</div><div class="line"><span class="keyword">import</span> RxCocoa</div><div class="line"><span class="keyword">import</span> RxSwift</div><div class="line"></div><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">GoogleModel</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> googleString = <span class="type">BehaviorSubject</span>&lt;<span class="type">String</span>&gt;(value: <span class="string">""</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">fetchNetString</span><span class="params">()</span></span>  &#123;</div><div class="line">        <span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">            <span class="keyword">let</span> session = <span class="type">URLSession</span>.shared</div><div class="line">            <span class="keyword">let</span> task = session.dataTask(with: <span class="type">URL</span>(string: <span class="string">"https://www.google.com"</span>)!, completionHandler: &#123; (data, response, error) <span class="keyword">in</span></div><div class="line">                </div><div class="line">                <span class="type">DispatchQueue</span>.main.async &#123;</div><div class="line">                    <span class="keyword">if</span> <span class="keyword">let</span> err = error &#123;</div><div class="line">                        observer.onError(err)</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        <span class="keyword">let</span> googleString = <span class="type">NSString</span>(data: data!, encoding: <span class="number">1</span>) <span class="keyword">as</span> <span class="type">String</span>?</div><div class="line">                        </div><div class="line">                        observer.onNext(googleString!)</div><div class="line">                        observer.onCompleted()</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">            task.resume()</div><div class="line">            <span class="keyword">return</span> <span class="type">Disposables</span>.create&#123;</div><div class="line">                task.cancel()</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">// Bind the observable to the subject</span></div><div class="line">        observable.bind(to: googleString).addDisposableTo(disposeBag)</div><div class="line">    &#125;</div><div class="line">&#125;        </div><div class="line"><span class="comment">// Bind the observable to the subject</span></div><div class="line">observable.bind(to: googleString).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>可以看到，在这个例子中，我们有一个视图模型将 <code>googleString</code> 这个 <code>subject</code> 暴露出来。让 <code>ViewController</code> 能够订阅。我们将这个 <code>observable</code> 绑定到这个 <code>subject</code> 上, 这样我们就可以在网络请求有结果的时候, 立马将请求结果传递到这给 <code>subject</code>。</p>
<h3 id="Bonus-Variable"><a href="#Bonus-Variable" class="headerlink" title="Bonus: Variable"></a>Bonus: Variable</h3><p>距离完完全全的 Rx 还差最后一点了。强行的获取之前发送出来的值。</p>
<p>这就是为什么会有 <strong>Variable</strong> 这个东西了。Variable 是对 BehaviorSubject 的简单包装。<a href="https://github.com/ReactiveX/RxSwift/blob/master/RxSwift/Subjects/Variable.swift">可以看一下</a> 它的实现是非常简单的。但它却非常的方便。</p>
<p>还是用一个小例子来说明这个问题吧。在这个例子中, 我们需要在任何时间都可以得到 “googleString” “当前” 的值。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> googleString = <span class="type">Variable</span>(<span class="string">"currentString"</span>)</div><div class="line"><span class="comment">// get</span></div><div class="line"><span class="built_in">print</span>(googleString.value)</div><div class="line"><span class="comment">// set</span></div><div class="line">googleString.value = <span class="string">"newString"</span></div><div class="line"><span class="comment">// 订阅</span></div><div class="line">googleString.asObservable().subscribe(onNext: &#123; (text) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(text)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>你一定会爱上他的。这基本上就是 <strong>RxSwift</strong> 的简单模式了。</p>
<p>看起来很简单吧，但是别忘了，还是有很多的坑的。还是小心为上。下一篇文章我会讲讲: 怎么写 Rxswift 最保险。</p>
<h3 id="That’s-it"><a href="#That’s-it" class="headerlink" title="That’s it!"></a>That’s it!</h3><p>你知道了太多了。剩下的就是 <code>Subjects</code> 了</p>
<p><a href="http://swiftpearls.com/RxSwift-for-dummies-3-Subjects.html">原文地址</a></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>我是一名来自中国的 iOS 程序员, 对技术有着浓厚的兴趣, 在学习的过程中, 发现了很多来自国外的优秀博客。为了更好的学习这些文章, 产生了将这些文章翻译成中文的想法。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxSwift For Dummies 🐣 Part2]]></title>
      <url>https://CepheusSun.github.io/2017/05/07/RxSwift%20For%20Dummies%20Part2/</url>
      <content type="html"><![CDATA[<p>我们在上一篇文章中介绍了 RxSwift 基础的部分. 现在我们来学习一些操作符, 来学习一下 <strong>FRP</strong> 中的<strong>F</strong>(unctional) 部分</p>
<h3 id="Schedulers"><a href="#Schedulers" class="headerlink" title="Schedulers"></a>Schedulers</h3><p>我们先学习一下之前就已经提到过的, 但是没有详细介绍的 <strong>Schedulers</strong></p>
<p><strong>Schedulers</strong> 最常见的用法就是告诉 <code>Observables</code> 和订阅者 应该在哪个线程或者队列中发送事件,或者通知。</p>
<p>关于 <code>Schedulers</code> 最常见的操作符是<code>observerOn</code> 和 <code>subscribleOn</code></p>
<p>通常情况下 <code>Observables</code> 会在它被订阅的那个线程发送事件或者通知。</p>
<h4 id="ObserveOn"><a href="#ObserveOn" class="headerlink" title="ObserveOn"></a>ObserveOn</h4><p><strong>ObserveOn</strong> 指定 <code>Observables</code> 发送事件的线程或者队列。它不会改变它执行的线程。</p>
<p>举一个跟 part1 很相似的例子：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    <span class="type">DispatchQueue</span>.global(qos: .<span class="keyword">default</span>).async &#123;</div><div class="line">        <span class="type">Thread</span>.sleep(forTimeInterval: <span class="number">10</span>)</div><div class="line">        <span class="type">DispatchQueue</span>.main.async &#123;</div><div class="line">            observer.onNext(<span class="string">"Hello dummy 🐥"</span>)</div><div class="line">            observer.onCompleted()</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>假设订阅者是一个 UI 层的东西， 比如说是一个 <code>UIViewController</code> 或者 <code>UIView</code></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="type">DispatchQueue</span>.global(qos: .<span class="keyword">default</span>).async</div></pre></td></tr></table></figure>
<p>我们把这个任务放在子线程中去执行， 以免阻塞 UI </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DispatchQueue.main.async&#123; ...</div></pre></td></tr></table></figure>
<p>我们需要在主线程中去更新 UI, 你应该知道 <code>UIKit</code> 要求对 <code>UI</code> 的操作都必须在主线程中进行。所以这些操作对你来说一定是很熟悉的了。</p>
<p>记下来使用 <strong>ObserveOn</strong> 来重构一下这段代码</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create(&#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    <span class="type">DispatchQueue</span>.global(qos: .<span class="keyword">default</span>).async &#123;</div><div class="line">        <span class="type">Thread</span>.sleep(forTimeInterval: <span class="number">10</span>)</div><div class="line">        observer.onNext(<span class="string">"Hello dummy 🐥"</span>)</div><div class="line">        observer.onCompleted()</div><div class="line">    &#125;</div><div class="line">        <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">    &#125;).observeOn(<span class="type">MainScheduler</span>.instance)</div></pre></td></tr></table></figure>
<p>我们删掉了 <code>DispatchQueue.main.async {}</code> 然后添加了 <code>.observeOn(MainScheduler.instance)</code>。 这个就可以让所有的事件都在主线程中被发送出去。就是这么简单。 <code>&quot;Hello dummy 🐥&quot;</code> 这个元素就能够很安全的被发送给 UI 的元素， 因为我们可以很确定他会在主线程中被发送出去。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">observable.subscribe(onNext: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] (element) <span class="keyword">in</span></div><div class="line">    <span class="keyword">self</span>?.label.text = element</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p><strong>ObserveOn</strong> 大概是最常见的线程调度操作符了。你希望 <code>Observables</code> 包含了所有的逻辑, 和线程操作, 让订阅者尽可能的简单。所以我们接下来再了解一下 <code>subscribeOn</code> 这个操作符。</p>
<h4 id="SubscribeOn-Optional"><a href="#SubscribeOn-Optional" class="headerlink" title="SubscribeOn (Optional)"></a>SubscribeOn (Optional)</h4><p>这是一个非常先进的操作符。你可以先跳过这部分, 以后再来研究🐤</p>
<p><code>subscribeOn</code> 跟 <code>ObserveOn</code> 非常的相似。<strong>但是他只能改变 <code>Observable</code> 将要执行的任务所在的线程。</strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    <span class="type">Thread</span>.sleep(forTimeInterval: <span class="number">10</span>)</div><div class="line">    observer.onNext(<span class="string">"Hello dummy 🐥"</span>)</div><div class="line">    observer.onCompleted()</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125; </div><div class="line">observable</div><div class="line">    .subscribeOn(<span class="type">ConcurrentDispatchQueueScheduler</span>(qos: .<span class="keyword">default</span>))</div><div class="line">    .subscribe(onNext: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] (element) <span class="keyword">in</span></div><div class="line">        <span class="keyword">self</span>?.label.text = element</div><div class="line">    &#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>上面的代码中, 我删掉了 <code>Observable</code> 中的 <code>DispatchQueue.global(qos: .default).async {}</code>  是这个订阅者告诉他应该在一个 <code>global queue</code> 中执行下面的操作, 以免阻塞 UI. 很明显这回导致一个异常的抛出, 之前提到过： 这回导致 <code>Observable</code> 在全局队列中执行, <strong>也会在全局队列中发出事件</strong>。只需要添加在 <code>Observable</code> 中添加 <code>.observeOn(MainScheduler.instance)</code>就能避免这个问题。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    <span class="type">Thread</span>.sleep(forTimeInterval: <span class="number">10</span>)</div><div class="line">    observer.onNext(<span class="string">"Hello dummy 🐥"</span>)</div><div class="line">    observer.onCompleted()</div><div class="line">        <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;.observeOn(<span class="type">MainScheduler</span>.instance)      </div><div class="line">observable</div><div class="line">    .subscribeOn(<span class="type">ConcurrentDispatchQueueScheduler</span>(qos: .<span class="keyword">default</span>))</div><div class="line">    .subscribe(onNext: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] (element) <span class="keyword">in</span></div><div class="line">        <span class="keyword">self</span>?.label.text = element</div><div class="line">    &#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>添加之后，就能够发现刚刚说到的问题已经解决掉了。</p>
<p>我们什么时候应该用 <code>observeOn</code> 呢？最常见的场景是:如果在 <code>Observable</code> 不需要在后台执行耗时操作(读取数据, 大的计算任务)的话.我不认为这是非常频繁的事情。但是，come on!  多知道一个你能用的工具 🛠不是件很 cool 的事情吗？</p>
<h4 id="Scheduler-Types"><a href="#Scheduler-Types" class="headerlink" title="Scheduler Types"></a>Scheduler Types</h4><p>做为 RxSwift 菜鸟, 好奇 <code>observeOn</code> 和 <code>MainScheduler.instance</code> 没什么关系。你可以自己创建一个线程或者直接使用已经创建好了的。如果你很好奇的话<a href="https://github.com/ReactiveX/RxSwift/blob/master/Documentation/Schedulers.md">这里有很多</a>。 这也没什么好复杂的， 就是对 GCD 和 NSOperation 的封装而已。</p>
<a id="more"></a>
<h3 id="Transforming-Operators"><a href="#Transforming-Operators" class="headerlink" title="Transforming Operators"></a>Transforming Operators</h3><p>现在你已经知道两种操作符了: 创建操作符(<code>create</code>、<code>interval</code>、<code>just</code>)  和 功能操作符(<code>observeOn</code>, <code>subscribeOn</code>)。 现在再学一些转换操作符吧！</p>
<h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><p>这是非常简单，但非常有用的操作符。它也可能是你未来最常用的一个操作符号。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observerable = <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    observer.onNext(<span class="number">1</span>)</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;        </div><div class="line"><span class="keyword">let</span> boolObservable: <span class="type">Observable</span>&lt;<span class="type">Bool</span>&gt; = observerable.<span class="built_in">map</span>&#123;(element) -&gt; <span class="type">Bool</span> <span class="keyword">in</span></div><div class="line">    <span class="keyword">if</span> element == <span class="number">0</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">&#125;</div><div class="line">boolObservable.subscribe(onNext: &#123; (boolElement) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(boolElement)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p><strong>Map</strong> 操作符号，改变了序列中值的类型。他映射了一个 <code>Observable</code> 所以他以你告诉他的新的方式发送事件。在这个例子中, 我们将一个 <code>Int</code> 类型的 <code>Observable</code> 映射成了一个 <code>Bool</code> 类型。 </p>
<p>所以这个例子的结果是</p>
<blockquote>
<p>true</p>
</blockquote>
<h4 id="Scan"><a href="#Scan" class="headerlink" title="Scan"></a>Scan</h4><p><strong>scan</strong> 要复杂一些了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    observer.onNext(<span class="string">"D"</span>)</div><div class="line">    observer.onNext(<span class="string">"U"</span>)</div><div class="line">    observer.onNext(<span class="string">"M"</span>)</div><div class="line">    observer.onNext(<span class="string">"M"</span>)</div><div class="line">    observer.onNext(<span class="string">"Y"</span>)</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;</div><div class="line">observable.scan(<span class="string">""</span>) &#123; (lastValue, currentValue) -&gt; <span class="type">String</span> <span class="keyword">in</span></div><div class="line">    <span class="keyword">return</span> lastValue + currentValue</div><div class="line">&#125;.subscribe(onNext: &#123; (element) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(element)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>在这个例子中会输出</p>
<blockquote>
<p>D<br>DU<br>DUM<br>DUMM<br>DUMMY</p>
</blockquote>
<p><strong>scan</strong>操作符, 让你可以通过上一个值来改变这一个值。他也被称作元素堆积。上面代码中的 <code>“”</code>是扫描参数传递的起始值。还是想着能干什么呢？</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    observer.onNext(<span class="number">1</span>)</div><div class="line">    observer.onNext(<span class="number">2</span>)</div><div class="line">    observer.onNext(<span class="number">3</span>)</div><div class="line">    observer.onNext(<span class="number">4</span>)</div><div class="line">    observer.onNext(<span class="number">5</span>)</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;</div><div class="line">observable.scan(<span class="number">1</span>) &#123; (lastValue, currentValue) -&gt; <span class="type">Int</span> <span class="keyword">in</span></div><div class="line">    <span class="keyword">return</span> lastValue + currentValue</div><div class="line">&#125;.subscribe(onNext: &#123; (element) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(element)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>这是通过 <strong>scan</strong> 操作符计算 5 的阶层。 算出来的答案是: 120</p>
<p><a href="http://rx-marin.com/post/rxswift-state-with-scan/">Marin 给了一个更有用的例子</a> 关于按钮的 selected 状态</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> button = <span class="type">UIButton</span>()</div><div class="line">button.rx.tap.scan(<span class="literal">false</span>) &#123; last, new <span class="keyword">in</span></div><div class="line">    <span class="keyword">return</span> !last</div><div class="line">&#125;.subscribe(onNext: &#123; (element) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(<span class="string">"tap: <span class="subst">\(element)</span>"</span>)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>现在你知道他能干什么了吧？ 当然还有很多其他的转换操作符。</p>
<h3 id="Filtering-Operators"><a href="#Filtering-Operators" class="headerlink" title="Filtering Operators"></a>Filtering Operators</h3><p>发出事件是很重要的事情, 但是很多情况下我们还需要过滤掉一些没用的事件。这就是 filter 操作符所做的事什么。</p>
<h4 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h4><p>决定那些事件是要响应的那些是要过滤掉的。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observerable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    observer.onNext(<span class="string">"🎁"</span>)</div><div class="line">    observer.onNext(<span class="string">"💩"</span>)</div><div class="line">    observer.onNext(<span class="string">"💩"</span>)</div><div class="line">    observer.onNext(<span class="string">"💩"</span>)</div><div class="line">    observer.onNext(<span class="string">"🎁"</span>)</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;</div><div class="line">observerable.<span class="built_in">filter</span> &#123; (element) -&gt; <span class="type">Bool</span> <span class="keyword">in</span></div><div class="line">    <span class="keyword">return</span> element == <span class="string">"🎁"</span></div><div class="line">&#125;.subscribe(onNext: &#123; (element) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(element)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>输出</p>
<blockquote>
<p>🎁<br>🎁</p>
</blockquote>
<h4 id="Debounce"><a href="#Debounce" class="headerlink" title="Debounce"></a>Debounce</h4><p>简单且有用</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">observerable</div><div class="line">    .debounce(<span class="number">2</span>, scheduler: <span class="type">MainScheduler</span>.instance)</div><div class="line">    .subscribe(onNext: &#123; (element) <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(element)</div><div class="line">    &#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p><strong>debounce</strong> 会过滤掉2秒以内的所有事件, 如果事件a在上一次事件之后的0.5秒被发送出来。那么他就会被过滤掉。如果他在上次事件的2.5秒被发送出来。那么他就会被接受到。需要注意的是, 如果就算当前时间之后没有其他的事件，他也要在2秒之后被发送出来。</p>
<blockquote>
<p>译者: 需要注意的 <code>debounce</code> 和 <code>throttle</code> 的区别。还有 Obj-C 中的 <code>ReactiveCocoa</code> 中的 throttle 的区别。</p>
</blockquote>
<h3 id="Combining-Operator"><a href="#Combining-Operator" class="headerlink" title="Combining Operator"></a>Combining Operator</h3><p>联合操作符让你可以把多个 <code>Observable</code> 转换成一个。</p>
<h4 id="Merge"><a href="#Merge" class="headerlink" title="Merge"></a>Merge</h4><p>合并只是将多个 <code>Observable</code> 发送的事件合并到一个 <code>Observable</code> 中。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    observer.onNext(<span class="string">"🎁"</span>)</div><div class="line">    observer.onNext(<span class="string">"🎁"</span>)</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> observable2 = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    observer.onNext(<span class="string">"💩"</span>)</div><div class="line">    observer.onNext(<span class="string">"💩"</span>)</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;</div><div class="line"><span class="type">Observable</span>.of(observable, observable2).merge().subscribe(onNext: &#123; (element) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(element)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<blockquote>
<p>🎁<br>🎁<br>💩<br>💩</p>
</blockquote>
<h4 id="Zip"><a href="#Zip" class="headerlink" title="Zip"></a>Zip</h4><p><strong>Zip</strong> 将每个 <code>Observable</code> 发出来的值合并成一个值。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    observer.onNext(<span class="string">"🎁"</span>)</div><div class="line">    observer.onNext(<span class="string">"🎁"</span>)</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> observable2 = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    observer.onNext(<span class="string">"💩"</span>)</div><div class="line">    observer.onNext(<span class="string">"💩"</span>)</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;</div><div class="line"><span class="type">Observable</span>.<span class="built_in">zip</span>(observable ,observable2).subscribe(onNext: &#123; (element) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(element)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<blockquote>
<p>🎁💩<br>🎁💩</p>
</blockquote>
<p>这是一个很有用的操作符。还是举一个例子吧！ 假如你有两个网络请求, 你需要等到他们都结束之后再进行下一步操作。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    <span class="type">DispatchQueue</span>.main.async &#123;</div><div class="line">        <span class="type">Thread</span>.sleep(forTimeInterval: <span class="number">3</span>)</div><div class="line">        observer.onNext(<span class="string">"fetched from sever 1"</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> observable2 = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    <span class="type">DispatchQueue</span>.main.async &#123;</div><div class="line">        <span class="type">Thread</span>.sleep(forTimeInterval: <span class="number">2</span>)</div><div class="line">        observer.onNext(<span class="string">"fetched from sever 2"</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;</div><div class="line"><span class="type">Observable</span>.<span class="built_in">zip</span>(observable, observable2)</div><div class="line">    .subscribe(onNext: &#123; (element) <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(element)</div><div class="line">    &#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p><strong>Zip</strong> 会等到两个 <code>Observable</code> 都结束之后将两个请求的结果合并成一个值发送出来。</p>
<h3 id="Other-Operators"><a href="#Other-Operators" class="headerlink" title="Other Operators"></a>Other Operators</h3><p>还有很多有趣的操作符, 比如 <code>reduce</code>、 <code>takeUntil</code> 等等。我认为如果你什么时候有了一些想法, 你也会很容易的找到他们。他们非常的强大, 能让你快速简单的操作事件序列。</p>
<h3 id="Mixing-Operators"><a href="#Mixing-Operators" class="headerlink" title="Mixing Operators"></a>Mixing Operators</h3><p>这个教程不需要具体的实例项目, 但是能快的将各种操作符搭配使用。我们来做一个实验吧：工具根据事件改变视图的颜色。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="type">Observable</span>&lt;<span class="type">NSDate</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    <span class="type">DispatchQueue</span>.global(qos: .<span class="keyword">default</span>).async &#123;</div><div class="line">        <span class="keyword">while</span> <span class="literal">true</span> &#123;</div><div class="line">            <span class="type">Thread</span>.sleep(forTimeInterval: <span class="number">0.01</span>)</div><div class="line">            observer.onNext(<span class="type">NSDate</span>())</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">    &#125;<span class="comment">// 需要在主线程中刷新 UI</span></div><div class="line">    .observeOn(<span class="type">MainScheduler</span>.instance)</div><div class="line">    <span class="comment">// 我们只需要能够被2整除的事件</span></div><div class="line">    .<span class="built_in">filter</span> &#123; (date) -&gt; <span class="type">Bool</span> <span class="keyword">in</span></div><div class="line">        <span class="keyword">return</span> <span class="type">Int</span>(date.timeIntervalSince1970) % <span class="number">2</span> == <span class="number">0</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 将数据转换成颜色</span></div><div class="line">    .<span class="built_in">map</span> &#123; (date) -&gt; <span class="type">UIColor</span> <span class="keyword">in</span></div><div class="line">        <span class="keyword">let</span> interval: <span class="type">Int</span> = <span class="type">Int</span>(date.timeIntervalSince1970)</div><div class="line">        <span class="keyword">let</span> color1 = <span class="type">CGFloat</span>( <span class="type">Double</span>(((interval * <span class="number">1</span>) % <span class="number">255</span>)) / <span class="number">255.0</span>)</div><div class="line">        <span class="keyword">let</span> color2 = <span class="type">CGFloat</span>( <span class="type">Double</span>(((interval * <span class="number">2</span>) % <span class="number">255</span>)) / <span class="number">255.0</span>)</div><div class="line">        <span class="keyword">let</span> color3 = <span class="type">CGFloat</span>( <span class="type">Double</span>(((interval * <span class="number">3</span>) % <span class="number">255</span>)) / <span class="number">255.0</span>)</div><div class="line">        <span class="keyword">return</span> <span class="type">UIColor</span>(red: color1, green: color2, blue: color3, alpha: <span class="number">1</span>)</div><div class="line">    &#125;</div><div class="line">    .subscribe(onNext: &#123;[<span class="keyword">weak</span> <span class="keyword">self</span>] (color) <span class="keyword">in</span></div><div class="line">        <span class="keyword">self</span>?.demoView.backgroundColor = color</div><div class="line">    &#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>You can find more examples in the <a href="https://github.com/ReactiveX/RxSwift/blob/master/Rx.playground/Pages/Combining_Operators.xcplaygroundpage/Contents.swift">RxSwfit playgrounds</a></p>
<h3 id="That’s-it"><a href="#That’s-it" class="headerlink" title="That’s it!"></a>That’s it!</h3><p>你知道了太多了。剩下的就是 <code>Subjects</code> 了</p>
<p><a href="http://swiftpearls.com/RxSwift-for-dummies-2-Operators.html">原文地址</a></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>我是一名来自中国的 iOS 程序员, 对技术有着浓厚的兴趣, 在学习的过程中, 发现了很多来自国外的优秀博客。为了更好的学习这些文章, 产生了将这些文章翻译成中文的想法。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxSwift For Dummies 🐣 Part1]]></title>
      <url>https://CepheusSun.github.io/2017/05/06/RxSwift%20For%20Dummies%20Part1/</url>
      <content type="html"><![CDATA[<p><strong>RxSwift</strong> 真的是一个非常值得学习的东西。非常遗憾的是我没有研究所有的架构模式MVVM VIPER Routing。</p>
<p>要非常好的讲出来RxSwift到底是个什么东西，我也说不好。毕竟他能做太多的事情了。普遍认为，他是函数响应式编程中非常重要的观察者模式。在最初的定义中,他并不就是函数响应式编程。他最初的设计灵感就是来自于函数响应式(<strong>FRP</strong>), 所以也可以说它包含了函数响应式的特性。</p>
<p>如果你不知道什么是 <strong>FRP</strong> 的话, 不用担心, 在这个教程中你会自然而然的理解什么是 <strong>FRP</strong>。</p>
<p>通过对 RXSwift 的深入研究, 我得到了很多的启发, 同时也被很多的问题困扰。相信你也会这样。</p>
<p>需要花很多个小时的时间来适应新的思维模式，唯一能确定的是，一旦你适应了，你就再也不想回到从前了。</p>
<p>在这个教程中，我会尽可能的节约你的时间，并且解释的尽可能的详细。想教幼儿园的小朋友一样。</p>
<p>开始学习之前, 请确定你已经掌握了 Swift 和 UIkit 的基础知识. </p>
<h3 id="The-Why"><a href="#The-Why" class="headerlink" title="The Why?"></a>The Why?</h3><p>写 UI 的时候经常会处理一些异步的操作。我们很早就知道要使用观察者模式来实现这个东西。我相信你现在已经非常熟悉代理模式了。代理模式是一种很酷的设计模式。但是写起来真的很烦😡。</p>
<center><br><img src="http://swiftpearls.com/images/cry.jpg" alt=""><br></center>

<ul>
<li>代理模式需要些很多的模版代码: 创建一个协议, 声明一个 <code>delegate</code> 变量, 遵守协议, 设置代理…</li>
<li>写完这么多模版代码,可能你不小心就忘了其中的某个步骤。 比如说 <code>object.delegete = self</code></li>
<li>管理起来非常麻烦。他需要在好几个文件中跳跃。</li>
</ul>
<p>RxSwift 解决了这个问题。他能够让你通过声明的方式使用观察者模式。减少了管理的负担, 当然，也不用写那么多模版代码。</p>
<p>我刚刚开始了一个项目，在这个项目中，至今还没有写一个 <code>delegate</code></p>
<h3 id="Basic-Example"><a href="#Basic-Example" class="headerlink" title="Basic Example"></a>Basic Example</h3><p>talk is cheap, show you the code.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleClass</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">runExample</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="comment">// OBSERVABLE //</span></div><div class="line">        <span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span></div><div class="line">            <span class="type">DispatchQueue</span>.global(qos: .<span class="keyword">default</span>).async &#123;</div><div class="line">                <span class="type">Thread</span>.sleep(forTimeInterval: <span class="number">10</span>)</div><div class="line">                observer.onNext(<span class="string">"Hello dummy 🐣"</span>)</div><div class="line">                observer.onCompleted()</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// OBSERVER //</span></div><div class="line">        </div><div class="line">        observable.subscribe(onNext:&#123; (element) <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(element)</div><div class="line">        &#125;).addDisposableTo(disposeBag)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这就是最基本的例子, 在这个示例中, 我们声明了一个 runExample 方法。在这个方法中执行的是一些 RxSwift 中的事情。想一下在这个例子中发生了什么吧。</p>
<a id="more"></a>
<h3 id="Observable-📡"><a href="#Observable-📡" class="headerlink" title="Observable 📡"></a>Observable 📡</h3><p>我们还是从 RxSwift 中最基本的构建单元开始吧。 <code>Observable</code>。 它其实非常的简单。 <code>Observable</code> 执行某些动作, 然后观察者能够对此作出一些反应。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span></div><div class="line">    <span class="type">DispatchQueue</span>.global(qos: .<span class="keyword">default</span>).async &#123;</div><div class="line">        <span class="comment">// Simulate some work</span></div><div class="line">        <span class="type">Thread</span>.sleep(forTimeInterval: <span class="number">10</span>)</div><div class="line">        observer.onNext(<span class="string">"Hello dummy 🐣"</span>)</div><div class="line">        observer.onCompleted()</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;</div><div class="line">                </div><div class="line">observable.subscribe(onNext:&#123; (element) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(element)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>现在我们有了一个 <code>Observable</code> 信号了。这种信号只有在被订阅之后才会执行它也被叫做:冷信号❄️。相反热信号🔥是那种既是没有被订阅也会执行的信号。</p>
<p>在下一步们我们会具体的讲解二者的区别。现在你只需要理解的是: 因为你初始化出来的是一个冷❄️信号<code>Hello dummy 🐣</code>这个值是不会被发送出来的。冷信号❄️只有在有东西订阅之后才会发送消息。</p>
<p>我们一步一步的来分析一下这究竟是什么意思。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="type">DispatchQueue</span>.global(qos: .<span class="keyword">default</span>).async &#123;...&#125;</div></pre></td></tr></table></figure>
<p>这行代码保证这个 <code>Observable</code> 信号在主线程中发送消息。其实 RxSwift 是有一个调度机制, 但是我现在还不想那么早告诉你, 不然你该记不值了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">observer.onNext(<span class="string">"Hello dummy 🐣"</span>)</div></pre></td></tr></table></figure>
<p>一个 <code>Observable</code> 信号发出的消息从时间上来看, 可以被看作是一个 <strong>序列</strong>。在这个序列中可能有无限多的值。我们可以通过 <code>onNext</code> 方法类将这些值发送出来。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">observer.onCompleted()</div></pre></td></tr></table></figure>
<p>当这个序列已经发送完了所有的值之后，它可以发送一个 <code>Completed</code> 或者 <code>Error</code>出来。之后这个信号就不能在产生更多的值了, 然后就会随着一个闭包被释放掉。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> <span class="type">Disposables</span>.create()</div></pre></td></tr></table></figure>
<p>每一个  <code>Observable</code> 信号都要返回一个 <code>Disposable</code>.</p>
<p>使用 <code>Disposables.create()</code> 如果你不想在信号被释放的时候处理其他事情。你可以看看<a href="https://github.com/ReactiveX/RxSwift/blob/master/RxSwift/Disposables/NopDisposable.swift">NopDisposable</a>的实现，你会发现，他什么事情都没有做，只是一些空方法。</p>
<h3 id="Disposable"><a href="#Disposable" class="headerlink" title="Disposable"></a>Disposable</h3><p><code>Disposable</code> 对象必须要在 <code>Observable</code> 中返回, 它是用来在<code>Observable</code>不能再正常的完成的时候清除掉这些信号的。比如说你可以使用 <strong>AnonymousDisposable</strong>:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> <span class="type">Disposables</span>.create(with: &#123;</div><div class="line">    connection.close()</div><div class="line">    database.closeImportantSomething()</div><div class="line">    cache.clear()</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>只有当信号被提前释放或者程序手动调用了 <code>dispose()</code> 方法, <code>Disposable</code> 才会被调用。但是在多数情况下, <code>dispose()</code> 方法都是通过 <strong>Dispose Bags</strong> 自动调用的。别着急，你可以在一些更具体的例子中自己实现这个东西。</p>
<h3 id="Observer-🕵"><a href="#Observer-🕵" class="headerlink" title="Observer 🕵"></a>Observer 🕵</h3><p>我们创建的 <code>Observable</code> 是冷信号❄️。 除非我们订阅了它，不然它是不会发送信号的。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">observable.subscribe(onNext: &#123;(element) <span class="keyword">in</span></div><div class="line">  <span class="built_in">print</span>(element)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>这就是订阅信号的方法。在 <code>subscribeNext</code> 方法中一个订阅就发生了。这个方法也会返回一个 <code>Disposable</code>.这个 <code>Disposable</code> 就是对这个订阅的记录</p>
<p>这个 <code>Observable</code> 就开始工作了, 10秒之后, 你就会在控制台看见</p>
<blockquote>
<p>Hello dummy 🐣</p>
</blockquote>
<p><code>subscribe(onNext:)</code> 只会在Next事件发送出来的时候响应。也可以使用 <code>subscribe(onCompleted:)</code> 和 <code>subscribe(onError:)</code> 响应对应的事件。</p>
<h3 id="Dispose-Bag-🗑"><a href="#Dispose-Bag-🗑" class="headerlink" title="Dispose Bag 🗑"></a>Dispose Bag 🗑</h3><p>唯一一个还有点神秘的东西就是 <code>addDisposableTo</code> 这个方法了。</p>
<blockquote>
<p>Dispose bags are used to return ARC like behavior to RX. When a DisposeBag is deallocated, it will call dispose on each of the added disposables.</p>
<p>Dispose bags 就像是一个垃圾筐。就像是 AutoreleasePool 一样，当这个垃圾筐被释放的时候, 里面的所有东西都会被释放掉。</p>
</blockquote>
<p>当你订阅一个信号的时候, 你就需要把你创建出来的 <code>Disposable</code> 添加到这个框里面。当这的框被释放的时候(ExampleClass 对象 dealloc 的时候)。这些没有执行完的<code>Disposable</code>就会被释放掉。</p>
<p>它被用作释放在闭包中引用的值, 以及没用的资源, 比如说, 一个 HTTP 网络连接, 数据库连接, 或者是缓存的对象。</p>
<p>如果你还是不懂, 一会儿再举一个例子。</p>
<h3 id="Observable-operators"><a href="#Observable-operators" class="headerlink" title="Observable operators"></a>Observable operators</h3><p><code>create</code> 只是信号诸多操作方法中的一个而已，它被用来创建一个新的信号。可以看一下 ReactiveX<br>的<a href="http://reactivex.io/documentation/operators.html">官方文档</a>。哪里有所有的操作方法。我只是举一些常见的例子。</p>
<h4 id="Just"><a href="#Just" class="headerlink" title="Just"></a>Just</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.just(<span class="string">"Hello again dummy 🐥"</span>);</div><div class="line">observable.subscribe(onNext: &#123; (element) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(element)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div><div class="line">        </div><div class="line">observable.subscribe(onCompleted: &#123; </div><div class="line">    <span class="built_in">print</span>(<span class="string">"I'm done"</span>)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<blockquote>
<p>Hello again dummy 🐥<br>I’m done</p>
</blockquote>
<p><strong>Just</strong> just 创建了一个智能释放一个值的信号。所以在这个信号序列中的事件，是这样的:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.Next(&quot;Hello&quot;) -&gt;  .Completed</div></pre></td></tr></table></figure>
<h4 id="Interval"><a href="#Interval" class="headerlink" title="Interval"></a>Interval</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.interval(<span class="number">0.3</span>, scheduler: <span class="type">MainScheduler</span>.instance)</div><div class="line">observable.subscribe(onNext: &#123; (element) <span class="keyword">in</span></div><div class="line">   <span class="built_in">print</span>(element)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<blockquote>
<p>0<br>1<br>2<br>3<br>…</p>
</blockquote>
<p><strong>Interval</strong> 是一个非常具体的操作符号。在这个例子中, 它从 0 每0.3秒递增, <code>scheduler</code> 是用来定义异步行为的。</p>
<h4 id="Repeat"><a href="#Repeat" class="headerlink" title="Repeat"></a>Repeat</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.repeatElement(<span class="string">"This is fun 🙄"</span>)</div><div class="line">observable.subscribe(onNext: &#123; (element) <span class="keyword">in</span></div><div class="line">   <span class="built_in">print</span>(element)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<blockquote>
<p>This is fun 🙄<br>This is fun 🙄<br>This is fun 🙄<br>This is fun 🙄<br>…</p>
</blockquote>
<p><strong>repeat</strong> 会无限的重复我们给定的值。你可以通过定义 <code>scheduler</code> 类型的方法来控制线程的行为。</p>
<p>目前为止, 可能都不是非常的给力。但是知道其他的操作是必要的。另外一件很重要的事情涘，这是 RxSwift 最有用的一部分。</p>
<h3 id="Real-life-example"><a href="#Real-life-example" class="headerlink" title="Real life example"></a>Real life example</h3><p>现在我们开始快速的通过一个例子巩固一下这些知识。我们对 RxSwift 的了解目前为止是非常有限的。所有我们先使用一个简单的 MVC 的例子。我们先创建一个模型， 它可以从 google 上获取数据。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Foundation</div><div class="line"><span class="keyword">import</span> RxCocoa</div><div class="line"><span class="keyword">import</span> RxSwift</div><div class="line"></div><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">GoogleModel</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">createGoogleDataObservable</span><span class="params">()</span></span> -&gt; <span class="type">Observable</span>&lt;<span class="type">String</span>&gt; &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create(&#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">            </div><div class="line">            <span class="keyword">let</span> session = <span class="type">URLSession</span>.shared</div><div class="line">            <span class="keyword">let</span> task = session.dataTask(with: <span class="type">URL</span>(string: <span class="string">"https://www.google.com"</span>)!) &#123; (data, response, error) <span class="keyword">in</span></div><div class="line">                </div><div class="line">                <span class="comment">// 我们需要在主线程中更新</span></div><div class="line">                <span class="type">DispatchQueue</span>.main.async &#123;</div><div class="line">                    <span class="keyword">if</span> <span class="keyword">let</span> err = error &#123;</div><div class="line">                        <span class="comment">// 如果请求失败, 直接发处失败的事件</span></div><div class="line">                        observer.onError(err)</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        <span class="comment">// 解析数据</span></div><div class="line">                        <span class="keyword">if</span> <span class="keyword">let</span> googleString = <span class="type">String</span>(data: data!, encoding: .ascii) &#123;</div><div class="line">                            <span class="comment">// 将数据发送出去</span></div><div class="line">                            observer.onNext(googleString)</div><div class="line">                        &#125; <span class="keyword">else</span> &#123;</div><div class="line">                            <span class="comment">// 如果解析失败发送失败的事件</span></div><div class="line">                            observer.onNext(<span class="string">"Error! Unable to parse the response data from google!"</span>)</div><div class="line">                        &#125;</div><div class="line">                        <span class="comment">// 结束这个序列</span></div><div class="line">                        observer.onCompleted()</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            task.resume()</div><div class="line">            </div><div class="line">            <span class="comment">// 返回一个 AnonymousDisposable</span></div><div class="line">            <span class="keyword">return</span> <span class="type">Disposables</span>.create(with: &#123;</div><div class="line">                <span class="comment">// 取消请求</span></div><div class="line">                task.cancel()</div><div class="line">            &#125;)</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这是非常简单的。 <code>createGoogleDataObservable</code>中我们创建了一个可以被订阅的信号。这个信号创建了一个从 google 获取数据的任务。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="type">DispatchQueue</span>.main.async &#123;...&#125;</div></pre></td></tr></table></figure>
<p>URLSession 的任务是在后台线程中进行的, 所以我们需要在 UI 线程中更新。记住还有一个 <code>schedulers</code> 这会在更高级的阶段介绍出来。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> <span class="type">Disposables</span>.create(with: &#123;</div><div class="line"> task.cancel()</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p><code>Disposable</code> 是一个给长给力的机制： 如果订阅者停止订阅这个信号了。这个任务就会被取消。</p>
<p>接下来是订阅者这部分的内容了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"><span class="keyword">import</span> RxCocoa</div><div class="line"><span class="keyword">import</span> RxSwift</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// 通常就是这样创建 DisposeBag 的</span></div><div class="line">    <span class="comment">// 当这个 controller 被释放掉的时候，disposebag</span></div><div class="line">    <span class="comment">// 也会释放掉, 并且所有 bag 中的元素都会调用 dispose() 方法</span></div><div class="line">    <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">    <span class="keyword">let</span> model = <span class="type">GoogleModel</span>()</div><div class="line">    </div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> googleText: <span class="type">UITextView</span>!</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        </div><div class="line">        <span class="comment">// 记住使用 [weak self] 或者 [unowned self] 来避免循环引用</span></div><div class="line">        model.createGoogleDataObservable()</div><div class="line">            .subscribe(onNext: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] (element) <span class="keyword">in</span></div><div class="line">                <span class="keyword">self</span>?.googleText.text = element</div><div class="line">            &#125;).addDisposableTo(disposeBag)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>神奇吗？没有协议, 没有代理。只是声明了一下在一个事情发生的时候应该做什么。</p>
<p>在闭包中记得使用 <code>[weak self]</code> 或者 <code>[unowned self]</code> 来避免循环引用</p>
<p>还有一种更响应式的方法来为 <code>UITextView</code> 绑定文本, 绑定。但那是更高级的内容。</p>
<h3 id="Dispose-Bag-Example"><a href="#Dispose-Bag-Example" class="headerlink" title="Dispose Bag Example"></a>Dispose Bag Example</h3><p>你可能已经发现了 <code>disposeBag</code> 是 <code>ViewController</code> 的一个成员变量。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div></pre></td></tr></table></figure>
<p>当这个控制器被释放的时候，它也会释放掉这个 <code>disposeBag</code> .</p>
<p>如果这个 <code>disposeBag</code> 被释放掉之后, 它我们添加到这个 bag 里面所有的信号都会被释放掉。而这个网络请求任务如果还没有结束的话也会被取消。<br>希望我讲清楚了 <code>DisposeBag</code> 的机制。</p>
<h3 id="That‘s-it！"><a href="#That‘s-it！" class="headerlink" title="That‘s it！"></a>That‘s it！</h3><p>Demo 我已经放在 <a href="https://github.com/CepheusTeam/Translate">GitHub</a> 上了。</p>
<p>到现在, 我们已经学到了如何创建一个 Observable 和 订阅者。以及 disposing 机制是怎么回事。希望你能够理解到这样做比平常的观察者模式有什么优势。</p>
<p>下一篇是关于 RxSwift 操作符的。</p>
<p><a href="http://swiftpearls.com/RxSwift-for-dummies-1-Observables.html#basic-example">原文地址</a></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>我是一名来自中国的 iOS 程序员, 对技术有着浓厚的兴趣, 在学习的过程中, 发现了很多来自国外的优秀博客。为了更好的学习这些文章, 产生了将这些文章翻译成中文的想法。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MVVM design pattern and RxSwift]]></title>
      <url>https://CepheusSun.github.io/2017/05/06/MVVM%20design%20pattern%20and%20RxSwift/</url>
      <content type="html"><![CDATA[<p>本文翻译自(<a href="http://lukagabric.com/mvvm-design-pattern-and-rxswift/">http://lukagabric.com/mvvm-design-pattern-and-rxswift/</a>)</p>
<h3 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h3><p>MVVM 是一种设计模式。他是程序的代码分离成三个部分: <code>Model</code>、<code>View</code>、<code>ViewModel</code>。 <code>Model</code> 代表数据的表现, <code>View</code> 代表用户看到的界面，<code>ViewModel</code> 代表着模型层和视图层的主要关联关系。</p>
<h4 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h4><p><code>Model</code> 就是数据层。他包括一定范围内的模型，和业务逻辑。 <code>Model</code> 并不只是你程序中的那些模型结构体或者数据库, 他也包含了一些 Service 或者组件, 比如说 <code>Alamofire</code>和一些 SDK 等等。</p>
<p><code>Model</code> 层执行所有跟数据有关的操作。比如常见的增删改查等等。这些操作由 <code>ViewModel</code> 发起。当 <code>Model</code>操作完了数据之后它再告诉 <code>ViewModel</code> 结果。</p>
<p><code>Model</code> 被 ViewModel 持有。他也并不知道视图层和 <code>ViewModel</code> 层的事情。因为他是和这两个东西完全隔离开的。</p>
<h4 id="View"><a href="#View" class="headerlink" title="View"></a>View</h4><p><code>View</code> 是程序中数据的可视化展示。它没有逻辑相关的东西。他主要有接受用户交互事件，和将数据展示在界面上两个人物。它将用户交互的事件转发到 <code>ViewModel</code> 中进行处理。<code>View</code> 观察 <code>ViewModel</code> 中数据的变化, 并且将这些变化展现出来。</p>
<p><code>View</code> 和 <code>Model</code> 之间没有任何直接的关联。 他们通过 <code>View</code> 持有的 <code>ViewModel</code> 产生关联。</p>
<p>界面信息在 <code>xib</code> 或者 <code>StoryBoard</code> 中通过 <code>UIKit</code> 中的组件被定义。<code>ViewController</code> 是直接跟 <code>xib</code> 或者 <code>StoryBoard</code> 关联的。它包含了 <code>Xib</code> 或者 <code>StoryBoard</code> 中的 <code>outlets</code> 和一些定义 UI 的额外配置。他也负责管理 <code>View</code> 的生命周期。 在 MVVM 中他和 <code>View</code> 的关联是非常紧密的, 他其实就是 <code>View</code> 层的一部分。</p>
<h4 id="ViewModel"><a href="#ViewModel" class="headerlink" title="ViewModel"></a>ViewModel</h4><p><code>ViewModel</code> 是程序的逻辑层。他处理用户交互行为。然后更新数据。然后在通知 <code>View</code> 新的数据和显示的方式。举一个很平常的例子。一个 ViewModel 从Model层中请求到了一些包含 <code>Date</code> 的模型。 这个 Date 值并不会被告诉给 View, ViewModel 告诉 View 的应该是被格式化之后的字符串。视图不会操作数据本身，他只负责将 ViewModel 准备好的数据展示出来。</p>
<h4 id="Similar-to-MVC"><a href="#Similar-to-MVC" class="headerlink" title="Similar to MVC"></a>Similar to MVC</h4><p>在 MVC 设计模式中, <code>ViewController</code> 是 <code>Model</code> 和 <code>View</code> 之间的桥梁。他只有视图, 管理视图的结构，管理用户的交互。他还负责管理视图的生命周期,加载、显示、消失等。他具有的另外一个指责是更新模型数据, 这就包括了显示数据的相关逻辑(也就是数据的处理,如上文提到的讲 <code>Date</code> 转化成 <code>String</code> 的逻辑)。因为他具有这么多的职责，所以很多情况下 <code>Viewcontroller</code> 就会变的非常大。所以也有人称MVC 为 Massive View Controller</p>
<p>出现复杂的 <code>viewController</code> 主要有两个原因。由于 <code>Controller</code> 有很多的职责。代码就会变的非常的复杂。这很明显就违背了单一职责这个原则。这也让测试 <code>Controller</code> 中的逻辑变成一件很麻烦的事情。<code>Controller</code> 和 <code>View</code> 的高度耦合。<code>view</code> 的生命周期使得逻辑的分离变的不那么容易。我们就需要花很大的精力来处理视图的生命周期。</p>
<p>MVVM 和 MVC 非常相似。 正如前文所说。 MVC 中的 <code>Controller</code> 同时包含了视图和程序的逻辑。将逻辑相关的代码从 <code>Controller</code> 中分离出来, 放到他自己抽象出来的类里面去。这时候的 <code>Controller</code>就只关注视图相关的事情。刚刚分离出来的这个类处理相关的逻辑。这个类就是 ViewModel。他和 <code>Controller</code> 具有一一对应关系。所以说 MVVM 就是将逻辑代码从 <code>controller</code>中分离到 <code>ViewModel</code> 中的 MVC</p>
<h4 id="Binding-data-from-ViewModel-to-View"><a href="#Binding-data-from-ViewModel-to-View" class="headerlink" title="Binding data from ViewModel to View"></a>Binding data from ViewModel to View</h4><p>有很多将数据绑定的机制, 比如 Swift 中的属性观察。视图可以对外提供一个 Closure 来进行视图的更新。这个 Closure 用来通知 View 他关联的属性的更新。除了熟悉观察。我们的程序还经常需要处理各种异步操作，比如网络请求，和通知或者事件的流信息。函数响应式编程(FRP)框架简直就是为了处理这类事件而生的。现在也有很多FRP 框架，对 iOS 开发来说，最出名的应该是 <code>RxSwift</code> 和 <code>ReactiveCocoa</code>了。之前在一篇对比文章中有提到过, 不管怎样，我更喜欢 <code>RxSwift</code> </p>
<h3 id="RxSwift"><a href="#RxSwift" class="headerlink" title="RxSwift"></a>RxSwift</h3><p>指令式编程是基于一步一步明确的指令来执行的。他详细的描述了程序的运行过程。值做为状态而存在。由于程序是一步一步的执行的,所以如果其中一个值在之后发生了改变，这一改变也不会被传到下一步。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 指令式编程</span></div><div class="line">a = <span class="number">1</span></div><div class="line">b = <span class="number">2</span></div><div class="line"><span class="built_in">c</span> = a + b  <span class="comment">// c = 3</span></div><div class="line">a = <span class="number">5</span>   <span class="comment">// c = 3</span></div></pre></td></tr></table></figure>
<p>响应式编程,跟指令式相反。他是基于变化的。他基于声明式编程，这就意味着他关注的是程序应该完成什么，而不是程序是怎么运行的。它是通过数学运算和其他像是 <code>filter</code> <code>map</code> <code>reduce</code> 之类的运算操作的运用来实现的。如何准确的运行被交给底层的程序语言或者框架来考虑了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 响应式编程</span></div><div class="line">a = <span class="number">1</span></div><div class="line">b = <span class="number">2</span></div><div class="line"><span class="built_in">c</span> = a + b <span class="comment">// c = 3</span></div><div class="line">a = <span class="number">5</span>     <span class="comment">// c = 7</span></div></pre></td></tr></table></figure>
<p>RxSwift 让你能用通过函数响应式编程来编写你的代码。使用 RxSwift 可以很轻松的创建事件或者数据流。这些事件或者数据流可以互相组合、转换。并且最终被观察到，基于值来进行一些操作。</p>
<p>正如前文所说，在 MVVM 中 View 观察 ViewModel 中模型的数据。RxSwift 提供了一个非常简单并且干净的方法来观察这些值，并绑定到对应的 View 上。</p>
<a id="more"></a>
<h4 id="Observable"><a href="#Observable" class="headerlink" title="Observable"></a>Observable</h4><p>Observable 是 RxSwift 的主要构成部分。他是一个可以异步的接受元素的序列。这个序列可以有0个或者很多个的元素。有三种事件能够基于它发生。下一步(Next)、完成(Completed)、错误(Error)</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Event</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> next(<span class="type">Element</span>)   <span class="comment">// 这个序列的下一个元素</span></div><div class="line">    <span class="keyword">case</span> error(<span class="type">Swift</span>.<span class="type">Error</span>)<span class="comment">// 这个序列发生了错误</span></div><div class="line">    <span class="keyword">case</span> completed      <span class="comment">// 这个序列成功的完成的所有人任务</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以使用 <code>Observable</code> 的 <code>subscribe</code> 方法来订阅这些事件。 用这种方法可以分别处理这个事件的各种情况。</p>
<ul>
<li>OnNext: 可以使用被订阅的元素值。</li>
<li>OnCompleted: 当这个序列成功的发送完所有元素之后会被调用。</li>
<li>OnError: 当这个序列不能完成的时候被调用。</li>
</ul>
<p>只要 <code>Complete</code> 或者 <code>Error</code> 被观察到了, 这个序列就不能产生任何新的元素了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">observable.subscribe(</div><div class="line">    onNext: &#123; element <span class="keyword">in</span> ... &#125;, </div><div class="line">    onError: &#123; error <span class="keyword">in</span> ... &#125;,</div><div class="line">    onCompleted: &#123; ... &#125;</div><div class="line">)</div></pre></td></tr></table></figure>
<h4 id="Hot-and-cold-observables"><a href="#Hot-and-cold-observables" class="headerlink" title="Hot and cold observables"></a>Hot and cold observables</h4><p>即使没有被观察也会发送消息的信号被称作热信号。想象一下 <code>NotificationCenter</code> 技术没有其他对象接受通知, 也也然会发送出来。如果你在某个时候订阅了这个信号, 之前发出来的消息你就会错过。</p>
<p>那些只有被订阅之后才开始发送消息的信号被称作冷信号。这些资源会被分配给每个订阅对象。(比如说，你每次订阅的网络请求就会被释放)但是这些资源可以被多个对象共享(只有一个网络请求被释放了,但可能这被很多个观察者订阅)</p>
<h4 id="Driver"><a href="#Driver" class="headerlink" title="Driver"></a>Driver</h4><p>Driver 是 RxCocoa 框架中的一个值类型。它是对一个可订阅的序列的封装，如果要把一个简单的值绑定到View上, 它会是一个更简单的方法。如果 <code>Observables</code> 发生了错误, 你需要很方便的将一些东西展示出来。每个信号都可以很容易的被转换成 <code>Driver</code>。 当你提供了这个信号发生错误的返回什么的时候，只需要使用 <code>asDriver</code> 方法就可以了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.asDriver(onErrorJustReturn: <span class="string">"No items to display."</span>)</div></pre></td></tr></table></figure>
<p>想象一下异步操作的场景。比如说网络请求。我们需要在界面上展示返回值的个数。在这个场景中，我们需要将返回值的个数映射成一个字符串。可能这个字符串的格式可能是 <code>&quot;X item(s)&quot;</code> <code>Driver</code> 还能够确保我们需要修改 UI 的这个订阅是发生在主线程当中的。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> results: <span class="type">Observable</span>&lt;[<span class="type">SomeItem</span>]&gt; = ...</div><div class="line"><span class="keyword">let</span> resultsCountDriver = results</div><div class="line">    .<span class="built_in">map</span> &#123; <span class="string">"<span class="subst">\($<span class="number">0</span>.<span class="built_in">count</span>)</span> item(s)"</span> &#125;</div><div class="line">    .asDriver(onErrorJustReturn: <span class="string">"No items to display."</span>)</div></pre></td></tr></table></figure>
<p>把这个数据绑定到 Label 中就很简单了</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">resultsCountDriver.drive(resultCountLabel.rx.text).disposed(by: disposeBag)</div></pre></td></tr></table></figure>
<h4 id="DisposeBag"><a href="#DisposeBag" class="headerlink" title="DisposeBag"></a>DisposeBag</h4><p>如果一个序列停止了, 但是它并没有被释放掉。在他就会造成资源的浪费和内存的泄漏。知道他完成了或者处错了。如果一个序列没有停止，也没有出错，这个资源就会被永久的占用。这就是为什么我们要在需要订阅的对象中生命一个 <code>DisposeBag</code> 的成员变量的原因了。这样的话，只要这个对象呗释放掉了，所有相关的资源都会被释放并且被系统回收。</p>
<h4 id="Variable"><a href="#Variable" class="headerlink" title="Variable"></a>Variable</h4><p><code>Variable</code>表示可以被订阅的状态。它是信号和功能范式之间的桥梁。<code>Variable</code> 总是包含了提供给构造函数的初始值当你订阅当前的值的时候，这个初始值会立马被发送到过来。(只有最新和当前值会被发出，旧的值不会)。也可以直接获取或者设置 <code>Variable</code> 的值。他内部的信号可以通过 <code>asObservable</code> 方法获取到。另外, <code>Variable</code> 永远都不会出错。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> variable = <span class="type">Variable</span>(<span class="string">"My Variable"</span>)</div><div class="line">variable.value = <span class="string">"Some value"</span></div><div class="line"><span class="keyword">let</span> variableObservable = variable.asObservable()</div><div class="line">variableObservable.subscribe(onNext: &#123; value <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(value) <span class="comment">//prints "Some value"</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>最后， 我写了一个 Demo 来演示 MVVM + RxSwift. 这是一个简单的程序获取并且显示天气的数据。这个app有三种状态， 加载中，显示中，错误。有两种对错误的处理，一是，我们只显示错误。另一个是显示之前的数据。如果没有，就显示错误。这两种处理方式都是通过响应式编程和指令式编程实现的。</p>
<p>在这些例子中，只有 ViewMoel 会发生改变。你可以看到给功能增加复杂性(显示错误或者旧的数据)。如果使用指令式编程，可能会对代码带来很多的变动。而使用响应式编程，只需要增加额外的状态而已。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxSwift and the awesome things you can do with Reactive Programming — Part I]]></title>
      <url>https://CepheusSun.github.io/2017/05/05/RxSwift%20and%20the%20awesome%20things%20you%20can%20do%20with%20Reactive%20Programming%E2%80%8A%E2%80%94%E2%80%8APart%20I/</url>
      <content type="html"><![CDATA[<p>本文翻译自国外的美女工程师 <a href="https://medium.com/@kenzai">Kenza Iraki</a> 的文章 <a href="https://medium.com/@kenzai/rxswift-and-the-awesome-things-you-can-do-with-reactive-programming-part-i-3921137d251">RxSwift and the awesome things you can do with Reactive Programming — Part I</a></p>
<p>第一次听见响应式编程，我的表情是这样的</p>
<center><br><img src="https://cdn-images-1.medium.com/max/1600/1*28RdzpfQBHklPcgLGsg0jw.png"><br></center>

<p>接下来的几次几次接触, 也并没有什么改变。整整两个星期之后,即使我在项目中写了一些响应式代码。我依然是这种感觉。</p>
<p>现在我才知道有很多的人在第一次遇见响应式编程的时候跟我有一样的感觉。我也知道很多人看过响应式的代码之后再也不想再见到它了，因为她的学习曲线太过陡峭了。但是我能告诉你一个事实, 我还没听说过一个人， 在最终理解了他是怎么回事之后,后悔学习响应式编程。</p>
<p>我知道网上有很多关于响应式编程理论和思想还有 RxSwift 的的资源, 也有很多教你用Rx来做各种事情的教程(文末我会给出一些链接)。这篇文章不是是一个教程, 也不会解释 <code>stream</code> 和 <code>observables</code> 是怎么回事。 我要做的是提供一个直接、明确并且尽量少的理论总结来告诉你 RxSwift 能做什么, 并且告诉你为什么你会喜欢上它。由于 Rx 的世界深似海, 所以我打算写三篇文章来讨论这件事情, 这是第一篇。</p>
<h2 id="Part1-Data-Binding-control-events-and-gesture-recognizers"><a href="#Part1-Data-Binding-control-events-and-gesture-recognizers" class="headerlink" title="Part1: Data Binding, control events and gesture recognizers"></a>Part1: Data Binding, control events and gesture recognizers</h2><h3 id="Data-Binding"><a href="#Data-Binding" class="headerlink" title="Data Binding"></a>Data Binding</h3><p>数据绑定看起来像是一个高端的词语, 但是它却是一件非常简单的事情。假如你有一个 App 需要用户在 <code>UITextField</code> 中输入它们的名字。当他们在打字的时候, 用 “你好 + 用户输入的文字” 展示在界面上。这样一个很基本的场景。如果在不是响应式的程序中, 我们需要遵守 <code>UITextFieldDelegate</code> 这个协议, 然后在 <code>ViewController</code> 中实现 <code>textFieldDidEndEditing</code> 这个方法, 来监听用户用户的行为，然后给 <code>Label</code> 赋值。</p>
<p>虽然很简单，但是假如有很多的 <code>UITextField</code> 我们还要在代理方法中判断, 又或者, 我们需要用户在输入的过程中时时的刷新 <code>Label</code>。这种场景, 我们的代码，看起来就会很糟糕。至少不会很优雅吧。</p>
<p>在响应式中, 这种情况就可以用数据绑定来实现。说白了,就是将用户在 <code>UITextField</code> 中输入的文字绑定到 <code>UILabel</code> 上。在 <code>RxSwift</code> 的世界里,  没有什么比处理数据绑定更简单的了。刚才描述的需求, 我们只需要通过以下代码就可以实现了。</p>
<a id="more"></a>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> namefield = <span class="type">UITextField</span>()</div><div class="line"><span class="keyword">var</span> helloLabel = <span class="type">UILabel</span>()</div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    nameField.rx.text.<span class="built_in">map</span> &#123; <span class="string">"Hello <span class="subst">\($<span class="number">0</span>)</span>"</span> &#125;</div><div class="line">                     .bindTo(helloLabel.rx.text)</div></pre></td></tr></table></figure>
<p>上面的代码， 我们首先是获取到了 <code>UITextField</code> 的文字。 然后我们将这段文字映射成想要的格式，然后赋值给 <code>UILabel</code>。 在这里，我们之间见到的在文字前面加了一个 <code>&#39;hello&#39;</code>， 因为 map 是一个闭包, 可以简单的被看作一个匿名函数, 它的参数:<code>$0</code>(第一个参数)、<code>$1</code>(第二个参数)以此类推。然后将映射后的文字绑定到 <code>UILabel</code> 的 <code>text</code> 属性上。就这么简单，这个需求就完成了。没有使用代理，也没有用各种 if 语句, 就简单明了的几行代码。</p>
<p>你先在肯定在想,”是，这是很神奇, 但是真的有很多 app 在这样做吗” 我可以告诉你，是的。不要仅仅是限制在这简单的几个例子中。能够将数据绑定到视图是非常强大的事情。你想想看，如果我们有一个视图的背景颜色需要根据天气用户的地理位置而改变。基于可能变化的数据和一些简单的逻辑, 不需要太过深入的研究它背后的东西。这就是数据绑定最主要的思想。</p>
<h3 id="Control-Events-and-Gesture-Recognizers"><a href="#Control-Events-and-Gesture-Recognizers" class="headerlink" title="Control Events and Gesture Recognizers"></a>Control Events and Gesture Recognizers</h3><p>简单的说一下什么是事件吧！事件基本上是用户能在你的 app 上操作的所有行为，点击、滑动、拖拽等等。当用户按下一个按钮的时候，你的程序会监听到一个 <code>UIControlEvent</code> 的事件类型 <code>.touchUpInSide</code>。 如果你用的是 <code>StoryBoary</code> ，你可能在创建 <code>IBAction</code> 的时候，没有想过这个按钮的行为。我已经写了一篇<a href="">why I never use storyboards</a> 。如果你跟我一样,这段代码你肯定会很熟悉了</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> button = <span class="type">UIButton</span>()</div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    button.addTarget(#selector(<span class="type">ViewController</span>.loginUser), target: <span class="keyword">self</span>, event: .touchUpInside</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">loginUser</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="comment">// Implementation here</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我真的很讨厌 Selector, 这些代码太不明确了，让代码看起来很乱，也让我们梗容易犯错。但是用 Rx 这样就可以了：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> button = <span class="type">UIButton</span>()</div><div class="line"><span class="keyword">var</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    button.rx.tap.subscribe &#123; onNext <span class="number">_</span> <span class="keyword">in</span></div><div class="line">        <span class="comment">// Implementation here</span></div><div class="line">    &#125;.addDisposableTo(disposeBag)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不要太过纠结 <code>disposeBag</code> 和 <code>subscribe</code> 这些东西。你只要知道这些是一些必须的动作就可以了。(下面会有介绍)</p>
<p>当你需要给不具有 control event 的空间添加一些逻辑事件, 比如给 <code>UILabel</code> 或者 <code>UIImageView</code> 添加点击事件的时候。我们只能给他添加手势。(这是我做讨厌的 UIKit 特点之一)。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> label = <span class="type">UILabel</span>()</div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="comment">// Show example of gesture recognizers</span></div><div class="line">    <span class="keyword">let</span> gestureRecognizer = <span class="type">UITapGestureRecognizer</span>(target: <span class="keyword">self</span>, action: “handleTap:”)</div><div class="line">    label.addGestureRecognizer(gestureRecognizer)</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleTap</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="comment">// Your logic here</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其他的手势，如果你需要响应的话。你就需要给这个控件添加多个 <code>gesture recognizer</code> ,你要穿件多个手势，然后挨个添加到这个控件上。这不仅是很多样板代码这么简单，这也可能带来一些难以想象的混乱和潜在的错误。</p>
<p>你可以已经想到了。Rx 让这个东西变的异常的简单：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> label = <span class="type">UILabel</span>()</div><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    label.rx.gesture(.tap).subscribe &#123;onNext (gesture) <span class="keyword">in</span></div><div class="line">        <span class="comment">// Your logic here</span></div><div class="line">    &#125;.addDisposableTo(disposeBag)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>假如你需要添加多个手势的话:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> label = <span class="type">UILabel</span>()</div><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    label.rx.gesture(.tap, .pan, .swipeUp).subscribe &#123; onNext (gesture) <span class="keyword">in</span></div><div class="line">        <span class="keyword">switch</span> gesture &#123;</div><div class="line">        <span class="keyword">case</span> .tap: <span class="comment">// Do something</span></div><div class="line">        <span class="keyword">case</span> .pan: <span class="comment">// Do something</span></div><div class="line">        <span class="keyword">case</span> .swipeUp: <span class="comment">// Do something </span></div><div class="line">        <span class="keyword">default</span>: <span class="keyword">break</span>       </div><div class="line">        &#125;        </div><div class="line">    &#125;.addDisposableTo(disposeBag)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这些都是一个叫 <a href="https://github.com/RxSwiftCommunity/RxGesture">RxGesture</a> 的 RxSwift 库提供的。</p>
<p><strong>参考资料</strong></p>
<p><a href="https://github.com/ReactiveX/RxSwift">ReactiveX/RxSwift</a></p>
<p><a href="https://realm.io/news/altconf-ash-furrow-functional-reactive-swift/">Functional Reactive Awesomeness With Swift</a></p>
<p><a href="https://medium.com/swift-programming/reactive-swift-3b6050375534">My journey with reactive programming in Swift — and the iOS app that came out of it.</a></p>
<p><a href="https://github.com/DTVD/The-introduction-to-RxSwift-you-have-been-missing">DTVD/The-introduction-to-RxSwift-you-have-been-missing</a></p>
<p><a href="https://www.thedroidsonroids.com/blog/ios/rxswift-by-examples-1-the-basics/">RxSwift by Examples #1 – The basics.</a></p>
<p><a href="https://news.realm.io/news/tryswift-Marin-Todorov-I-create-iOS-apps-is-RxSwift-for-me/">I create iOS apps - is RxSwift for me?</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RAC 最基本的东西-- RACSignal]]></title>
      <url>https://CepheusSun.github.io/2017/04/27/RAC%20%E6%9C%80%E5%9F%BA%E6%9C%AC%E7%9A%84%E4%B8%9C%E8%A5%BF--%20RACSignal/</url>
      <content type="html"><![CDATA[<h3 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h3><ul>
<li>创建信号</li>
<li>订阅信号</li>
<li>发送信号</li>
</ul>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1.创建信号(cold)</span></div><div class="line">RACSignal *signal = [RACSignal createSignal:^RACDisposable * _Nullable(<span class="keyword">id</span>&lt;RACSubscriber&gt;  _Nonnull subscriber) &#123;</div><div class="line">    <span class="comment">// 3.发送信号</span></div><div class="line">    [subscriber sendNext:<span class="string">@"hello, RAC."</span>];</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 2.订阅信号(hot)</span></div><div class="line">[signal subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, x);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>在创建 RACSignal 的时候, </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">+ (RACSignal&lt;ValueType&gt; *)createSignal:(RACDisposable * _Nullable (^)(id&lt;RACSubscriber&gt; subscriber))didSubscribe;</div></pre></td></tr></table></figure>
<p>方法传入的 block 会返回一个 <code>RACDisposable</code> 对象。</p>
<p>将以上代码中的 <code>return nil；</code> 替换成如下代码</p>
<a id="more"></a>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> [RACDisposable disposableWithBlock:^&#123;</div><div class="line"><span class="comment">// 订阅者释放时会自动取消订阅信号, 但是只要订阅者没有释放, 就不会取消订阅信号.</span></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"信号被取消订阅了!"</span>);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>这个时候在 <code>[subscriber sendComplete]</code> 的时候会执行创建 <code>RACDisposable</code> 传入的 <code>block</code> </p>
<p><strong>如何主动取消订阅</strong></p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">_disposable = [signal subscribeNext:^(<span class="keyword">id</span> x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, x);</div><div class="line">&#125;];<span class="comment">// 可以看出来，这里的 subscribeNext 返回的就是取消订阅这个 signal 的 RACDisoisable</span></div><div class="line"><span class="comment">// 不管 在创建 signal 的时候 return 的是 nil 还是 RACDisposable 对象</span></div><div class="line">[_disposable dispose]</div></pre></td></tr></table></figure>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;ReactiveObjC.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) RACDisposable *disposable;    </div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    RACSignal *signal = [RACSignal createSignal:^RACDisposable *(<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber ) &#123;       </div><div class="line">        [subscriber sendNext:<span class="string">@"hello, RAC."</span>];</div><div class="line">        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">            [subscriber sendNext:<span class="string">@"2"</span>];</div><div class="line">            dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">                [subscriber sendNext:<span class="string">@"2"</span>];</div><div class="line">                dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">                    [subscriber sendNext:<span class="string">@"2"</span>];</div><div class="line">                    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">                        [subscriber sendNext:<span class="string">@"2"</span>];</div><div class="line">                        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">                            [subscriber sendNext:<span class="string">@"2"</span>];</div><div class="line">                            dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">                                [subscriber sendNext:<span class="string">@"2"</span>];</div><div class="line">                                dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">                                    [subscriber sendNext:<span class="string">@"2"</span>];</div><div class="line">                                    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">                                        [subscriber sendNext:<span class="string">@"2"</span>];</div><div class="line">                                        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">                                            [subscriber sendNext:<span class="string">@"2"</span>];</div><div class="line">                                        &#125;);</div><div class="line">                                    &#125;);</div><div class="line">                                &#125;);</div><div class="line">                            &#125;);</div><div class="line">                        &#125;);</div><div class="line">                    &#125;);</div><div class="line">                &#125;);</div><div class="line">            &#125;);</div><div class="line">        &#125;);</div><div class="line">        <span class="comment">// 如果信号不再发送数据, 最好调用信号的发送完成方法, 该方法会调用 [RACDisposable disposable] 取消订阅信号.</span></div><div class="line">        <span class="comment">//[subscriber sendCompleted];</span></div><div class="line">        </div><div class="line">        <span class="keyword">return</span> [RACDisposable disposableWithBlock:^&#123;</div><div class="line">            <span class="comment">// 订阅者释放时会自动取消订阅信号, 但是只要订阅者没有释放, 就不会取消订阅信号.</span></div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"信号被取消订阅了!"</span>);</div><div class="line">        &#125;];</div><div class="line">        <span class="comment">//如果取消订阅的时候不需要做什么事情, return nil 也没有关系</span></div><div class="line">        <span class="comment">//return nil;</span></div><div class="line">    &#125;];</div><div class="line">    _disposable = [signal subscribeNext:^(<span class="keyword">id</span> x) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, x);</div><div class="line">    &#125;];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</div><div class="line">    <span class="comment">// 主动取消订阅信号</span></div><div class="line">    [_disposable dispose];</div><div class="line">&#125;  </div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h3 id="timer"><a href="#timer" class="headerlink" title="timer"></a>timer</h3><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[[RACSignal interval:<span class="number">2.0</span> onScheduler:[RACScheduler currentScheduler]] subscribeNext:^(<span class="keyword">id</span> x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, x);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h3 id="delay"><a href="#delay" class="headerlink" title="delay"></a>delay</h3><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"first"</span>);</div><div class="line">[[[RACSignal createSignal:^RACDisposable *(<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</div><div class="line">    [subscriber sendNext:<span class="string">@"send，signal"</span>];</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;] </div><div class="line">delay:<span class="number">2.0</span>] <span class="comment">// 信号延迟两秒</span></div><div class="line">subscribeNext:^(<span class="keyword">id</span> x) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h3 id="timeout"><a href="#timeout" class="headerlink" title="timeout"></a>timeout</h3><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">RACSignal *signal = [[RACSignal createSignal:^RACDisposable *(<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</div><div class="line">    [subscriber sendNext:<span class="string">@"send，signal"</span>];</div><div class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">3</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">        [subscriber sendNext:<span class="string">@"send，signal2"</span>];</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;] timeout:<span class="number">2.0</span> onScheduler:[RACScheduler currentScheduler]];</div><div class="line"><span class="comment">// 2s 后发送错误信号。2s 之后的信号被忽略</span></div><div class="line"></div><div class="line">[signal subscribeNext:^(<span class="keyword">id</span> x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125; error:^(<span class="built_in">NSError</span> *error) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,error);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h3 id="retry"><a href="#retry" class="headerlink" title="retry"></a>retry</h3><p>重试, 遇到 error 就会重新执行创建信号中的block,直到成功. 也可以传入 retry 的次数，如果超过这个次数还是 error 则返回 error</p>
<h2 id="对-RACSignal-的操作"><a href="#对-RACSignal-的操作" class="headerlink" title="对 RACSignal 的操作"></a>对 RACSignal 的操作</h2><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">RACSignal *signal = [RACSignal createSignal:^RACDisposable * _Nullable(<span class="keyword">id</span>&lt;RACSubscriber&gt;  _Nonnull subscriber) &#123;</div><div class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">5</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">        [subscriber sendNext:<span class="string">@"1"</span>];</div><div class="line">        [subscriber sendNext:<span class="string">@"2"</span>];</div><div class="line">        [subscriber sendNext:<span class="string">@"3"</span>];</div><div class="line">        [subscriber sendNext:<span class="string">@"3"</span>];</div><div class="line">        [subscriber sendNext:<span class="string">@"5"</span>];</div><div class="line">        [subscriber sendNext:<span class="string">@"3"</span>];</div><div class="line">        [subscriber sendNext:<span class="string">@"6"</span>];</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h3 id="map-映射"><a href="#map-映射" class="headerlink" title="map 映射"></a>map 映射</h3><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</div><div class="line">Map使用步骤:</div><div class="line">1.传入一个block,类型是返回对象，参数是value</div><div class="line">2.value就是源信号的内容，直接拿到源信号的内容做处理</div><div class="line">3.把处理好的内容，直接返回就好了，不用包装成信号，返回的值，就是映射的值。</div><div class="line">*/</span></div><div class="line">[[signal map:^<span class="keyword">id</span> _Nullable(<span class="keyword">id</span>  _Nullable value) &#123;</div><div class="line">    <span class="keyword">return</span> @([value integerValue] * <span class="number">10</span>);</div><div class="line">&#125;] subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 10,20,30,50,30,60</span></div></pre></td></tr></table></figure>
<h4 id="flattenMap"><a href="#flattenMap" class="headerlink" title="flattenMap"></a>flattenMap</h4><p>把源信号的内容映射成一个新的信号，信号可以是任意类型。</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</div><div class="line">flattenMap使用步骤:</div><div class="line">1.传入一个block，block类型是返回值RACStream，参数value</div><div class="line">2.参数value就是源信号的内容，拿到源信号的内容做处理</div><div class="line">3.包装成RACReturnSignal信号，返回出去。</div><div class="line">*/</span></div><div class="line">[[signal flattenMap:^__kindof RACSignal * _Nullable(<span class="keyword">id</span>  _Nullable value) &#123;</div><div class="line">    <span class="keyword">return</span> [RACReturnSignal <span class="keyword">return</span>:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@%@"</span>,value,value]];</div><div class="line">&#125;]</div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h4 id="flattenmap-和-map-的区别"><a href="#flattenmap-和-map-的区别" class="headerlink" title="flattenmap 和 map 的区别"></a>flattenmap 和 map 的区别</h4><ol>
<li>FlatternMap中的Block返回信号。</li>
<li>Map中的Block返回对象。</li>
<li>开发中，如果信号发出的值不是信号，映射一般使用Map</li>
<li>开发中，如果信号发出的值是信号，映射一般使用flatternMap。</li>
</ol>
<h4 id="mapReplace"><a href="#mapReplace" class="headerlink" title="mapReplace"></a>mapReplace</h4><p>传入一个值 x , 将每个信号的值都改为 x</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[[signal mapReplace:<span class="string">@"4"</span>]</div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line">    <span class="comment">// 4,4,4,4,4,4,4</span></div></pre></td></tr></table></figure>
<h3 id="filter-过滤"><a href="#filter-过滤" class="headerlink" title="filter 过滤"></a>filter 过滤</h3><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><p>传入一个 block , 当这个 block 返回 YES 的时候才能响应</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">RACSignal *signal = [RACSignal createSignal:^RACDisposable * _Nullable(<span class="keyword">id</span>&lt;RACSubscriber&gt;  _Nonnull subscriber) &#123;</div><div class="line">    [subscriber sendNext:<span class="string">@"1"</span>];</div><div class="line">    [subscriber sendNext:<span class="string">@"2"</span>];</div><div class="line">    [subscriber sendNext:<span class="string">@"3"</span>];</div><div class="line">    [subscriber sendNext:<span class="string">@"3"</span>];</div><div class="line">    [subscriber sendNext:<span class="string">@"5"</span>];</div><div class="line">    [subscriber sendNext:<span class="string">@"3"</span>];</div><div class="line">    [subscriber sendNext:<span class="string">@"6"</span>];</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;];</div><div class="line">[[signal filter:^<span class="built_in">BOOL</span>(<span class="keyword">id</span>  _Nullable value) &#123;</div><div class="line"><span class="comment">// 只有 value 为 @“3” 的时候才进入下一步</span></div><div class="line">    <span class="keyword">return</span> [value isEqualToString:<span class="string">@"3"</span>];</div><div class="line">&#125;]</div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h4 id="ignore"><a href="#ignore" class="headerlink" title="ignore"></a>ignore</h4><p>传入一个参数 x 忽略 value == x 的信号</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[[signal ignore:<span class="string">@"3"</span>]</div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 1,2,5,6</span></div></pre></td></tr></table></figure>
<h4 id="distinctUntilChanged"><a href="#distinctUntilChanged" class="headerlink" title="distinctUntilChanged"></a>distinctUntilChanged</h4><blockquote>
<p>如果这次受到的信号 <code>value</code> 跟上次的信号 <code>value</code> 相同, 这次信号被忽略。</p>
</blockquote>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[[signal distinctUntilChanged] </div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 1,2,3,5,3,6</span></div></pre></td></tr></table></figure>
<h4 id="startWith"><a href="#startWith" class="headerlink" title="startWith"></a>startWith</h4><p>传入一个参数 x , 订阅的时候首先收到 value = x 的信号。 类似于在创建 RACSignal 的第一行 <code>[subscriber sendNext:x];</code></p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[[signal startWith:<span class="string">@"1"</span>]</div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 1,1,2,3,3,5,3,6</span></div></pre></td></tr></table></figure>
<h4 id="take"><a href="#take" class="headerlink" title="take"></a>take</h4><p>传入一个数组 n， 表明只响应前 n 个信号</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[[signal take:<span class="number">3</span>]</div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 1,2,3</span></div></pre></td></tr></table></figure>
<h4 id="takeLast"><a href="#takeLast" class="headerlink" title="takeLast"></a>takeLast</h4><p>传入一个数值 n, 取最后 n 个信号</p>
<p>只有收到了complete才知道结果。</p>
<h4 id="takeUntilBlock"><a href="#takeUntilBlock" class="headerlink" title="takeUntilBlock"></a>takeUntilBlock</h4><p>一直响应，直到传入的 block 第一次返回 YES</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[[signal takeUntilBlock:^<span class="built_in">BOOL</span>(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="keyword">return</span> [x isEqualToString:<span class="string">@"5"</span>];</div><div class="line">&#125;]</div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 1,2,3,3</span></div></pre></td></tr></table></figure>
<h4 id="takeWhileBlock"><a href="#takeWhileBlock" class="headerlink" title="takeWhileBlock"></a>takeWhileBlock</h4><p>一直响应，直到传入的 block 第一次返回 NO</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[[signal takeWhileBlock:^<span class="built_in">BOOL</span>(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="keyword">return</span> [x integerValue] &lt; <span class="number">5</span>;</div><div class="line">&#125;]</div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 1,2,3,3</span></div></pre></td></tr></table></figure>
<h4 id="skip"><a href="#skip" class="headerlink" title="skip"></a>skip</h4><p>传入一个数字 n 表明忽略前面第 n 个信号, 第 n + 1 个信号开始响应。</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[[signal skip:<span class="number">3</span>]</div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 3,5,3,6</span></div></pre></td></tr></table></figure>
<h4 id="skipUntilBlock"><a href="#skipUntilBlock" class="headerlink" title="skipUntilBlock"></a>skipUntilBlock</h4><p>一直忽略信号, 直到传入的 block 第一次返回 YES</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[[signal skipUntilBlock:^<span class="built_in">BOOL</span>(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="keyword">return</span> ![x isEqualToString:<span class="string">@"1"</span>];</div><div class="line">&#125;]</div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 2，3，3，5，3，6</span></div></pre></td></tr></table></figure>
<h4 id="skipWhileBlock"><a href="#skipWhileBlock" class="headerlink" title="skipWhileBlock"></a>skipWhileBlock</h4><p>一直忽略信号, 直到传入的 block 第一次返回 NO</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[[signal skipWhileBlock:^<span class="built_in">BOOL</span>(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="keyword">return</span> [x isEqualToString:<span class="string">@"1"</span>];</div><div class="line">&#125;]</div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 2，3，3，5，3，6</span></div></pre></td></tr></table></figure>
<h4 id="scanWithStart-reduce"><a href="#scanWithStart-reduce" class="headerlink" title="scanWithStart:reduce"></a>scanWithStart:reduce</h4><p>解决类似数组求和的问题</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">RACSequence *number = @[@<span class="number">1</span>,@<span class="number">2</span>,@<span class="number">3</span>,@<span class="number">4</span>].rac_sequence;</div><div class="line">RACSequence *sums =[number scanWithStart:@<span class="number">2</span> reduce:^<span class="keyword">id</span> _Nullable(<span class="built_in">NSNumber</span> *running, <span class="built_in">NSNumber</span> *next) &#123;</div><div class="line">    <span class="keyword">return</span> @(running.integerValue + next.integerValue);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 第一个参数是起点值, 第二个是便利的block block 中第一个是上一次便利的结果， 第二个是当前位置的值</span></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, sums.array);</div><div class="line"><span class="comment">//3,5,8,12</span></div></pre></td></tr></table></figure>
<h3 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h3><h4 id="contact"><a href="#contact" class="headerlink" title="contact"></a>contact</h4><p>把signalA拼接到signalB后，signalA发送完成，signalB才会被激活。</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">RACSignal *signal = [RACSignal createSignal:^RACDisposable * _Nullable(<span class="keyword">id</span>&lt;RACSubscriber&gt;  _Nonnull subscriber) &#123;  dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">2</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">        [subscriber sendNext:<span class="string">@"1"</span>];</div><div class="line">        [subscriber sendCompleted];<span class="comment">// 必须conpleted 才会到第二个 signal</span></div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;];</div><div class="line">RACSignal *singnal2 = [RACSignal createSignal:^RACDisposable * _Nullable(<span class="keyword">id</span>&lt;RACSubscriber&gt;  _Nonnull subscriber) &#123;</div><div class="line">    [subscriber sendNext:<span class="string">@"11"</span>];</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;];</div><div class="line">RACSignal *contact = [signal concat:singnal2];</div><div class="line">[contact subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 1,11</span></div></pre></td></tr></table></figure>
<h4 id="then"><a href="#then" class="headerlink" title="then"></a>then</h4><p>类似 contact 将两个 signal 链接</p>
<ol>
<li>只有等第一个 signal 介绍之后才会激活第二个 signal。 </li>
<li>在第一个 signal 结束之前 signal2 的信号会被忽略。  </li>
<li>第一个 signal 只关注 <code>complete</code> sendNext 被忽略</li>
</ol>
<p><strong>区别: contact signal1 的 sendNext 会响应, 而 then 的不会。</strong></p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// signal complete 发出之后 signal 的信号才会响应.</span></div><div class="line">RACSignal *then = [signal then:^RACSignal * _Nonnull&#123;</div><div class="line">    <span class="keyword">return</span> singnal2;</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h4 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h4><p>将两个 signal 合并为一个 signal 原先的信号发出 都会响应, 没有前后顺序。</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">RACSignal *merge = [signal merge:singnal2];    </div><div class="line">[merge subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h4 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h4><p>将两个signal 合并之后的 next 合并为一个 tuple 返回回来。 一一对应关系，一个信号的 next 等到第二个信号有 next 之后 包装成 signal 返回。<br>返回的 zip 第一个值就是第一个信号的next。</p>
<h4 id="combineLatest"><a href="#combineLatest" class="headerlink" title="combineLatest"></a>combineLatest</h4><p>将多个信号合并起来，并且拿到各个信号的最新的值,必须每个合并的signal至少都有过一次sendNext，才会触发合并的信号。</p>
<p><strong>zip 和 combineLatest 的区别</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">signal1-----1----2-----3------4-------5-------6--------7-----</div><div class="line"></div><div class="line">signal2----------------5----------------------7--------------</div><div class="line"></div><div class="line"></div><div class="line">combine 返回 (3，5)  （6，7）</div><div class="line">zip 返回     (1,5)    (2,7)</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[突然想聊聊 throttle]]></title>
      <url>https://CepheusSun.github.io/2017/04/26/%E7%AA%81%E7%84%B6%E6%83%B3%E8%81%8A%E8%81%8A%20throttle/</url>
      <content type="html"><![CDATA[<blockquote>
<p>如果我们将水龙头拧紧知道水是以水滴的形式流出, 不难发现, 每隔一段时间, 就会有一滴水流出来。</p>
</blockquote>
<p>如果我们预先设置一个执行周期, 当第一次调用动作(滴水)和第二次调用动作之间的间隔大于执行周期, 则执行这个动作。反正, 不执行。</p>
<p>直接翻译 <code>throttle</code> 这个单词。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">throttle</div><div class="line"></div><div class="line">n.	节流阀; 喉咙，气管; [机] 风门;</div><div class="line">vt.	扼杀，压制; 勒死，使窒息; 使节流; （用节汽阀等） 调节;</div><div class="line">vi.	节流，减速; 窒息;</div></pre></td></tr></table></figure>
<p>不难理解, throttle 其实就是一种控制数据或者流量大小的机制。</p>
<p>MrPeak 曾经写的文章中介绍过 <code>I/O Throttle</code> 在 <code>DISPATCH_QUEUE_PRIORITY_BACKGROUND</code> queue 的使用场景。在没有非常严苛的实时性要求的情况下, 对于重度依赖磁盘的后台任务, 使用 <code>DISPATCH_QUEUE_PRIORITY_BACKGROUND</code> 的 queue 会更加友好。文中也引用了官方文档的一段话 </p>
<blockquote>
<p>Items dispatched to the queue run at background priority; the queue is scheduled for execution after all high priority queues have been scheduled and the system runs items on a thread whose priority is set for background status. Such a thread has the lowest priority and any disk I/O is throttled to minimize the impact on the system.</p>
</blockquote>
<p>意思是说, 这种 Global Queue 会在其他所有的 queue 结束之后才会在后台执行。 这是最低优先级的。并且一些磁盘 I/O 操作会因为最小化对系统的影响而被节流。</p>
<a id="more"></a>
<p>文中也介绍了 ASI 和 AFN 中也出现了的 throttle。</p>
<blockquote>
<p>我们通过HTTP请求发送数据的时候，实际上数据是以Packet的形式存在于一个Send Buffer中的，应用层平时感知不到这个Buffer的存在。TCP提供可靠的传输，在弱网环境下，一个Packet一次传输失败的概率会升高，即使一次失败，TCP并不会马上认为请求失败了，而是会继续重试一段时间，同时TCP还保证Packet的有序传输，意味着前面的Packet如果不被ack，后面的Packet就会继续等待，如果我们一次往Send Buffer中写入大量的数据，那么在弱网环境下，排在后面的Packet失败的概率会变高，也就意味着我们HTTP请求失败的几率会变大。</p>
</blockquote>
<p>所以在弱网环境下, 使用 <code>Network Throttle</code> 机制 延迟发起一些请求或者减少往 Send Buffer 中的数据量。 也会大大的提高请求成功率。</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</div><div class="line"> Throttles request bandwidth by limiting the packet size and adding a delay for each chunk read from the upload stream.</div><div class="line"></div><div class="line"> When uploading over a 3G or EDGE connection, requests may fail with "request body stream exhausted". Setting a maximum packet size and delay according to the recommended values (`kAFUploadStream3GSuggestedPacketSize` and `kAFUploadStream3GSuggestedDelay`) lowers the risk of the input stream exceeding its allocated bandwidth. Unfortunately, there is no definite way to distinguish between a 3G, EDGE, or LTE connection over `NSURLConnection`. As such, it is not recommended that you throttle bandwidth based solely on network reachability. Instead, you should consider checking for the "request body stream exhausted" in a failure block, and then retrying the request with throttled bandwidth.</div><div class="line"></div><div class="line"> @param numberOfBytes Maximum packet size, in number of bytes. The default packet size for an input stream is 16kb.</div><div class="line"> @param delay Duration of delay each time a packet is read. By default, no delay is set.</div><div class="line"> */</span></div><div class="line"><span class="comment">// AFN 中的方法</span></div><div class="line">- (<span class="keyword">void</span>)throttleBandwidthWithPacketSize:(<span class="built_in">NSUInteger</span>)numberOfBytes</div><div class="line">                                  delay:(<span class="built_in">NSTimeInterval</span>)delay;</div></pre></td></tr></table></figure>
<h2 id="RAC-中的-throttle"><a href="#RAC-中的-throttle" class="headerlink" title="RAC 中的 throttle"></a>RAC 中的 throttle</h2><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[[[<span class="keyword">self</span>.button rac_signalForControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>] throttle:<span class="number">2</span>] subscribeNext:^(<span class="keyword">id</span> x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"throttle"</span>);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>RAC 中的 <code>throttle</code> 接受一个时间间隔 <code>interval</code> 作为参数, 如果 <code>RACSignal</code> 发出的 <code>next</code> 事件之后的 interval 时间内不再发出 next 那么, 他返回的 RACSignal 会将这个事件发出。也就是说，这个方法会将发送比较频繁的 <code>next</code> 事件舍弃,只保留着一段时间之前的 next 事件。</p>
<p>使用场景:</p>
<p><strong>1、处理用户输入框的信号</strong></p>
<p>在处理搜索这样的需求的时候,有时候可能会在用户在输入框输入之后自动跟服务器交互。然后在下面列表中展示处理结果。如果用户打字很快,这个时候可能几秒钟之内连续发去好几个请求，其实没有什么意义。 这个时候使用 throttle 可以将保留用户输入的少数几个结果, 然后返回一个信号, 将最后的文字作为 next 发出。</p>
<p><strong>2、监听按钮点击</strong></p>
<p>界面上又一个按钮, 然后点击这个按钮, 发起网络请求, 跟上面的例子类似。如果用户快速的点击这个按钮也比较蛋疼。按照以前的写法, 我们可能会设置一个 <code>flag</code> 在点击的时候将这个 <code>flag</code> 设置为 no, 然后在 <code>button</code> 的 <code>action</code> 中判断是否发起请求,然后在请求结果回来之后, 把这个 <code>flag</code> 改回来。 想想都比较蛋疼。这时候使用 <code>throttle</code> 将按钮的点击事件节流一下, 就好了。</p>
<p>这个直接搬用 MrPeak <a href="http://mp.weixin.qq.com/s/MsPEZ9GUwCSZN1kngBkJxw">iOS编程中throttle那些事</a>中的swift代码。 毕竟 OC 的意见在上面了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">button.rx_tap</div><div class="line">   .throttle(<span class="number">0.5</span>, <span class="type">MainScheduler</span>.instance)</div><div class="line">   .subscribeNext &#123; <span class="number">_</span> <span class="keyword">in</span> </div><div class="line">      <span class="built_in">print</span>(<span class="string">"Hello World"</span>)</div><div class="line">   &#125;</div><div class="line">   .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p><strong>在 OC 的 demo 中(ReactiveCocoa 2.5.0) 我也发现了一个问题。第一次的点击也会在这个间隔之后响应。之后又使用了 ReactiveObjc(3.0) 中也发现了这个问题,而在 swift 的 demo 中并没有这种情况。</strong></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实 throttle 并没有减少实际逻辑处理过程的执行来提高事件处理函数运行性能的手段, 并没有减少事件的触发次数。写到最后, 发现文章有点变成学习心得了😂😂😂😂</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[我用RAC干了些什么(一)]]></title>
      <url>https://CepheusSun.github.io/2017/04/21/%E6%88%91%E7%94%A8RAC%E5%B9%B2%E4%BA%86%E4%BA%9B%E4%BB%80%E4%B9%88(%E4%B8%80)/</url>
      <content type="html"><![CDATA[<p>对象间的交互, 主要有 <code>target-action</code>、<code>Notification</code>、<code>KVO</code>、<code>Delegate</code></p>
<h3 id="target-action"><a href="#target-action" class="headerlink" title="target-action"></a>target-action</h3><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[[<span class="keyword">self</span>.loginBtn rac_signalForControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>] subscribeNext:^(<span class="built_in">UIButton</span> *btn) &#123;</div><div class="line"> <span class="comment">// btn, 即 self.loginBtn</span></div><div class="line"> <span class="comment">// 这里执行点击之后的操作</span></div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>可以用 BlocksKit 替代</p>
<h3 id="KVO"><a href="#KVO" class="headerlink" title="KVO"></a>KVO</h3><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[RACObserve(<span class="keyword">self</span>, name) subscribeNext:^(<span class="built_in">NSString</span> *name) &#123;</div><div class="line">  <span class="comment">// name 即 self.name</span></div><div class="line">  <span class="comment">// 一旦 name 属性改变就立即进入到这个 block</span></div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// self.myLab.text 随着 self.myTF.text 的改变而改变</span></div><div class="line">RAC(<span class="keyword">self</span>.myLab, text) = <span class="keyword">self</span>.myTF.rac_textSignal;</div></pre></td></tr></table></figure>
<h3 id="Notificaiton"><a href="#Notificaiton" class="headerlink" title="Notificaiton"></a>Notificaiton</h3><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[[[[<span class="built_in">NSNotificationCenter</span> defaultCenter] </div><div class="line">rac_addObserverForName:<span class="built_in">UIKeyboardWillChangeFrameNotification</span> object:<span class="literal">nil</span>] </div><div class="line">  <span class="comment">// 这句不可少，表示 当 self 将要 dealloc 的时候，就要释放 通知</span></div><div class="line">  takeUntil:<span class="keyword">self</span>.rac_willDeallocSignal] </div><div class="line">  subscribeNext:^(<span class="built_in">NSNotification</span> *notification) &#123;</div><div class="line">      <span class="built_in">NSLog</span>(<span class="string">@"-----%@"</span>, notification.description);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>不要忘了还是原来的方法发送通知。</p>
<p><strong>通知已经通过 RAC 内部得到了释放，所以不需要额外在 - dealloc 添加移除的代码</strong></p>
<h3 id="RACCommand"><a href="#RACCommand" class="headerlink" title="RACCommand"></a>RACCommand</h3><blockquote>
<p>A command, represented by the RACCommand class, creates and subscribes to a signal in response to some action. This makes it easy to perform side-effecting work as the user interacts with the app.</p>
</blockquote>
<p>简单的使用RACCommand 实现一个 viewModel 的网络请求。</p>
<a id="more"></a>
<h4 id="每个viewModel都有不同的事件"><a href="#每个viewModel都有不同的事件" class="headerlink" title="每个viewModel都有不同的事件"></a>每个viewModel都有不同的事件</h4><p><code>ViewModel</code> 持有一个 <code>RACCommand</code> 的属性 <code>sourceCommand</code></p>
<h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 直接构建</span></div><div class="line">- (<span class="keyword">id</span>)initWithSignalBlock:(RACSignal * (^)(<span class="keyword">id</span> input))signalBlock;</div><div class="line"></div><div class="line"><span class="comment">// 只有当enabledSignal为true时, command才执行</span></div><div class="line">- (<span class="keyword">id</span>)initWithEnabled:(RACSignal *)enabledSignal signalBlock:(RACSignal * (^)(<span class="keyword">id</span> input))signalBlock;</div><div class="line"></div><div class="line"></div><div class="line">_sourceCommand = [[RACCommand alloc] initWithSignalBlock:^RACSignal *(<span class="keyword">id</span> input) &#123;</div><div class="line">    <span class="keyword">return</span> [[SYHTTPManager shared] request:[[SFAPI_Find_SectionList alloc] init]];</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h4 id="订阅"><a href="#订阅" class="headerlink" title="订阅"></a>订阅</h4><p>失败和成功不能像订阅其他<code>signal</code>一样直接<code>Next</code>、<code>onError</code>就可以。RACCommand 的失败消息, 都被分发到了 <code>errors</code> 这个属性。所以需要在这个地方订阅失败的消息.</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 订阅成功</span></div><div class="line">[_sourceCommand.executionSignals.switchToLatest subscribeNext:^(<span class="keyword">id</span> x) &#123;</div><div class="line">    PSLog(<span class="string">@"---%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 订阅失败</span></div><div class="line">[_sourceCommand.errors subscribeNext:^(<span class="keyword">id</span> x) &#123;</div><div class="line">    PSLog(<span class="string">@"xxx%@"</span>,x);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h4 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h4><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[command execute:someParameters];</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用Gitlab和Cocoapods创建私有pod]]></title>
      <url>https://CepheusSun.github.io/2017/04/19/%E4%BD%BF%E7%94%A8Gitlab%E5%92%8CCocoapods%E5%88%9B%E5%BB%BA%E7%A7%81%E6%9C%89pod/</url>
      <content type="html"><![CDATA[<p>每个稍微有点开发经验的 iOS 工程师都很容易的发现一下几点: </p>
<ol>
<li>几乎每个 iOS 的项目都适用了 <code>Cocoapods</code> </li>
<li>几乎每个 ObjC 的 iOS 项目是使用 <code>AFNetworking</code> 、 <code>SDWebImage</code>等三方框架。</li>
<li>几乎每个 Swift 的 iOS 项目都是用了 <code>Alamofire</code>、 <code>Kingfisher</code>等三方框架</li>
<li>每一次这些框架更新之后, 无数个工程师只需要在终端执行一下’pod update’ 或 <code>pod install</code>就能对应的更新自己项目中的代码</li>
</ol>
<p>这几乎都是每个 iOS 工程师经常都会遇到的事情。目前几乎所有优秀的 iOS 开源框架都支持了 CocoaPods。 几乎所有的 iOS 项目都集成了 CocoaPods</p>
<p>但是我们在日常的开发中也常会遇到这样的问题:</p>
<ol>
<li>很多公司都有好 App 同时在进行开发。</li>
<li>这些 App 或多或少在业务或者 UI 都很很多的重合。</li>
</ol>
<p>着就意味着有很多的代码在这些 App 中都是可以复用的。由于各种各样的原因,同个公司的不同 App 可能更新不同步。 app A 可能已经升级到新版本 app B 可能还在老版本。每个 App 分别管理势必会出现混乱的局面。一起管理又存在新旧交替的问题。如果每个 App 又不同的工程师负责, 即使可能有交叉 review 的机制, 但也很难保证公司代码的统一。很多逻辑都存在多段代码。</p>
<p>如何管理公司的公共代码库就成了一个比较麻烦的问题。</p>
<p>集成 IJKMediaPlayer 的时候,想到了使用git来区别版本,然后使用 framework 来管理共有代码。然而在出现了你的代码需要使用到其他的 Framework 的时候, 或者好几个 Framework 都需要使用同一个第三方框架的时候, 这么做确实也是件恼火的事情。</p>
<a id="more"></a>
<p>去年写了三了小组件 <code>SYNetwork</code> <code>EmptyDataKit</code> <code>SYPhotoBrowser</code>。前两个已经支持了 <code>Cocoapods</code> 之后网上不断的开始有一些利用 <code>cocoapods</code>进行组件化的文章。前些天在 去直播看了 casa 的两个关于组建化的直播之后。也一直蠢蠢欲动想自己也来做一下这件事情。</p>
<p>做开源的 repo 的时候，还是比较顺利的做到了这件事情。但是当时想用 <code>OSChina</code> 来做了几次都没有成功。就一直搁置了。</p>
<p>春节之后换了个工作, 适应了公司的环境, 简单的学习了一下 Swift 之后, 公司还是决定对现有的项目进行一次梳理,然后做一次重构。 所以很自然的还是想到了使用 <code>CocoaPods</code> 将公司原有的项目进行组件化。</p>
<p>结果了半天时间的尝试,报错create gitlab账号等等。终于达到了最初的想法。 所以将这个过程记录下来。</p>
<h2 id="为什么使用-GitLab"><a href="#为什么使用-GitLab" class="headerlink" title="为什么使用 GitLab"></a>为什么使用 GitLab</h2><p>其实上面已经说到了,为什么要使用 CocoaPods 来做这件事情。也说到了为什么要做这件事情。为什么使用 gitlab 呢？ 原因很简单。 毕竟 GitHub 的私有repo 是收费的。原谅我穷, 也可以说是公司扣门儿。只能把开源的东西放在, GitHub 把不能开源的东西放在其他地方。</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>其实没什么好准备的。 但是首先你得有个 Gitlab 账号吧！ 如果没有注册之后添加 SSH 就好了。</p>
<p>然后在 Gitlab 上创建一个空的仓库:XXX 然后记住这个项目的 地址: git@gitlab.com:XXX/XXX.git </p>
<h2 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h2><p>这些可以看我去年年底写开源 Cocoapods 的时候写的东西。<a href="http://cepheussun.com/2016/12/02/%E4%BD%BF%E7%94%A8Cocoapods%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84%E9%A1%B9%E7%9B%AE/">使用 Cocoapods 管理你的项目</a></p>
<p>基本上简化一下就是以下</p>
<h3 id="创建工程-1"><a href="#创建工程-1" class="headerlink" title="创建工程"></a>创建工程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pod lib create XXX</div></pre></td></tr></table></figure>
<p>回答问题</p>
<h3 id="添加私有库到本地-pod-库-多人开发其他人也应该有这个操作"><a href="#添加私有库到本地-pod-库-多人开发其他人也应该有这个操作" class="headerlink" title="添加私有库到本地 pod 库(多人开发其他人也应该有这个操作)"></a>添加私有库到本地 pod 库(多人开发其他人也应该有这个操作)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pod repo add XXX git@gitlab.com:XXX/XXX.git</div></pre></td></tr></table></figure>
<blockquote>
<p>可以检查一下: ~./cocoapods/repos 目录下又了 XXX 文件夹</p>
</blockquote>
<h3 id="将代码放进去"><a href="#将代码放进去" class="headerlink" title="将代码放进去"></a>将代码放进去</h3><blockquote>
<p>这一步上篇文章中有。 <a href="http://cepheussun.com/2016/12/02/%E4%BD%BF%E7%94%A8Cocoapods%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84%E9%A1%B9%E7%9B%AE/">使用 Cocoapods 管理你的项目</a></p>
</blockquote>
<h4 id="修改-podspec"><a href="#修改-podspec" class="headerlink" title="修改 .podspec"></a>修改 .podspec</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">Pod::Spec.new <span class="keyword">do</span> <span class="params">|s|</span></div><div class="line">  s.name             = <span class="string">'XXX'</span></div><div class="line">  s.version          = <span class="string">'0.0.1'</span></div><div class="line">  s.summary          = <span class="string">'这是项目的基础框架,所有项目都需要集成.'</span></div><div class="line"></div><div class="line">  s.homepage         = <span class="string">'https://gitlab.com/XXX/XXX'</span></div><div class="line">  s.license          = &#123; <span class="symbol">:type</span> =&gt; <span class="string">'MIT'</span>, <span class="symbol">:file</span> =&gt; <span class="string">'LICENSE'</span> &#125;</div><div class="line">  s.author           = &#123; <span class="string">'XXX'</span> =&gt; <span class="string">'cd_sunyang@163.com'</span> &#125;</div><div class="line">  s.source           = &#123; <span class="symbol">:git</span> =&gt; <span class="string">'git@gitlab.com:XXX/XXX.git'</span>, <span class="symbol">:tag</span> =&gt; s.version &#125;</div><div class="line"></div><div class="line">  s.ios.deployment_target = <span class="string">'8.0'</span></div><div class="line"></div><div class="line">  s.source_files = <span class="string">'XXX/Classes/**/*'</span></div><div class="line">  s.frameworks = <span class="string">'UIKit'</span></div><div class="line">  s.dependency <span class="string">'AFNetworking'</span></div><div class="line">  s.dependency <span class="string">'MBProgressHUD'</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>我这个Demo引用了两个公有的repo</p>
<h4 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git add .</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git commit -m &quot;commit comments&quot;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin master</div></pre></td></tr></table></figure>
<h4 id="检查一下"><a href="#检查一下" class="headerlink" title="检查一下"></a>检查一下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ pod lib lint</div><div class="line"></div><div class="line">#或者 pod lib lint --allow-warnings 忽略警告</div></pre></td></tr></table></figure>
<p>然后也可以在项目中的 <code>podfile</code>文件中添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">pod &apos;XXX&apos;, :path =&gt; &apos;/Users/xxx/Desktop/XXX&apos;</div><div class="line"></div><div class="line">## 最后路径以实际情况为准, 有可能不在桌面</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod install</div></pre></td></tr></table></figure>
<p>成功后我们的库会出现在<code>Development Pods</code>文件夹里面。可以检查一下有没有问题。</p>
<h4 id="提交私有库"><a href="#提交私有库" class="headerlink" title="提交私有库"></a>提交私有库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git tag 0.0.1</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push --tags</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod repo push XXX XXX.podspec</div></pre></td></tr></table></figure>
<h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><h4 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h4><p>在执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pod lib lint</div></pre></td></tr></table></figure></p>
<p>的时候,如果在你的文件中引入了一些三方库, 并且在<code>.podspec</code>文件中也添加了对用的<code>.dependency</code> 依然出现</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- ERROR | xcodebuild: /Users/xinhuikeji/Library/Developer/Xcode/DerivedData/App-cpgccqdjhyrbqwcpjanyefntolkf/Build/Products/Release-iphonesimulator/wLib/wLib.framework/Headers/BaseModel.h:13:9: error: include of non-modular header inside framework module &apos;wLib.BaseModel&apos; [-Werror,-Wnon-modular-include-in-framework-module]</div></pre></td></tr></table></figure>
<p>这样的错误。</p>
<p>在命令后面添加参数 <code>--use-libraries</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ pod lib lint xxx.podspec --use-libraries</div><div class="line">$ pod repo push XXX XXX.podspec --use-libraries</div><div class="line">``` </div><div class="line"></div><div class="line">在[segmentfault](https://segmentfault.com/q/1010000006885674)中看到的答案。</div><div class="line"></div><div class="line"></div><div class="line">#### pod search 找不到</div><div class="line"></div><div class="line">最后完成之后在新建的工程中</div></pre></td></tr></table></figure>
<p>$ pod init<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">```</div><div class="line">$ vim podfile</div></pre></td></tr></table></figure></p>
<p>添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod &quot;SYBase&quot;, :git =&gt; &apos;git@gitlab.com:CepheusSun/SYBase.git&apos;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod install</div></pre></td></tr></table></figure>
<p>然后莫名其妙发现引入的 repo 是<code>0.1.0</code>或者什么巴拉巴拉版本的。这个时候更新一下pod</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod updata</div></pre></td></tr></table></figure>
<p>再<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod install</div></pre></td></tr></table></figure></p>
<h4 id="强迫症"><a href="#强迫症" class="headerlink" title="强迫症"></a>强迫症</h4><p>如果遇到强迫症想要用 1.1.1 这样的三级版本的话。</p>
<p><code>XXX.podspec</code> 文件中的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">s.source = &#123; :git =&gt; &apos;git@gitlab.com:XXX/XXX.git&apos;, :tag =&gt; s.version &#125;</div></pre></td></tr></table></figure></p>
<p>必须用 s.version</p>
<p>我也不知道为什么。</p>
<h3 id="结束篇"><a href="#结束篇" class="headerlink" title="结束篇"></a>结束篇</h3><p>好久没写文章了。终于还是继续写了下去。这段时间自己学了学Swift 学了学 函数响应式编程, 七牛云直播的认证也下来的。接下来可能要研究一下推流相关的东西。2017 的前半段老实说学到了很多的东西。一直很感恩也很珍惜这样的情况。</p>
<p><strong>参考文档</strong></p>
<p><a href="http://www.th7.cn/program/ios/201702/1119967.shtml">组件化开发之CocoaPods私有库制作</a><br><a href="http://mt.sohu.com/20160824/n465823814.shtml">使用cocoapods管理私有库</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python 爬虫之一 "Requests 库学习"]]></title>
      <url>https://CepheusSun.github.io/2017/03/07/Requests%20%E5%BA%93/</url>
      <content type="html"><![CDATA[<p>这个系列的文章是用来记录我学习 python 爬虫的。这是第一篇。</p>
<a id="more"></a>
<h2 id="安装-requests-库"><a href="#安装-requests-库" class="headerlink" title="安装 requests 库"></a>安装 requests 库</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo pip install requests</div></pre></td></tr></table></figure>
<h2 id="验证安装是否成功"><a href="#验证安装是否成功" class="headerlink" title="验证安装是否成功"></a>验证安装是否成功</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ python</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment">#import requests</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(<span class="string">"http://www.baidu.com"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r.status_code</div><div class="line"><span class="number">200</span></div><div class="line">&gt;&gt;&gt;r.encoding = <span class="string">'utf-8'</span></div><div class="line">&gt;&gt;&gt;r.text</div></pre></td></tr></table></figure>
<h3 id="Requests-库的主要方法"><a href="#Requests-库的主要方法" class="headerlink" title="Requests 库的主要方法"></a>Requests 库的主要方法</h3><ul>
<li>requests.request()<blockquote>
<p>构造一个请求,支撑一下各方法的基础方法</p>
</blockquote>
</li>
<li>requests.get()<blockquote>
<p>获取HTML网页的主要方法,对应HTTP的GET</p>
</blockquote>
</li>
<li>requests.head()<blockquote>
<p>获取HTML网页头信息的方法,对应HTTP的HEAD</p>
</blockquote>
</li>
<li>requests.post()<blockquote>
<p>向HTML网页提交POST请求的方法,对应HTTP的POST</p>
</blockquote>
</li>
<li>requests.put()<blockquote>
<p>向HTML网页提交PUT请求的方法,对应HTTP的PUT</p>
</blockquote>
</li>
<li>requests.patch()<blockquote>
<p>向HTML网页提交局部修改请求,对应HTTP的POST</p>
</blockquote>
</li>
<li>requests.delete()<blockquote>
<p>向HTML网页提交删除请求,对应HTTP的POST</p>
</blockquote>
</li>
</ul>
<h3 id="Reuqest-最重要的两个对象"><a href="#Reuqest-最重要的两个对象" class="headerlink" title="Reuqest 最重要的两个对象"></a>Reuqest 最重要的两个对象</h3><h4 id="Request-对象"><a href="#Request-对象" class="headerlink" title="Request 对象"></a>Request 对象</h4><blockquote>
</blockquote>
<h4 id="Response-对象"><a href="#Response-对象" class="headerlink" title="Response 对象"></a>Response 对象</h4><blockquote>
<p>包含了爬虫返回的全部内容</p>
</blockquote>
<ul>
<li>r.status_code; 状态码,200表示成功,404表示失败</li>
<li>r.text; HTTP响应内容的字符串形式,即, URL 对应的页面内容</li>
<li><p>r.encoding; 从 HTTP header 中猜测的响应内容编码方式</p>
<blockquote>
<p>如果 header 中不存在 charset, 则认为编码是,ISO-8859-1</p>
</blockquote>
</li>
<li>r.apparent_encoding;从内容中分析出的响应内容编码方式(备选编码方式)</li>
<li>r.content; HTTP 响应内容的二进制形式</li>
</ul>
<h3 id="爬取网页的通用代码框架"><a href="#爬取网页的通用代码框架" class="headerlink" title="爬取网页的通用代码框架"></a>爬取网页的通用代码框架</h3><h4 id="Request-的异常"><a href="#Request-的异常" class="headerlink" title="Request 的异常"></a>Request 的异常</h4><ul>
<li>request.ConnectionError; 网络连接错误异常，如DNS查询失败，拒绝连接定</li>
<li>request.HTTPError; HTTP错误异常</li>
<li>request.URLRequired; URL 缺失异常</li>
<li>request.TooManyRedirects; 超过最大重定向次数,长生重定向异常</li>
<li>request.ConnectTimeout;链接远程服务器超时异常</li>
<li>requests.Timeout;请求URL超时，产生超时异常</li>
</ul>
<p>r.raise_for_status(); 如果不是200,产生已成requests.HTTPError</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -- coding: UTF-8 --</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span><span class="params">(url)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        r = requests.get(url, timeout=<span class="number">30</span>)</div><div class="line">        r.raise_for_status()</div><div class="line">        <span class="comment"># 如果状态不是200， 引发HTTPError异常</span></div><div class="line">        r.encoding = r.apparent_encoding</div><div class="line">        <span class="keyword">return</span> r.text</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">"产生异常"</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    url = <span class="string">"http://CepheusSun.com"</span></div><div class="line">    print(getHTMLText(url))</div></pre></td></tr></table></figure>
<center>通用代码框架</center>

<h4 id="HTTP-协议"><a href="#HTTP-协议" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h4><p>HTTP, Hypertext Transfer Protocol, 超文本传输协议。</p>
<p>HTTP 是一个基于”请求与响应”模式的、无状态的应用层协议。</p>
<p>HTTP 协议采用 URL 作为定位网络资源的标识。</p>
<p>URL格式: <a href="http://host[:port][path">http://host[:port][path</a>]</p>
<ul>
<li>host:合法的 Internet 主机域名或者 IP 地址</li>
<li>port:端口号,缺省端口为80</li>
<li>path:请求资源的路径</li>
</ul>
<p>URL 是通过 HTTP 协议存取资源的 Internet 路径, 一个 URL 对应一个数据资源。</p>
<p>HTTP 协议对资源的操作</p>
<p><strong>GET</strong>， 获取资源<br><strong>HEAD</strong>，获取资源头部信息<br><strong>POST</strong>，向URL位置的资源后附加新的数据<br><strong>PUT</strong>，储存一个资源，覆盖原来URL的资源<br><strong>PATCH</strong>，对原来的资源，进行局部更新<br><strong>DELETE</strong>，删除</p>
<h4 id="requests-request-method-url-kwargs"><a href="#requests-request-method-url-kwargs" class="headerlink" title="requests.request(method, url, **kwargs)"></a>requests.request(<code>method</code>, <code>url</code>, <code>**kwargs</code>)</h4><p>method: 请求方式,对应get/put/post等7种<br>url: 请求地址<br><code>**warrgs</code> 控制访问的参数，一共13个</p>
<ul>
<li><code>params</code>: 字典或字节序列，作为参数增加到url中</li>
<li><code>data</code>: 字典、字节序列或者文件对象，作为 Request 的内容</li>
<li><code>json</code>: JSON 格式的数据,作为 Request 的内容</li>
<li><code>headers</code>: 字典,HTTP定制头</li>
<li><code>cookies</code>:字典或CookieeJar, request中的cookie</li>
<li><code>auth</code>: 元组,支持HTTP认证功能</li>
<li><code>files</code>: 字典类型,传输文件</li>
<li><code>timeout</code>: 设定的超时时间，单位秒</li>
<li><p><code>proxies</code>: 字典类型,设定访问代理服务器,可以增加登录认证 </p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pxs = &#123;<span class="string">'http'</span>:<span class="string">'http//balabala'</span>,</div><div class="line"><span class="string">'https'</span>:<span class="string">'https"//balabala'</span></div><div class="line">&#125;</div><div class="line">r= requests.request(<span class="string">'GET'</span>,<span class="string">'http://www.baidu.com'</span>,proxies=pxs)</div></pre></td></tr></table></figure>
</li>
<li><p><code>allow_redirects</code>: True/False,默认True,重定向开关</p>
</li>
<li><code>stream</code>:True/False,默认True,获取内容立即下载开关</li>
<li><code>verify</code>:True/False,默认True,，认证 SSL 证书开关</li>
<li><code>cert</code>:本地SSL证书路径</li>
</ul>
<h3 id="网络爬虫的类型"><a href="#网络爬虫的类型" class="headerlink" title="网络爬虫的类型"></a>网络爬虫的类型</h3><p>按照尺寸区别</p>
<p>爬取网页，玩转网页。小规模,数据量小，爬取速度不敏感 requests 。</p>
<p>爬取网站，爬取系列网站. 中规模，数据规模较大，爬取速度敏感 Scrapy 库</p>
<p>爬取全网。大规模,搜索引擎，爬取速度关键,只能定制开发</p>
<h3 id="反爬虫"><a href="#反爬虫" class="headerlink" title="反爬虫"></a>反爬虫</h3><h4 id="来源审查-判断-User-Agent-进行限制"><a href="#来源审查-判断-User-Agent-进行限制" class="headerlink" title="来源审查: 判断 User-Agent 进行限制"></a>来源审查: 判断 User-Agent 进行限制</h4><blockquote>
<p>检查来访 HTTP 协议头的 User-Agent 域，只响应浏览器或者友好爬虫的访问。</p>
</blockquote>
<h4 id="发布公告-Robots-协议"><a href="#发布公告-Robots-协议" class="headerlink" title="发布公告 Robots 协议"></a>发布公告 Robots 协议</h4><blockquote>
<p>告知所有爬虫网站的爬取策略,要求爬虫遵守</p>
</blockquote>
<h3 id="Robots-协议"><a href="#Robots-协议" class="headerlink" title="Robots 协议"></a>Robots 协议</h3><p>Robots Exclusion Standard 网络爬虫排除标准</p>
<p>作用: 网站告知网络爬虫哪些页面可以抓取,哪些不行。<br>形式: 在网站根目录下的 robots.txt 文件<br>使用:</p>
<ul>
<li>网络爬虫：自动或者人工识别robots.txt， 再进行内容爬取</li>
<li>约束性: Robots 协议是建议但非约束性,网络爬虫可以不遵守，但是存在法律风险</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS面试集锦&2017年02月22日01]]></title>
      <url>https://CepheusSun.github.io/2017/02/22/interview07022201/</url>
      <content type="html"><![CDATA[<ol>
<li><code>id</code> 和 <code>instancetype</code> 的区别?</li>
<li>有方法查看当前系统内存使用的情况吗？</li>
<li>为什么 NotificationCenter 要 removeObserver? 如何实现自动 remove？</li>
<li>iOS的沙盒目录结构是怎样的？ App Bundle 里面都有什么？</li>
<li>简单描述一下客户端的缓存机制？</li>
</ol>
<p>注意： 以后的更新全部放在 GitHub 博客不再继续添加了。 毕竟好多内容放在这里也没有什么意义。<br><a id="more"></a></p>
<p>##2017-02-22</p>
<p>#####1. <code>id</code> 和 <code>instancetype</code> 的区别?</p>
<ol>
<li><p>在 ARC(Auto Reference Count)环境下:</p>
<pre><code>instancetype 用来在编译期确定实例的类型,而使用 id 的话,编译器不检查类型, 运行时检查类型.
</code></pre><p>在 MRC(Manual Reference Count)环境下:</p>
<pre><code>instancetype 和 id 一样,不做具体类型检查
</code></pre></li>
<li><p>id 可以作为方法的参数,但 instancetype 不可以<br>instancetype 只适用于初始化方法和便利构造器的返回值类型</p>
</li>
</ol>
<p>#####2. 有方法查看当前系统内存使用的情况吗？<br>一般我上手新的项目,检查内存问题三部曲;</p>
<ol>
<li>静态分析, 初步了解代码不规范的地方,或者是一些内存泄漏问题。</li>
<li>instrument, 初略的定位我们在什么地方发生了内存泄漏。</li>
<li>代码测试内存泄漏, 观察对象的生成和销毁是否配对。使用MLeaksFinder来配合检查</li>
</ol>
<ul>
<li>两个对象互相持有，主要是 delegate 使用 weak 属性, 在 iOS8 上系统 delegate 使用的是 assign 这会带来一些问题,踩过坑的老司机可以提一下。</li>
<li>有时候需要使用 removeFromSuperView 来释放, a 持有了 b ， b 被 add 到了 c 上, 而在程序设计中b 的生命周期应该和 a 相同, 这个时候使用 self.b = nil 并不会吧 b 释放, 我们应该在之前加上 <code>[b removeFromSuperView]</code></li>
</ul>
<p>#####3. 为什么 NotificationCenter 要 removeObserver? 如何实现自动 remove？</p>
<ul>
<li>如果不移除，万一注册通知的类被销毁之后又发送了通知, 程序会 crash。 因为野指针。</li>
<li>实现自动 remove;通过自动释放机制, 通过动态属性将 remove 转移给第三者,解除耦合,达到自动实现 remove 。</li>
</ul>
<p>#####4. iOS的沙盒目录结构是怎样的？ App Bundle 里面都有什么？</p>
<ol>
<li>沙盒结构<ul>
<li>Application: 存放程序源文件, 上架前经过数字签名,上架后不可修改</li>
<li>Documents: 常用目录, iCloud 备份目录,存放数据,这里不能缓存文件,否则上架不被通过</li>
<li>Library<ul>
<li>Caches: 存放体积大又不需要备份的数据, SDWebImage 就是这个</li>
<li>Preference: 设置目录, iCloud会备份设置信息。</li>
<li>tmp: 存放临时文件,不会被备份,而且这个文件下的数据有可能随时被清除</li>
</ul>
</li>
</ul>
</li>
<li>App Bundle<ul>
<li>Info.plist: 文件的配置信息,系统依赖次文件获取应用程序的相关信息。</li>
<li>可执行文件: 此文件包含应用程序的入口和通过静态链接到应用程序 target 的代码。</li>
<li>资源文件: 图片声音</li>
<li>其他: 可以潜入定制的数据资源。</li>
</ul>
</li>
</ol>
<h5 id="5-简单描述一下客户端的缓存机制？"><a href="#5-简单描述一下客户端的缓存机制？" class="headerlink" title="5.简单描述一下客户端的缓存机制？"></a>5.简单描述一下客户端的缓存机制？</h5><ul>
<li>缓存可以分为:<ul>
<li>内存数据缓存</li>
<li>数据库缓存</li>
<li>文件缓存</li>
</ul>
</li>
<li>每次想获取数据的时候<ol>
<li>检查内存中有无缓存</li>
<li>检查本地有无缓存(数据库\文件)</li>
<li>发起请求</li>
<li>将服务器返回的数据进行缓存(内存数据库文件)</li>
</ol>
</li>
</ul>
<pre><code>---
</code></pre><h5 id="写在后面的话"><a href="#写在后面的话" class="headerlink" title="写在后面的话"></a>写在后面的话</h5><p>这个系列所有的文章都是在一个QQ群里面跟小伙伴们讨论出来的,每个 topic 都已经放在了 GitHub 的一个仓库中 <a href="https://github.com/GetOfferSoldier/Objective-C"><strong>这是地址</strong></a>。 所有内容的更新的将在这个仓库中进行,在博客中将不再进行更新。有任何问题，都可以在这个仓库中给我们提 issue 或者 pull request.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS面试集锦&2017年02月21日01]]></title>
      <url>https://CepheusSun.github.io/2017/02/21/interview07022101/</url>
      <content type="html"><![CDATA[<ol>
<li>写出中序遍历二叉树的算法(不限编程语言，已知 TreeRoot 为二叉树的根)</li>
<li>快速排序，归并排序的时间复杂度分别是什么？</li>
<li>UITableViewCell 可重用机制是什么?有什么要注意的地方?</li>
<li>OC 中的 @property 和 @synthesize 有什么用？</li>
<li>OC有没有重载(overload)和重写(overwrite)？有的话请举个例子。</li>
<li>列举出 iOS 开发中三种最常出现的循环引用的场景。</li>
<li>MVC 模式具体指什么？iOS现在流行的 MVVM 是什么？</li>
<li>iOS 中设计金钱计算和比较时，用数值应该用哪个类型来处理？</li>
<li>iOS 上触摸事件的视图检测和事件传递过程是怎样的？  </li>
<li>写一个折半查找或者快速排序</li>
</ol>
<a id="more"></a>
<p>#####1.写出中序遍历二叉树的算法(不限编程语言，已知 TreeRoot 为二叉树的根)。  </p>
<pre><code>最近在学 Python 所以整理了一个 Python 版的
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -- coding: UTF-8 --</span></div><div class="line"><span class="comment"># @Date    : 2017-02-21</span></div><div class="line"><span class="comment"># @Author  : CepheusSun</span></div><div class="line"><span class="comment"># @Version : python 2.7</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tree</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data, left, right)</span>:</span></div><div class="line">        self.data = data</div><div class="line">        self.left = left</div><div class="line">        self.right = right</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">in_visit</span><span class="params">(tree)</span>:</span></div><div class="line">    <span class="string">"""递归中序遍历"""</span></div><div class="line">    <span class="keyword">if</span> tree:</div><div class="line">        in_visit(tree.left)</div><div class="line">        <span class="keyword">print</span> (tree.data)</div><div class="line">        in_visit(tree.right)</div><div class="line">        </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">in_stack</span><span class="params">(tree)</span>:</span></div><div class="line">    <span class="string">"""堆栈中序遍历"""</span></div><div class="line">    <span class="keyword">if</span> tree:</div><div class="line">        my_stack = []</div><div class="line">        node = tree</div><div class="line">        <span class="keyword">while</span> node <span class="keyword">or</span> my_stack:</div><div class="line">            <span class="keyword">while</span> node:</div><div class="line">                my_stack.append(node)</div><div class="line">                node = node.left</div><div class="line">            node = my_stack.pop()</div><div class="line">            print(node.data)</div><div class="line">            node = node.right</div><div class="line"></div><div class="line">            <span class="keyword">print</span> my_stack2.pop().data</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    node1 = Tree(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>)</div><div class="line">    node2 = Tree(<span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>)</div><div class="line">    node3 = Tree(<span class="number">3</span>, node1, node2)</div><div class="line">    node4 = Tree(<span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>)</div><div class="line">    node5 = Tree(<span class="number">5</span>, node4, node3)</div><div class="line">    print(<span class="string">"the post_visit is ..."</span>)</div><div class="line">    post_visit(node5)</div><div class="line">    post_stack(node5)</div><div class="line">    print(<span class="string">"the pre_visit is ..."</span>)</div><div class="line">    pre_visit(node5)</div><div class="line">    pre_stack(node5)</div><div class="line">    print(<span class="string">"the in_visit is ..."</span>)</div><div class="line">    in_visit(node5)</div><div class="line">    in_stack(node5)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure>
<h5 id="2-快速排序，归并排序的时间复杂度分别是什么？"><a href="#2-快速排序，归并排序的时间复杂度分别是什么？" class="headerlink" title="2.快速排序，归并排序的时间复杂度分别是什么？"></a>2.快速排序，归并排序的时间复杂度分别是什么？</h5><ul>
<li>归并排序：稳定，时间复杂度 O(nlog n)</li>
<li>快速排序：不稳定，时间复杂度 最理想 O(nlogn) 最差时间O(n^2)</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -- coding: UTF-8 --</span></div><div class="line"><span class="comment"># @Date    : 2017-02-21</span></div><div class="line"><span class="comment"># @Author  : CepheusSun</span></div><div class="line"><span class="comment"># @Version : python 2.7</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(array, first_index, last_index)</span>:</span></div><div class="line">    <span class="string">"""快速排序"""</span></div><div class="line">    <span class="keyword">if</span> first_index &lt; last_index:</div><div class="line">        div_index = partition(array, first_index, last_index)</div><div class="line">        quick_sort(array, first_index, div_index)</div><div class="line">        quick_sort(array, div_index + <span class="number">1</span>, last_index)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(array, first_index, last_index)</span>:</span></div><div class="line">    i = first_index - <span class="number">1</span></div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(first_index, last_index):</div><div class="line">        <span class="keyword">if</span> array[j] &lt;= array[last_index]:</div><div class="line">            i += <span class="number">1</span></div><div class="line">            array[i], array[j] = array[j], array[i]</div><div class="line">    array[i + <span class="number">1</span>], array[last_index] = array[last_index], array[i + <span class="number">1</span>]</div><div class="line">    <span class="keyword">return</span> i</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(left, right)</span>:</span></div><div class="line">    i, j = <span class="number">0</span>, <span class="number">0</span></div><div class="line">    res = []</div><div class="line">    <span class="keyword">while</span> i &lt; len(left) <span class="keyword">and</span> j &lt; len(right):</div><div class="line">        <span class="keyword">if</span> left[i] &lt;= right[j]:</div><div class="line">            res.append(left[i])</div><div class="line">            i += <span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            res.append(right[j])</div><div class="line">            j += <span class="number">1</span></div><div class="line">    res += left[i:]</div><div class="line">    res += right[j:]</div><div class="line">    <span class="keyword">return</span> res</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span><span class="params">(array)</span>:</span></div><div class="line">    <span class="string">"""并归排序"""</span></div><div class="line">    <span class="keyword">if</span> len(array) &lt;= <span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> array</div><div class="line">    num = len(array) / <span class="number">2</span></div><div class="line">    left = merge_sort(array[:num])</div><div class="line">    right = merge_sort(array[num:])</div><div class="line">    <span class="keyword">return</span> merge(left, right)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    array = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">76</span>, <span class="number">5</span>, <span class="number">567</span>, <span class="number">54</span>, <span class="number">6</span>, <span class="number">54</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">0</span>]</div><div class="line">    print(<span class="string">"initial array : \n"</span>, array)</div><div class="line">    print(<span class="string">"merge sort result: \n"</span>, merge_sort(array))</div><div class="line">    quick_sort(array, <span class="number">0</span>, len(array) - <span class="number">1</span>)</div><div class="line">    print(<span class="string">"result array :\n"</span>, array)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div><div class="line"></div><div class="line">``` </div><div class="line">    </div><div class="line"><span class="comment">##### 3.UITableViewCell 可重用机制是什么?有什么要注意的地方?</span></div><div class="line"></div><div class="line">UITableView 通过重用单元格来达到节省内存的目的：通过为每个单元格指定一个重用标识符，即指定来单元格的种类，以及当单元格滚出屏幕时，允许恢复单元格以便重用。对于不同种类的单元格使用不同的ID，对于简单的表格，一个标识符就够了。</div><div class="line"></div><div class="line">需要注意的地方：</div><div class="line">    取出来的cell是有可能已经捆绑过数据或者加过子视图的，如果有必要，要清除需要用与显示的数据和remove掉add过的子视图。不然会造成错乱的情况</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">##### 4.OC 中的 @property 和 @synthesize 有什么用？</span></div><div class="line"></div><div class="line">答：</div><div class="line">iOS2<span class="number">.0</span> Apple引入 `@property` `@synthesize` 概念，两者组合使用可以自动生成 `seter` `geter`方法，iOS4<span class="number">.0</span>以后只需要 `@property` 即可实现 自动生成 `seter` `geter`方法。</div></pre></td></tr></table></figure>
<p>//setter</p>
<ul>
<li>(void)setObjStr:(NSString *)objStr {<br>   if (_ objStr != objStr) {<pre><code>[_objStr release];
 _objStr = [objStr copy];
</code></pre>   }<br>}<br>//getter</li>
<li>(NSString *)objStr {<br>   return _objStr;<br>}<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">以上代码等价于</div></pre></td></tr></table></figure>
</li>
</ul>
<p>//iOS2.0-iOS4.0<br>@interface Obj : NSObject<br>@property (nonatomic, copy) NSString *objStr;<br>@end</p>
<p>@implementation Object<br>@synthesize objStr = _ objStr;<br>@end<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iOS4.0及以后</div></pre></td></tr></table></figure></p>
<p>@interface Obj : NSObject<br>@property (nonatomic, copy) NSString *objStr;<br>@end<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">##### 5.OC有没有重载(overload)和重写(overwrite)？有的话请举个例子。</div><div class="line"></div><div class="line">答：</div><div class="line">OC 语言不支持重载</div><div class="line"></div><div class="line">```oc</div><div class="line">-(void)doSth:(NSInteger)integer;</div><div class="line">-(void)doSth:(NSString *)str; </div><div class="line">//对Objective-C而言是一样的，都叫方法doSth: 同时定义实现这两个方法是无法编译通过的。 若要达到类似重载的效果，可以这样跟不同参数：</div><div class="line">-(void)doSthWithInt:(NSInteger)integer;</div><div class="line">-(void)doSthWithStr:(NSString *)str</div></pre></td></tr></table></figure></p>
<p>OC 支持重写</p>
<pre><code>子类重写父类方法
</code></pre><h5 id="6-列举出-iOS-开发中三种最常出现的循环引用的场景。"><a href="#6-列举出-iOS-开发中三种最常出现的循环引用的场景。" class="headerlink" title="6.列举出 iOS 开发中三种最常出现的循环引用的场景。"></a>6.列举出 iOS 开发中三种最常出现的循环引用的场景。</h5><p>答：</p>
<ul>
<li>delegate 被强引用了，代理应该使用 weak (拓展 weak 干了啥使自己可以防止循环的出现)  </li>
<li>使用 block 的时候，注意是否出现互相持有。  </li>
<li>使用 NSTimer 的时候，我们可能会使<code>+scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:</code> 这个方法在建立的时候需要指定 target ，会被 timer retain 一份。因为 timer 还在一直执行，就会导致无法运行 dealloc的方法。正确的做法是在 viewDidDisappear: 的时候停止timer </li>
</ul>
<h5 id="7-MVC-模式具体指什么？iOS现在流行的-MVVM-是什么？"><a href="#7-MVC-模式具体指什么？iOS现在流行的-MVVM-是什么？" class="headerlink" title="7.MVC 模式具体指什么？iOS现在流行的 MVVM 是什么？"></a>7.MVC 模式具体指什么？iOS现在流行的 MVVM 是什么？</h5><p>MVC：</p>
<pre><code>MVC模式考虑三种对象：模型对象、视图对象和控制器对象。 模型对象负责应用程序的数据和定义操作数据的逻辑； 视图对象知道如何显示应用程序的模型数据； 控制器对象是M与V之间的协调者。
</code></pre><p>MVVM：</p>
<pre><code>MVVM 把 View Controller 作为 View
View 和 Model 之间没有紧耦合
MVVM 是在 View 和 ViewModel 之间进行绑定。
什么是 ViewModel 呢？基本上来说，它是 View 和 View 状态的独立于     UIKit 外的一个呈现，ViewModel 调用 Model 中的的变化，根据 Model 的变化进行调整，并且通过 View 和 ViewModel 的绑定，同步调整 View。
</code></pre><h5 id="8-iOS-中设计金钱计算和比较时，用数值应该用哪个类型来处理？"><a href="#8-iOS-中设计金钱计算和比较时，用数值应该用哪个类型来处理？" class="headerlink" title="8.iOS 中设计金钱计算和比较时，用数值应该用哪个类型来处理？"></a>8.iOS 中设计金钱计算和比较时，用数值应该用哪个类型来处理？</h5><ul>
<li><code>NSDecimalNumber</code> 继承于 <code>NSNumber</code>   </li>
<li><p><code>NSDecimalNumber</code> 包含  加减乘除，幂运算，指数运算，四舍五入，比较运算。  </p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line">	/** 示例 比较运算</div><div class="line">	NSOrderedAscending 升序</div><div class="line">	NSOrderedSame 相等</div><div class="line">	NSOrderedDescending 降序</div><div class="line">	- (NSComparisonResult)compare:(NSNumber *)decimalNumber;</div><div class="line">	*/</div><div class="line">	NSDecimalNumber *discount1 = [NSDecimalNumber decimalNumberWithString:@&quot;1.2&quot;];</div><div class="line">	NSDecimalNumber *discount2 = [NSDecimalNumber decimalNumberWithString:@&quot;1.3&quot;];</div><div class="line">	NSComparisonResult result = [discount1 compare:discount2];</div><div class="line">	if (result == NSOrderedAscending) &#123;</div><div class="line">	    NSLog(@&quot;1.2 &lt; 1.3&quot;);</div><div class="line">	&#125; else if (result == NSOrderedSame) &#123;</div><div class="line">	    NSLog(@&quot;1.2 == 1.3&quot;);</div><div class="line">	&#125; else if (result == NSOrderedDescending) &#123;</div><div class="line">	    NSLog(@&quot;1.2 &gt; 1.3&quot;);</div><div class="line">	&#125;</div><div class="line">	输出结果 1.2 &lt; 1.3</div><div class="line">	``` </div><div class="line"></div><div class="line">##### 9.iOS 上触摸事件的视图检测和事件传递过程是怎样的？  </div><div class="line"></div><div class="line">* 发生触摸事件后，系统会将该事件加入到一个由UIApplication管理的事件队列中。(为什么是队列而不是栈？因为队列的特定是先进先出，先产生的事件先处理才符合常理，所以把事件添加到队列。)</div><div class="line"></div><div class="line">* UIApplication会从事件队列中取出最前面的事件，并将事件分发下去以便处理，通常，先发送事件给应用程序的主窗口（keyWindow）。</div><div class="line"></div><div class="line">* 主窗口会在视图层次结构中找到一个最合适的视图来处理触摸事件，这也是整个事件处理过程的第一步。</div><div class="line">找到合适的视图控件后，就会调用视图控件的touches方法来作具体的事件处理。</div><div class="line"></div><div class="line">##### 10.写一个折半查找或者快速排序</div><div class="line"></div><div class="line">    用 Python写了一个二分查找</div><div class="line">    </div><div class="line">```python</div><div class="line"># -- coding: UTF-8 --</div><div class="line"># @Date    : 2017-02-21</div><div class="line"># @Author  : CepheusSun</div><div class="line"># @Version : python 2.7</div><div class="line"></div><div class="line"></div><div class="line">def in_bisect(word_list, word):</div><div class="line">    &quot;&quot;&quot;check weather a word is in a list using bisection search.</div><div class="line">    Precondition: the words in the list are sorted</div><div class="line"></div><div class="line">    :param word_list: list of strings</div><div class="line">    :param word: string</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    if len(word_list) == 0:</div><div class="line">        return False</div><div class="line"></div><div class="line">    # 结果四舍五入</div><div class="line">    i = len(word_list) // 2</div><div class="line">    if word_list[i] == word:</div><div class="line">        return True</div><div class="line"></div><div class="line">    if word_list[i] &gt; word:</div><div class="line">        # search the first half</div><div class="line">        return in_bisect(word_list[:i], word)</div><div class="line">    else:</div><div class="line">        # search the second half</div><div class="line">        return in_bisect(word_list[i + 1:], word)</div><div class="line"></div><div class="line"></div><div class="line">def main():</div><div class="line">    array = [&apos;1&apos;, &apos;asf&apos;, &apos;sf2&apos;, &apos;df1&apos;, &apos;2das&apos;, &apos;5asdfd&apos;, &apos;0sadf&apos;,</div><div class="line">            &apos;2ge&apos;, &apos;efc2&apos;, &apos;1eds&apos;, &apos;2ef&apos;, &apos;2apple&apos;, &apos;apple&apos;, &apos;orange&apos;]</div><div class="line">    print(in_bisect(array, &apos;1&apos;))</div><div class="line">    print(in_bisect(array, &apos;111&apos;))</div><div class="line"></div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    main()</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>参考资料</strong><br><a href="http://blog.sina.com.cn/s/blog_771849d301010ta0.html">资料1</a></p>
<p><a href="https://my.oschina.net/iamzkt/blog/126503">Objective-C 之 @property和@synthesize</a>  </p>
<p><a href="https://www.pupboss.com/property-and-synthesize/">回炉篇之（一）– @property和@synthesize</a>  </p>
<p><a href="http://arthurchen.blog.51cto.com/2483760/761426">iOS开发：Objective-C精确的货币计算</a> </p>
<p><a href="http://www.jianshu.com/p/4703d704c953">‘NSDecimalNumber–十进制数’使用方法(带例子)</a></p>
<p><a href="https://yq.aliyun.com/wenzhang/show_41715">objective c-OC中有方法重载吗？具体是怎么样？</a></p>
<p>think python</p>
<hr>
<h5 id="写在后面的话"><a href="#写在后面的话" class="headerlink" title="写在后面的话"></a>写在后面的话</h5><p>这个系列所有的文章都是在一个QQ群里面跟小伙伴们讨论出来的,每个 topic 都已经放在了 GitHub 的一个仓库中 <a href="https://github.com/GetOfferSoldier/Objective-C"><strong>这是地址</strong></a>。 所有内容的更新的将在这个仓库中进行,在博客中将不再进行更新。有任何问题，都可以在这个仓库中给我们提 issue 或者 pull request.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS面试集锦&2017年02月20日01]]></title>
      <url>https://CepheusSun.github.io/2017/02/20/interview07022001/</url>
      <content type="html"><![CDATA[<ol>
<li>对内存管理的理解。</li>
<li>类别的作用</li>
<li>点击屏幕上的按钮，系统做了什么？</li>
</ol>
<a id="more"></a>
<p>##2017-02-20  Question<br>Question 1.内存管理理解不正确的是<br>A 程序A里有一段内存被成功申请完成之后，内存计数器就从0变为1 (这个过程是alloc);<br>B 程序B里要使用已存在内存，那么内存计数器从1变为2 (这个过程是retain或者copy);<br>C 紧接着程序A不需要这个内存了，那么程序A就把这个内存计数器减1 (这个过程是release);<br>D 当系统发现这个内存计数器变为小于等于0，那么就调用垃圾回收程序把这段内存回收(这个过程是dealloc)；</p>
<p>Question 2.类别的作用不正确的是<br>A 将类的实现分散到多个不同文件或多个不同框架中。<br>B 创建对私有方法的前向引用。<br>C 向对象添加非正式协议。 继承可以增加，修改或者删除方法。<br>D 不能添加属性  </p>
<p>Question 3.点击屏幕上的按钮，系统做了什么？  </p>
<h2 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h2><p>Answer 1. B  使用并不会增加引用技术，持有才会。<br>Answer 2. D  </p>
<pre><code>class-continuation分类是唯一能给添加属性的分类。而所谓的关联对象，我在52个方法中找到了这样一句话：
    * “定义关联对象时可以指定内存管理语义，用以模仿定义属性时所采用的“拥有”和“非拥有关系””
可见，关连对象跟属性是两个不同的概念，不能混为一谈。

类别的三个作用：
    * 可以将类的实现分散到多个不同文件或多个不同框架中，方便代码管理。
    * 创建对私有方法的前向引用。比如在别人的类或者框架中有一个方法的是没有说明的，这时候通过类别声明这个方法，就可以在不破坏原来框架的情况下，使用到这个方法。
    * 向对象添加非正式协议。
</code></pre><p>Answer 3.   </p>
<ul>
<li>触摸事件的传递是从父空间传递到子控件，如果父空间不能接收触摸事件，那么子控件就不能接收触摸事件  </li>
<li>发生触摸事件后，系统会将该事件加入到一个由UIApplication管理的事件队列中。(为什么是队列而不是栈？因为队列的特定是先进先出，先产生的事件先处理才符合常理，所以把事件添加到队列。)  </li>
<li>UIApplication会从事件队列中取出最前面的事件，并将事件分发下去以便处理，通常，先发送事件给应用程序的主窗口（keyWindow）。  </li>
<li>主窗口会在视图层次结构中找到一个最合适的视图来处理触摸事件，这也是整个事件处理过程的第一步。<br>找到合适的视图控件后，就会调用视图控件的touches方法来作具体的事件处理。  </li>
</ul>
<blockquote>
<p>参考<br><a href="http://www.cnblogs.com/LiLihongqiang/p/5645907.html">http://www.cnblogs.com/LiLihongqiang/p/5645907.html</a><br><a href="http://www.infocool.net/kb/IOS/201610/200104.html">http://www.infocool.net/kb/IOS/201610/200104.html</a><br><a href="http://www.cocoachina.com/ios/20160113/14896.html">http://www.cocoachina.com/ios/20160113/14896.html</a><br><a href="http://www.jianshu.com/p/2e074db792ba">http://www.jianshu.com/p/2e074db792ba</a>  </p>
</blockquote>
<hr>
<h5 id="写在后面的话"><a href="#写在后面的话" class="headerlink" title="写在后面的话"></a>写在后面的话</h5><p>这个系列所有的文章都是在一个QQ群里面跟小伙伴们讨论出来的,每个 topic 都已经放在了 GitHub 的一个仓库中 <a href="https://github.com/GetOfferSoldier/Objective-C"><strong>这是地址</strong></a>。 所有内容的更新的将在这个仓库中进行,在博客中将不再进行更新。有任何问题，都可以在这个仓库中给我们提 issue 或者 pull request.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS面试集锦&2017年02月19日01]]></title>
      <url>https://CepheusSun.github.io/2017/02/19/interview07021901/</url>
      <content type="html"><![CDATA[<p>按钮或者 View 在进行 frame 动画的时候，为什么点击 frame 动画的重点位置才能触发事件？如何在动画过程中响应事件？</p>
<a id="more"></a>  
<p>答：<br>① <del>动画开始后有两个图层：</del><br>（修改原因：不是动画开始后,而是 view 出现了的时候。只要 view 出现在试图上,他都具有这两个图层。）<br><strong>iOS 中对于 UIView 具有一个 CALayer 类的属性 layer 我们姑且叫他 rootLayer。而每一个 CALayer 都有两个属性：</strong><br><del>一个 <code>view.layer.presentationLayer</code> 用来显示动画（属性随动画过程慢慢改变)</del><br>（修改原因:感觉显示动画这个用法不大准确,我语文也不好😂）<br><strong>一个<code>resentationLayer</code> 指呈现图层,是模型图层的复制，他的属性值代表了在任何指定时刻当前的显示。所以在 UIView 没有出现的时候这个 view 的属性值为 nil， 出现之后无论 view 是否动画，这个值的内存地址每次打印都不一样。</strong></p>
<p><del>一个 <code>view.layer</code> 用来处理用户交互（动画一开始属性值立即改变到动画结束时的状态和位置)</del><br>(修改原因: CALayer 是不处理交互的,这一点可以从UIView有<code>userInteractionEnabled</code>这个属性，而CALayer没有可以看出,并且看 iOS-CoreAnimation这本书,这样使用 modelLayer 来描述更 MVC 一些)<br><strong>一个<code>modelLayer</code> 指模型层,在 view 显示出来的时候<code>view.layer</code> = <code>view.layer.presentationLayer.modelLayer</code> = <code>view.layer.view.layer.modelLayer</code>。 三者内存地址是一样的,保存实际的属性值。</strong></p>
<p><strong>最后总结：当一个图层的属性改变的时候，我们设置的属性并没有直接调用图层的外观，只是定义了图层动画结束之后将要变化的外观。</strong>具体关系见下图：</p>
<center><img src="http://ocg4av0wv.bkt.clouddn.com/layer%E7%9F%A5%E8%AF%86.png" alt=""><br>from《iOS-CoreAnimation》<br></center>

<p>② 要在移动动画的过程中处理 触摸可以重写 <code>UIView的hitTest</code> 方法<br>(总的来说，通过<code>view.layer.presentationLayer</code>的相关属性，就可以实现响应需求了，通过<code>touchbegan</code>判断用户点击的位置是否在<code>view.layer.presentationLayer.frame</code>之内，是《iOS—CoreAnimation》中另外一个实现方式)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">- (id)hitTest:(CGPoint)point withEvent:(UIEvent *)event &#123;</div><div class="line">    NSArray *subViews = self.subviews;</div><div class="line">    for (UIView *subView in subViews) &#123;</div><div class="line">        if([subView isKindOfClass:[FoamImageView class]])&#123; //是要找的图片</div><div class="line">            CALayer *layer = subView.layer.presentationLayer; //图片的显示层            </div><div class="line">            if(CGRectContainsPoint(layer.frame, point))&#123; //触摸点在显示层中，返回当前图片</div><div class="line">                return subView;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return [super hitTest:point withEvent:event];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event &#123;</div><div class="line">    CGPoint point = [[touches anyObject] locationInView:self.view];</div><div class="line">    </div><div class="line">    if (CGRectContainsPoint(button_.layer.presentationLayer.frame, point)) &#123;</div><div class="line">        NSLog(@&quot;youxiangying&quot;);</div><div class="line">        [self buttonEvent:button_];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>参考资料</strong>：<br><a href="http://www.voidcn.com/blog/lixuemei45/article/p-5021040.html">www.voidcn.com</a><br><a href="https://www.amazon.com/iOS-Core-Animation-Advanced-Techniques-ebook/dp/B00EHJCORC/ref=sr_1_1?ie=UTF8&amp;qid=1423192842&amp;sr=8-1&amp;keywords=Core+Animation+Advanced+Techniques">iOS-CoreAnimation</a></p>
<hr>
<h5 id="写在后面的话"><a href="#写在后面的话" class="headerlink" title="写在后面的话"></a>写在后面的话</h5><p>这个系列所有的文章都是在一个QQ群里面跟小伙伴们讨论出来的,每个 topic 都已经放在了 GitHub 的一个仓库中 <a href="https://github.com/GetOfferSoldier/Objective-C"><strong>这是地址</strong></a>。 所有内容的更新的将在这个仓库中进行,在博客中将不再进行更新。有任何问题，都可以在这个仓库中给我们提 issue 或者 pull request.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python 中 str 和 list 互相转换]]></title>
      <url>https://CepheusSun.github.io/2017/02/04/python%20%E4%B8%AD%20str%20%E5%92%8C%20list%20%E4%BA%92%E7%9B%B8%E8%BD%AC%E6%8D%A2/</url>
      <content type="html"><![CDATA[<p>一些相关方法、函数、运算符的整理</p>
<a id="more"></a>
<h3 id="str-gt-list"><a href="#str-gt-list" class="headerlink" title="str -&gt; list"></a>str -&gt; list</h3><h4 id="将字符串按照字符分割成字符list"><a href="#将字符串按照字符分割成字符list" class="headerlink" title="将字符串按照字符分割成字符list"></a>将字符串按照字符分割成字符list</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">s = <span class="string">'spam'</span></div><div class="line">t = list(s)</div><div class="line"><span class="keyword">print</span> t</div><div class="line"></div><div class="line"><span class="comment">#结果：['s', 'p', 'a', 'm']</span></div></pre></td></tr></table></figure>
<h4 id="将字符串按照分隔符，分割成字符-串-list"><a href="#将字符串按照分隔符，分割成字符-串-list" class="headerlink" title="将字符串按照分隔符，分割成字符(串)list"></a>将字符串按照分隔符，分割成字符(串)list</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">s = <span class="string">'spam-spam-spsm'</span></div><div class="line">delimiter = <span class="string">'-'</span></div><div class="line">s.split(delimiter)</div><div class="line"><span class="keyword">print</span> s.split(delimiter)</div><div class="line"></div><div class="line"><span class="comment">#结果：['spam', 'spam', 'spsm']</span></div></pre></td></tr></table></figure>
<h4 id="使用-split-方法将字符串分成单词"><a href="#使用-split-方法将字符串分成单词" class="headerlink" title="使用 split 方法将字符串分成单词"></a>使用 split 方法将字符串分成单词</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">s = <span class="string">'pinging for the fjords'</span></div><div class="line">t = s.split()</div><div class="line"><span class="keyword">print</span> t</div><div class="line"></div><div class="line"><span class="comment">#结果：['pinging', 'for', 'the', 'fjords']</span></div></pre></td></tr></table></figure>
<h3 id="list-gt-str"><a href="#list-gt-str" class="headerlink" title="list -&gt; str"></a>list -&gt; str</h3><h4 id="使用字符-串-将-list-串联成字符串"><a href="#使用字符-串-将-list-串联成字符串" class="headerlink" title="使用字符(串)将 list 串联成字符串"></a>使用字符(串)将 list 串联成字符串</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">t = [<span class="string">'pinging'</span>, <span class="string">'for'</span>, <span class="string">'the'</span>, <span class="string">'fjords'</span>]</div><div class="line">delimiter = <span class="string">' '</span></div><div class="line"><span class="keyword">print</span> delimiter.join(t)</div><div class="line"></div><div class="line"><span class="comment">#结果：pinging for the fjords</span></div><div class="line"><span class="comment"># 如果不需要分隔符，第二行中delimiter复制为''空字符串即可</span></div></pre></td></tr></table></figure>
<h3 id="数组-增-删-改"><a href="#数组-增-删-改" class="headerlink" title="数组 增 删 改"></a>数组 增 删 改</h3><h4 id="增"><a href="#增" class="headerlink" title="增"></a>增</h4><p><strong>直接在后面添加一个元素</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">t = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</div><div class="line">t.append(<span class="string">'d'</span>)</div><div class="line"><span class="keyword">print</span> t</div><div class="line"></div><div class="line"><span class="comment">#结果：['a', 'b', 'c', 'd']</span></div></pre></td></tr></table></figure>
<p><strong>将一个数组遍历添加在后面</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">t = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</div><div class="line">t2 = [<span class="string">'e'</span> ,<span class="string">'f'</span>]</div><div class="line">t.extend(t2)</div><div class="line"><span class="keyword">print</span> t</div><div class="line"></div><div class="line"><span class="comment">#结果：['a', 'b', 'c', 'e', 'f']</span></div></pre></td></tr></table></figure>
<h4 id="删"><a href="#删" class="headerlink" title="删"></a>删</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 以下方法运算符都可以使用切片</span></div><div class="line"></div><div class="line">t = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</div><div class="line"><span class="comment"># del 运算符 如果不需要被删除的值，使用这个</span></div><div class="line"><span class="keyword">del</span> t[<span class="number">1</span>]</div><div class="line"></div><div class="line"><span class="comment"># pop 方法 改变列表并返回被删除的元素。如果不提供索引，删除并返回最后一个元素。</span></div><div class="line"><span class="keyword">print</span> t.pop(<span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="comment"># remove 方法 删除不知道索引的元素, 只删除第一个</span></div><div class="line">t.remove(<span class="string">'a'</span>)</div><div class="line"><span class="keyword">print</span> t</div></pre></td></tr></table></figure>
<h4 id="改"><a href="#改" class="headerlink" title="改"></a>改</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">t = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</div><div class="line">t[<span class="number">0</span>] = <span class="string">'c'</span></div><div class="line"><span class="keyword">print</span> t</div><div class="line"></div><div class="line"><span class="comment">#结果：['c', 'b', 'c']</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python Debug 之一]]></title>
      <url>https://CepheusSun.github.io/2017/02/02/python%20debug%20%E4%B9%8B%E4%B8%80/</url>
      <content type="html"><![CDATA[<p>错误类型:SyntaxError: Non-ASCII character ‘\xe9’ in file xxx</p>
<a id="more"></a>
<p>最近写 python 代码的时候，简单的一下代码，确出现错误。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">points = int(raw_input(<span class="string">"领先的分数："</span>))</div><div class="line">is_in_control = raw_input(<span class="string">"是否领先队控球(Y／N：)"</span>)</div><div class="line">last_seconds = int(raw_input(<span class="string">"比赛剩余秒数："</span>))</div><div class="line"></div><div class="line">points -= <span class="number">3</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> is_in_control == <span class="string">'Y'</span>:</div><div class="line">    points += <span class="number">0.5</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    points -= <span class="number">0.5</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> points &lt; <span class="number">0</span>:</div><div class="line">    points = <span class="number">0</span></div><div class="line"></div><div class="line"></div><div class="line">points = points ** <span class="number">2</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> points &gt; last_seconds:</div><div class="line">    <span class="keyword">print</span> <span class="string">"safe"</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span>  <span class="string">"unsafe"</span></div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SyntaxError: Non-ASCII character &apos;\xe9&apos; in file /Users/programersunny/PycharmProjects/pythonDemo/hello on line 58, but no encoding declared; see http://www.python.org/peps/pep-0263.html for details</div></pre></td></tr></table></figure>
<p>打开 URL 阅读了一下，找到原因：</p>
<blockquote>
<p>Python will default to ASCII as standard encoding if no other encoding hints are given.</p>
</blockquote>
<p>Python的默认编码文件是用的ASCII码，你将文件存成了UTF-8也没用。</p>
<p>解决办法很简单：</p>
<p>只要在文件开头加入<code># -*- coding: UTF-8 —</code>或者<code>#coding=utf-8</code> 就行了。</p>
<p>注意，这两行代码必须添加在<code>.py</code>文件的第一行或者第二行。如果在第三行以及以上，都没有效果，这个在这个网址上也有描述</p>
<blockquote>
<p>To define a source code encoding, a magic comment must be placed into the source files either as first or second line in the file</p>
</blockquote>
<p>翻译一下：</p>
<blockquote>
<p>为了定义源码的编码格式，一个神奇的注释需要被添加到源文件的第一行或者第二行中。</p>
</blockquote>
<p>神奇的注释已经在上文提到了。</p>
<p><a href="https://www.python.org/dev/peps/pep-0263/">上文提到的URL地址</a></p>
<p>纪念一下自己在 python 中遇到的第一个小坑。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS小知识集锦-NSString常用方法汇总]]></title>
      <url>https://CepheusSun.github.io/2017/02/01/iOS%E5%B0%8F%E7%9F%A5%E8%AF%86%E9%9B%86%E9%94%A6-NSString%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB/</url>
      <content type="html"><![CDATA[<p>NSString 几乎是 iOS 开发中最常用的类了。几乎所有的地方都会用到各种各样的字符串。NSString 也有很多的方法。这篇文章记录我在使用 NSString 类的时候，会用到的知识点。也是 <code>iOS小知识集锦</code>的第一篇文章吧。</p>
<a id="more"></a>
<h3 id="创建字符串"><a href="#创建字符串" class="headerlink" title="创建字符串"></a>创建字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 直接创建字符串</div><div class="line">NSString *str1 = @&quot;this is Cepheus Sun&quot;;</div><div class="line"></div><div class="line">// 用一个字符串创建另一个字符串</div><div class="line">NSString *str2 =[[NSString alloc] initWithString:str1];</div><div class="line"></div><div class="line">// 用c的字符串创建oc的字符串</div><div class="line">NSString *str4 = [[NSString alloc] initWithUTF8String:&quot;我是程序猿&quot;];</div><div class="line"></div><div class="line">// 用格式符拼接字符串</div><div class="line">NSString *str3 = [[NSString alloc] initWithFormat:@&quot;%@%@&quot;,str1,str4];</div></pre></td></tr></table></figure>
<h3 id="读取文件来初始化字符串"><a href="#读取文件来初始化字符串" class="headerlink" title="读取文件来初始化字符串"></a>读取文件来初始化字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 先创建一个error对象，用来保存错误信息</div><div class="line">NSError *error = nil;</div><div class="line">//@&quot;/Users/xxx/Desktop/123.txt&quot;为文件路径</div><div class="line">NSString *str01 = [NSString stringWithContentsOfFile:@&quot;/Users/xxx/Desktop/123.txt&quot; encoding:NSUTF8StringEncoding error:&amp;error];</div><div class="line">        </div><div class="line">// 创建if语句判断输出</div><div class="line">if (error) &#123; // 一旦为真，说明读取文件出错了</div><div class="line">	NSLog(@&quot;读取文件出错 %@&quot;, error);</div><div class="line">&#125; else &#123;</div><div class="line">	NSLog(@&quot;读取成功:%@&quot;, str01);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="通过-URL-读取文件，初始化字符串"><a href="#通过-URL-读取文件，初始化字符串" class="headerlink" title="通过 URL 读取文件，初始化字符串"></a>通过 URL 读取文件，初始化字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">// http://www.baidu.com/image/xxxx.png</div><div class="line">// url = 协议头://主机地址/在主机里面的路径</div><div class="line"></div><div class="line">// ftp协议，传输比较大的文件</div><div class="line">// file协议，读取比较大的文件</div><div class="line"></div><div class="line">// file协议，读取文本文件</div><div class="line">NSURL *url = [NSURL URLWithString:@&quot;file://192.168.1.1/user/apple/desktop/test.txt&quot;]</div><div class="line">  </div><div class="line">// 如果不写 IP 地址，就会默认访问本机</div><div class="line">NSURL *url = [NSURL URLWithString:@&quot;file:///user/CepheusSun/desktop/123.txt&quot;]</div><div class="line">  </div><div class="line">// 将本地文件路径创建为 URL 对象(路径可以是中文)</div><div class="line"> NSURL *url = [NSURL fileURLWithPath:@&quot;/Users/CepheusSun/Desktop/123.txt&quot;];</div><div class="line"></div><div class="line">// 将对应对网络资源文件路径创建为URL对象(路径必须是英文字母)</div><div class="line">// SURL *url = [NSURL URLWithString:@&quot;file:///Users/CepheusSun/Desktop/123.txt&quot;];</div><div class="line"> </div><div class="line">// 先创建一个 error 对象，用来保存错误信息</div><div class="line">NSError *error1 = nil;</div><div class="line">// 调用URL地址的文件</div><div class="line">NSString *str03 = [NSString stringWithContentsOfURL:url encoding:NSUTF8StringEncoding error:&amp;error1];</div><div class="line">        </div><div class="line">if (error1) &#123; // 一旦为真，说明读取文件出错了</div><div class="line">	NSLog(@&quot;读取文件出错 %@&quot;, error1);</div><div class="line">&#125; else&#123;</div><div class="line">	NSLog(@&quot;读取成功:%@&quot;, str03);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="通过-url-或-file-将字符串信息写入文件"><a href="#通过-url-或-file-将字符串信息写入文件" class="headerlink" title="通过 url 或 file 将字符串信息写入文件"></a>通过 url 或 file 将字符串信息写入文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"> NSString *s001 = @&quot;dfa短发方法法德俄额度 短发舒服&quot;;</div><div class="line">        </div><div class="line">// NSURL *myurl = [NSURL fileURLWithPath:@&quot;/Users/progamersunny/Desktop/123.txt&quot;];</div><div class="line">        </div><div class="line">NSURL *myurl = [NSURL URLWithString:@&quot;file:///Users/progamersunny/Desktop/123.txt&quot;];</div><div class="line"></div><div class="line">// 调用将字符串写入URL地址文件的方法</div><div class="line">[s001 writeToURL:myurl atomically:YES encoding:NSUTF8StringEncoding error:nil];</div><div class="line">        </div><div class="line">// 调用将字符串写入本机文件的方法</div><div class="line">// [s001 writeToFile:@&quot;/Users/xlzhang/Desktop/OC基础知识点汇总/OC中NSString常用方法汇总/text1.txt1&quot; atomically:YES encoding:NSUTF8StringEncoding error:nil];</div><div class="line">        </div><div class="line">// 提取文件内容</div><div class="line">NSString *str04 = [NSString stringWithContentsOfFile:@&quot;/Users/xlzhang/Desktop/text/text/123.txt&quot; encoding:NSUTF8StringEncoding error:nil];</div></pre></td></tr></table></figure>
<h3 id="创建临时字符串"><a href="#创建临时字符串" class="headerlink" title="创建临时字符串"></a>创建临时字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 用一个字符串创建另一个临时字符串</div><div class="line">NSString *str5 = [NSString stringWithString:str2];</div><div class="line"></div><div class="line">// 用c的字符串创建oc的临时字符串</div><div class="line">NSString *str6 = [NSString stringWithUTF8String:&quot;我是程序猿&quot;];</div><div class="line">        </div><div class="line">// 用格式符拼接字符串</div><div class="line">NSString *str7 = [NSString stringWithFormat:@&quot;%@%@&quot;,str5,str3];</div></pre></td></tr></table></figure>
<h3 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">// 比较两个字符串是否相等，返回BOOL值YES或NO</div><div class="line">BOOL ret = [str6 isEqualToString: str7];</div><div class="line"></div><div class="line">// 比较并返回谁大谁小(返回值是个枚举类型: 比较的结果 ＝ －1，0，1)</div><div class="line">// typedef NS_ENUM(NSInteger, NSComparisonResult) &#123;NSOrderedAscending = -1L, NSOrderedSame, NSOrderedDescending&#125;;</div><div class="line">// 如果左边str1小于右边str4就返回－1，相等就返回0，大于就返回1</div><div class="line"></div><div class="line">NSComparisonResult ret1 = [str1 compare: str4];</div><div class="line"></div><div class="line">// 忽略大小写进行比较</div><div class="line">NSComparisonResult ret01 = [str1 caseInsensitiveCompare:str4];</div><div class="line"></div><div class="line"> // 有条件的比较谁大谁小(options的参数为限制条件)</div><div class="line"> // options: 指定比较的条件</div><div class="line"> // NSCaseInsensitiveSearch  忽略大小写</div><div class="line"> // NSBackwardsSearch  从后往前比较</div><div class="line"> // NSNumericSearch  首先比较字符串里面的字符的个数，个数一样再比较大小</div><div class="line"></div><div class="line">NSComparisonResult ret02 = [str1 compare:str4 options:NSCaseInsensitiveSearch]; // 忽略大小写进行比较</div></pre></td></tr></table></figure>
<h3 id="从一个字符串中查找子字符串"><a href="#从一个字符串中查找子字符串" class="headerlink" title="从一个字符串中查找子字符串"></a>从一个字符串中查找子字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">NSString *s1 = @&quot;I am such a poor programer.&quot;;</div><div class="line">NSString *s2 = @&quot;am&quot;;</div><div class="line"></div><div class="line">// 返回值类型是一个枚举类型NSRange,包含两个lu整型变量location(位置)和length(长度)</div><div class="line">NSRange range = [s1 rangeOfString:s2];// 查找并返回位置</div><div class="line"></div><div class="line">        </div><div class="line">// 有条件的查找,options后面为： NSCaseInsensitiveSearch 表示忽略大小写</div><div class="line">NSRange range01 = [s1 rangeOfString:s2 options:NSLiteralSearch]; // options表示查找方式</div><div class="line"></div><div class="line">BOOL b1 = [s1 containsString:s2]; // 返回值类型是一个BOOL值，YES表示s1包含有s2，NO表示没有包含</div><div class="line"></div><div class="line">// 如果查找的字符串不存在，返回的值：range.length = 0;range.location = NSNotFound (NSNotFound = -1)</div></pre></td></tr></table></figure>
<h3 id="单独提取某一个字符"><a href="#单独提取某一个字符" class="headerlink" title="单独提取某一个字符"></a>单独提取某一个字符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 创建一个可变字符串对象</div><div class="line">NSMutableString *str02 = [[NSMutableString alloc] init];</div><div class="line">// 循环获取字符中的每一个字符</div><div class="line">for (int i = 0;i &lt; [str1 length]; i++)&#123;</div><div class="line">    // 此处提取的字符是两个字节，因此可以提取汉字</div><div class="line">	unichar c = [str1 characterAtIndex:i]; </div><div class="line">	// 将获取对字符合并到可变字符串中</div><div class="line">	[str02 appendFormat:@&quot;%C&quot;,c];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="从字符串中提取某个范围点字符生成新字符串－－-从第一个字符开始到某个位置结束，从某个位置开始到字符串尾，某点开始某点结束"><a href="#从字符串中提取某个范围点字符生成新字符串－－-从第一个字符开始到某个位置结束，从某个位置开始到字符串尾，某点开始某点结束" class="headerlink" title="从字符串中提取某个范围点字符生成新字符串－－(从第一个字符开始到某个位置结束，从某个位置开始到字符串尾，某点开始某点结束)"></a>从字符串中提取某个范围点字符生成新字符串－－(从第一个字符开始到某个位置结束，从某个位置开始到字符串尾，某点开始某点结束)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">NSString *s3 = @&quot;0123456789&quot;;</div><div class="line">NSString *s4 = [s3 substringToIndex: 6 ]; </div><div class="line">// 从s3中提取从头至第6个字符(不包括第6个),生产新字符串,返回这个新字符串的地址</div><div class="line">// s4的结果为: &quot;012345&quot;</div><div class="line">        </div><div class="line">NSString *s5 = [s3 substringFromIndex: 6 ]; </div><div class="line">// 从s3中提取从第6个字符(包括第6个)到最后一个字符,生产新字符串,返回这个新字符串的地址</div><div class="line">// s5到结果为: &quot;6789&quot;</div><div class="line">        </div><div class="line">NSRange range1 = &#123;3,4&#125;; </div><div class="line">// 3表示起始位置，4表示长度，表示从第3个字符(包含第3个)开始提取连续的4个字符,生产新字符串,返回这个新字符串的地址</div><div class="line">NSString *s6 = [s3 substringWithRange:range1]; </div><div class="line">// 先定义一个range值</div><div class="line">// s6的结果为: &quot;3456&quot;</div><div class="line">        </div><div class="line">        </div><div class="line">// 也可以合并一起写</div><div class="line">NSString *s7 = [s3 substringWithRange:NSMakeRange(3, 4)]; // NSMakeRange 是一个c函数</div></pre></td></tr></table></figure>
<h3 id="字符串与其他类型的转换"><a href="#字符串与其他类型的转换" class="headerlink" title="字符串与其他类型的转换"></a>字符串与其他类型的转换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">NSString *intStr = @&quot;1234&quot;;</div><div class="line">NSString *floatStr = @&quot;5.14&quot;;</div><div class="line"></div><div class="line">int a = [intStr intValue];</div><div class="line">float f = [floatS floatValue];</div></pre></td></tr></table></figure>
<h3 id="字符串首位-前缀后缀的对比"><a href="#字符串首位-前缀后缀的对比" class="headerlink" title="字符串首位(前缀后缀的对比)"></a>字符串首位(前缀后缀的对比)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">NSString *url1 = @&quot;https://www.baidu.com/rader/p.png&quot;;</div><div class="line">BOOL b001 = [url1 hasPrefix:@&quot;https://&quot;]; // 判断字符串首位是否与输入的字符串相同</div><div class="line">BOOL b002 = [url1 hasSuffix:@&quot;p.png&quot;];   // 判断字符串尾部是否与输入的字符串相同</div></pre></td></tr></table></figure>
<h3 id="字符串中某些字符的替换"><a href="#字符串中某些字符的替换" class="headerlink" title="字符串中某些字符的替换"></a>字符串中某些字符的替换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">NSString *url2 = @&quot;http://www.baidu.com/rader/p.gdp&quot;;</div><div class="line">// 将withString:字符串内容替换掉url1中 OfString:字符串内容 后生成一个新的字符串url2</div><div class="line">NSString *url3 = [url2 stringByReplacingOccurrencesOfString:@&quot;/&quot; withString:@&quot;*&quot;];</div></pre></td></tr></table></figure>
<h3 id="去掉字符串首尾的某些连续的字符"><a href="#去掉字符串首尾的某些连续的字符" class="headerlink" title="去掉字符串首尾的某些连续的字符"></a>去掉字符串首尾的某些连续的字符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> NSString *url4 = @&quot;    http://www.baidu.com     &quot;;</div><div class="line">        </div><div class="line">NSCharacterSet *set = [NSCharacterSet whitespaceCharacterSet]; //  去除空格</div><div class="line">// lowercaseLetterCharacterSet  去除小写字母</div><div class="line">// uppercaseLetterCharacterSet  去除大写字母</div><div class="line">        </div><div class="line">NSCharacterSet *set1 = [NSCharacterSet characterSetWithCharactersInString:@&quot;指定的字符串&quot;]; // 去除指定的字符串</div><div class="line">        </div><div class="line">        </div><div class="line">// 去除字符串首尾的某些相同字符,有多少个就去掉多少个</div><div class="line">NSString *url5 = [url4 stringByTrimmingCharactersInSet:set];</div></pre></td></tr></table></figure>
<h3 id="可变字符串-以上字符串方法都可以用于可变字符串"><a href="#可变字符串-以上字符串方法都可以用于可变字符串" class="headerlink" title="可变字符串:(以上字符串方法都可以用于可变字符串)"></a>可变字符串:(以上字符串方法都可以用于可变字符串)</h3><blockquote>
<p>可变字符串是字符串的子类，所以可以使用所有NSString的所有方法，其比起字符串增加的功能主要有：增,删,改,擦</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">// 创建一个可变字符串</div><div class="line"></div><div class="line">NSMutableString *string1 = [[NSMutableString alloc] init];</div><div class="line">[string1 setString:@&quot;1234&quot;]; // 对可变字符串进行赋值</div><div class="line">        </div><div class="line">[string1 setString:@&quot;abcd&quot;]; // 已赋值的可变字符串可以重新赋值（改）</div><div class="line">[string1 appendString:@&quot;123&quot;]; // 可以增加字符串，增加后结果为:&quot;abcd123&quot;</div><div class="line">[string1 appendFormat:@&quot;%c&quot;,&apos;D&apos;]; // 可以用格式符增加相应的字符或字符串，结果为:&quot;abcd123D&quot;</div><div class="line">[string1 insertString:@&quot;xxxx&quot; atIndex:4]; // 可以把&quot;xxxx&quot;字符串插入到第4个字符开始的地方,原第四个开始的后面字符依次后移</div><div class="line">// 插入后的结果为: &quot;abcdxxxx123D&quot;</div><div class="line">        </div><div class="line">// 也可以把字符串改为另一个字符串的地址，因为它们传递的都是地址</div><div class="line">NSString *ss1 = [NSString stringWithFormat:@&quot;%d&quot;,-88];</div><div class="line">        </div><div class="line">[string1 insertString:ss1 atIndex:6]; // 结果为: string1 = &quot;abcdxx-88xx123D&quot;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">NSRange range2 = &#123;3,4&#125;; </div><div class="line">// 3表示起始位置，4表示长度，表示从第3个字符(包含第3个)开始删除连续的4个字符,后面字符依次前移</div><div class="line">[string1 deleteCharactersInRange:range2]; </div><div class="line">// 结果为: string1 = &quot;abc88xx123D&quot;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[string1 replaceCharactersInRange:NSMakeRange(3, 2) withString:@&quot;RRRRRRRRRR&quot;];</div><div class="line">// 3表示起始位置，2表示长度，表示从第3个字符(包含第3个)开始将后面的2个字符换成字符串&quot;RRRRRRRRRR&quot;,后面字符依次后移</div><div class="line">// 结果为: string1 = &quot;abcRRRRRRRRRRxx123D&quot;</div><div class="line">NSLog(@&quot;\nstring1 = %@&quot;,string1);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 擦除原有字符串内容重新设置字符串的内容</div><div class="line">[string1 setString:@&quot;---&quot;];</div><div class="line">// 等同于</div><div class="line">// string1.string = @&quot;---&quot;;</div><div class="line">        </div><div class="line">NSLog(@&quot;string1 = %@&quot;, string1);</div><div class="line">// 结果为: string1 = &quot;---&quot;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python 中的逻辑运算符]]></title>
      <url>https://CepheusSun.github.io/2017/01/29/python%20%E4%B8%AD%E7%9A%84%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      <content type="html"><![CDATA[<p>从现在开始，开始了对 pyhton 这门语言的学习。</p>
<a id="more"></a>
<p>逻辑运算符其实没什么好说的，只是最近学习 python 这门语言的时候，才研究发现的一个小知识点。</p>
<h2 id="逻辑运算符有什么？"><a href="#逻辑运算符有什么？" class="headerlink" title="逻辑运算符有什么？"></a>逻辑运算符有什么？</h2><table>
<thead>
<tr>
<th style="text-align:center">关系运算符</th>
<th style="text-align:center">含义</th>
<th style="text-align:center">举例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">and</td>
<td style="text-align:center">与(全真才真)</td>
<td style="text-align:center">True and False == False</td>
</tr>
<tr>
<td style="text-align:center">or</td>
<td style="text-align:center">或(全假才假)</td>
<td style="text-align:center">True or False == True</td>
</tr>
<tr>
<td style="text-align:center">not</td>
<td style="text-align:center">非(真变假、假变真)</td>
<td style="text-align:center">not True == False</td>
</tr>
</tbody>
</table>
<h2 id="为什么123-and-456结果是456而123-or-456结果是123？"><a href="#为什么123-and-456结果是456而123-or-456结果是123？" class="headerlink" title="为什么123 and 456结果是456而123 or 456结果是123？"></a>为什么<code>123 and 456</code>结果是<code>456</code>而<code>123 or 456</code>结果是<code>123</code>？</h2><p><strong>and </strong>:</p>
<p>​    对于 and 首先计算第一个表达式，</p>
<p>​    如果第一个表达式为真，结果为第二个表达式的结果。</p>
<p>​    如果第一个表达式为假，返回假。</p>
<p><strong>or </strong>：</p>
<p>​    对于 or 首先计算第一个表达式，</p>
<p>​    如果第一个表达式为真，则返回真。</p>
<p>​    如果第一个表达式为假，则返回第二个表达式的结果    </p>
<p>所以，对于</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">123</span> <span class="keyword">and</span> <span class="number">456</span></div></pre></td></tr></table></figure>
<p>这行代码， 遵循非零为真的原则，第一个表达式为真。那么看第二个表达式，第二个表达式也大于零，所以结果为第二个表达式的结果。所以返回</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">456</span></div></pre></td></tr></table></figure>
<p>对于</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">123</span> <span class="keyword">or</span> <span class="number">456</span></div></pre></td></tr></table></figure>
<p>这行代码，第一个表达式非零，结果为第一个表达式的结果。</p>
<blockquote>
<p>Strictly speaking, the operands of the logical operators should be boolean expressions, but</p>
<p>Python is not very strict. Any nonzero number is interpreted as “true.”严格来讲，布尔运算符的运算数应该是布尔表达式， 但是Python并不严格。任何非0的数字都被解释成“真”。</p>
</blockquote>
<p>另外，因为 <code>123</code> 或者 <code>456</code> 这两个表达式，都不是逻辑运算，表达式的值就是他本身的值。所以最后得出这样的结果。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>and: </strong>从左到右计算表达式，若所有值为真，返回最后一个值。若存在假，返回第一个假值。</p>
<p><strong>or：</strong> 从左到右计算表达式，返回第一个为真的值。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SBAnimation a new Repository]]></title>
      <url>https://CepheusSun.github.io/2017/01/28/SBAnimation%20a%20new%20Repository/</url>
      <content type="html"><![CDATA[<p>看了时间，外面已经一直是在放着鞭炮声音。QQ 上收到大学同窗在美国发来的新春祝福，闲聊两句，深感在国外的科研狗的不容易。想到了昨天突然多想了一下，看到的一句话</p>
<blockquote>
<p>优秀的人太多，优秀的人也太优秀，我只要负责被惊艳就好了。</p>
</blockquote>
<p>这个世界优秀的人真是太多了，比你优秀的人又比你努力太多了。这两年深觉差距越来越大。突然有了一些懊恼。</p>
<p>借着这篇文字，写写这几天回成都之后的一些感悟。</p>
<a id="more"></a>
<p>一直想找几个人，做一些有趣的事情。回成都之前的两天，和朋友在 QQ 群里聊天，他发出来了一个不算复杂，但是还算不错的 UI 效果出来，讨论了一下，然后想着把我们做的一些有趣的效果 工具之类的东西都开源出来，放在一个 repository 里面，然后一起来维护这个东西。然后我就去 create 了一个 叫 SolarBee  的 organization 然后开始做起了这件事情。 然后把他写的东西拿出来，然后自己写了一个 demo 然后这个东西就搞出来了。</p>
<p>回成都的几天里面，逐渐把我自己写的一些东西放进来，然后慢慢的来丰富这个东西。五天了，几乎提交了去年一整年在 github 上面的代码量。完善代码，完善 demo 把各种仓库整合修改 balabala…. 痛并快乐着。</p>
<p>对了，昨天还参加了一个 python 的学习组织，正式开始“人生苦短，我用 python 了” ，激励着我开始更广泛的学习，还是因为看了一些书，看了一些文章，深深的感觉在计算机科学这一块，很厉害的人都是能够轻松的驾驭各种语言的人，还是希望自己多体验几门语言，能够在更高的角度去理解这件事情。虽然很惭愧，之前学的 java 已经忘的一干二净了。</p>
<p>后面还会更多的加入更多的东西在这个地方。不仅仅在 UI 这一方面，可能后面还会有更多方面的东西加入进来。希望自己的 2017 能够坚持下来，做这件自认为很酷的事情。</p>
<p>后面可能还会有一些计划什么的。这个可能年后很快就需要去完成。第一是，找工作。第二是，写一个 mac app 尝试一下新的领域。确实没有什么用处，只是希望方便这个东西的 contributer 更方便的把相关的资料上传到 Leancloud 里面。用这个来管理这个 demo 我感觉也是一件很 cool 的事情。当然，完成的时候，还是会把这些代码放在 GitHub 上面。</p>
<p>愿景。希望自己坚持写博客，能坚持开源。在什么时候能够就某个问题给出一套完整的解决方案。这也是我觉得的很酷的事情。另外，英语也要坚持的学下去。</p>
<p>这几天确实把自己都感动到了。每天都花很长的时间在这件事情上面。很充实，很开心。最重要的是，重新找到了对这件事情的热情。</p>
<p>上面说了那么多 <a href="https://github.com/SolarBee/SBAnimation">GitHub</a>地址还是贴出来。</p>
<p>最后，跳出舒适区很难，但这是我不得不做的事情。想了那么久 FP 也应该学起来了。</p>
<h3 id="SBAnimation"><a href="#SBAnimation" class="headerlink" title="SBAnimation"></a>SBAnimation</h3><p>SolarBee创建的一个关于一些动画和自定义有趣的View的合集的合集。</p>
<h4 id="1、仪表盘"><a href="#1、仪表盘" class="headerlink" title="1、仪表盘"></a>1、仪表盘</h4><p><img src="http://ojno1pj4x.bkt.clouddn.com/91B9BB1D47A45C3FD69A20FB5813C31F.jpg"></p>
<h4 id="2、购物车抛物线"><a href="#2、购物车抛物线" class="headerlink" title="2、购物车抛物线"></a>2、购物车抛物线</h4><p><img src="http://ojno1pj4x.bkt.clouddn.com/%E8%B4%AD%E7%89%A9%E8%BD%A6%E6%8A%9B%E7%89%A9%E7%BA%BF.gif"></p>
<h4 id="3、列表空数据展示"><a href="#3、列表空数据展示" class="headerlink" title="3、列表空数据展示"></a>3、列表空数据展示</h4><p>这个工具支持 CocoaPods 可见源作者 github 仓库 <a href="https://github.com/CepheusSun/EmptyDataKit">地址</a></p>
<p><img src="http://ojno1pj4x.bkt.clouddn.com/EmptyDataKit.gif"></p>
<h4 id="4、仿照淘宝商品详情加入购物车转场动画"><a href="#4、仿照淘宝商品详情加入购物车转场动画" class="headerlink" title="4、仿照淘宝商品详情加入购物车转场动画"></a>4、仿照淘宝商品详情加入购物车转场动画</h4><p>使用说明在作者 <a href="https://github.com/CepheusSun/SYTaoBaoAnimation">github</a></p>
<p><img src="http://ojno1pj4x.bkt.clouddn.com/ProgramerSunnyDemo.gif"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CocoaPods小知识集锦]]></title>
      <url>https://CepheusSun.github.io/2017/01/20/CocoaPods%E5%B0%8F%E7%9F%A5%E8%AF%86%E9%9B%86%E9%94%A6/</url>
      <content type="html"><![CDATA[<p>在使用CocoaPods 的过程中遇到的问题。整理性的一遍文章，没有多少价值。</p>
<a id="more"></a>
<h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">✘ sunyang@sunny-mbp  ~<span class="regexp">/desktop/ios</span>  pod install</div><div class="line">[!] No <span class="string">`Podfile' found in the project directory.</span></div></pre></td></tr></table></figure>
<p>解决方案</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">✘ sunyang@sunny-mbp  ~<span class="regexp">/desktop/ios</span>   pod repo remove master</div><div class="line">Removing spec repo <span class="string">`master`</span></div><div class="line"></div><div class="line">✘ sunyang@sunny-mbp  ~<span class="regexp">/desktop/ios</span>  pod setup</div><div class="line">Setting up CocoaPods master repo</div><div class="line"></div><div class="line">✘ sunyang@sunny-mbp  ~<span class="regexp">/desktop/ios</span>  pod install</div><div class="line">Pod installation complete! There are <span class="number">3</span> dependencies from the Podfile <span class="keyword">and</span> <span class="number">4</span> total pods installed.</div></pre></td></tr></table></figure>
<p>原因</p>
<p>这是因为 CocoaPods 基于 GitHub 的网页编辑器的 <code>libgit2</code>的一个 bug。 正式这个 bug 导致了 git 仓库错误。</p>
<p>唯一的解决办法就是像上面一样。 </p>
<p><a href="http://blog.cocoapods.org/Repairing-Our-Broken-Specs-Repository/">相关链接</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Swift 和 OC 混合编程]]></title>
      <url>https://CepheusSun.github.io/2017/01/05/Swift%E5%92%8COC%E6%B7%B7%E5%90%88%E7%BC%96%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>自己学了一段时间的 Swift ，从最开始看 Swift 2.3 的《写给大忙人看的Swift》,在 Xcode8 下很多示例代码都不能好好玩下去，然后看到了 SwiftGG 翻译组针对 Swift 官方文档的中文译本。算是正式开始了对 Swift 的学习。对 Swift 的喜爱不仅仅是因为他是新的语言，是 iOS 开发未来的趋势。而且还有一个很重要的一点单单就是因为 Swift 代码看起来就是非常漂亮啊。</p>
<a id="more"></a>
<h2 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h2><p>对于Swift的学习根本还是一种还没有正式入门的感觉。所以没有办法像 OC 那样驾轻就熟，很多语法都还没有完全掌握，因为时间原因，也因为最近确实发生了一些事情。导致最近学习的热情比较的低，而且年关在即，很多工作上生活上的事情都需要认真梳理一遍。减少了在学习上的努力，是在是罪大恶极。技术圈在这个时候也发生了一些大事情。微信开源的组件 <a href="https://github.com/Tencent/mars#mars_cn">Mars</a>  滴滴和手Q相继 po 出了自己的动态化解决方案。下一年应该会是动态化更广泛应用的一年吧，很多 app 动态化将成为标准配置。但是唯一比较遗憾的是，这些解决方案还是基于 OC 的。但是这也并不妨碍我学习 Swift 的激情，毕竟一切 app 的生杀大权都掌握在苹果手中的，而且，苹果还有一个并不开放的动态库。</p>
<p>简单的学了一些 Swift 的相关东西，就开始手痒想要实践一下了。本来打算使用 Swift 重新写一个项目，但是苦于需求一直源源不断，重写压力也是非常的大。还有一个最大的原因，对 Swift 的掌握还没有真正算是一个 Swift 开发者。实在没有能力将原有项目中的组件转化为 Swift ，所以还是决定在原来的代码中，尝试将一些类用 Swift 来表达。</p>
<blockquote>
<p>这也解决了在 Swift 项目中，优秀的第三方库确实没有 OC 丰富，而作为现在非常热门的开发语言，很多比较好的效果什么的也只有 Swift 版本这样的问题。</p>
</blockquote>
<p>其实无论如何，其实都是 OC 和 Swift 之间的交互。</p>
<h2 id="在-Swift-中使用-OC-类"><a href="#在-Swift-中使用-OC-类" class="headerlink" title="在 Swift 中使用 OC 类"></a>在 Swift 中使用 OC 类</h2><p>如果在Swift类中使用OC的代码，那么就需要使用桥接文件了。</p>
<p>这是我们在平常的OC项目中创建一个新的类</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/34DF1870-F7E8-4522-B715-F1ACAA35DFEA.png" /></p>
<p>点击按钮 <code>Create Bridging Header</code> 。</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/CC24943D-0A36-4095-9EFF-64DBF9D96193.png" /></p>
<p>就会生成一个<code>项目名-Bridging-Header.h</code>文件，这其实貌似就是一个很平常的<code>.h</code>文件。</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/7132C9EA-C1A4-4AE9-BC83-F200006A95B1.png"></p>
<p>然后就只需要像 Import 一个普通类一样把你需要在 Swift 中使用的所有 OC 类在这个<code>.h</code> 文件中添加进来，然后就能够在 Swift 代码中正常的使用 OC 的方法了。</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/B4E7A1D8-F202-4BE8-8CDF-1A3221F42571.png"></p>
<p>这里的<code>MUserInfo</code>其实就是我项目中的一个单例类了。这里要注意的是，虽然使用的是 OC 的类，但是使用的时候依然是使用 Swift 的语法。这个也没什么需要注意的。</p>
<blockquote>
<p>需要注意的是：在 Swift 类中使用的 OC 的方法，还是需要使用 Swift 的语法。</p>
</blockquote>
<p>刚刚说的导入，就是直接在刚刚说的桥接文件中写入如下代码。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#import &quot;MUserInfo.h&quot;</div></pre></td></tr></table></figure>
<h2 id="在-OC-中使用-Swift-类"><a href="#在-OC-中使用-Swift-类" class="headerlink" title="在 OC 中使用 Swift 类"></a>在 OC 中使用 Swift 类</h2><p>这个也是非常的简单，</p>
<p>在<code>TARGETS</code>- <code>Build Settings</code>中选择<code>Swift Complier-General</code></p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/0BA5113B-03E2-40EC-81D0-A55903005F19.png" /></p>
<p>然后分别将<code>Install Objective-C Compatibility Header</code> 和 <code>Objective-C Generated Interface Header Name</code> 选项 改为 <code>YES</code> 和 <code>项目名-Swift.h</code></p>
<p>然后在使用Swift类的时候，只需要在使用的时候像导入头文件一样倒入 <code>项目名-Swift.h</code>这个文件。然后就可以愉快的使用了。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>没有解语，期待下次分享！</p>
<p>## </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2016写在年关的话]]></title>
      <url>https://CepheusSun.github.io/2016/12/26/2016%E5%86%99%E5%9C%A8%E5%B9%B4%E5%85%B3%E7%9A%84%E8%AF%9D/</url>
      <content type="html"><![CDATA[<p>距离下一个年头也只有几张日历纸了，还是抱着一个比较好的态度来回忆一些这即将过去的2016. 从大学开始，每一年都有着一个这样的习惯，总要在每学期结束，每一年结束的时候，给自己写下点什么。开通了新的blog， 总还是要在这里留下心的印记。</p>
<a id="more"></a>
<p>写了那么多年，着实还是没有训练出来对文字驾轻就熟的能力，写出来的东西也往往还是一坨狗屎。让自己也不忍心重新回头再来看下去。每一年也就是这么简单的这么写着。</p>
<p>这一年总结下来，在技术上还是有了一些沉淀，虽然没有什么十足的进步。但，终于能够有这么一段比较长的时间，纯粹的去研究一些这些东西。五月份以来的这么一段时间里，我还是心怀感激的，有了这么个不紧不慢，也有足够多时间了足够多的空间来折腾各种好玩的东西。也开始努力的在质量上控制整个项目。也有那么几个同事愿意花时间了精力去折腾新鲜的东西。确实也是件不错的事情。</p>
<p>这么长的时间以来，感觉在技术生活上还是蛮有趣的，先是在微博上加入了一些技术比较活跃的群，然后又转到趣直播这样的平台下，跟大牛们更近距离的接触，体会到了技术世界的无边无际。再后来因为bang用上了微信读书，不多不少还是读过了一些书，更技术无关。到最后应该能凑够个50多个小时阅读时长吧。阅读总是能让人安静下来的。</p>
<p>之前学过一篇文章来记录这一年看过的书，到最后，应该还是能再加上那么一本两本。每天能够抽出那么一个把小时来阅读，也是一件值得坚持的事情。程序员还是应该花一些时间再代码以外的事情上。</p>
<p>然后不知道什么契机，下载了一个英语流利说。还是认为这是一个非常优秀的 app ，确实在我身上还是达到了他们的口号：“让你忍不住，开口说英语”, 花了100块钱参加他们的课程，每天花一些时间来学习英语，每天哇啦哇啦的说着并不流利的英语，也能切切实实的感受到自己的成长。学习英语这件事情，想来也是值得坚持的事情，多么希望一年以后再次写这样的文字的时候，能够很开心的说，这件事情，我坚持了整整一年。</p>
<p>除了这两件事情，年初或者年初的时候，还是读过一些作为程序员，应该读的一些书的。这一年开始了，并不太深入的对 iOS 底层的探索。因为最初对动态化近乎痴迷的兴趣，在看到 JSPatch 的时候，立马就开始撸Demo开干，在线上出了 bug 之后，瞬间把 bug 解决掉的之后，JSPatch 很快的被集成在了公司所有的 iOS app 中，在公司测试力度不足的情况下，也能够放心的进行开发。</p>
<p>再后来因为对 Javascript 知识的刚需，简单的学了一些 HTML 和 CSS 之类的东西，因为集成成本高，不能立马在公司项目中使用等原因，放弃了对 React Native 的探索，知道最近阿里又开源了 Weex ， 对动态化的兴趣，驱使着我在接下来的时间里，或多或少的都会花点时间去研究这些东西。对 Weex 的兴趣应该还是大于 RN 的， 比较起来，还是愿意使用国人研发的 Vue ，前端的世界果然是深似海。在海边散步，也确实折腾了我很多的精力。但是看着新出来的名词 PWA 还是希望对这一块有一些了解。对了，还有微信的小程序。</p>
<p>对技术的追求在这一年还是让我非常的应接不暇。作为客户端开发，在今年初期的时候便对动态化、组件化产生了比较大的兴趣，以至于在博客刚刚建立的时候，就写下来了对动态化和组件化时分着迷这样的文字(后来还是改了)， 相比起来，动态化算是简单的能实现了吧，一直就通过各种渠道能够猜出来 sunny 孙源在滴滴正在进行的项目也是更动态化相关的内容，在 DynamicCocoa 被公布出来的时候，还是被这样的大神折服了，sunny 对底层，对编译器的研究确实是让人难以望其项背的。到后来知道手Q很久以前就有一套类似的框架的事情，最后还是认识到了一个残酷的现实</p>
<blockquote>
<p>大厂对于小公司的碾压不仅仅是运营能力上的，他们对于小厂在技术上的碾压，对于我们来说才是更可怕的。不管你有多么好的 idea 等你实现下来并且能够完美运行的时候，你觉得十分牛逼的事情，确实人家玩剩下的。</p>
</blockquote>
<p>对新的东西的追求还是让我在这一年收集到了各种书，也驱使着我我去学习英语。也驱使着我去学习了可能已经无限趋近稳定的 Swift 3.0 ，开始看了一些现在估计也完全没有入门的前端三件套，balabala….</p>
<p>接着再说一下组件化吧，这一年确实在这一块只做了很少的工作，简单的吧一些组件网络库什么的拆分出来，使用  CocoaPods 来进行管理，看了一些相关的文章，跟一些搞过这个朋友交流过，算是积累了一些知识储备，但是在这样的时间，面对年底还是比较多的需求，实践这件事情，可能还是需要往后推一下了。</p>
<p>然后这一年从纯代码，转到了Xib ，研究了一下 iconfont 然后貌似也记不清楚再搞过什么了。只是读了写文章，看了点源码，重构了下项目，做了些需求，改了些bug，如是而已…</p>
<p>这一年，绕了一大圈，有因为一些原因跑到重庆了，再次回到这个城市生活，确实没有感受到太多的让我心里有什么波动的东西，跟往常一样，跟去到曾经到过的任何一个城市一样…只是喜欢上了这个季节的这里随处可见的黄叶。</p>
<p>外婆离开也到了第三个年头了，是不是还是会思念那个胖胖的可爱的人。生活还是继续向前走着的，毕业也三年了，还是不知道接下来应该怎样。或许，就是这样吧。</p>
<p>车也把坐垫全部换成皮的了，也算修正了买车时犯下的错误。</p>
<p>做了一丢丢有关技术管理的工作，做的不好。只能继续努力了。</p>
<p>好奇心还是那么重，看到什么都想去尝试一下，所以入门了很多东西，了解很多东西，却没能深入，算是今年最大的遗憾吧。</p>
<p>关于年初做的不好的一些事情，等真正再长大一些了再来梳理吧，确实对一些事情还是没那么精通，而且那些也算是去年的事情了吧…</p>
<p>很多想做，却没能做的事情，只能在下一个年头继续了，努力做一个可爱的人吧…</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[一叶知秋]]></title>
      <url>https://CepheusSun.github.io/2016/12/05/%E4%B8%80%E5%A4%9C%E7%9F%A5%E7%A7%8B/</url>
      <content type="html"><![CDATA[<blockquote>
<p>任何一种环境或个人，初次见面就预感到离别的隐痛时，你必定爱上他了。</p>
</blockquote>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/IMG_0124.JPG?imageView2/4/w/600"/></p>
<p>​    不知道从什么时候开始，重庆已经到处都是黄黄的银杏叶子了。也不知道从什么时候开始，重庆的每个角落都能看到银杏树。正好跟家乡的名字相同，在银杏身上倒多添加了一些情感。</p>
<p>​    早些时候，就一直想要看一看秋天的银杏，金黄色的叶子洒满整条街。想象着这样的意境，脚踩在这样的树叶上，发出吱吱的声音，仿佛大自然叫呼唤。</p>
<p>​    时隔两年，再回到重庆的时候，却发现原来熟悉的一切都已经不在了，记得重庆留给我的印象，除了一片一片的香樟树，就是路边的竹子。再逢重庆，看到的又是一排排的梧桐，一棵棵的银杏。更美了吧！更四季分明了。</p>
<a id="more"></a>
<p>​    过去的两年，念念不忘的总是樟树林里面的味道，和每年运动场上一大片的蓝花楹花瓣。也许某天再次离开重庆的时候，让我怀念的不会再是香樟的味道和浪漫的蓝花楹，而是爱憎分明的梧桐和银杏。    </p>
<p>​    时光总是悄无声息的流淌着，秋的意境也总是被冠以一种 <code>春花秋月何时了</code> 或者 <code>红藕香残玉簟秋</code> 这样的想象。只是今日这样的景象中我还是产生了 <code>自古逢秋悲寂寥，我言秋日胜春朝</code> 这样的情感。</p>
<p>​    这么多年来，对一个城市的印象总是从学校或者公园开始。趁这这样一个艳阳天，还是爬起来，花了那么长时间到了大学城，故意绕过母校，只是怕误了认识这座城市的另外一次机会。</p>
<p>​    确实，重新认识了一下这座城市，虽然曾经走过这些地方。只是当时的脚步还是太过于匆忙了。也许，是应该放慢一下自己的脚步了，在这个浮躁的社会里，在这个浮躁的行业了里，放慢一下脚步是一件多么宝贵的事情啊，给自己一点时间，给生活一点时间，好好的认识这个世界。我想才是活着更大的意义吧。</p>
<p>​    在现在这个年纪思考这样的问题，着实是一件让别人看起来可笑的事情。也不好说自己经历过了什么，其实也并没有经历过什么。只是觉得走的太快，应该停下来休息一下了，走了那么多地方，仔细想起来，却仿佛什么地方都没有去过，没有仔细的体会过这个城市谈什么到过。只是过客而已。</p>
<p>​    一直不要脸的说重庆是我的第二故乡，相比于成都，却少了太多太多的熟悉。除了成都，待过的最长时间的城市了，还是那么陌生。</p>
<p>​    实在怪自己太懒。</p>
<p>​    不知道未来的时光我会在哪里，这两年也辗转了一些城市，我想，我是应该拿着相机，记下些什么。虽然我什么都带不走，虽然我也可能会忘记曾经拍下的一张张照片，虽然这座城市终究会把我遗忘。但我还是希望一些东西能够被我多记住一会儿，依靠着这么点照片，依靠着这么写文字。多少年以后，也许还会再打开这篇博客，在看到这么些图或者是文字，我还能想起来此时的心境，如此，便已足够。</p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0075.JPG?imageView2/4/w/600"/></p>
<p>​    </p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0115.JPG?imageView2/4/w/600"/></p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0010.JPG?imageView2/4/w/600"/></p>
<p>​    </p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0177.JPG?imageView2/4/w/600"/></p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0333.JPG?imageView2/4/w/600"/></p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0334.JPG?imageView2/4/w/600"/></p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0271.JPG?imageView2/4/w/600"/></p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0179.JPG?imageView2/4/w/600"/></p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0225.JPG?imageView2/4/w/600"/></p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0301.JPG?imageView2/4/w/600"/></p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0275.JPG?imageView2/4/w/600"/></p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0235.JPG?imageView2/4/w/600"/></p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0148.JPG?imageView2/4/w/600"/></p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0113.JPG?imageView2/4/w/600" /></p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0101.JPG?imageView2/4/w/600"/></p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0117.JPG?imageView2/4/w/600"/></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用 Cocoapods 管理你的项目]]></title>
      <url>https://CepheusSun.github.io/2016/12/02/%E4%BD%BF%E7%94%A8Cocoapods%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84%E9%A1%B9%E7%9B%AE/</url>
      <content type="html"><![CDATA[<blockquote>
<p>本文是一个教你使用CocoaPods管理开源模块的文章。</p>
</blockquote>
<p>作为一个 iOS 开发者，几乎所有人都使用过 CocoaPods 。作为 iOS 开发中最常用最有名的类库管理工具，给开发者带来了很大的便利。而且现在很多的第三方类库都支持 Pod . 如果一名开发者想要将自己的代码开源给更多的人使用，支持 CocoaPods 肯定是更好的办法。</p>
<p>最近一直在考虑将公司的项目使用 CocoaPods 来模块管理，所以将前段时间重新写的 <code>SYNetwork</code> 进行了对其他类的解耦，在这个过程中学到了很多组织代码的经验， 加上最近正在读的 《设计模式之禅》 逐渐意识到之前自己组织代码的能力还是有所欠缺，很多模块之间也进行了一些完全没有必要的耦合，这其实是很烂的编码形式。</p>
<p>由于公司并没有构建自己的 git 服务器, 而是将代码托管在了 oschina ,所以索性将这个模块开源并放在了github上。然后尝试使用 CocoaPods 来管理这个模块，并在公司其他几个项目中进行推广。</p>
<a id="more"></a>
<p><strong>这只是我模块化项目的第一步。</strong> </p>
<p>好了， 扯淡部分完成。</p>
<h2 id="在-GitHub-创建代码仓库"><a href="#在-GitHub-创建代码仓库" class="headerlink" title="在 GitHub 创建代码仓库"></a>在 GitHub 创建代码仓库</h2><p>因为 CocoaPods 始终还是要将代码放在 GitHub 上的，所以我们还是创建一个代码仓库来保存这些代码吧！</p>
<p>这一步完成之后需要记住两个内容</p>
<ul>
<li>项目的 ssh地址 <code>git@github.com:CepheusSun/SYNetwork.git</code></li>
<li>项目的名称 <code>SYNetwork</code></li>
</ul>
<h2 id="在本地创建-podspec-文件"><a href="#在本地创建-podspec-文件" class="headerlink" title="在本地创建 podspec 文件"></a>在本地创建 podspec 文件</h2><p>在终端中执行命令</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod lib create SYNetwork</div></pre></td></tr></table></figure>
<p>终端会提示</p>
<blockquote>
<p>Cloning <code>https://github.com/CocoaPods/pod-template.git</code> into <code>pod</code>.</p>
</blockquote>
<p>克隆完成之后会连续的回答几个问题，根据实际情况来选择吧！</p>
<p>回答问题之后，在桌面上会有一个<code>SYNetwork</code>文件夹。在这个文件夹中又有一个文件夹<code>SYNetwork</code>里面有两个文件</p>
<ul>
<li>Classes</li>
<li>Assets</li>
</ul>
<p>其中Classes 存放的你的源代码，Assets 应该好似一些图片资源什么的,我这个仓库里面并没有用到。</p>
<blockquote>
<p>还是重新整理一下Clone下来的SYNetwork吧</p>
<ul>
<li>在 Example 文件中是自动创建的 demo 项目， 回答问题之后会自动打开这个项目，不用管它，果断的关掉它，然后 cd 到这个文件夹中 <code>pod install</code>一下。</li>
<li>将我们写的代码放进 <code>SYNetwork/SYNetwork/Classes/</code>文件夹中。</li>
<li>重新 cd 到 example 文件夹，执行 <code>pod update</code></li>
</ul>
<p>完成上面三步之后，可以在你的 demo 项目中尝试使用一些你的库，不过我没有，偷了一个懒😊</p>
</blockquote>
<h3 id="在podspec文件中编码"><a href="#在podspec文件中编码" class="headerlink" title="在podspec文件中编码"></a>在podspec文件中编码</h3><p>我使用的是Sublime Text </p>
<p>打开第一个<code>SYNetwork</code>文件夹中的<code>SYNetwork.podspec</code>文件。这个文件就是配置 CoaoaPods 基本信息的文件</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Pod::Spec.new <span class="keyword">do</span> <span class="params">|s|</span></div><div class="line">  <span class="comment"># pod 库名</span></div><div class="line">  s.name             = <span class="string">'SYNetwork'</span></div><div class="line">  <span class="comment"># pod 版本</span></div><div class="line">  s.version          = <span class="string">'3.0'</span></div><div class="line">  <span class="comment"># pod 概述 </span></div><div class="line">  s.summary          = <span class="string">'A grest network frameworks.'</span></div><div class="line">  <span class="comment"># pod的详细描述</span></div><div class="line">  s.description      = &lt;&lt;-DESC</div><div class="line">    ’this is A great network frameworks<span class="string">'</div><div class="line">                       DESC</div><div class="line">  # pod 的主页</div><div class="line">  s.homepage         = '</span><span class="symbol">https:</span>/<span class="regexp">/github.com/</span>CepheusSun/SYNetwork<span class="string">'</div><div class="line">  # 许可证书</div><div class="line">  s.license          = &#123; :type =&gt; '</span>MIT<span class="string">', :file =&gt; '</span>LICENSE<span class="string">' &#125;</div><div class="line">  # 作者信息</div><div class="line">  s.author           = &#123; '</span>CepheusSun<span class="string">' =&gt; '</span>cd_sunyang@163.com<span class="string">' &#125;</div><div class="line">  # pod 源码在 GitHub 的仓库地址,以及 pod 版本</div><div class="line">  s.source           = &#123; :git =&gt; '</span><span class="symbol">https:</span>/<span class="regexp">/github.com/</span>CepheusSun/SYNetwork.git<span class="string">', :tag =&gt; 3.0 &#125;</div><div class="line">  # pod 支持 iOS 系统</div><div class="line">  s.ios.deployment_target = '</span><span class="number">8.0</span><span class="string">'</div><div class="line"></div><div class="line">  s.source_files = '</span>SYNetwork/Classes/*<span class="string">'</div><div class="line"></div><div class="line">  # s.public_header_files = '</span>SYNetwork/Classes/SYNetwork.h<span class="string">'</div><div class="line">  # s.frameworks = '</span>UIKit<span class="string">', '</span>MapKit<span class="string">'</div><div class="line">  s.dependency '</span>AFNetworking<span class="string">', '</span>~&gt; <span class="number">3.0</span><span class="string">'</div><div class="line">end</span></div></pre></td></tr></table></figure>
<p><strong>需要注意的是</strong></p>
<p><strong>1.</strong></p>
<p><code>s.source_files</code></p>
<p><code>s.public_header_files</code>  中设置的文件路径一定应该是正确的。不然后面会出问题。</p>
<p><strong>2.</strong></p>
<p><code>s.version</code></p>
<p><code>s.source</code>中设置的版本应该要对上吧，我不知道对不上会有什么问题。这个地方也会有很多的坑。还有就是至今没明白为什么我如果用 <code>0.1.0</code> 这样会报错，所以我就用了 <code>1.0</code></p>
<h3 id="验证一下"><a href="#验证一下" class="headerlink" title="验证一下"></a>验证一下</h3><p>在终端中执行</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod lib lint</div></pre></td></tr></table></figure>
<p>如果出现</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-&gt; SYNetwork (<span class="number">3.0</span>)</div><div class="line">SYNetwork passed validation.</div></pre></td></tr></table></figure>
<p>就是验证通过</p>
<p>不然就需要去改各种问题了</p>
<h3 id="注册CocoaPods"><a href="#注册CocoaPods" class="headerlink" title="注册CocoaPods"></a>注册CocoaPods</h3><p>要上传你的代码到 CocoaPods 肯定也需要注册自己的身份。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod trunk register your_email_address <span class="string">'your_name'</span></div></pre></td></tr></table></figure>
<p>成功之后 CocoaPods 会发送一验证邮件到上面的邮箱，确认一下就OK</p>
<p><strong>这里的<code>your_name</code>非常建议你使用 GitHub 的用户名 邮箱也是</strong></p>
<h3 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git tag -m<span class="string">"first release"</span> <span class="string">"3.0"</span></div><div class="line">git push --tags</div><div class="line">pod trunk push iOS_Category.podspec</div></pre></td></tr></table></figure>
<p>这了的 3.0 就是<code>SYNetwork.podspec</code>中的 3.0 </p>
<p>最后搜索一下吧</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod search SYNetwork</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>一些坑吧！</p>
<h4 id="路径不对"><a href="#路径不对" class="headerlink" title="路径不对"></a>路径不对</h4><blockquote>
<p>Unable to interpret the specified path as a podspec</p>
</blockquote>
<p> 看你的 tag 标记和 podSpec 文件的 version 字段是否一致</p>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p>[<em><a href="http://blog.csdn.net/skylin19840101/article/details/50426822">在CocoaPods上创建自己iOS程序的依赖管理</a></em></p>
<p><a href="http://tips.producter.io/shi-yong-cocoapods-jin-xing-tuan-dui-xie-zuo/">使用 CocoaPods 进行团队协作</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2016我的书单]]></title>
      <url>https://CepheusSun.github.io/2016/11/25/2016%E6%88%91%E7%9A%84%E4%B9%A6%E5%8D%95/</url>
      <content type="html"><![CDATA[<p>在年末的时候意识到梳理记录是一件多么重要和美好的事情。从阅读开始，从2016年开始记录我的读书记录。</p>
<a id="more"></a>
<h3 id="已经读清单"><a href="#已经读清单" class="headerlink" title="已经读清单"></a>已经读清单</h3><h4 id="《疯狂的Java讲义》"><a href="#《疯狂的Java讲义》" class="headerlink" title="《疯狂的Java讲义》"></a>《疯狂的Java讲义》</h4><blockquote>
<p>虽然看了但是没有很深入的研究学习Java，仅仅是看了而已😂</p>
</blockquote>
<h4 id="《禅与Objective-C编程艺术》"><a href="#《禅与Objective-C编程艺术》" class="headerlink" title="《禅与Objective-C编程艺术》"></a>《禅与Objective-C编程艺术》</h4><blockquote>
<p>iOS进阶苦旅</p>
</blockquote>
<h4 id="《iOS开发进阶》"><a href="#《iOS开发进阶》" class="headerlink" title="《iOS开发进阶》"></a>《iOS开发进阶》</h4><blockquote>
<p>iOS进阶苦旅</p>
</blockquote>
<h4 id="《Effective-Objective-C-2-0：编写高质量iOS与OS-X代码的52个有效方法》"><a href="#《Effective-Objective-C-2-0：编写高质量iOS与OS-X代码的52个有效方法》" class="headerlink" title="《Effective Objective-C 2.0：编写高质量iOS与OS X代码的52个有效方法》"></a>《Effective Objective-C 2.0：编写高质量iOS与OS X代码的52个有效方法》</h4><blockquote>
<p>iOS进阶苦旅，强烈推荐本书。</p>
</blockquote>
<h4 id="《PRODUCTER》"><a href="#《PRODUCTER》" class="headerlink" title="《PRODUCTER》"></a>《PRODUCTER》</h4><blockquote>
<p>Kevin Zhou 出品</p>
</blockquote>
<h4 id="《Objective-C高级编程-iOS与OS-X多线程和内存管理》"><a href="#《Objective-C高级编程-iOS与OS-X多线程和内存管理》" class="headerlink" title="《Objective-C高级编程 iOS与OS X多线程和内存管理》"></a>《Objective-C高级编程 iOS与OS X多线程和内存管理》</h4><blockquote>
<p>iOS进阶苦旅，强烈推荐本书。</p>
</blockquote>
<h4 id="《腾讯是怎么长大的》"><a href="#《腾讯是怎么长大的》" class="headerlink" title="《腾讯是怎么长大的》"></a>《腾讯是怎么长大的》</h4><blockquote>
<p>算是腾讯的自传吧</p>
</blockquote>
<h4 id="《跳槽：做出更好的选择》"><a href="#《跳槽：做出更好的选择》" class="headerlink" title="《跳槽：做出更好的选择》"></a>《跳槽：做出更好的选择》</h4><blockquote>
<p>职业规划相关 </p>
</blockquote>
<h3 id="DOING"><a href="#DOING" class="headerlink" title="DOING"></a>DOING</h3><h4 id="《The-Swift-Programming-Languige》"><a href="#《The-Swift-Programming-Languige》" class="headerlink" title="《The Swift Programming Languige》"></a>《The Swift Programming Languige》</h4><blockquote>
<p>swift 开发必备</p>
</blockquote>
<h4 id="《软件开发者路线图：从学徒到高手》"><a href="#《软件开发者路线图：从学徒到高手》" class="headerlink" title="《软件开发者路线图：从学徒到高手》"></a>《软件开发者路线图：从学徒到高手》</h4><h3 id="未读清单"><a href="#未读清单" class="headerlink" title="未读清单"></a>未读清单</h3><h4 id="《软件开发者路线图-从学徒到高手》"><a href="#《软件开发者路线图-从学徒到高手》" class="headerlink" title="《软件开发者路线图:从学徒到高手》"></a>《软件开发者路线图:从学徒到高手》</h4><h4 id="《编程珠玑》"><a href="#《编程珠玑》" class="headerlink" title="《编程珠玑》"></a>《编程珠玑》</h4><h4 id="《重构-改善既有代码的设计》"><a href="#《重构-改善既有代码的设计》" class="headerlink" title="《重构 改善既有代码的设计》"></a>《重构 改善既有代码的设计》</h4><h4 id="《React-Native-用JavaScript开发移动应用》"><a href="#《React-Native-用JavaScript开发移动应用》" class="headerlink" title="《React Native 用JavaScript开发移动应用》"></a>《React Native 用JavaScript开发移动应用》</h4><h4 id="《Objective-C编程全解》"><a href="#《Objective-C编程全解》" class="headerlink" title="《Objective-C编程全解》"></a>《Objective-C编程全解》</h4><h3 id="书库"><a href="#书库" class="headerlink" title="书库"></a>书库</h3><h4 id="《A-Guide-To-iOS-Animation》"><a href="#《A-Guide-To-iOS-Animation》" class="headerlink" title="《A Guide To iOS Animation》"></a>《A Guide To iOS Animation》</h4><h4 id="《iOS进阶指南》"><a href="#《iOS进阶指南》" class="headerlink" title="《iOS进阶指南》"></a>《iOS进阶指南》</h4><blockquote>
<p>iOS圈网红 叶孤城正在写的书</p>
</blockquote>
<h4 id="《Core-Data》"><a href="#《Core-Data》" class="headerlink" title="《Core Data》"></a>《Core Data》</h4><blockquote>
<p>objc.io 出品 喵神翻译</p>
</blockquote>
<h4 id="《Swift-设计模式（iOS）》"><a href="#《Swift-设计模式（iOS）》" class="headerlink" title="《Swift 设计模式（iOS）》"></a>《Swift 设计模式（iOS）》</h4><h4 id="《Go-Web-编程》"><a href="#《Go-Web-编程》" class="headerlink" title="《Go Web 编程》"></a>《Go Web 编程》</h4><h4 id="《iOS-CORE-ANIMATION》"><a href="#《iOS-CORE-ANIMATION》" class="headerlink" title="《iOS CORE ANIMATION》"></a>《iOS CORE ANIMATION》</h4><h4 id="《Python-Cookbook》"><a href="#《Python-Cookbook》" class="headerlink" title="《Python Cookbook》"></a>《Python Cookbook》</h4><h4 id="《函数式Swift》"><a href="#《函数式Swift》" class="headerlink" title="《函数式Swift》"></a>《函数式Swift》</h4><blockquote>
<p>objc.io 出品 喵神翻译</p>
</blockquote>
<h4 id="《深入解析Mac-OX-amp-iOS-操作系统》"><a href="#《深入解析Mac-OX-amp-iOS-操作系统》" class="headerlink" title="《深入解析Mac OX &amp; iOS 操作系统》"></a>《深入解析Mac OX &amp; iOS 操作系统》</h4><h4 id="《JavaScript-权威指南》"><a href="#《JavaScript-权威指南》" class="headerlink" title="《JavaScript 权威指南》"></a>《JavaScript 权威指南》</h4><h4 id="《JavaScript-面向对象编程指南》"><a href="#《JavaScript-面向对象编程指南》" class="headerlink" title="《JavaScript 面向对象编程指南》"></a>《JavaScript 面向对象编程指南》</h4><h4 id="《JavaScript-王者归来》"><a href="#《JavaScript-王者归来》" class="headerlink" title="《JavaScript 王者归来》"></a>《JavaScript 王者归来》</h4><h4 id="《Shell脚本学习指南》"><a href="#《Shell脚本学习指南》" class="headerlink" title="《Shell脚本学习指南》"></a>《Shell脚本学习指南》</h4><h4 id="《大道至简-软件工程实践者的思想》"><a href="#《大道至简-软件工程实践者的思想》" class="headerlink" title="《大道至简 软件工程实践者的思想》"></a>《大道至简 软件工程实践者的思想》</h4><h4 id="《REWORK》"><a href="#《REWORK》" class="headerlink" title="《REWORK》"></a>《REWORK》</h4><h4 id="《iOS-并发编程指南》"><a href="#《iOS-并发编程指南》" class="headerlink" title="《iOS 并发编程指南》"></a>《iOS 并发编程指南》</h4><h4 id="《Growth-全栈工程师指南》"><a href="#《Growth-全栈工程师指南》" class="headerlink" title="《Growth 全栈工程师指南》"></a>《Growth 全栈工程师指南》</h4><h4 id="《深入浅出全栈工程师》"><a href="#《深入浅出全栈工程师》" class="headerlink" title="《深入浅出全栈工程师》"></a>《深入浅出全栈工程师》</h4><h4 id="《调试九法-软件错误的排查之道》"><a href="#《调试九法-软件错误的排查之道》" class="headerlink" title="《调试九法 软件错误的排查之道》"></a>《调试九法 软件错误的排查之道》</h4><h4 id="《架构实践-软件架构设计的过程》"><a href="#《架构实践-软件架构设计的过程》" class="headerlink" title="《架构实践 软件架构设计的过程》"></a>《架构实践 软件架构设计的过程》</h4><h4 id="《图解TCP-IP》"><a href="#《图解TCP-IP》" class="headerlink" title="《图解TCP/IP》"></a>《图解TCP/IP》</h4><h4 id="《图解HTTP》"><a href="#《图解HTTP》" class="headerlink" title="《图解HTTP》"></a>《图解HTTP》</h4><h4 id="《HTTP权威指南》"><a href="#《HTTP权威指南》" class="headerlink" title="《HTTP权威指南》"></a>《HTTP权威指南》</h4><h4 id="《TCP-IP详解-协议、实现、TCP事物协议》"><a href="#《TCP-IP详解-协议、实现、TCP事物协议》" class="headerlink" title="《TCP/IP详解 协议、实现、TCP事物协议》"></a>《TCP/IP详解 协议、实现、TCP事物协议》</h4>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[怎样在iOS中使用icon-font？]]></title>
      <url>https://CepheusSun.github.io/2016/11/23/%E6%80%8E%E6%A0%B7%E5%9C%A8iOS%E4%B8%AD%E4%BD%BF%E7%94%A8icon-font%EF%BC%9F/</url>
      <content type="html"><![CDATA[<blockquote>
<p>这是一篇写给 iOS 开发的文章(教程)。</p>
</blockquote>
<p>icon 和 font 拆开来看应该所有人都认识它是什么意思，iconfont就是这两者的结合。严格的说，我们平时使用的字体，并不是我们传统认知中的文字，而是一个一个的图标。是由在坐标系中各种点，连起来组成的。babala….. 这也是我们平时使用的字体无论放到多大，都不会出现在图片上面出现的因为拉伸而出现的失真的情况。</p>
<p>iconfont 实际上就是吧我们在项目中要使用的各类 icon 按照相同的原理制作成一个字体库，然后用使用 font 的方式来使用。</p>
<p>说的挺乱，反正大概就是这么个意思吧。</p>
<a id="more"></a>
<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p>测试的时候随便截了一个图<br><img src="http://ocg4av0wv.bkt.clouddn.com/9760173C-7692-43C5-A5CC-FEED1611B3B5.png" /></p>
<h2 id="icon-font-解决了什么问题"><a href="#icon-font-解决了什么问题" class="headerlink" title="icon-font 解决了什么问题"></a>icon-font 解决了什么问题</h2><blockquote>
<ul>
<li>解决一个图标要同时适配PC 移动端 和 retina 的问题</li>
</ul>
</blockquote>
<p>在现在扁平化设计大行其道的大环境下，拟物化设计推崇的写实以及高光纹理之类的元素也基本上都被现在的设计师们舍弃掉了，这也为 icon-font 的应用提供了基础。</p>
<blockquote>
<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul>
<li>减少应用体积，字体文件比图片要小</li>
<li>图标保真缩放，解决2x／3x的问题</li>
<li>方便更改图标颜色大小，阴影，图片复用</li>
<li>一套图标资源可以在不同平台使用(安卓、iOS、web)</li>
<li>资源维护方便</li>
</ul>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>需要自定义svg图片，并将其转换为ttf文件，图标制作成本比较高</li>
<li>添加图标是需要重新制作ttf文件</li>
<li>只能支持单色(不支持渐变色图标)</li>
</ul>
<p>(以上内容来自 没故事的卓同学 在趣直播的分享)</p>
</blockquote>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>这个很简单，就是利用 svg 矢量图制作字体库</p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul>
<li>阿里的iconfont.cn</li>
<li>svg 文件，svg 的制作其实是由设计师完成的，我们只需要让设计师提供合适的 svg 而不是2x3x图片。就可以了。</li>
</ul>
<h3 id="step-1"><a href="#step-1" class="headerlink" title="step 1"></a>step 1</h3><p><strong>在<a href="ICONFONT.CN">iconfont.cn</a>注册并登录</strong>。</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/CB315E67-08BF-46E0-A087-F658EC1B49FC.png"/></p>
<p>注册完成后点击图标管理，我的图标，然后上传准备好的 svg 文件。</p>
<p><strong>然后切换到我的项目</strong></p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/6064C73F-8BEF-40B9-99EB-3C5BF3BFDBCB.png" /></p>
<p>点击右边的添加，创建字体库。</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/1DF9A210-D6A1-490B-B816-2D813E51F643.png"/></p>
<p>红圈内的内容就是接下来要用到的<code>fontName</code></p>
<p><strong>接下来</strong></p>
<p>还记得我们第一步上传的图标名字吧！</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/64E77B1D-6153-42FA-8FBE-D8C715725C21.png" /></p>
<p>在右上角搜索哪个名字，然后就出来了刚刚上传的图标</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/820BD3A3-DF5B-4837-BA09-40AD93BEFE3C.png"/></p>
<p>加入购物车之后</p>
<p>右上角购物车上应该出现了 badge吧。</p>
<p><strong>点击这个图标</strong></p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/B8A3AE3A-7758-4435-82E9-6E12DDDA4C47.png"/></p>
<p>因为我已经添加了 <code>ps_shop_icon</code>所以我就随便选了一个。</p>
<p><strong>回到我的项目</strong></p>
<p>点击下载至本地</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/C4838064-2EEC-44F8-A8DE-AC5C56A4673E.png"/></p>
<p>下载之后你会看到一个 .ttf 文件。</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/B9737F6A-0140-430F-8298-4DD575AD9C7A.png"/></p>
<p><strong>将这个文件拉到项目中</strong></p>
<p>接下来就是要在项目中操作的事情了。</p>
<h4 id="step-2"><a href="#step-2" class="headerlink" title="step 2"></a>step 2</h4><p><img src="http://ocg4av0wv.bkt.clouddn.com/AF58494E-C3F6-4CEB-BDAD-8F798246F771.png"/></p>
<p>在info.plist 文件中添加如上内容。</p>
<p><strong>然后</strong></p>
<p>在 <code>Build Phases</code>中检查一下</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/954BABBC-3644-4189-9016-B692D18E5CCB.png"/></p>
<p>如果没有就删掉重新拉进项目吧！</p>
<p>或者点击最下面手动添加。</p>
<h4 id="step-3"><a href="#step-3" class="headerlink" title="step 3"></a>step 3</h4><p>在代码中找一个label</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">label.font = [UIFont fontWithName:@&quot;dph_fonticon&quot; size:20];</div><div class="line">label.textColor = [UIColor redColor];</div><div class="line">label.text = @&quot;\U0000e601&quot;;</div></pre></td></tr></table></figure>
<p>代码中的<code>dph_fonticon</code> 就是在iconfont.cn的项目中设置的<code>font-family</code>名字</p>
<p><code>\U0000e601</code>是在iconfont.cn 中对应</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/9B7F5726-260D-4CCA-859B-F5453307387E.png"/></p>
<p>图片中的<code>&amp;#xe610</code> 这个是给前端用的，在iOS上对应的将<code>&amp;#x</code>更换成<code>\U</code> 然后补0 保证unicode 为8位就是了。 </p>
<p>现在运行一下代码，就能看到对应的值已经改变了。</p>
<h3 id="Xib"><a href="#Xib" class="headerlink" title="Xib"></a>Xib</h3><p><img src="http://ocg4av0wv.bkt.clouddn.com/3831121F-8386-4F51-B578-B425888571C6.png" /></p>
<p>如上图。</p>
<p>那个问号需要将下载下来的<code>.ttf</code>文件导入本体的一个叫做<code>footbook的app中</code>（直接拖进去就ok）</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/10B329BA-57B9-4C54-B447-90EEBDDC138D.png"/></p>
<p> 然后就可以复制粘贴了。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>iconfont 这种技术好几年前就已经出现了，现在也已经出现在了阿里的大部分产品中，可见iconfont的技术也是十分成熟的，为了给安装包瘦身，开发者们也做了很多的努力，作为占用资源非常多的图片文件，使用 iconfont 确实能够给 app 减肥。这对于像淘宝、支付宝之类的巨无霸 app 来说就显得尤为重要了。</p>
<p>后期在公司 UI 的帮助下，准备在公司几个项目中小范围的实验一下这个方法。检验一下 iconfont 能在项目中带来多大的便利。</p>
<h3 id="TODO："><a href="#TODO：" class="headerlink" title="TODO："></a>TODO：</h3><p>使用 iconfont 生成<code>UIImage</code> 在<code>UIButton</code>和<code>UIImageView</code> 中使用。</p>
<p>这个在github 上搜一下<code>iconfont</code> 就有很多代码可以使用了。另外 swift 版本 卓同学也写了一份。</p>
<h3 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h3><p>感谢<a href="http://www.jianshu.com/users/88a056103c02/latest_articles">没故事的卓同学</a>在<a href="www.quzhiboapp.com">趣直播</a>的分享</p>
<p>感谢公司 UI 小哥帮我做了几个 svg 图</p>
<p>感谢公司前端小哥的帮忙</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://github.com/PrideChung/FontAwesomeKit">swift</a></p>
<p><a href="https://github.com/JohnWong/IconFont">objC</a></p>
<p><a href="http://johnwong.github.io/mobile/2015/04/03/using-icon-font-in-ios.html">文章</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SYNetwork]]></title>
      <url>https://CepheusSun.github.io/2016/11/17/SYNetwork/</url>
      <content type="html"><![CDATA[<blockquote>
<p> 基于AFNetworking的网络请求框架。采用command设计模式，支持按照接口缓存请求数据。</p>
</blockquote>
<p>在公司项目整体进行换代升级的同时，移动端 App 由原来的的一个 App 拆分成两个 App ，再拆分到三个 App，在三个 App 虽然还是有很多的办法来进行管理，但是考虑到随着业务的增长，产品的数量还有增加的趋势，功能也逐渐增多。还有 Hybrid化 的趋势。将一些共有的模块提取出来为三个 App 所用，可能会是更好的方式。当然，对这些公共模块的管理，还是会选择使用 CocoaPods ，接下来会再写一篇文章来介绍如何使用创建自己的 CocoaPods 仓库。在这样的环境下，第一个提取出来的模块就诞生了 — SYNetwork。</p>
<p>在进行模块的独立的时候，想得最多的还是和原来的代码进行解耦，并且在抽取的过程中不要破坏原有的代码逻辑，并且比较合理的组织代码。在这样的基础上添加一些新的功能。在跟另外一个同事讨论之后，决定放弃之前集中式的网络请求方式，参考了大量前辈的网络库之后，采用了 Command 模式，一个网络请求 Api 是一个对象，这样能够更方便和优雅的根据不同的接口满足不同的业务需求。</p>
<p>当然，公司的项目目前还没有十分的复杂，所以目前主要实现了: <code>POST</code>、<code>GET</code> 两种请求方式；根据请求的参数和 url 缓存请求结果；一个还算漂亮的logger；简单的对网络请求进行 AOP 操作(对参数进行加密)这些比较常见的功能。</p>
<a id="more"></a>
<p><a href="https://github.com/CepheusSun/SYNetwork"><em>GitHub地址</em></a></p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><p>SYNetwork 由下面两个部分组成</p>
<ul>
<li><p>SYNetwork</p>
</li>
<li><p>SYRequestParametersBuilder</p>
</li>
</ul>
<blockquote>
<p>这个类可以添加一些公共的参数</p>
</blockquote>
<ul>
<li>SYRequest</li>
</ul>
<blockquote>
<p>所有网络请求 API 的父类</p>
</blockquote>
<ul>
<li>SYNetworkConfig</li>
</ul>
<blockquote>
<p>环境配置 包括网络请求的 BaseUrl 请求超时时间，缓存总量等</p>
</blockquote>
<ul>
<li>SYHTTPManager</li>
</ul>
<blockquote>
<p>所有网络请求统一由这个类发出</p>
</blockquote>
<ul>
<li>SYResponse</li>
</ul>
<blockquote>
<p>网络请求返回值对象</p>
</blockquote>
<ul>
<li>SYCache</li>
</ul>
<ul>
<li>SYCache</li>
</ul>
<blockquote>
<p>缓存管理</p>
</blockquote>
<ul>
<li>SYCacheObject </li>
</ul>
<blockquote>
<p>缓存的对象</p>
</blockquote>
<ul>
<li>SYLogger</li>
</ul>
<blockquote>
<p>一个漂亮的logger</p>
</blockquote>
<h2 id="加入"><a href="#加入" class="headerlink" title="加入"></a>加入</h2><h3 id="1、直接将源文件拉进你的工程"><a href="#1、直接将源文件拉进你的工程" class="headerlink" title="1、直接将源文件拉进你的工程"></a>1、直接将源文件拉进你的工程</h3><h3 id="2、SYNetwork也支持通过Cocoapod-通过在Podfile中添加如下代码。"><a href="#2、SYNetwork也支持通过Cocoapod-通过在Podfile中添加如下代码。" class="headerlink" title="2、SYNetwork也支持通过Cocoapod. 通过在Podfile中添加如下代码。"></a>2、SYNetwork也支持通过<a href="http://cocoapods.org"><em>Cocoapod</em></a>. 通过在Podfile中添加如下代码。</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod <span class="string">"SYNetwork"</span></div></pre></td></tr></table></figure>
<p>然后在终端中运行</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod install</div></pre></td></tr></table></figure>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="step-1"><a href="#step-1" class="headerlink" title="step 1"></a>step 1</h3><p>导入头文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#import &lt;SYNetwork/SYNetwork.h&gt;</div></pre></td></tr></table></figure>
<p>在<code>appdelegate</code>中加入如下代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[[SYRequestConfig sharedConfig] configBaseUrl:YOUR_BASE_URL                                            								 timeOutInterval:20</div><div class="line">cacheCountLimit:1000</div><div class="line">rebuildParametersManger:[XXRequestParametersBuilder sharedInstance]];</div></pre></td></tr></table></figure>
<p>以上代码中的<code>XXRequestParametersBuilder</code> 是<code>SYRequestParametersBuilder</code>的子类,主要有以下方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">+ (SYRequestParametersBuilder *)sharedInstance;</div><div class="line"></div><div class="line">- (NSDictionary *)rebuildParameters:(NSDictionary *)parameters;</div><div class="line"></div><div class="line">/**</div><div class="line">生成缓存的key  这个方法必须由字类实现</div><div class="line"></div><div class="line">@param parcmeters 参数</div><div class="line">@return key</div><div class="line">*/</div><div class="line">- (NSString *)cacheSaveKeyString:(NSDictionary *)parcmeters;</div></pre></td></tr></table></figure>
<h3 id="step-2"><a href="#step-2" class="headerlink" title="step 2"></a>step 2</h3><p>每个接口都是一个继承与<code>SYRequest</code>的子类,接下来以登录为例子</p>
<p><strong>LoginApi.h</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (id)initWithUserName:(NSString *)username password:(NSString *)password;</div></pre></td></tr></table></figure>
<p><strong>LoginApi.m</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">@implementation LoginApi&#123;</div><div class="line">NSString *_username;</div><div class="line">NSString *_password;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (id)initWithUserName:(NSString *)username password:(NSString *)password &#123;</div><div class="line">self = [super init];</div><div class="line">if (self) &#123;</div><div class="line">_username = username;</div><div class="line">_password = password;</div><div class="line">_logintype = logintype;</div><div class="line">&#125;</div><div class="line">return self;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (NSString *)requestUrl &#123;</div><div class="line">return @&quot;api/user/login&quot;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (NSMutableDictionary *)requestParams &#123;</div><div class="line">return @&#123;</div><div class="line">@&quot;phone&quot;: _username,</div><div class="line">@&quot;code&quot; : _password,</div><div class="line">&#125;.mutableCopy;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>还可以通过<code>SYRequest</code>的一些方法,来设置请求方法，校验返回收据，是否缓存等问题。</p>
<h3 id="step-3-调用"><a href="#step-3-调用" class="headerlink" title="step 3 调用"></a>step 3 调用</h3><p>通过<code>block</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">_loginApi = [[LoginApi alloc] initWithUserName:phone password:code logintype:type];</div><div class="line">[_loginApi startWithSuccessBlock:^(SYResponse *response , NSString *errorMessage) &#123;</div><div class="line">// 请求成功</div><div class="line">&#125; failureBlbck:^(SYResponse *response , NSString *errorMessage) &#123;</div><div class="line">// 请求失败</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>也可以通过<code>delegate</code>收到回调</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">_loginApi = [[LoginApi alloc] initWithUserName:phone password:code logintype:type];</div><div class="line">_loginApi.callBackDelegate = self;</div><div class="line">[_loginApi start];</div></pre></td></tr></table></figure>
<p>然后实现</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- (void)managerCallApiDidSuccess:(SYResponse *)response;</div><div class="line">- (void)managerCallApiDidFailed:(NSString *)errorMessage;</div></pre></td></tr></table></figure>
<p>两个方法</p>
<h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>SYNetwork is available under the MIT license. See the LICENSE file for more info.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SYPhotoBrowser]]></title>
      <url>https://CepheusSun.github.io/2016/11/02/SYPhotoBrowser/</url>
      <content type="html"><![CDATA[<p>图片浏览器，使用方法类似UITableView的图片浏览器。基于YYWebImage.</p>
<a id="more"></a>
<h3 id="GIF"><a href="#GIF" class="headerlink" title="GIF"></a>GIF</h3><p><img src="http://ocg4av0wv.bkt.clouddn.com/SYPhotoBrowser.gif" width=500/></p>
<h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SYPhotoBrowser *browser = [[SYPhotoBrowser alloc] init];</div><div class="line">   [browser setDataSource:self];</div><div class="line">   NSInteger idx = 0;</div><div class="line">   [browser showFromView:ges.view photoCount:self.imageUrls.count currentPhotoIndex:idx];</div></pre></td></tr></table></figure>
<h4 id="Datasource"><a href="#Datasource" class="headerlink" title="Datasource"></a>Datasource</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (UIView *)photoView:(SYPhotoBrowser *)photeBrowser viewForIndex:(NSInteger)index;</div><div class="line">- (CGSize)photoView:(SYPhotoBrowser *)photeBrowser imageSizeForIndex:(NSInteger)index;</div><div class="line">- (UIImage *)photoView:(SYPhotoBrowser *)photoBrowser defaultImageForIndex:(NSInteger)index;</div><div class="line">- (NSString *)photoView:(SYPhotoBrowser *)photoBrowser highQualityUrlStringForIndex:(NSInteger)index;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/CepheusSun/SYPhotoBrowser"><em>GitHub地址</em></a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[让人恐惧的属性关键字]]></title>
      <url>https://CepheusSun.github.io/2016/10/31/%E8%AE%A9%E4%BA%BA%E6%81%90%E6%83%A7%E7%9A%84%E5%B1%9E%E6%80%A7%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      <content type="html"><![CDATA[<p>一半的 App 都会有一个个人这个模块来对个人信息，设置等功能进行管理，最近搞公司的项目，在项目结束的时候就想到了应该给我的这个界面加上 “headerimage scale” 这样的效果。然后项目已经结束，也并不想大刀阔斧的去修改原来的代码，想到之前在微博看到一个这样的库。时间还是比较紧急的，毕竟周末，然后就把代码下下来，简单的跑了一下，没有发现什么问题之后就直接在项目中用了。</p>
<p>由于公司一直缺乏很系统的兼容测试，只是对功能有比较严格的要求，所以接下来到上线这个过程都很愉快。 UI、产品都比较满意这样搞。</p>
<p>上线之后，就发生了一些悲剧的事情了….</p>
<a id="more"></a>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/CE310A65-63EE-4D64-B031-864A19556924.png",width = 500 /></p>
<h4 id="UIScrollView-headerImageScale-实现原理"><a href="#UIScrollView-headerImageScale-实现原理" class="headerlink" title="UIScrollView + headerImageScale 实现原理"></a>UIScrollView + headerImageScale 实现原理</h4><p>不得不说，这个category也是一个非常好的东西，帮助我们轻松的集成tableview上面的头部缩放图片，且无侵入性。</p>
<p>实现原理其实看起来也比较见到，使用到了method swizzling来拦截到tableview的头部试图，然后通过KVO来监听scrollview的偏移量。然后修改imageView的frame实现头部试图的缩放。</p>
<p>当然既然使用到了KVO很自然的就要想到在dealloc方法里面需要去移除observer我也很愉快的在源码里面找到了这个方法。<strong>这就是坑所在</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- (void)dealloc</div><div class="line">&#123;</div><div class="line">    if (self.yz_isInitial) &#123; // 初始化过，就表示有监听contentOffset属性，才需要移除</div><div class="line">        </div><div class="line">        [self removeObserver:self forKeyPath:YZKeyPath(self, contentOffset)];</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可能说的不好，但是大概实现思路，也跟我之前自己写的差不多，就是在原来的header位置上面放一个UIimageView，通过监听scrollview的偏移量来改变UIimageView的frame.</p>
<p>然后我们接着讲，由于公司缺乏系统的兼容性测试，在上线前使用模拟器跟UI对应调整了一下试图，以及针对小屏幕手机做了相应了屏幕适配之后。项目也很顺利的上线了，虽然从我点发布，到我在app store上面搜到这期间相差了6七个小时，感觉这个周期比往常慢了很多。</p>
<p>原以为提前了半个月完成了项目，然后经过了十分充分的测试，自己也针对极端网络条件下做了很多测试。这个版本应该不会收集到太多的线上crash。</p>
<p>然后很不幸的是我在线上日志收集日志中看到了很怪异的问题，线上crash一直都非常高。</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/8C289058-1F79-42EE-8F0B-34FA0FC27A43.png" width= 500 /></p>
<p>这是我通过bugly收集到的相关日志， 仔细一看，所有crash都发生在iOS8上面。一共三条日志，全部发生在iOS8 上面。</p>
<p>这让我意识到这个问题一定是这次更新导致了严重的不兼容iOS8的问题。</p>
<h4 id="DEBUG过程"><a href="#DEBUG过程" class="headerlink" title="DEBUG过程"></a>DEBUG过程</h4><p>可能也注意到了，上面有一条ipad的日志，虽然app并没有兼容apad，但是我也用家里的ipad试了一下，进入app，到登录界面然后就crash，在打了全局断点的情况下，crash到了maim.m这个文件里面，bad_access野指针。然后我想了半天也没有找到什么情况下能这么快的出现crash。然后我把目标放在了JPush 极光推送上面。经历了一段时间之后，我仔细检查了极光推送所有的地方，并且尝试将所有代码注释的方法，crash依旧。</p>
<p>后来我开始依赖于google，最终在唐巧巧大的博客里找到了解决方法。</p>
<p>在appdelegate中定义一个方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">void uncaughtExceptionHandler(NSException *exception) &#123;</div><div class="line">    NSLog(@&quot;CRASH: %@&quot;, exception);</div><div class="line">    NSLog(@&quot;Stack Trace: %@&quot;, [exception callStackSymbols]);</div><div class="line">    // Internal error reporting</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在应用启动的时候，将这个方法作为异常的回调</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions</div><div class="line">&#123;   </div><div class="line">    NSSetUncaughtExceptionHandler(&amp;uncaughtExceptionHandler);</div><div class="line">    // Normal launch stuff</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后终于能看到日志了。</p>
<p>在另外一次crash中我看到了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[UIScrollView _systemGestureStateChanged:]: message sent to deallocated instance</div></pre></td></tr></table></figure>
<p>这样的句子，才明白，crash并不是JPush造成的。UIScrollView，此时我并没有想到什么东西，因为在这个使用到了ScrollView的场景实在不多，然后我通过修改代码，绕开使用了<code>UIScrollView</code>的<code>WelcomeViewController</code>之后发现登录界面正常，不绕开，无法进入登录界面。然后登录界面登录进去之后依然crash</p>
<p>因为我的登录界面</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/E28FB77D-C390-47D4-A6B3-6FED899295EF.png" width=200/></p>
<p>这个控件使用了Scrollview。</p>
<p>然后在登录成功最后，几乎无法使用，log全是差不多的情况，这个时候我才开始吧注意力放在相关的类别里面。</p>
<p>然后我又打开了<a href="http://www.jianshu.com/p/859e3ef76b05"><em>作者的简书</em></a></p>
<p>在评论中看到这样一句</p>
<blockquote>
<p>1.发现app中任何的uitableview被释放之后，再点击屏幕就会crash，报<br>[UITableView _systemGestureStateChanged:]: message sent to deallocated instance 0x17385200<br>2.后来发现任何的collectionview被释放之后，点击屏幕也会crash，报<br>[UICollectionView _systemGestureStateChanged:]: message sent to deallocated instance 0x17385200<br>3.把目光放在UIScrollView上，查找UIScrollView的分类，是否有问题<br>4.找到 UIScrollView+HeaderScaleImage.h 注释了其中一部分代码,并把所有的引用都注释掉，依然有这个问题。<br>5.开始将目光放在_systemGestureStateChanged上，还有僵尸对象上，用instrument调试，依然无解。<br>6.六个小时过去了。<br>7.睡了一觉，然后又把目光放在UIScrollView上，将UIScrollView+HeaderScaleImage.h 中的代码全部注释掉了。<br>8.正常。感觉世界都亮了。<br>9.一步一步注释，排除，最后发现这个里面重写了uiscrollview的dealloc方法，导致scrollview在释放的时候无法清除自己的观察者身份，导致系统发通知的时候仍然能发到它身上。ios 9 没问题，ios8上就会直接crash。<br>10.将最后那个dealloc中的代码另外立出来，在controller的dealloc中主动调用这个方法，整个app没几个页面用这个，所以也并没有增加太多的工作量。</p>
</blockquote>
<p>照着上面的方法修改之后，果然，问题得到解决。</p>
<h4 id="分析原因"><a href="#分析原因" class="headerlink" title="分析原因"></a>分析原因</h4><p>如果还记得本文的标题，大概也能想到了，在iOS9以前的系统上delegate的属性关键字是assign,这一点不用查看什么文档，只需要在百度里面搜索一下 <code>delegate assign 2014</code> 就可以得到验证。</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/FF79579D-6E61-4795-A19F-5806CF7.png" width=500 /></p>
<p>在那个时代的delegate都是使用的assign作为delegate的属性关键字。</p>
<p>我们再看看<strong>52个方法</strong>中对几个属性关键字的描述</p>
<blockquote>
<ol>
<li>assign “设置方法” 只会执行针对“纯量关系”的简单负值操作。</li>
<li>strong 此特质表明该属性定义了一种“拥有关系”，为这种属性设置新值时，设置方法会<strong>先保留新值，并释放旧值</strong>然后讲新值设置上去。</li>
<li>weak 此特质表明该属性定义了一种“非拥有关系”，为这种属性设置新值时，设置方法<strong>既不保留新值，也不释放旧值</strong>，此特征同assign类似，然而在属性所指的对象遭到摧毁时，属性指也会清空（nil out）</li>
<li>unsafe_unretained 此特质的语义和assign相同，但是它适用于“对象类型”，该特质表达一种“非拥有关系”，当目标对象遭到摧毁时，属性值不会自动清空。</li>
<li>copy 此特质与strong类似，然而设置方法并不保留新值而是将其拷贝一份。</li>
</ol>
</blockquote>
<p>这时候我们看到无论是使用assign 还是weak 甚至是unsafe_unretained都不会造成循环引用的问题。</p>
<p>assign实际上是指针覆值，不对引用计数操作，使用之后如果没有置为nil，可能就会产生野指针；而weak一旦不进行使用后，会有一个置nil的操作。</p>
<h4 id="猜测"><a href="#猜测" class="headerlink" title="猜测"></a>猜测</h4><p>这就说明在iOS8下虽然系统在代理中都使用的assign属性关键字，但是在dealloc方法中使用了如<code>self.delegate = nil</code>这样的代码，将对象置为nil.</p>
<p>然后我我们在UISCrollView的分类中重写了他的dealloc方法，导致这一过程消失。所以造成野指针。</p>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>由于app已经上线，所以最初的思路还是使用hotfix来解决这个问题，但是经过一番努力之后，发现即使是使用了JSPatch也没有办法来解决这个问题，因为UIScrollview的子类涉及的太多了。我们也没有办法，通过patch的方法，还原系统的dealloc方法。所以我也只能先注释掉category中的dealloc方法，然后在使用了这个类别的我的界面中，手动的移除observer。</p>
<h4 id="证明猜测"><a href="#证明猜测" class="headerlink" title="证明猜测"></a>证明猜测</h4><p>既然结论都是猜测出来了，我也简单的写一个小demo来验证一下刚才的猜测吧！</p>
<p> 首先定义了一个Dog类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line">@class Cat;</div><div class="line">@protocol DogDelegate &lt;NSObject&gt;</div><div class="line"></div><div class="line">- (void)fuck;</div><div class="line"></div><div class="line">@end</div><div class="line">@interface Dog : NSObject</div><div class="line"></div><div class="line">@property (nonatomic ,assign) Cat &lt;DogDelegate&gt; *delegate;</div><div class="line"></div><div class="line">-(void)run;</div><div class="line">@end</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#import &quot;Dog.h&quot;</div><div class="line">#import &quot;Cat.h&quot;</div><div class="line"></div><div class="line">@implementation Dog</div><div class="line"></div><div class="line">- (void)setDelegate:(Cat&lt;DogDelegate&gt; *)delegate &#123;</div><div class="line">    _delegate = delegate;</div><div class="line">    [delegate addObserver:self forKeyPath:@&quot;name&quot; options:NSKeyValueObservingOptionNew context:nil];</div><div class="line">&#125;</div><div class="line"></div><div class="line">//- (void)dealloc &#123;</div><div class="line">//    [self.delegate removeObserver:self forKeyPath:@&quot;name&quot;];</div><div class="line">//&#125;</div><div class="line"></div><div class="line">- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary&lt;NSKeyValueChangeKey,id&gt; *)change context:(void *)context &#123;</div><div class="line">    </div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>然后定义个一个Cat类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line"></div><div class="line">@interface Cat : NSObject</div><div class="line">@property (nonatomic ,strong) NSString *name;</div><div class="line">@end</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#import &quot;Cat.h&quot;</div><div class="line">#import &quot;Dog.h&quot;</div><div class="line"></div><div class="line">@interface Cat ()&lt;DogDelegate&gt;</div><div class="line">@end</div><div class="line">@implementation Cat</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>最后调用一下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Dog *dog = [[Dog alloc] init];</div><div class="line">Cat *cat = [[Cat alloc] init];</div><div class="line">dog.delegate = cat;</div><div class="line">cat.name =  @&quot;nacy&quot;;    </div><div class="line">dog = nil;</div><div class="line">cat.name = @&quot;lily&quot;;</div></pre></td></tr></table></figure>
<p>果然如果注释掉Dog的dealloc方法，就会造成<code>EXC_BAD_ACCESS</code>crash。</p>
<h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><ol>
<li>千万不要在 category 中覆盖掉原来类中的方法。不然不知道有多少坑等着你。</li>
<li>在 iOS8 下 delegate使用的是 assign 属性关键字，这是MRC时代的问题。</li>
<li>这个问题确实是由于覆盖了dealloc方法，导致原来dealloc中清理掉原来对象中的delegate相关代码无法执行。这时候再有observer就会造成野指针。</li>
<li>在使用各种属性关键字的时候，一定要想好。</li>
<li>不要以为新的东西出来了就忘掉了以前的东西吧。</li>
</ol>
<h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>大神都是一步一个坑踩过来的。虽然这个问题导致原本很愉快的版本（线上没有crash）变成了现在这个样子，甚至还只能紧急发版来解决。但还是值得的。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[最近看到的一些好的文章]]></title>
      <url>https://CepheusSun.github.io/2016/10/14/readinglist/</url>
      <content type="html"><![CDATA[<p>好久没有更新博客了，分享几篇最近读到的比较好的文章吧！读的不是特别的仔细，也算是留一个记录，以后再详读一遍</p>
<a id="more"></a>
<p><a href="http://fex.baidu.com/blog/2014/07/feature-flag/"><em>Feature Flag 功能发布控制</em></a></p>
<p>[<em><a href="http://wangchao.de/%e8%81%8a%e8%81%8a%e5%88%9b%e4%b8%9a%e5%9b%a2%e9%98%9f%e7%9a%84%e9%a1%b9%e7%9b%ae%e7%ae%a1%e7%90%86%e5%a6%82%e4%bd%95%e9%9d%a2%e5%90%91%e5%bc%80%e5%8f%91%e4%ba%ba%e5%91%98%e4%bc%98%e5%8c%96/">聊聊创业团队的项目管理如何面向开发人员优化</a></em></p>
<p><a href="https://zhuanlan.zhihu.com/p/22283843"><em>基于 KIF 的 iOS UI 自动化测试和持续集成</em></a></p>
<p><a href="http://www.jianshu.com/p/9ae446d76271"><em>iOS项目的持续集成与管理[译]</em></a></p>
<p><a href="http://mrpeak.cn/blog/http2/"><em>HTTP 2.0的那些事</em></a></p>
<p><a href="http://mrpeak.cn/blog/ios-network/"><em>深度优化iOS网络模块</em></a></p>
<p>准备把手上项目网络层完全优化之后再来仔细研读一下这几篇文章。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如何优雅的使用xib进行开发]]></title>
      <url>https://CepheusSun.github.io/2016/09/30/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E4%BD%BF%E7%94%A8xib%E8%BF%9B%E8%A1%8C%E5%BC%80%E5%8F%91/</url>
      <content type="html"><![CDATA[<p>IB 和纯代码布局在 iOS 界一直都存在着不小的争论，唐巧也曾专门撰文来对比二者。网上也能找打一大堆关于 IB 或者纯代码好的或者不好的文章。即使是大神对这个也有着不一样的看法。 Sunny 力挺 IB 开发，据说Ibireme YY大神是纯代码的拥簇，虽然两位大神现在也不会再写 UI 了…</p>
<p>最近实在是比较忙，先是公司从成都搬到了重庆，纠结了半天还是决定留在现在的团队，再继续往前走下去。再是到重庆没有完整的办公场地的情况下，启动了2.0计划。好在坚持了一段时间之后，2.0版本已经完成了95%的开发等着接下来的优化了。停止可这么长时间的博客，终于也想起来了要打理打理。</p>
<p>在项目中一直都坚持着使用xib来进行界面布局,除了一些界面需要使用静态单元格用了StoryBoard其他的view层全部使用了xib进行。即使这样,刚刚看了一下也有了16w＋行代码,这篇文章就算是一些心得吧。</p>
<a id="more"></a>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="xib的构成"><a href="#xib的构成" class="headerlink" title="xib的构成"></a>xib的构成</h3><p>随便拿了一个xib文件,我们总是能看到这样的内容:</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/EF967121-9470-40EE-97CB-B457F80C0A88.png" width="300" /></p>
<ul>
<li>File’s Owner</li>
<li>First Responder</li>
<li>View (虽然我们看到的是FooCell)</li>
</ul>
<p>其实这就是xib就是由这三部分构成的。</p>
<h4 id="File’s-Owner"><a href="#File’s-Owner" class="headerlink" title="File’s Owner"></a>File’s Owner</h4><p>首先我们先聊聊<code>File&#39;s Owner</code>。我们使用xib定义的所有都是对应MVC架构中的View层(使用<code>StoryBoard</code>定义的controller实际上定义的也是这个controller的<code>self.view</code>)。这就很显然了,这里的<code>File&#39;s Owner</code>其实就是连接View 和ViewController的桥梁。其实File’s Owner就是Custom Class类型的对象，而xib中的其他元素都是该对象的成员变量，但是需要手动来关联Custom Class中的成员变量与xib中对象之间的关系。举一个简单的例子,我们在创建vc的时候勾选了also create XIB file,这时候创建的xib他的<code>File&#39;s Owner</code>就能看到class就是这个VC的class,这时候对应的tableview textfiled等控件的delegate 和datasource都可以通过连线到<code>File&#39;s Owner</code>中实现。</p>
<h4 id="First-Responder"><a href="#First-Responder" class="headerlink" title="First Responder"></a>First Responder</h4><p>再来说说<code>First Responder</code>。首先请想象一下，我们在使用textfield的时候是不是经常会用到<code>becomeFirstResponder</code> 和 <code>resignFirstResponder</code>两个方法,所以,很容易理解<code>First Responder</code>就是在这个xib中正在与用户交互的那个控件。</p>
<h4 id="View"><a href="#View" class="headerlink" title="View"></a>View</h4><p>最后一个就更简单了。以至于我都不知道怎么样来更仔细的介绍了。反正我们这个xib我们看到的部分就是view 我们放的控件也全部都是放在这个view中的。</p>
<h3 id="在xib中定于圆角等layer的属性"><a href="#在xib中定于圆角等layer的属性" class="headerlink" title="在xib中定于圆角等layer的属性"></a>在xib中定于圆角等layer的属性</h3><p>相信很多人都知道怎么样给xib上的属性定义圆角,也就是在右边工具栏选中第三个的<code>User Defined RunTime Attributes</code>中设置layer.borderRadius。 然是如果我们要设置颜色呢？这这个地方我们需要的<code>CGColor</code>但是这里只有一个<code>UIColor</code>对象。</p>
<p>在这里我使用到了一个category,并在实现文件中写下了这个方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- (void)setBorderColorWithUIColor:(UIColor *)color &#123;</div><div class="line">    self.borderColor = color.CGColor;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样在设置bordercolor的时候就可以设置keypath为<code>borderColorWithUIColor</code>并且使用UIColor来赋值了。很简单的tip 由于我比较懒,如果能够通过xib绝对不愿意在代码中写，所以这个对我来说还是很有用的。</p>
<h3 id="IBInspectable"><a href="#IBInspectable" class="headerlink" title="IBInspectable"></a>IBInspectable</h3><p>这个是方便我们在xib文件中通过右边的工具栏给view添加一些属性的,比如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@interface FooView ()</div><div class="line">@property (assign, nonatomic) IBInspectable CGFloat borderWidth;</div><div class="line">@property (strong, nonatomic) IBInspectable UIColor *borderColor;</div><div class="line">@property (assign, nonatomic) IBInspectable CGFloat cornerRadius;</div><div class="line">@end</div></pre></td></tr></table></figure></p>
<p>这个时候在xib的右边工具栏中就会出现这样的东西</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/6913AB39-AF52-427F-9AAB-F30689F9D398.png" /></p>
<p>这时候只需要给对应的属性写上对应的setter方法就ok了。</p>
<h3 id="IB-DESIGNABLE"><a href="#IB-DESIGNABLE" class="headerlink" title="IB_DESIGNABLE"></a>IB_DESIGNABLE</h3><p>这个就比较牛逼了，因为我们平常要是自定义了一个View的话，如果把这个View放在其他的xib中，这时候他其实是看不到她的效果的。这个可能会让我们感觉到很痛苦，这样的话就完全不符合XIB的核心思想<code>所见即所得</code>。</p>
<p>不说闲话了直接进入主题<code>IB_DESIGNABLE</code></p>
<p>我们在自定义View的<code>@implementation</code>前面写上<code>IB_DESIGNABLE</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">IB_DESIGNABLE</div><div class="line">@implementation FooView</div></pre></td></tr></table></figure>
<p>然后在这个view的<code>drawrect</code>方法里面写下一些代码。然后把这个view拖到其他的xib中，就会看到一些神奇的东西。</p>
<blockquote>
<p>需要注意的是，这个情况下代码只是在drawrect方法中有效。</p>
</blockquote>
<p>但是如果我们把<code>IBInspectable</code>和<code>IB_DESIGNABLE</code>结合起来呢?</p>
<h3 id="IBInspectable-amp-amp-IB-DESIGNABLE"><a href="#IBInspectable-amp-amp-IB-DESIGNABLE" class="headerlink" title="IBInspectable &amp;&amp; IB_DESIGNABLE"></a>IBInspectable &amp;&amp; IB_DESIGNABLE</h3><p>在<code>INInspectable</code>那一节的代码中在<code>FooView.m</code>中的@interface的前面写上IB_DESIGNABLE然后我们再在看看xib</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">IB_DESIGNABLE</div><div class="line">@interface FooView ()</div><div class="line">@property (assign, nonatomic) IBInspectable CGFloat borderWidth;</div><div class="line">@property (strong, nonatomic) IBInspectable UIColor *borderColor;</div><div class="line">@property (assign, nonatomic) IBInspectable CGFloat cornerRadius;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>就出现了神器的效果</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/FD65E8DF-FA63-450E-9F44-33121842B5EE.png" /></p>
<p><strong>所见即所得!!!</strong></p>
<h3 id="IBOutletCollection-ClassName"><a href="#IBOutletCollection-ClassName" class="headerlink" title="IBOutletCollection(ClassName):"></a>IBOutletCollection(ClassName):</h3><p>这个关键字支持创建一个IBOutlet控件的数组,</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/F02CCFDC-7707-423D-8FAA-1A60DF64450E.png" /></p>
<p>就是这样,顺序的话测试下来应该是按照脱线顺序来的。针对这个特性，确实不知道应该怎么使用。目前为止也还没有找到合适的应用场景。</p>
<h3 id="小tip"><a href="#小tip" class="headerlink" title="小tip"></a>小tip</h3><h4 id="tip1"><a href="#tip1" class="headerlink" title="tip1"></a>tip1</h4><p>其实在使用xib的时候还没踩到过什么大的坑，就只是遇到过一次由于没有理解到<code>File‘s Owner</code>的涵义。</p>
<p>在使用xib自定义一个view的时候每次使用到这个view总是会crash,并且报错，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos;NSUnknownKeyException&apos;, reason: … this class is not key value coding-compliant for the key X</div></pre></td></tr></table></figure>
<p>多次删掉所有的连线然后重新拉线，多次clean，也无法解决，后来才发现File‘s Owner 错了，改成NSObject之后就好了。</p>
<blockquote>
<p>最尴尬的事情是，笔者在写这篇文章的时候，修改回去又是正常的了。所以如果出现这种问题，首先检查是不是拉线冲突，如果无法解决的话，就试试修改<code>File&#39;s Owner</code>吧!</p>
</blockquote>
<h4 id="tip2"><a href="#tip2" class="headerlink" title="tip2"></a>tip2</h4><p>使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[NSBundle mainBundle] loadNibNamed:@&quot;TestView&quot; owner:self options:nil][0];</div></pre></td></tr></table></figure>
<p>来创建由xib定义的view。如果直接alloc init创建出来的view 如果有block等其他的回调的话,是很麻烦的事情。这个真的可以去试试。</p>
<h3 id="结束的话"><a href="#结束的话" class="headerlink" title="结束的话"></a>结束的话</h3><p>关于AutoLayout什么的实在没什么说的，感觉已经用烂了，无论是用代码布局的时候使用Masonry还是现在使用了xib，实在想不到有什么好介绍的。</p>
<p>非常遗憾的是IBInspectable并不能修饰UIKit下的控件，所以，我还是没有找到一个很好的方法让拖出来的控件能够实时的展示。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JPUSH 两个问题]]></title>
      <url>https://CepheusSun.github.io/2016/09/13/JPUSH%20%E4%B8%A4%E4%B8%AA%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>最近在调试公司项目的推送的时候遇到了点小问题,死活收不到推送消息。</p>
<a id="more"></a>
<p>由于接受公司项目的时候极光推送是已经集成上去了的,虽然说本地调试的时候会经常看见失败这种情况,一直也知道极光推送可能会出现一些收不到消息的问题,所以并没有在意。</p>
<p>后来公司需要通过tag给不同组别的用户推送消息,所以也要开始看一下以前的代码。果然还是被我发现了问题。</p>
<h4 id="Q1"><a href="#Q1" class="headerlink" title="Q1"></a>Q1</h4><blockquote>
<p>在登陆的时候设置了别名，但是在Appdelegate中并没有设置。</p>
</blockquote>
<p>这中情况会造成app在保存密码之后进入app不会在走道登录界面，所以并不会设置别名什么的。这个时候的推送应该是收不到的。</p>
<p>这个我没有测试过,看了之前的代码之后直接的添加了相关代码,运行后并没有什么问题。</p>
<h4 id="Q2"><a href="#Q2" class="headerlink" title="Q2"></a>Q2</h4><blockquote>
<p>报错APNs is not available, please check your provisioning profile and certification</p>
</blockquote>
<p>这个可能就全是我自身造成的了,为了尝鲜Swift3.0 下了Xcode8.0beta 来玩玩,然后本来是Xcode7.0打开的项目文件,默认8.0了,然后不小心运行到了公司的项目。很悲剧的是，Xcode8.0 是默认关闭Push Notifications的,Xcode中手动打开就ok了。然后其它添加证书什么的, 真的没什么好说的, 极光在文档中也已经描述的非常清楚了。</p>
<p><strong>设置步骤:</strong> taget -&gt; Capabilities -&gt; PushNotification -&gt; ON</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/BD4D54BC-82B6-40F6-83E8-ECE15A8FA8D2.png" /></p>
<h4 id="Q3"><a href="#Q3" class="headerlink" title="Q3"></a>Q3</h4><blockquote>
<p>设置别名悲剧 : app not registed, give up set tag: alias:</p>
</blockquote>
<p>这是由于记住密码的情况下,设置别名什么的和注册极光等都是在很短的时间内,这个时候掉用的话，可能极光推送还不可用,所以就悲剧了.</p>
<p><strong>解决方案:</strong>延迟调用设置别名的方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</div><div class="line">    [JPUSHService setTags:[NSSet setWithObject:_MUserInfo.partnerId]</div><div class="line">                    alias:_MUserInfo.userId</div><div class="line">    fetchCompletionHandle:^(int iResCode, NSSet *iTags, NSString *iAlias) &#123;</div><div class="line">        PSLog(@&quot;-----%@&quot;, iAlias);</div><div class="line">    &#125;];</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="ending"><a href="#ending" class="headerlink" title="ending"></a>ending</h4><p>在集成的时候还是要注意一下方法的调用顺序, 别在注册JPush之前去设置什么东西吧! 猜想:这肯定是有问题的。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[EmptyDataKit -- 一行代码集成列表视图无数据展示]]></title>
      <url>https://CepheusSun.github.io/2016/09/07/EmptyDataKit/</url>
      <content type="html"><![CDATA[<p>抽空写了一个小东西<a href="https://github.com/CepheusSun/EmptyDataKit"><strong>EmptyDataKit</strong></a>，一行代码可以集成UITableView 和 UICollectionView 在数据源没有数据的时候展示一个默认占位图片。</p>
<a id="more"></a>
<h2 id="gif"><a href="#gif" class="headerlink" title="gif"></a>gif</h2><p><img src="http://ocg4av0wv.bkt.clouddn.com/ProgramerSunnyDemo.gif" width= "400" /></p>
<p>另外这个工具也被我添加进了我来一个叫做<code>SBAnimation</code>的仓库中,而且<code>SBAnimation</code>中的demo代码更干净和间接，而且完整的示范了这个工具的使用方法。由于精力有限，暂时还没有动力将这里的demo代码替换。所以我也将<code>SBAnimation</code>中的截图放到这里来。如果需要的话可以过去看看。<a href="https://github.com/SolarBee/SBAnimation">地址</a></p>
<p><img src="http://ojno1pj4x.bkt.clouddn.com/EmptyDataKit.gif"></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><strong>0、</strong>框架依赖与<code>BlocksKit</code>请在<code>podfile</code>中添加<code>pod &#39;BlocksKit&#39;</code>并且在终端执行<code>pod install --no-repo-update</code>。如果直接拖进你的工程记得添加 pod BlocksKit</p>
<p><strong>1、</strong>首先 <code>pod &#39;EmptyDataKit&#39;</code></p>
<p><strong>2、</strong>导入头文件<code>#import &lt;EmptyDataKit/EmptyDataKit.h&gt;</code></p>
<p><strong>3、</strong>在dataSource的<code>numberOfSectionsInTableView</code>方法中调用<code>EmptyDataKit</code>中的唯一方法.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    __weak typeof(self) weakSelf = self;</div><div class="line">    EmptyDataKit *kit = [[EmptyDataKit alloc] initWithEdk_Image:[UIImage imageNamed:@&quot;common_pic_loadFail&quot;] edk_Message:@&quot;aaa&quot; edk_reloadHandler:^&#123;</div><div class="line">        [weakSelf getData];</div><div class="line">    &#125;];</div><div class="line">    kit.edk_error_image = [UIImage imageNamed: @&quot;&quot;];</div><div class="line">    kit.edk_error_message = @&quot;网络错误&quot;;</div><div class="line">    self.tableView.emptyKit = kit;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至此，EmptyDataKit集成成功!   <code>UIcollectionView</code>使用方法同理</p>
<p>另外<code>EmptyDataKit</code>有如下枚举</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">typedef NS_ENUM(NSUInteger ,EmptyDataType) &#123;</div><div class="line">    EDK_Loading,     // if there is a LoadingView, use this ,and also this is a default status.</div><div class="line">    EDK_None,        // if there is some data, use this.</div><div class="line">    EDK_Empty,       // if there is no data, use this.</div><div class="line">    EDK_Error        // if there is some error such as network, use this.</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这样在<code>reloadData</code>之前给<code>self.tableView.emptyKit.edk_type</code>赋值即可区分在不同状态下的不同展示情况。</p>
<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>思路方面，我给<code>UITableView</code>和<code>UIColectionView</code>分别添加了两个Category, 并且通过runtime给两个类都关联了两个属性<code>data</code> 、 <code>touchBlock</code> 和<code>emptyKit</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@property (nonatomic, assign) BOOL data;</div><div class="line">@property (nonatomic, copy) TouchBlock touchBlock;</div><div class="line">@property (nonatomic, strong) EmptyDataKit *emptyKit;</div></pre></td></tr></table></figure>
<p>分别表示是否有数据和一个空数据的时候点击空白部分回调刷新的部分。</p>
<p>考虑到我想同时兼容UITableView 和 UICollectionView 所以我提取了一个object <code>EmptyDataKit</code>。</p>
<p>之前的调用方式是在<code>numberOfSectionsInTableView</code>方法中调用EmptyDataKit，并且是一个类方法，在新的框架下，EmptyDataKit 作为 TableView 的属性在设置的时候更加自主。</p>
<p>并且通过<code>MethodSwizzling</code>在 <code>tableView</code> 的 <code>reloadData</code> 方法中激发 <code>EmptyDataKit</code>,减少了很多调用次数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">+ (void)load &#123;</div><div class="line">    static dispatch_once_t onceToken;</div><div class="line">    dispatch_once(&amp;onceToken, ^&#123;</div><div class="line">        [self methodSwizzlingWithOriginalSelector:@selector(reloadData)</div><div class="line">                               bySwizzledSelector:@selector(sure_reloadData)];</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)sure_reloadData &#123;</div><div class="line">    [self.emptyKit edk_display:self];</div><div class="line">//    id &lt;UITableViewDataSource&gt; dataSource = self.dataSource;</div><div class="line">    [self sure_reloadData];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="TODO："><a href="#TODO：" class="headerlink" title="TODO："></a>TODO：</h2><ol>
<li>进一步规范文档。</li>
<li>移除对BlocksKit的依赖。</li>
</ol>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>工具已经开源在github中,欢迎提issue。</p>
<a href="!--[**开源地址**](https://github.com/CepheusSun/EmptyDataKit)--">!--[**开源地址**](https://github.com/CepheusSun/EmptyDataKit)--</a>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[为Category添加属性]]></title>
      <url>https://CepheusSun.github.io/2016/09/01/%E4%B8%BACategory%E6%B7%BB%E5%8A%A0%E5%B1%9E%E6%80%A7/</url>
      <content type="html"><![CDATA[<p>使用Runtime给Category添加属性。</p>
<a id="more"></a>
<h2 id="Category-与-property"><a href="#Category-与-property" class="headerlink" title="Category 与 property"></a>Category 与 property</h2><p>我为类<code>ViewController</code>添加了一个<code>Category</code>,然后我想给他添加一个属性，<code>vcName</code></p>
<p>于是我在<code>ViewController+Category</code>中声明了一个属性</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@property (nonatomic ,copy) NSString *vcName;</div></pre></td></tr></table></figure>
<p>我们知道在类目的接口中是可以声明属性的。但是在他的实现部分是不允许包含<code>@synthesize</code>的。 下面安利一下两个关键字<code>@synthesize</code>、<code>@dynamic</code></p>
<pre><code>`@synthesize`的语义是如果我们没有手动的实现`property`的`setter`和`getter`方法，编译器会自动的添加上这两个方法。

`@dynamic`告诉编译器,属性的`setter`与`getter`方法由用户自己实现，不自动生成。

在平常我们都习惯了不写这两个关键词，这个时候其实默认是`@synthesize var = _var`
</code></pre><p>回到刚才的地方,如果我手动加上<code>@synthesize vcName = _vcName;</code>是无法通过编译的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@synthesize not allowed in a category&apos;s implementation//这是编译器报的错误消息</div></pre></td></tr></table></figure>
<p>如果我不写的话编译器会有警告让你加上<code>@dynamic</code>语句。这个当然也是不行的。因为这个时候我自己写setter和getter.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- (NSString *)vcName&#123;</div><div class="line">    return _vcName;</div><div class="line">&#125;</div><div class="line">- (void)setVcName:(NSString *)vcName &#123;</div><div class="line">    _vcName = vcName;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这时候编译器会报错 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">use of undeclared identifier &apos;_vcName&apos;</div></pre></td></tr></table></figure>
<p><strong>结论</strong></p>
<blockquote>
<p>Categoryde 的接口中可以包含属性声明，但是实现部分不能包含<code>@synthesis</code></p>
</blockquote>
<h2 id="给Category-添加-Property"><a href="#给Category-添加-Property" class="headerlink" title="给Category 添加 Property"></a>给Category 添加 Property</h2><p>已经有了上面的结论了，但是我们在具体开发过程中确实会遇到很多需要在类别中添加使用<code>Property</code>的情况。这个时候应该怎么办呢？我们知道Obj-c是一门动态语言，强大的运行时(Runtime)机制能够为类关联引用，然后通过这种方法来实现给类别添加属性。</p>
<blockquote>
<p>关联引用指的是借助运行时功能，为已存在的对象增加实例变量。</p>
</blockquote>
<p>通过关联引用就算时同一个类的不同对象也可能添加关联或者添加不同种类和数量的关联。另外添加了的关联也是可以被删除的。</p>
<h3 id="添加和检索关联"><a href="#添加和检索关联" class="headerlink" title="添加和检索关联"></a>添加和检索关联</h3><p>既然说到了需要使用runtime,那我们首先需要导入Runtime相关的头文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#import &lt;objc/runtime.h&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//这个方法时为对象object添加key指定的地址作为关键字，以value为值关联引用，第四个参数pilicy指的是关联引用的存储策略。</div><div class="line">//通过将value设置为nil 可以删除key的关联</div><div class="line">OBJC_EXPORT void objc_setAssociatedObject(id object, const void *key, id value, objc_AssociationPolicy policy)</div><div class="line">    __OSX_AVAILABLE_STARTING(__MAC_10_6, __IPHONE_3_1);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//返回object以key为关键字关联的对象，如果没有，则反火nil</div><div class="line">OBJC_EXPORT id objc_getAssociatedObject(id object, const void *key)</div><div class="line">    __OSX_AVAILABLE_STARTING(__MAC_10_6, __IPHONE_3_1);</div></pre></td></tr></table></figure>
<p>这一个的原理还是比较简单的。</p>
<p>首先，我们需要为一个类别专家多个关联引用，所以我们需要用不同的key值来区别。</p>
<p>其次，键值必须要使用一个确定且不可变的地址。所以选择定义在实现文件的static静态局部变量的地址。</p>
<p>policy策略就跟定义property的时候才用的存储关键字相似了。</p>
<h3 id="存储关键字"><a href="#存储关键字" class="headerlink" title="存储关键字"></a>存储关键字</h3><p>第四个参数<code>objc_AssociationPolicy policy</code>其实是一个枚举，点看之后我们可以看到</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">typedef OBJC_ENUM(uintptr_t, objc_AssociationPolicy) &#123;</div><div class="line">    OBJC_ASSOCIATION_ASSIGN = 0,           /**&lt; Specifies a weak reference to the associated object. */</div><div class="line">    OBJC_ASSOCIATION_RETAIN_NONATOMIC = 1, /**&lt; Specifies a strong reference to the associated object. </div><div class="line">                                            *   The association is not made atomically. */</div><div class="line">    OBJC_ASSOCIATION_COPY_NONATOMIC = 3,   /**&lt; Specifies that the associated object is copied. </div><div class="line">                                            *   The association is not made atomically. */</div><div class="line">    OBJC_ASSOCIATION_RETAIN = 01401,       /**&lt; Specifies a strong reference to the associated object.</div><div class="line">                                            *   The association is made atomically. */</div><div class="line">    OBJC_ASSOCIATION_COPY = 01403          /**&lt; Specifies that the associated object is copied.</div><div class="line">                                            *   The association is made atomically. */</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>有这5个值</p>
<p>下面就分别的介绍一下几种。看注释也知道:</p>
<p><strong>OBJC_ASSOCIATION_ASSIGN</strong> <code>weak</code></p>
<p>不给关联对象发送<code>retain</code>消息，引用计数不会增加。</p>
<p><strong>OBJC_ASSOCIATION_RETAIN_NONATOMIC</strong> <code>strong</code></p>
<p>发送<code>retain</code>消息，引用计数加1.  如果给同样的key关联到了其他对象，那么会给其他对象发送一个<code>release</code>消息。释放关联对象的所有者的时候，会给所有关联的对象发送<code>release</code>消息。</p>
<p><strong>OBJC_ASSOCIATION_COPY_NONATOMIC</strong> <code>copy</code></p>
<p>会将该对象复制一份，并且用新复制的对象进行关联操作。</p>
<p><strong>OBJC_ASSOCIATION_RETAIN</strong> <code>strong</code>、<code>atomic</code></p>
<p><strong>OBJC_ASSOCIATION_COPY</strong> <code>copy</code>、<code>atomic</code></p>
<h2 id="断开关联"><a href="#断开关联" class="headerlink" title="断开关联"></a>断开关联</h2><p>runtime 也贴心的提供了断开关联的函数。但是可惜，我并不经常用，因为使用上面的方法并且传入nil来断开关联，会更佳安全，毕竟，我不敢保证是不是有其他地方会使用到已经关联的对象。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">OBJC_EXPORT void objc_removeAssociatedObjects(id object)</div><div class="line">    __OSX_AVAILABLE_STARTING(__MAC_10_6, __IPHONE_3_1);</div></pre></td></tr></table></figure>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>扯了这么多有的没得，还是talk is cheap， show me the code 比较好一点。</p>
<p><em>第一步</em>  导入头文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#import &lt;objc/runtime.h&gt;</div></pre></td></tr></table></figure>
<p><em>第二步</em>  定义用作键值的静态变量。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">static char *vcNameKey;</div></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">static const char *vcNameKey = &quot;vcNameKey&quot;;</div></pre></td></tr></table></figure>
<p><em>第三步</em> 定义存取方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- (NSString *)vcName&#123;</div><div class="line">    return objc_getAssociatedObject(self, vcNameKey);</div><div class="line">&#125;</div><div class="line">- (void)setVcName:(NSString *)vcName &#123;</div><div class="line">    objc_setAssociatedObject(self, vcNameKey, vcName, OBJC_ASSOCIATION_COPY_NONATOMIC);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="试一下断开关联"><a href="#试一下断开关联" class="headerlink" title="试一下断开关联"></a>试一下断开关联</h2><p>首先在category中定义两个关联属性</p>
<p>在vievcontroller中给两个属性赋值，并且给<code>self.title</code>赋值</p>
<p>然后用<code>objc_removeAssociatedObjects(self);</code>断开关联</p>
<p>然后输出结果,category中关联的属性两个都输出<code>null</code>而本身的属性title正常输出</p>
<p><strong>结论</strong></p>
<p>很好说了,<code>objc_removeAssociatedObjects(self);</code>的作用是断开所有关联。 </p>
<p>而且也更简单的验证了,使用runtime给对象关联的属性跟本身的属性本质是是不一样的。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[怎么使用Hexo发博客]]></title>
      <url>https://CepheusSun.github.io/2016/08/31/%E6%80%8E%E4%B9%88%E4%BD%BF%E7%94%A8Hexo%E5%8F%91%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p>怎么样使用Hexo发博客,以及博客的使用技巧。</p>
<a id="more"></a>
<blockquote>
<p>第二次帮一个朋友搭建博客,快多了，只花了2个多小时就把博客简单的弄好了<a href="https://maojianxiang.github.io/archives/"><em>传送门</em></a>。然后现在简单的写一个使用说明。我也来帮Hexo站站台。</p>
</blockquote>
<p>这篇文章主要包括我平时是怎么使用Hexo的,以及markdown简单的一些基本语法。和最新搭建这个博客又遇到的坑。</p>
<h2 id="踩坑篇"><a href="#踩坑篇" class="headerlink" title="踩坑篇"></a>踩坑篇</h2><h3 id="环境配置篇"><a href="#环境配置篇" class="headerlink" title="环境配置篇"></a>环境配置篇</h3><p>在最开始搭建这个博客的时候，我还是非常的自信的，不就是在终端使用各种命令嘛。所以我叫他自己下载了markdown写作工具Mou, 一个Sublime Text3 一个teamviewer。然后叫他自己去申请了一个github账号。</p>
<p>首先我是用teamviewer开始操作他的电脑。</p>
<p>然后快速的关掉所有没用的软件。</p>
<p>打开终端，cd到根目录</p>
<p>朋友也是iOS所以肯定是有Xcode的，git肯定也是有。试一下有没有node.js的环境</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div></pre></td></tr></table></figure>
<p>很不幸，什么都没有，结果没有超出我的预料<code>npm command not find</code></p>
<p>然后我开始装Node.js</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh</div></pre></td></tr></table></figure>
<p>半天没反应,进度条不懂，两秒后结束，然后再</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div></pre></td></tr></table></figure>
<p>依然<code>npm command not find</code></p>
<p>我以为是除了什么问题，换个方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget conmmand not find</div></pre></td></tr></table></figure>
<p>然后我在node的<a href="https://github.com/creationix/nvm"><em>github</em></a>上面看到</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.6/install.sh | bash</div></pre></td></tr></table></figure>
<p>依然没反应。然后我就惆怅了。多次尝试之后发现，依然没有反应。这期间多次尝试各种帖子的文档，homebrew 重装了两次。</p>
<p>在经历了绝望之后，我决定再试一下，所以我打开了node的<a href="https://nodejs.org/en/"><em>下载地址</em></a>直接下载，安装之后，惊讶的发现一切都解决了。</p>
<blockquote>
<p>如果采用上面的命令发现一切都没有什么乱用,别多想了，直接下载安装吧。</p>
</blockquote>
<p>这个应该更容易一点，虽然感觉没那么Geek，但是能解决问题，才是最好的吧。</p>
<h3 id="部署篇"><a href="#部署篇" class="headerlink" title="部署篇"></a>部署篇</h3><p>这个没什么好说的了，<a href="https://CepheusSun.github.io/2016/07/15/hello-world/"><em>上篇文章</em></a>也有写到,在<strong>第一次部署</strong>的时候会出现一些问题，所以在</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo d</div></pre></td></tr></table></figure>
<p>之前先</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git –save</div></pre></td></tr></table></figure>
<p>一下。</p>
<p>其次就是我比较粗心的问题了,比如写github地址的时候，直接手打的，然后一直报错，所以最好还是去github复制地址比较好。</p>
<blockquote>
<p>github的username 是要登陆的邮箱或者其他什么的 </p>
</blockquote>
<h2 id="使用篇"><a href="#使用篇" class="headerlink" title="使用篇"></a>使用篇</h2><h3 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h3><h4 id="1、同过命令"><a href="#1、同过命令" class="headerlink" title="1、同过命令"></a>1、同过命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new &quot;title&quot;</div></pre></td></tr></table></figure>
<p>然后到博客目录下<code>resource</code>的<code>_post</code>文件下下面找到你刚刚创建的<code>.md</code>文件,然后开始写作</p>
<h4 id="2、直接创建"><a href="#2、直接创建" class="headerlink" title="2、直接创建"></a>2、直接创建</h4><p>直接创建一个<code>.md</code>文件,写完后拖到上面的文件夹中。</p>
<h2 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: 怎么使用Hexo发博客</div><div class="line">date: 2016-8-31</div><div class="line">tags: Hexo</div><div class="line">categories: Hexo</div><div class="line">---</div></pre></td></tr></table></figure>
<p>我的文章是这样开始的，上面的内容分别代表什么不用我说了吧。给这篇文章设置tag 和分类什么的都是这样的。如果你想在两个tag 或者分类中看到这篇文    <code>tags: [hexo , ios]</code>即可。</p>
<h3 id="markdown语法"><a href="#markdown语法" class="headerlink" title="markdown语法"></a>markdown语法</h3><p>markdown 也有自己的语法，hexo会自己解析然后出现在你的博客里面，这是一个很好用的工具，让我们更专注于写作本身而不是费尽心思的去弄格式。</p>
<p>之前学习html css的时候发现markdown也支持html标签  比如我想对一个词语“CepheusSun加粗，我可以使用markdown语法 <code>**CepheusSun**</code>  也可以使用html标签 <code>&lt;strong&gt;CepheusSun&lt;/strong&gt;</code> 这样的效果是一样的；</p>
<ul>
<li>markdown: <strong>CepheusSun</strong></li>
<li>html: <strong>CepheusSun</strong></li>
</ul>
<p>这里我还是单纯的讲一下markdown我要用的内容吧。 </p>
<blockquote>
<p>在Mou里直接CMD + R 可以看到相关内容，但是貌似是英文的。</p>
</blockquote>
<h4 id="加粗强调"><a href="#加粗强调" class="headerlink" title="加粗强调"></a>加粗强调</h4><p><code>__ss__  _ss_  *aa*  **aa**</code>  表现为： <strong>ss</strong>  <em>ss</em>  <em>aa</em>  <strong>aa</strong></p>
<h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><p><code>[*CepheusSun*](https://CepheusSun.github.io/)</code> 表现为：  <a href="https://CepheusSun.github.io/"><em>CepheusSun</em></a></p>
<h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><p>我弄图片我习惯设置宽度大小什么的，所以我用的html标签</p>
<p><code>&lt;img src=&quot;图片地址&quot; width=&quot;100&quot; height=&quot;100&quot;&gt;</code></p>
<p><img src="图片地址" width="100" height="100"></p>
<h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><p>以及标题到六级标题 分别是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 一级标题</div><div class="line">## 二级标题</div><div class="line">### 三级标题</div><div class="line">#### 四级标题</div><div class="line">##### 五级标题</div><div class="line">###### 六级标题</div></pre></td></tr></table></figure>
<h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1. 1</div><div class="line">2. 2</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">* 1</div><div class="line">	* 1.1</div><div class="line">	* 1.2</div><div class="line">* 2</div></pre></td></tr></table></figure>
<h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; 引用的内容</div></pre></td></tr></table></figure>
<blockquote>
<p>引用的内容</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`小标签`</div></pre></td></tr></table></figure>
<p><code>小标签</code></p>
<p>代码块使用 ： </p>
<p>其他的都用得少就不多说了，这些内容百度能很容易的找到。</p>
<h2 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h2><p>刚过说到图片的问题，可能就不知道怎么弄了，这里推荐使用七牛的图床，然后直接那图片的url出来就可以了，而且不占用空间。具体使用方法，去七牛看吧，我正在尝试着能不能吧这个东西写个什么出来，自动化上传。<a href="https://portal.qiniu.com/signin"><em>七牛地址</em></a></p>
<h2 id="使用Hexo"><a href="#使用Hexo" class="headerlink" title="使用Hexo"></a>使用Hexo</h2><p>实在没什么好说的,配置好各种东西之后就没有什么麻烦的内容了，主要就还是几个。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo clean</div></pre></td></tr></table></figure>
<p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo g</div></pre></td></tr></table></figure>
<p>生产静态文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo d</div></pre></td></tr></table></figure>
<p>部署网站。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo s</div></pre></td></tr></table></figure>
<p>启动服务器。默认情况下访问地址是<code>http://localhost:4000/</code>就能本地看一下改动效果了。</p>
<p>每次 g + d 就ok了</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[复杂业务下的架构设计和研发效率提升(笔记)]]></title>
      <url>https://CepheusSun.github.io/2016/08/30/%E5%A4%8D%E6%9D%82%E4%B8%9A%E5%8A%A1%E4%B8%8B%E7%9A%84%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E7%A0%94%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%90%E5%8D%87(%E7%AC%94%E8%AE%B0)/</url>
      <content type="html"><![CDATA[<p>抽空重新看了一下今年的<a href="http://gmtc.geekbang.org/"><em>GMTC</em></a>,读到链家郭晓铭的PPT:<a href="http://ppt.geekbang.org/slide/show/210"><em>链家网移动端敏捷之术</em></a>的时候忍不住写了这个笔记,大多数内容都是ppt上的原文。</p>
<a id="more"></a>
<h2 id="大多数app存在的现象"><a href="#大多数app存在的现象" class="headerlink" title="大多数app存在的现象"></a>大多数app存在的现象</h2><ol>
<li>业务简单<ul>
<li>业务覆盖城市范围小</li>
<li>产品用户角色单一</li>
<li>业务单一、未形成线上线下的闭环</li>
</ul>
</li>
<li>团队工作方式传统<ul>
<li>团队规模小(人员密切配合，不存在业务线的分工)</li>
<li>瀑布式开发(版本需求比较稳定，在开发过程中很少调整)</li>
<li>手工打包上线(产品投放渠道少，发版节奏平缓，测试盒上线均靠手工打包)</li>
</ul>
</li>
<li>架构简单 MVC架构<ul>
<li>通用设计，学习和维护成本低。</li>
<li>对复杂业务不适应。业务逻辑变得复杂的时候，Controller将变得越来越大</li>
</ul>
</li>
</ol>
<h2 id="第一阶段"><a href="#第一阶段" class="headerlink" title="第一阶段"></a>第一阶段</h2><ol>
<li>地域业务差异</li>
<li>业务增多，内容型业务的形态多变</li>
<li>人员增多，人均产出下降，代码质量堪忧</li>
</ol>
<h3 id="基于短链的配置化"><a href="#基于短链的配置化" class="headerlink" title="基于短链的配置化"></a>基于短链的配置化</h3><p><strong>方法:</strong></p>
<ol>
<li>Sever端下发城市配置(包含icon、标题、跳转短链、功能开关等)</li>
<li>跳转短链注册表(保存短链pattern与页面的类别、类参数名、短链参数名、默认参数值、跳转方式等的对应信息)</li>
<li>短链解析和页面跳转(使用注册表中的短链pattern做正则匹配，根据匹配到的消息创建页面并用对应的跳转方式打开)</li>
</ol>
<p><strong>优点:</strong></p>
<ol>
<li>更统一(各个业务的解析和跳转逻辑由跳转同意引擎同意处理)</li>
<li>更灵活(城市配置由路由端下发，城市业务范围的调整不依赖发版)</li>
<li>扩展性强(快速支持新增城市，且对新业务的支持不影响旧的功能)</li>
</ol>
<h3 id="业务快速上线和调整"><a href="#业务快速上线和调整" class="headerlink" title="业务快速上线和调整"></a>业务快速上线和调整</h3><p>使用Native + H5 的方式实现。</p>
<p>Native作为重点业务体验的保证。 H5负责内容型业务和运营活动</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/6008BDF9-E1DD-4BFA-9076-CD85EFDAA252.png" width="600"/></p>
<ol>
<li>小巧清晰，不依赖第三方解决方案</li>
<li>消息传递安全，通过bridge注入参数信息，不是url</li>
<li>两端方案统一</li>
</ol>
<h3 id="项目质量缺乏保障"><a href="#项目质量缺乏保障" class="headerlink" title="项目质量缺乏保障"></a>项目质量缺乏保障</h3><ol>
<li>开发流程优化<ul>
<li>代码规范形成(代码风格一致,提高可读性;统一的入口参数校验，异常处理等，提高健壮性)</li>
<li>CodeReview(同步开发人员对代码和设计的理解；提前发现问题)</li>
<li>敏捷开发模式(随时交付，提早反馈)</li>
</ul>
</li>
</ol>
<h2 id="第二阶段"><a href="#第二阶段" class="headerlink" title="第二阶段"></a>第二阶段</h2><ol>
<li>多个业务团队并行开发</li>
<li>多个新产品需要快速上线(需要能够复制已有功能，快速上线)</li>
<li>对接后端团队越来越多(沟通成本高，发版风险大;不同团队接口数据格式差异大，客户端数据解析和校验逻辑复杂)</li>
</ol>
<h3 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h3><p><img src="http://ocg4av0wv.bkt.clouddn.com/A311CAD4-C6F0-4428-8662-0E7DA0EFB066.png" width="600" /></p>
<h4 id="组建间的调用方案"><a href="#组建间的调用方案" class="headerlink" title="组建间的调用方案"></a>组建间的调用方案</h4><p>组建: 各个组件之间相互独立，不直接调用，而是通过中介者Component Mediator相互调用</p>
<p>CM:按组建拆分，每部分为该组建支持的调用方式</p>
<p>组建接口: 各组件针对组件间调用做相应接口类。CM通过反射机制调用该接口类的相应方法。</p>
<h4 id="组件化过程中的风险控制"><a href="#组件化过程中的风险控制" class="headerlink" title="组件化过程中的风险控制"></a>组件化过程中的风险控制</h4><ol>
<li>代码仓库分离<ul>
<li>主工程代码、公共模块代码、以及各业务组件代码仓库分离</li>
</ul>
</li>
<li>权限控制<ul>
<li>为单个业务团队配置公共模块代码，以及其他业务代码的只读权限</li>
</ul>
</li>
<li>建立接口类的命名规范<ul>
<li>对组件接口类名以及接口接口方法的命名统一规范，降低开发成本</li>
</ul>
</li>
<li>接口类的CodeReview<ul>
<li>接口类出错的影响范围相对较大，需要业务负责任对接口类做重点review</li>
</ul>
</li>
<li>热修复<ul>
<li>紧急修复组件化过程中造成的线上问题；每个补丁不允许超过1个版本</li>
</ul>
</li>
</ol>
<h4 id="API团队引入"><a href="#API团队引入" class="headerlink" title="API团队引入"></a>API团队引入</h4><p>引入API团队可以减少客户端和多个Sever端交互。</p>
<ul>
<li>沟通成本降低</li>
<li>发版风险降低</li>
<li>业务逻辑简化</li>
</ul>
<p><strong>移动端与后端配合开发流程</strong><br><img src="http://ocg4av0wv.bkt.clouddn.com/80A8B375-36DC-496F-B4CD-C9C26A538986.png" width = 600 title="移动端与后端配合开发流程"/> </p>
<h2 id="第三阶段"><a href="#第三阶段" class="headerlink" title="第三阶段"></a>第三阶段</h2><ol>
<li>插件化(用户对产品功能做个性化定制，减少安装包体积，降低发版成本)</li>
<li>跨平台技术(最小的成本覆盖到两个平台，避免重复开发)</li>
<li>安全性(更多交易内容线上化)</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CSS学习笔记 -- 1]]></title>
      <url>https://CepheusSun.github.io/2016/08/29/css%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0--1/</url>
      <content type="html"><![CDATA[<p>抽空学习了一下html、css、JavaScript。</p>
<a id="more"></a>
<blockquote>
<p>这部分内容是我抽空学习的时候整理的笔记,这部分是看的前端的内容。<a href="http://www.imooc.com/learn/9"><em>学习地址</em></a>。</p>
</blockquote>
<h2 id="什么是CSS"><a href="#什么是CSS" class="headerlink" title="什么是CSS"></a>什么是CSS</h2><blockquote>
<p>CSS 全称为”层叠样式表Cascading Style Sheets”,他主要是用于定义HTML内容在浏览器中的样式,如文字大小，颜色，字体加粗等。</p>
<p>使用CSS样式的一个好处是通过定义某个样式，可以让不同网页位置的文字有着统一的字体、字号或者颜色等。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">p&#123;</div><div class="line">	font-size:12px;</div><div class="line">	color:red;</div><div class="line">	font-weight:bold;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="CSS的语法"><a href="#CSS的语法" class="headerlink" title="CSS的语法"></a>CSS的语法</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p>css样式由<strong>选择符</strong>和<strong>声明</strong>组成，而<strong>声明</strong>又由<strong>属性</strong>和<strong>值</strong>组成。</p>
<p>如上文示例中<code>p</code>为选择符 <code>{...}</code>花括号内为声明，<code>color</code>为属性 ,<code>red</code>为值。</p>
<p><strong>选择符</strong>:又称为选择器，指明网页中要应用样式规则的元素。</p>
<p><strong>声明</strong>: 在英文花括号中的就是声明，属性和值之间用英文冒号分割。当有多条声明的时候，使用<code>;</code>分割。</p>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>html: <code>&lt;!-- ... --&gt;</code>;</p>
<p>css: <code>/*...*/</code></p>
<h3 id="位置"><a href="#位置" class="headerlink" title="位置"></a>位置</h3><p>内联式、嵌入式、外部式</p>
<h4 id="内联式CSS样式-直接写在现有的CSS标签中"><a href="#内联式CSS样式-直接写在现有的CSS标签中" class="headerlink" title="内联式CSS样式,直接写在现有的CSS标签中"></a>内联式CSS样式,直接写在现有的CSS标签中</h4><p><p style="color:red ; font-size: 15px">text</p>  <code>&lt;p style=&quot;color:red ;font-size: 15px&quot;&gt;text&lt;/p&gt;</code></p>
<h4 id="嵌入式CSS样式，直接写在当前的文件中"><a href="#嵌入式CSS样式，直接写在当前的文件中" class="headerlink" title="嵌入式CSS样式，直接写在当前的文件中"></a>嵌入式CSS样式，直接写在当前的文件中</h4><p>将css代码写在html文件的<code>&lt;style&gt;&lt;/style&gt;</code>标签中</p>
<p>嵌入式css样式必须写在<code>&lt;style&gt;&lt;/style&gt;</code>之间，并且一般情况下嵌入式css样式写在<code>&lt;head&gt;&lt;/head&gt;</code>之间。如右边编辑器中的代码。</p>
<h4 id="外部式CSS样式-写在单独的一个文件中"><a href="#外部式CSS样式-写在单独的一个文件中" class="headerlink" title="外部式CSS样式,写在单独的一个文件中"></a>外部式CSS样式,写在单独的一个文件中</h4><p>外部式css样式(也可称为外联式)就是把css代码写一个单独的外部文件中，这个css样式文件以“.css”为扩展名，在<code>&lt;head&gt;</code>内（不是在<code>&lt;style&gt;</code>标签内）使用<code>&lt;link&gt;</code>标签将css样式文件链接到HTML文件内，如下面代码：</p>
<p><code>&lt;link href=&quot;base.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;</code></p>
<p>注意:</p>
<ol>
<li>css样式文件名称应该以有意义的英文字母命名。</li>
<li>rel=”stylesheet” type=”text/css”是固定写法，不可以修改。</li>
<li><code>&lt;link&gt;</code>标签的位置一般写在<code>&lt;head&gt;</code>标签之内。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE HTML&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;</div><div class="line">&lt;title&gt;嵌入式css样式&lt;/title&gt;</div><div class="line">&lt;link href=&quot;style.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;p&gt;...&lt;/p&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h4 id="三种方式的优先级以及怎么选择"><a href="#三种方式的优先级以及怎么选择" class="headerlink" title="三种方式的优先级以及怎么选择"></a>三种方式的优先级以及怎么选择</h4><p>如果三个都有，那么三个都要访问到，但是如果对于同一个属性，那么按照：就近原则体现。</p>
<h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3><p><strong>语法</strong>： <code>.类选择器{css样式代码;}</code></p>
<ul>
<li>以英文原点开头</li>
<li>类选器名称可以任意起名</li>
</ul>
<p><strong>使用</strong>：</p>
<ol>
<li>设置类选择器<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2. 使用合适的标签修饰内容</div></pre></td></tr></table></figure>
</li>
</ol>
<p><span>内容</span><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">3. 为上面的标签设置一个类</div></pre></td></tr></table></figure></p>
<p><span class="name">内容</span><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### ID选择器</div><div class="line"></div><div class="line">类似类选择器</div><div class="line"></div><div class="line">1、为标签设置id=&quot;ID名称&quot;，而不是class=&quot;类名称&quot;。</div><div class="line"></div><div class="line">2、ID选择符的前面是井号（#）号，而不是英文圆点（.）。</div><div class="line"></div><div class="line">#### 类选择器和ID选择器的区别</div><div class="line"></div><div class="line">**相同点**:可以应用于任何元素</div><div class="line"></div><div class="line">**不同点**:</div><div class="line"></div><div class="line">1. ID选择器只能在文档中使用一次。与类选择器不同，在一个HTML文档中，ID选择器只能使用一次，而且仅一次。而类选择器可以使用多次。</div><div class="line">2. 可以使用类选择器词列表方法为一个元素同时设置多个样式。我们可以为一个元素同时设多个样式，但只可以用类选择器的方法实现，ID选择器是不可以的（不能使用 ID 词列表）。</div><div class="line"></div><div class="line"></div><div class="line">### 子选择器</div><div class="line"></div><div class="line">子选择器(&quot;&gt;&quot;)：用于选择指定标签元素的第一代子元素。</div></pre></td></tr></table></figure></p>
<p>.food&gt;li{border:1px solid red;}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">这行代码会使class名为food下的子元素li（水果、蔬菜）加入红色实线边框。</div><div class="line"></div><div class="line"></div><div class="line">### 包含（后代）选择器</div><div class="line"></div><div class="line">包含选择器，即加入空格,用于选择指定标签元素下的后辈元素。如右侧代码编辑器中的代码：</div></pre></td></tr></table></figure></p>
<p>.first span{color:red;}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">请注意这个选择器与子选择器的区别，子选择器（child selector）仅是指它的直接后代，或者你可以理解为作用于子元素的第一代后代。而后代选择器是作用于所有子后代元素。后代选择器通过空格来进行选择，而子选择器是通过“&gt;”进行选择。</div><div class="line"></div><div class="line">总结：&gt;作用于元素的第一代后代，空格作用于元素的所有后代。</div><div class="line"></div><div class="line">### 通用选择器</div><div class="line"></div><div class="line">通用选择器是功能最强大的选择器，它使用一个（*）号指定，它的作用是匹配html中所有标签元素，如下使用下面代码使用html中任意标签元素字体颜色全部设置为红色：</div></pre></td></tr></table></figure></p>
<p>*{color:red;}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 伪类选择符</div><div class="line"></div><div class="line">`a:hover&#123;color:red;&#125;`</div><div class="line"></div><div class="line">为a标签鼠标滑过状态设置字体颜色变红。 由于兼容问题，只有`a:hover `兼容所有浏览器</div><div class="line"></div><div class="line">### 分组选择符</div></pre></td></tr></table></figure></p>
<p>h1,span{color:red;}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure></p>
<p>h1{color:red;}<br>span{color:red;}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">以上代码等价。</div><div class="line"></div><div class="line">### 权值规则</div><div class="line"></div><div class="line">标签的权值为1，类选择符的权值为10，ID选择符的权值最高为100。</div><div class="line"></div><div class="line">权值越高，优先使用。</div><div class="line"></div><div class="line">**注意**：还有一个权值比较特殊--继承也有权值但很低，有的文献提出它只有0.1，所以可以理解为继承的权值最低。</div><div class="line"></div><div class="line"></div><div class="line">### 重要性</div><div class="line"></div><div class="line">使用！important使某些样式具有最高权重。如：</div><div class="line"></div><div class="line">`p&#123;color:red!important;&#125;`</div><div class="line"></div><div class="line">一般情况下：浏览器默认的样式 &lt; 网页制作者样式 &lt; 用户自己设置的样式</div><div class="line"></div><div class="line">但是`!important`是一个例外</div><div class="line"></div><div class="line">所以:浏览器默认的样式 &lt; 网页制作者样式 &lt; 用户自己设置的样式 &lt; `!important` 修饰的样式</div><div class="line"></div><div class="line">## 文字排版</div><div class="line"></div><div class="line">### 字体</div></pre></td></tr></table></figure></p>
<p>body{font-family:”Microsoft Yahei”;}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 字号、颜色</div></pre></td></tr></table></figure></p>
<p>font-size:12px;/<em>字号</em>/<br>color:#66;/<em>颜色</em>/<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 粗体</div></pre></td></tr></table></figure></p>
<p>font-weight:bold;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 斜体</div></pre></td></tr></table></figure></p>
<p>font-style:italic;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 下划线</div></pre></td></tr></table></figure></p>
<p>font-decoration:underline;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 删除线</div></pre></td></tr></table></figure></p>
<p>text-decoration:line-through;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 缩进</div></pre></td></tr></table></figure></p>
<p>text-indent:2em;/<em>2em表示文字的2倍大小</em>/<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 行间距(行高)</div></pre></td></tr></table></figure></p>
<p>line-height:1.5em;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 中文字间距、字母间距</div><div class="line"></div><div class="line">**中文、字母**</div></pre></td></tr></table></figure></p>
<p>letter-spacing:50px;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">**单词**</div></pre></td></tr></table></figure></p>
<p>word-spacing:50px;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 对其方式</div></pre></td></tr></table></figure></p>
<p>text-align:center;/<em>居中</em>/<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">## 元素分类</div><div class="line"></div><div class="line">常用的块状元素：</div><div class="line"></div><div class="line">`div`、`p`、`hn`、`ol`、`ul`、`dl`、`table`、`address`、`blockquote`、`form`</div><div class="line"></div><div class="line">常用的内联元素有：</div><div class="line"></div><div class="line">`&lt;a&gt;`、`&lt;span&gt;`、`&lt;br&gt;`、`&lt;i&gt;`、`&lt;em&gt;`、`&lt;strong&gt;`、`&lt;label&gt;`、`&lt;q&gt;`、`&lt;var&gt;`、`&lt;cite&gt;`、`&lt;code&gt;`</div><div class="line"></div><div class="line">常用的内联块状元素有：</div><div class="line"></div><div class="line">`&lt;img&gt;`、`&lt;input&gt;`</div><div class="line"></div><div class="line">### 块级元素</div><div class="line"></div><div class="line">如上文；</div><div class="line"></div><div class="line">可以通过`display:block`将元素显示为块级别元素。</div><div class="line"></div><div class="line">**块级元素特点**：</div><div class="line"></div><div class="line">1. 每个块级元素都从新的一行开始，并且其后的元素也另起一行。（真霸道，一个块级元素独占一行）</div><div class="line">2. 元素的高度、宽度、行高以及顶和底边距都可设置。</div><div class="line">3. 元素宽度在不设置的情况下，是它本身父容器的100%（和父元素的宽度一致），除非设定一个宽度。</div><div class="line"></div><div class="line">### 内联元素</div><div class="line"></div><div class="line">如上文；</div><div class="line"></div><div class="line">可以通过`display:inline`将元素设置为内联元素</div><div class="line"></div><div class="line">**内联元素特点**：</div><div class="line"></div><div class="line">1. 和其他元素都在一行上；</div><div class="line">2. 元素的高度、宽度及顶部和底部边距不可设置；</div><div class="line">3. 元素的宽度就是它包含的文字或图片的宽度，不可改变。</div><div class="line"></div><div class="line"></div><div class="line">### 内联块状元素</div><div class="line"></div><div class="line">内联块状元素（inline-block）就是同时具备内联元素、块状元素的特点</div><div class="line"></div><div class="line">可以通过`display:inline-block`将元素设置为内联块状元素</div><div class="line"></div><div class="line">**inline-block 元素特点**：</div><div class="line"></div><div class="line">1. 和其他元素都在一行上；</div><div class="line">2. 元素的高度、宽度、行高以及顶和底边距都可设置。</div><div class="line"></div><div class="line"></div><div class="line">## 盒子模型</div><div class="line"></div><div class="line">1. `width`: 内容</div><div class="line">2. `height`:内容</div><div class="line">3. `padding`:内填充</div><div class="line">4. `margin`:外填充</div><div class="line">5. `border`:边界</div><div class="line"></div><div class="line">### 边框 border</div><div class="line"></div><div class="line">盒子模型的边框就是围绕着内容及补白的线，这条线你可以设置它的粗细、样式和颜色(边框三个属性)。</div><div class="line"></div><div class="line">例如给div设置边框：</div></pre></td></tr></table></figure></p>
<p>div{border:2px solid red;}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">或者</div></pre></td></tr></table></figure></p>
<p>div{<br>    border-width:2px;<br>    border-style:solid;<br>    border-color:red;<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">**注意**</div><div class="line"></div><div class="line">1. border-style: `dashed`虚线、 `dotted`点线、 `solid`实线</div><div class="line">2. border-color:</div><div class="line">3. border-width（边框宽度）中的宽度也可以设置为：`thin` | `medium` | `thick`（但不是很常用），最常还是用象素（px）。</div><div class="line"></div><div class="line"></div><div class="line">`border-bottom`、`bottom-top`、`bottom-left`、`bottom-right`只给一边的边框设置。</div><div class="line"></div><div class="line"></div><div class="line">### 大小 </div><div class="line"></div><div class="line">`width` `height`</div><div class="line"></div><div class="line">### 内填充</div><div class="line"></div><div class="line">`padding`  `div&#123;padding:20px 10px 15px 30px;&#125;`  顺序为上又下左(顺时针)</div><div class="line"></div><div class="line">如果上、右、下、左的填充都为10px;可以这么写</div><div class="line"></div><div class="line">`div&#123;padding:10px;&#125;`</div><div class="line"></div><div class="line">如果上下填充一样为10px，左右一样为20px，可以这么写：</div><div class="line"></div><div class="line">`div&#123;padding:10px 20px;&#125;`</div><div class="line"></div><div class="line">### 边界(外填充)</div><div class="line"></div><div class="line">`margin`  类似`padding`</div><div class="line"></div><div class="line">## CSS布局模型</div><div class="line"></div><div class="line">网页中的元素有三种布局模型:</div><div class="line"></div><div class="line">1. 流动模型(Flow)</div><div class="line">2. 浮动模型(Float)</div><div class="line">3. 层模型(Layer)</div><div class="line"></div><div class="line">### 流动模型(Flow) </div><div class="line"></div><div class="line">流动是默认的网页布局模式。也就是说网页在默认的状态下的HTML网页元素都是根据流动模型来分布网页内容的。流动布局模型具有2个比较典型的特征:</div><div class="line"></div><div class="line">1. 块状元素都会在所处的包含元素内自上而下按顺序垂直延伸分布，因为在默认状态下，块状元素的宽度都为100%。实际上，块状元素都会以行的形式占据位置。如右侧代码编辑器中三个块状元素标签(div，h1，p)宽度显示为100%。</div><div class="line">2. 在流动模型下，内联元素都会在所处的包含元素内从左到右水平分布显示。（内联元素可不像块状元素这么霸道独占一行）</div><div class="line"></div><div class="line">### 浮动模型(Float)</div><div class="line"></div><div class="line">如上文，块状元素都是独占一行。如果要讲快中元素并排显示，那么久需要用到浮动模型了。</div><div class="line"></div><div class="line">注意: 任何元素都是默认不能浮动的，但是可以用css定义为浮动。</div></pre></td></tr></table></figure></p>
<p>div{<br>    width:200px;<br>    height:200px;<br>    border:1px red solid;<br>    float:left;<br>}</p>
<p><div id="div1"></div></p>
<p><div id="div1"></div><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 层模型(Layer)</div><div class="line"></div><div class="line">让html元素在网页中精确定位</div><div class="line"></div><div class="line">层模型有三种形式：</div><div class="line"></div><div class="line">* 绝对定位(position: absolute)</div><div class="line">* 相对定位(position: relative)</div><div class="line">* 固定定位(position: fixed)</div><div class="line"></div><div class="line">#### 绝对定位</div><div class="line"></div><div class="line">如果想为元素设置层模型中的绝对定位，需要设置position:absolute(表示绝对定位)，这条语句的作用将元素从文档流中拖出来，然后使用left、right、top、bottom属性相对于其最接近的一个具有定位属性的父包含块进行绝对定位。如果不存在这样的包含块，则相对于body元素，即相对于浏览器窗口。</div><div class="line"></div><div class="line">#### 相对定位</div><div class="line"></div><div class="line">如果想为元素设置层模型中的相对定位，需要设置position:relative（表示相对定位），它通过left、right、top、bottom属性确定元素在正常文档流中的偏移位置。相对定位完成的过程是首先按static(float)方式生成一个元素(并且元素像层一样浮动了起来)，然后相对于以前的位置移动，移动的方向和幅度由left、right、top、bottom属性确定，偏移前的位置保留不动。</div><div class="line"></div><div class="line">#### 固定定位</div><div class="line"></div><div class="line">fixed：表示固定定位，与absolute定位类型类似，但它的相对移动的坐标是视图（屏幕内的网页窗口）本身。由于视图本身是固定的，它不会随浏览器窗口的滚动条滚动而变化，除非你在屏幕中移动浏览器窗口的屏幕位置，或改变浏览器窗口的显示大小，因此固定定位的元素会始终位于浏览器窗口内视图的某个位置，不会受文档流动影响，这与background-attachment:fixed;属性功能相同。以下代码可以实现相对于浏览器视图向右移动100px，向下移动50px。并且拖动滚动条时位置固定不变。</div><div class="line"></div><div class="line">#### Relative与Absolute组合使用</div><div class="line"></div><div class="line">absolute 可以相对于浏览器设置定位。如果相对于其他元素，就需要使用`position:relative`</div><div class="line"></div><div class="line">注意:</div><div class="line"></div><div class="line">1. 参照定位的元素必须是相对定位元素的前辈元素</div><div class="line">2. 参照定位的元素必须加入position:relative;</div><div class="line">3. 定位元素加入position:absolute，便可以使用top、bottom、left、right来进行偏移定位了。</div><div class="line"></div><div class="line">### 盒子模型代码简写</div><div class="line"></div><div class="line">* top right bottom left 相同,写一个</div><div class="line">* top bottom相同，left right 相同，写两个</div><div class="line">* left right相同，写三个</div><div class="line">*</div><div class="line"></div><div class="line">### 颜色值缩写</div><div class="line"></div><div class="line">16进制的色彩值，如果每两位的值相同，可以缩写一半</div><div class="line"></div><div class="line">＃336699   ——&gt;  ＃369</div><div class="line"></div><div class="line">### 字体缩写</div></pre></td></tr></table></figure></p>
<p>body{<br>    font-style:italic;<br>    font-variant:small-caps;<br>    font-weight:bold;<br>    font-size:12px;<br>    line-height:1.5em;<br>    font-family:”宋体”,sans-serif;<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">缩写为:</div></pre></td></tr></table></figure></p>
<p>body{<br>    font:italic  small-caps  bold  12px/1.5em  “宋体”,sans-serif;<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">**注意**:</div><div class="line"></div><div class="line">1. 使用这一简写方式你至少要指定 font-size 和 font-family 属性，其他的属性(如 font-weight、font-style、font-varient、line-height)如未指定将自动使用默认值。</div><div class="line">2. 在缩写时 font-size 与 line-height 中间要加入“/”斜扛。 </div><div class="line"></div><div class="line">一般情况下因为对于中文网站，英文还是比较少的，所以下面缩写代码比较常用：</div></pre></td></tr></table></figure></p>
<p>body{<br>    font:12px/1.5em  “宋体”,sans-serif;<br>}<br>```<br>只是有字号、行间距、中文字体、英文字体设置。</p>
<h3 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h3><ol>
<li>英文命令颜色<code>p{color:red;}</code></li>
<li>RGB颜色<code>p{color:rgb(133,45,200);}</code>或者<code>p{color:rgb(20%,23%,20%);}</code></li>
<li>十六进制颜色<code>p{color:＃00ffff);}</code></li>
</ol>
<h3 id="长度值-都是相对单位"><a href="#长度值-都是相对单位" class="headerlink" title="长度值  都是相对单位"></a>长度值  都是相对单位</h3><ol>
<li>像素  px  相对于显示器</li>
<li>em 就是本元素给定字体的 font-size 值，如果元素的 font-size 为 14px ，那么 1em = 14px；如果 font-size 为 18px，那么 1em = 18px。</li>
<li>百分比</li>
</ol>
<p>注意：</p>
<p>但当给 font-size 设置单位为 em 时，此时计算的标准以 p 的父元素的 font-size 为基础。</p>
<h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><h3 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h3><ul>
<li>如果被设置元素为文本、图片等行内元素时，水平居中时通过给父类元素设置<code>text-align:center</code>来实现的</li>
<li>定宽块状元素:通过设置<code>margin</code>的<code>left</code>和<code>right</code>为<code>auto</code>实现。此时<code>width:200px</code></li>
<li>不定宽块状元素:<ul>
<li>加入label标签<ul>
<li>第一步:为需要设置居中的元素外面加入一个<code>table</code>标签(包括<code>&lt;tbody&gt;</code>、<code>&lt;tr&gt;</code>、<code>&lt;td&gt;</code>)</li>
<li>第二步:为这个<code>table</code>设置左右margin居中。</li>
</ul>
</li>
<li>设置<code>display:inline</code>:显示类型设置为行内元素，进行不定宽元素的属性设置</li>
<li>设置<code>position:relative</code>和<code>left:50%</code>:利用相对定位的方式，讲元素向左偏移50%，达到居中的目的。</li>
</ul>
</li>
</ul>
<h3 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h3><ul>
<li>父元素高度确定的单行文本: 设置 <code>height</code> 等于 <code>line-height</code> 实现。<ul>
<li>height : 该元素的高度</li>
<li>line-height:行高，指在文本中，行与行之间的基线间的距离.</li>
<li>line-height 与 font-size 的计算值之差，在CSS中成为”行间距”.</li>
</ul>
</li>
<li>父元素高度确定的多行文本(图片):<ul>
<li>方法一:使用插入table 同时设置<code>vertival-align:middle</code></li>
<li>方法二(因为兼容问题，不推荐使用):<code>display：table-cell ; vertival-align:middle</code></li>
</ul>
</li>
</ul>
<h3 id="隐性改变display类型"><a href="#隐性改变display类型" class="headerlink" title="隐性改变display类型"></a>隐性改变display类型</h3><p>有一个有趣的现象就是当为元素（不论之前是什么类型元素，<code>display:none</code> 除外）设置以下 2 个句之一：</p>
<ol>
<li><p>position : absolute </p>
</li>
<li><p>float : left 或 float:right </p>
</li>
</ol>
<p>简单来说，只要html代码中出现以上两句之一，元素的display显示类型就会自动变为以 <code>display:inline-block</code>（块状元素）的方式显示，当然就可以设置元素的 width 和 height 了，且默认宽度不占满父元素。</p>
<p>如下面的代码，小伙伴们都知道 a 标签是 行内元素 ，所以设置它的 width 是 没有效果的，但是设置为 <code>position:absolute</code> 以后，就可以了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript和Native的交互 第二弹]]></title>
      <url>https://CepheusSun.github.io/2016/08/28/javascript%E5%92%8Cnative%E7%9A%84%E4%BA%A4%E4%BA%92_%E7%AC%AC%E4%BA%8C%E5%BC%B9/</url>
      <content type="html"><![CDATA[<p>上次简单的写了一下js和Native交互的问题，这篇文章再稍微深入的研究一下JSBinding。作为上文的补充。</p>
<a id="more"></a>
<h2 id="JSBinding"><a href="#JSBinding" class="headerlink" title="JSBinding"></a>JSBinding</h2><h3 id="JSBinding-是什么"><a href="#JSBinding-是什么" class="headerlink" title="JSBinding 是什么?"></a>JSBinding 是什么?</h3><p>JSBinding 不是Hybrid很多人都是通过cocos2dx来了解JSbinding这个技术的。</p>
<p>JSBingding 是JSC和Native 之间的桥接。</p>
<p>JS实际上就是JS和Native之间的一个桥梁，通过JSBinding打通了JS代码和Native代码，并在其间实现二者的交流。</p>
<h3 id="JSBinding和Hybrid的区别"><a href="#JSBinding和Hybrid的区别" class="headerlink" title="JSBinding和Hybrid的区别"></a>JSBinding和Hybrid的区别</h3><p>Hybrid实际上就是通过webview。js代码实际上还是跑在web上。是web技术和Native之间的桥梁。</p>
<p>二JSBinding并不依赖于webview</p>
<p>Native (原生静态语言): 高性能、更底层、更强大、平台特性<br>JavaScript(动态脚本语言): 简单易用、免编译、热部署</p>
<h2 id="JSC-API"><a href="#JSC-API" class="headerlink" title="JSC API"></a>JSC API</h2><h3 id="JavaScriptCore-h"><a href="#JavaScriptCore-h" class="headerlink" title="JavaScriptCore.h"></a>JavaScriptCore.h</h3><p>这一部分在上一篇文章已经又过一些简单的介绍了。在这里可能会有一些新的理解。</p>
<p><code>#import &lt;JavaScriptCore/JavaScriptCore.h&gt;</code></p>
<h3 id="JSContext"><a href="#JSContext" class="headerlink" title="JSContext"></a>JSContext</h3><p>就是js的上下文，或者说是js的运行环境</p>
<h3 id="JSValue"><a href="#JSValue" class="headerlink" title="JSValue"></a>JSValue</h3><h3 id="JSExport"><a href="#JSExport" class="headerlink" title="JSExport"></a>JSExport</h3><h2 id="OC-call-Js"><a href="#OC-call-Js" class="headerlink" title="OC call Js"></a>OC call Js</h2><h3 id="1、执行js脚本"><a href="#1、执行js脚本" class="headerlink" title="1、执行js脚本"></a>1、执行js脚本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//执行js脚本</div><div class="line">    JSContext *context = [[JSContext alloc] init];</div><div class="line">    JSValue *value = [context evaluateScript:@&quot;1+2&quot;];</div><div class="line">    NSLog(@&quot;%f&quot;,[value toDouble]);</div></pre></td></tr></table></figure>
<h3 id="2、调用js函数"><a href="#2、调用js函数" class="headerlink" title="2、调用js函数"></a>2、调用js函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//调用js函数</div><div class="line">    //在js上下文中定义一个js函数</div><div class="line">    //NSString *js = @&quot;function sum(a,b) &#123;return a+b;&#125;&quot;;</div><div class="line">    //[context evaluateScript:js];</div><div class="line">    //调用这个js函数</div><div class="line">    //sumA 是js代码中的一个function</div><div class="line">    JSValue *sum = context[@&quot;sumA&quot;];</div><div class="line">    JSValue *result = [sum callWithArguments:@[@1,@1]];</div><div class="line">    NSLog(@&quot;sum(1,2) = %f&quot;,[result toDouble]);</div></pre></td></tr></table></figure>
<h3 id="3、创建一个js值"><a href="#3、创建一个js值" class="headerlink" title="3、创建一个js值"></a>3、创建一个js值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//创建js值对象</div><div class="line">    //方法1</div><div class="line">    JSValue *intVar = [JSValue valueWithInt32:231 inContext:context];</div><div class="line">    context[@&quot;bar&quot;] = intVar;</div><div class="line">    [context evaluateScript:@&quot;bar++&quot;];</div><div class="line">    //方法2</div><div class="line">    [context evaluateScript:@&quot;var bar = 231;&quot;];</div></pre></td></tr></table></figure>
<p>value对应关系，在上文中有介绍</p>
<h3 id="4、捕获错误信息"><a href="#4、捕获错误信息" class="headerlink" title="4、捕获错误信息"></a>4、捕获错误信息</h3><p>由于在js 中的错误在native中是不能自动捕捉的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//捕获JS中的异常信息</div><div class="line">	JSContext *context = [[JSContext alloc] init];</div><div class="line">	context.exceptionHandler = ^(JSContext *ctx ,JSValue *exception)&#123;</div><div class="line">		NSLog(@&quot;%@&quot;,exception)</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h2 id="Js-call-Native"><a href="#Js-call-Native" class="headerlink" title="Js call Native"></a>Js call Native</h2><h3 id="1、js-call-Native-via-block"><a href="#1、js-call-Native-via-block" class="headerlink" title="1、js call Native via block"></a>1、js call Native via block</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">context[@&quot;sum&quot;] = ^(int a, int b)&#123;</div><div class="line">     return a+b;</div><div class="line"> &#125;;</div><div class="line"> value = [context evaluateScript:@&quot;sum(1,2)&quot;];</div><div class="line"> //在js 中直接使用  “sum(1,2);”来调用</div></pre></td></tr></table></figure>
<ul>
<li>虽然在oc的代码中block是可以访问自己之外的变量的。但是当我们使用这个block和js互动的时候这个block就不能够调用外面的东西。如果要是用这个context的话，使用<code>[JSContext currentContext]</code>来获取当前的上下文。动态参数：<code>[JSContext currentArguments]</code></li>
</ul>
<h3 id="2、js-call-native-via-JSExport"><a href="#2、js-call-native-via-JSExport" class="headerlink" title="2、js call native via JSExport"></a>2、js call native via JSExport</h3><p>在上文中，介绍较多。只是没有仔细的研究具体实现原理。</p>
<p>定义并且实例化一个JSExport类,然后把这个对象放在jscontext。这样就可以通过像操作js对象那样操作这个对象。</p>
<p>但是要注意，在js中没有构造函数。</p>
<p> 即使我们通过export向js上下文中注入了一个类，但是我们在js中通过new来实例化这个类的对象是不可行的。即使我们通过<code>context[@&quot;Foo&quot;] = [Foo class]</code>向js注入这么一个类，但是也是不可以的。这可以说是jsbinding的一个缺陷吧。</p>
<h2 id="console等怎么来"><a href="#console等怎么来" class="headerlink" title="console等怎么来"></a>console等怎么来</h2><p>上一篇文章中console.log 是可用的，因为js代码实际上也是运行在webview中的，但是如果我们不通过浏览器的话，是没有console这个函数的，这个时候怎么样实现我们的日志输出功能呢？</p>
<p>这个时候如果我们通过一个叫console的类,来实现这个功能就是可以的了。</p>
<p>但是我们其实也可以单独使用一个js本身来模拟这个功能。但我没有去实现过，不敢赘述。</p>
<h2 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h2><ul>
<li>Retain cycle</li>
</ul>
<p>native 对象 和js对象循环持有，是不能通过GC或者ARC释放的。</p>
<p>这种情况下 Native必须通过JSManagedValue来持有js对象，js可以直接持有。这种情况下，js代码可以正常写，而oc里面的setter方法需要使用<code>[JSManagedValue managedValueWith:]</code>来包装一下。</p>
<h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><p>API是线程安全的；</p>
<p>锁的最小粒度是js虚拟机 JSVirtualMachine</p>
<p>如果要并行的运行两个东西，需要把它分到两个虚拟机中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">	JSVirtualMachine *jsMachineA = [[JSVirtualMachine alloc] init];</div><div class="line">    JSContext *contextA = [[JSContext alloc] initWithVirtualMachine:jsMachineA];</div><div class="line">    JSContext *contextB = [[JSContext alloc] initWithVirtualMachine:jsMachineA];</div><div class="line">//</div><div class="line">    JSVirtualMachine *jsMachineB = [[JSVirtualMachine alloc] init];</div><div class="line">    JSContext *contextC = [[JSContext alloc] initWithVirtualMachine:jsMachineB];</div></pre></td></tr></table></figure>
<p>A、B虽然是不容的上下文，但是她们是运行在同一个js虚拟机当中的，他俩在运行的时候是能够保证是一个同步的状态。虽然她们不能直接互相访问，但是她们是能够在Native上面实现一个比较好的通讯。（不需要考虑执行顺序和锁的问题）</p>
<p>A、C是在不同的线程中的，她们是不能很容易通讯的，异步执行，在他们之间的通讯比较麻烦</p>
<h3 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h3><p>这篇文章作为上一篇文章的补充，实在没有那么多的干货，但是作为自己对jsbinding的理解和更加深入的学习,本文的撰写确实帮助我对这一知识的理解更加的系统化。上一篇文章更多的是面相实现，而这篇文章增加了更多对原理的理解。路漫漫其修远兮，吾将上下而求索。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[html学习笔记--1]]></title>
      <url>https://CepheusSun.github.io/2016/08/27/html%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0--1/</url>
      <content type="html"><![CDATA[<p>抽空学习了一下html、css、JavaScript。</p>
<a id="more"></a>
<blockquote>
<p>这部分内容是我抽空学习的时候整理的笔记,这部分是看的前端的内容。<a href="http://www.imooc.com/learn/9"><em>学习地址</em></a>。</p>
</blockquote>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li>HTML是网页内容的载体。内容就是网页制作者放在页面上想要让用户浏览的信息，可以包含文字、图片、视频等。</li>
<li>CSS样式是表现。就像网页的外衣。比如，标题字体、颜色变化，或为标题加入背景图片、边框等。所有这些用来改变内容外观的东西称之为表现。</li>
<li>JavaScript是用来实现网页上的特效效果。如：鼠标滑过弹出下拉菜单。或鼠标滑过表格的背景颜色改变。还有焦点新闻（新闻图片）的轮换。可以这么理解，有动画的，有交互的一般都是用JavaScript来实现的。</li>
</ol>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>html代码注释  <code>&lt;!--注释内容--&gt;</code></p>
<h2 id="html文件的基本结构"><a href="#html文件的基本结构" class="headerlink" title="html文件的基本结构"></a>html文件的基本结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">	&lt;head&gt;...&lt;/head&gt;</div><div class="line">	&lt;body&gt;...&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<ol>
<li><code>&lt;html&gt;&lt;/html&gt;</code>为根标签，所有的网页标签都在<code>&lt;html&gt;&lt;/html&gt;</code>中.</li>
<li><code>&lt;head&gt;&lt;/head&gt;</code>标签用于定于文档的头部，他是所有头部元素的容器。头部元素有以下这些标签<ul>
<li><code>&lt;title&gt;</code></li>
<li><code>&lt;script&gt;</code></li>
<li><code>&lt;style&gt;</code></li>
<li><code>&lt;link&gt;</code></li>
<li><code>&lt;meta&gt;</code></li>
<li>etc</li>
</ul>
</li>
<li><code>&lt;body&gt;&lt;/body&gt;</code>标签之间的内容是网页的主要内容，如<code>&lt;h1&gt;</code>、<code>&lt;p&gt;</code>、<code>&lt;a&gt;</code>、<code>&lt;img&gt;</code>等网页内容，在这里的标签中的内容会在浏览器中显示出来。</li>
</ol>
<h3 id="head-标签"><a href="#head-标签" class="headerlink" title="head 标签"></a>head 标签</h3><p>作用:文档的头部描述了文档的各种属性和信息，包括文档的标题等，绝大多数文档头部包含的数据都不会真正作为内容显示给读者。</p>
<p>下面标签可用在head 部分</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;head&gt;</div><div class="line">	&lt;title&gt;...&lt;/title&gt;</div><div class="line">	&lt;meta&gt;</div><div class="line">	&lt;link&gt;</div><div class="line">	&lt;style&gt;...&lt;/style&gt;</div><div class="line">	&lt;script&gt;...&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div></pre></td></tr></table></figure>
<ul>
<li><code>title</code>标签: 网页的标题信息,内容显示在浏览器的标题栏目中.</li>
</ul>
<h3 id="body-标签"><a href="#body-标签" class="headerlink" title="body 标签"></a>body 标签</h3><p>作用:网页上要显示的内容必须放在body标签中。</p>
<h4 id="1、-lt-p-gt-lt-p-gt-段落文本"><a href="#1、-lt-p-gt-lt-p-gt-段落文本" class="headerlink" title="1、&lt;p&gt;&lt;/p&gt;段落文本"></a>1、<code>&lt;p&gt;&lt;/p&gt;</code>段落文本</h4><p>如果想在网页上显示文章，这时就需要<code>&lt;p&gt;</code>标签了，把文章的段落放到<code>&lt;p&gt;</code>标签中。注意一段文字一个<code>&lt;p&gt;</code>标签，如在一篇新闻文章中有3段文字，就要把这3个段落分别放到3个<code>&lt;p&gt;</code>标签中。<code>&lt;p&gt;</code>标签的默认样式是段前段后都会有空白，如果不喜欢这个空白，可以用css样式来删除或改变它。</p>
<h4 id="2、-lt-hx-gt-lt-hx-gt-标题"><a href="#2、-lt-hx-gt-lt-hx-gt-标题" class="headerlink" title="2、&lt;hx&gt;&lt;/hx&gt;标题"></a>2、<code>&lt;hx&gt;&lt;/hx&gt;</code>标题</h4><p>x: 1-6 分别为一级标题、二级标题….六级标题。<br>注意:因为<code>h1</code>标签在网页中比较重要，所以一般<code>h1</code>标签被用在网站名称上。如<code>&lt;h1&gt;腾讯网&lt;/h1&gt;</code></p>
<h4 id="3、-lt-strong-gt-lt-em-gt-强调"><a href="#3、-lt-strong-gt-lt-em-gt-强调" class="headerlink" title="3、&lt;strong&gt;&lt;em&gt;强调"></a>3、<code>&lt;strong&gt;&lt;em&gt;</code>强调</h4><p><code>&lt;strong&gt;&lt;/strong&gt;</code>:加粗</p>
<p><code>&lt;em&gt;&lt;/em&gt;</code>:斜体</p>
<h4 id="4、-lt-span-gt-行内标签"><a href="#4、-lt-span-gt-行内标签" class="headerlink" title="4、&lt;span&gt;行内标签"></a>4、<code>&lt;span&gt;</code>行内标签</h4><ol>
<li><code>&lt;em&gt;</code>和<code>&lt;strong&gt;</code>标签是为了强调一段话中的关键字时使用，它们的语义是强调;</li>
<li><code>&lt;span&gt;</code>是没有语义的，他的作用就是为了设置单独的样式;</li>
</ol>
<p>如我要对段落中某个词语改变颜色:</p>
<p>在<code>&lt;head&gt;</code>的<code>&lt;style&gt;</code>标签中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">`&lt;style&gt;</div><div class="line">	span&#123;</div><div class="line">		color : red;</div><div class="line">	&#125;</div><div class="line">&lt;/style&gt;`</div></pre></td></tr></table></figure>
<p>在文本中用<code>&lt;span&gt;&lt;/span&gt;</code>包上需要将颜色变成红色的文字;</p>
<pre><code>那么问题来了,如果我对词语`objc`红色 对 `javascript`蓝色呢？
</code></pre><p>这也很简单。同上在<code>&lt;style&gt;</code>中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">`&lt;style&gt;</div><div class="line">span.blue&#123;</div><div class="line">    color:blue;</div><div class="line">&#125;</div><div class="line">span.red&#123;</div><div class="line">    color:red;</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;`</div></pre></td></tr></table></figure>
<p>然后在文本中 <code>&lt;span class = &quot;blue&quot;&gt;javascript&lt;/span&gt;</code> 、<code>&lt;span class = &quot;red&quot;&gt;objc&lt;/span&gt;</code> </p>
<h4 id="5、-lt-q-gt-引用文本"><a href="#5、-lt-q-gt-引用文本" class="headerlink" title="5、&lt;q&gt; 引用文本"></a>5、<code>&lt;q&gt;</code> 引用文本</h4><p>效果类似于手动给文本加上双引号。但是使用<code>&lt;q&gt;&lt;/q&gt;</code>关键点在于增加语意：<strong>引用别人的话</strong></p>
<h4 id="6、-lt-blockquote-gt-长文本引用"><a href="#6、-lt-blockquote-gt-长文本引用" class="headerlink" title="6、&lt;blockquote&gt;长文本引用"></a>6、<code>&lt;blockquote&gt;</code>长文本引用</h4><p>跟<code>&lt;q&gt;&lt;/q&gt;</code>的简短文本不同，<code>&lt;blockquote&gt;&lt;／blockquote&gt;</code>表示长文本引用。比如在文中需要引用一首李白的一句诗，那么用<code>&lt;q&gt;窗前明月光&lt;/q&gt;</code>。如果是一首诗，那么用<code>&lt;blockquote&gt;。。。。。&lt;／blockquote&gt;</code></p>
<p>使用<code>&lt;blockquote&gt;</code> 并不会像<code>&lt;q&gt;&lt;/q&gt;</code>一样添加双引号。但是会被浏览器解析成添加缩进样式。</p>
<h4 id="7、-lt-br-gt-分行显示文本。"><a href="#7、-lt-br-gt-分行显示文本。" class="headerlink" title="7、 &lt;br/&gt;分行显示文本。"></a>7、 <code>&lt;br/&gt;</code>分行显示文本。</h4><p>html代码中输入空格、回车都是没有作用的。如果要换行就是在要分行的地方添加<code>&lt;br/&gt;</code>标签。</p>
<p><code>&lt;br /&gt;</code> : 换行</p>
<p><code>&lt;hr /&gt;</code> : 分段线</p>
<p><code>&lt;img&gt;</code> : 插入图片</p>
<h4 id="8、-amp-nbsp-添加空格"><a href="#8、-amp-nbsp-添加空格" class="headerlink" title="8、 &amp;nbsp;添加空格"></a>8、 <code>&amp;nbsp;</code>添加空格</h4><p>在html中如果需要输入空格，必须写入<code>&amp;nbsp;</code>；</p>
<p> 一个<code>&amp;nbsp;</code>是一个空格。</p>
<h4 id="9、-lt-address-gt-为网页加入地址信息"><a href="#9、-lt-address-gt-为网页加入地址信息" class="headerlink" title="9、 &lt;address&gt;为网页加入地址信息"></a>9、 <code>&lt;address&gt;</code>为网页加入地址信息</h4><p>默认斜体</p>
<h4 id="10、-lt-code-gt-加入一行代码"><a href="#10、-lt-code-gt-加入一行代码" class="headerlink" title="10、&lt;code&gt;加入一行代码"></a>10、<code>&lt;code&gt;</code>加入一行代码</h4><p><code>&lt;code&gt;var string = &quot;aaa&quot;;&lt;/code&gt;</code></p>
<p><code>var string = “aaa”;</code></p>
<p>如果加入多行代码使用<code>&lt;pre&gt;&lt;/pre&gt;</code>代替<code>&lt;code&gt;&lt;/code&gt;</code></p>
<h4 id="11、-无序列表、有序列表"><a href="#11、-无序列表、有序列表" class="headerlink" title="11、 无序列表、有序列表"></a>11、 无序列表、有序列表</h4><p><strong>无序列表语法：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">`&lt;ul&gt;</div><div class="line">	&lt;li&gt;a&lt;/li&gt;</div><div class="line">	&lt;li&gt;b&lt;/li&gt;</div><div class="line">	&lt;li&gt;c&lt;/li&gt;</div><div class="line">	&lt;li&gt;d&lt;/li&gt;</div><div class="line">&lt;/ul&gt;`</div></pre></td></tr></table></figure>
<p><strong>有序列表语法：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">`&lt;ol&gt;</div><div class="line">	&lt;li&gt;a&lt;/li&gt;</div><div class="line">	&lt;li&gt;b&lt;/li&gt;</div><div class="line">	&lt;li&gt;c&lt;/li&gt;</div><div class="line">	&lt;li&gt;d&lt;/li&gt;</div><div class="line">&lt;/ol&gt;`</div></pre></td></tr></table></figure>
<h4 id="12、-lt-div-gt"><a href="#12、-lt-div-gt" class="headerlink" title="12、&lt;div&gt;"></a><strong>12、<code>&lt;div&gt;</code></strong></h4><blockquote>
<p>在网页制作过程过中，可以把一些独立的逻辑部分划分出来，放在一个<code>&lt;div&gt;</code>标签中，这个<code>&lt;div&gt;</code>标签的作用就相当于一个容器。</p>
</blockquote>
<p>可以通过<code>id</code>给div命名</p>
<p>语法</p>
<p><code>&lt;div id = &quot;板块名称&quot;&gt;...&lt;/div&gt;</code></p>
<h4 id="13、-lt-table-gt-表格"><a href="#13、-lt-table-gt-表格" class="headerlink" title="13、 &lt;table&gt; 表格"></a>13、 <code>&lt;table&gt;</code> 表格</h4><p><code>&lt;table&gt;</code>、<code>&lt;tbody&gt;</code>、<code>&lt;tr&gt;</code>、<code>&lt;th&gt;</code>、<code>&lt;td&gt;</code></p>
<ol>
<li><code>&lt;table&gt;...&lt;/table&gt;</code>:整个表格以<code>&lt;table&gt;</code>标记开始，以<code>&lt;/table&gt;</code>标记结束。</li>
<li><code>&lt;tbody&gt;...&lt;/tbody&gt;</code>:当表格内容非常多的时候，表格会一边下载一边加载。加上<code>&lt;tbody&gt;...&lt;/tbody&gt;</code>之后，这个表格就要等全部下载完之后才回加载。</li>
<li><code>&lt;tr&gt;...&lt;/tr&gt;</code>:表格的一行，有几个<code>&lt;tr&gt;</code>就表示有几行。</li>
<li><code>&lt;td&gt;...&lt;/td&gt;</code>:表格的一列，一行中有几个<code>&lt;td&gt;</code>就表示这一行有几列。</li>
<li><code>&lt;th&gt;...&lt;/th&gt;</code>:表格的头部单元格,表格表头。</li>
<li>表格中列的个数，取决于一行中数据单元格的个数。</li>
</ol>
<p>注意：</p>
<ul>
<li>table表格在没有添加css样式之前，在浏览器中是没有表格线的。</li>
<li><code>&lt;th&gt;</code>中的表头，默认<strong>粗体</strong>并且<strong>居中</strong>显示。</li>
</ul>
<h4 id="14、-lt-caption-gt-为表格添加标题和摘要"><a href="#14、-lt-caption-gt-为表格添加标题和摘要" class="headerlink" title="14、&lt;caption&gt; 为表格添加标题和摘要"></a>14、<code>&lt;caption&gt;</code> 为表格添加标题和摘要</h4><p>标题:</p>
<p><strong>语法:</strong><code>&lt;caption&gt;title&lt;/caption&gt;</code></p>
<p>作用:用于描述表格内容，显示在表格上方</p>
<p>摘要:</p>
<p><strong>语法:</strong><code>&lt;table summary=&quot;表格简介文本&quot;&gt;</code></p>
<p>作用：摘要是不会在浏览器中显示出来的。作用是为了增加语义性。</p>
<h4 id="15、-lt-a-gt-链接到另外一个界面"><a href="#15、-lt-a-gt-链接到另外一个界面" class="headerlink" title="15、&lt;a&gt; 链接到另外一个界面"></a>15、<code>&lt;a&gt;</code> 链接到另外一个界面</h4><p>使用<code>&lt;a&gt;</code>标签可以实现超链接.</p>
<p><strong>语法:</strong><code>&lt;a href = &quot;目标网址&quot; title = &quot;鼠标滑过的文本&quot;&gt;链接显示的文本&lt;/a&gt;</code></p>
<p><a href = "目标网址" title = "鼠标滑过的文本">链接显的文本</a></p>
<p>这里的<code>title</code>属性的作用是: 鼠标滑过链接文字的时候，显示的内容。</p>
<p><strong>语法:</strong> <code>&lt;a href = &quot;目标网址&quot; title = &quot;鼠标滑过的文本&quot; target = &quot;_blank&quot;&gt;链接显示的文本&lt;/a&gt;</code></p>
<p>以上表示在新窗口中打开超链接</p>
<h4 id="16、-lt-mailto-gt-在网页中链接Email地址"><a href="#16、-lt-mailto-gt-在网页中链接Email地址" class="headerlink" title="16、&lt;mailto&gt; 在网页中链接Email地址"></a>16、<code>&lt;mailto&gt;</code> 在网页中链接Email地址</h4><p><code>&lt;a&gt;</code>标签还有一个作用是可以链接Email地址,使用mailto能让访问者便捷向网址管理者发生电子邮件。还可以用它做些其它事情。</p>
<p>如下：</p>
<p><table><br>    <tbody><br>        <tr><br>            <th>功能</th><br>            <th>关键字</th><br>            <th>功能详解</th><br>            <th>举例</th><br>        </tr><br>        <tr><br>            <th>邮箱地址</th><br>            <td>mailto:</td><br>            <th>浏览器自动调用默认的电子邮件程序，并在收件人中填上跳上收件人地址</th><br>            <th><code>&lt;a href=&quot;mailto: aa@163.com&quot;&gt;发送&lt;/a&gt;</code></th><br>        </tr><br>        <tr><br>            <th>抄送地址</th><br>            <td>cc=</td><br>            <th>在收件人地址后用cc=地址 ，可以填写抄送地址</th><br>            <th><code>&lt;a href=&quot;mailto: aa@163.com?cc=bb@163.com&quot;&gt;发送&lt;/a&gt;</code></th><br>        </tr><br>        <tr><br>            <th>密件抄送地址</th><br>            <td>bcc=</td><br>            <th>在收件人地址后用cc=地址 ，可以填写密件抄送地址</th><br>            <th><code>&lt;a href=&quot;mailto: aa@163.com?bcc=bb@163.com&quot;&gt;发送&lt;/a&gt;</code></th><br>        </tr><br>        <tr><br>            <th>多个收件人、抄送、密件抄送人</th><br>            <td>;</td><br>            <th>用分号隔开多个地址</th><br>            <th><code>&lt;a href=&quot;mailto: aa@163.com;bb@163.com&quot;&gt;发送&lt;/a&gt;</code></th><br>        </tr><br>        <tr><br>            <th>邮件主题</th><br>            <td>subject=</td><br>            <th>用subject= 添加邮件主题</th><br>            <th><code>&lt;a href=&quot;mailto: aa@163.com？subject＝发送电子邮件&quot;&gt;发送&lt;/a&gt;</code></th><br>        </tr><br>        <tr><br>            <th>邮件内容</th><br>            <td>body=</td><br>            <th>用body= 添加邮件内容</th><br>            <th><code>&lt;a href=&quot;mailto: aa@163.com？body= 邮件内容&quot;&gt;发送&lt;/a&gt;</code></th><br>        </tr><br>    </tbody></p>
<table>

<p>注意:如果<code>mailto</code>后面有多个参数的话，第一个参数必须以<code>？</code>开头 其它<code>&amp;</code>分开。</p>
<h4 id="17、-lt-img-gt-为网页插入图片"><a href="#17、-lt-img-gt-为网页插入图片" class="headerlink" title="17、&lt;img&gt; 为网页插入图片"></a>17、<code>&lt;img&gt;</code> 为网页插入图片</h4><p><strong>语法:</strong><code>&lt;img src&quot;图片地址&quot; alt= &quot;下载失败的替换文本&quot; title = “提示文本”&gt;</code></p>
<p>支持格式 : GIF PNG JPEG</p>
<h4 id="18、-lt-form-gt-与用户交互"><a href="#18、-lt-form-gt-与用户交互" class="headerlink" title="18、 &lt;form&gt;与用户交互"></a>18、 <code>&lt;form&gt;</code>与用户交互</h4><p><strong>语法:</strong><code>&lt;form method=&quot;传送方式&quot; action = “服务文件”&gt;</code></p>
<ol>
<li><code>&lt;form&gt;</code>: form 标签是成对出现的。</li>
<li><code>action</code>:浏览者输入的数据被传送到的地方，比如一个php页面</li>
<li><code>method</code>:数据的传输方式<code>get／post</code></li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//</div><div class="line">&lt;form method = &quot;post&quot; action = &quot;save.php&quot;&gt;</div><div class="line">	&lt;label for = &quot;username&quot;&gt;用户名:&lt;/label&gt;</div><div class="line">	&lt;input type = &quot;text&quot; name = &quot;username&quot;/&gt;</div><div class="line">	&lt;label for = &quot;pass&quot;&gt;密码:&lt;/label&gt;</div><div class="line">	&lt;input type = &quot;password&quot; name = &quot;pass&quot;/&gt;</div><div class="line">&lt;/form&gt;</div><div class="line">//</div></pre></td></tr></table></figure>
<form method = "post" action = "save.php"><br>    <label for = "username">用户名:</label><br>    <input type = "text" name = "username" value = "placeholder"/><br>    <label for = "pass">密码:</label><br>    <input type = "password" name = "pass" value = "placeholder"/><br></form>

<p>注意:</p>
<ul>
<li>所有表单控件(文本框、文本域、按钮、单选框、复选框等)都必须放在<code>&lt;form&gt;&lt;/form&gt;</code>之间。</li>
</ul>
<h5 id="文本输入框-lt-input-gt"><a href="#文本输入框-lt-input-gt" class="headerlink" title="文本输入框 &lt;input ... /&gt;"></a>文本输入框 <code>&lt;input ... /&gt;</code></h5><p><code>&lt;input type = &quot;text&quot; name = &quot;username&quot; value = &quot;placeholder&quot;/&gt;</code></p>
<p>其中type ＝ “text”时: <strong>文本输入框</strong></p>
<p>其中type ＝ “password”时: <strong>密码输入框</strong></p>
<p>name: 为文本框命名</p>
<p>value: 默认值</p>
<h5 id="文本域-lt-textarea-gt-lt-textarea-gt"><a href="#文本域-lt-textarea-gt-lt-textarea-gt" class="headerlink" title="文本域 &lt;textarea&gt;&lt;/textarea&gt;"></a>文本域 <code>&lt;textarea&gt;&lt;/textarea&gt;</code></h5><p><strong>语法:</strong><code>&lt;textarea  rows=&quot;行数&quot; cols=&quot;列数&quot;&gt;默认文本&lt;/textarea&gt;</code></p>
<p><code>cols</code>:列数</p>
<p><code>rows</code>:行数</p>
<h5 id="单选框-和-复选框"><a href="#单选框-和-复选框" class="headerlink" title="单选框 和 复选框"></a>单选框 和 复选框</h5><p><strong>语法:</strong> <code>&lt;input type=&quot;radio/checkbox&quot; value = &quot;值&quot; name = &quot;名称&quot; checked = &quot;checked&quot; /&gt;</code></p>
<ol>
<li><code>type</code> radio时，单选框 ，checkbox时，多选框。</li>
<li><code>value</code>:提交数据到服务器的值</li>
<li><code>name</code>:为控件命名</li>
<li><code>checked</code>:当设置 checked=”checked” 时，该选项被默认选中</li>
</ol>
<p>注意:<strong>同一组</strong>的单选按钮，name 取值<strong>一定要一致</strong>，比如上面例子为同一个名称“radioLove”，这样同一组的单选按钮才可以起到单选的作用。</p>
<h5 id="下拉列表框"><a href="#下拉列表框" class="headerlink" title="下拉列表框"></a>下拉列表框</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;form action=&quot;save.php&quot; method=&quot;post&quot; &gt;</div><div class="line">    &lt;label&gt;爱好:&lt;/label&gt;</div><div class="line">    &lt;select&gt;</div><div class="line">      &lt;option value=&quot;看书&quot;&gt;看书&lt;/option&gt;</div><div class="line">      &lt;option value=&quot;旅游&quot;&gt;旅游&lt;/option&gt;</div><div class="line">      &lt;option value=&quot;运动&quot;&gt;运动&lt;/option&gt;</div><div class="line">      &lt;option value=&quot;购物&quot;&gt;购物&lt;/option&gt;</div><div class="line">    &lt;/select&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
<form action="save.php" method="post" ><br>    <label>爱好:</label><br>    <select><br>      <option value="看书">看书</option><br>      <option value="旅游">旅游</option><br>      <option value="运动">运动</option><br>      <option value="购物" selected = "selected">购物</option><br>    </select><br></form>

<ol>
<li>value <code>&lt;option value = “提交值”&gt;选项&lt;／option&gt;</code>  向服务器提交的值</li>
<li>selected 默认选中</li>
</ol>
<p>下拉列表也可以进行多选操作，在<code>&lt;select&gt;</code>标签中设置<code>multiple=&quot;multiple&quot;</code>属性，就可以实现多选功能，在 widows 操作系统下，进行多选时按下<code>Ctrl</code>键同时进行单击（在 Mac下使用 <code>Command</code> +单击），可以选择多个选项。如下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;form action=&quot;save.php&quot; method=&quot;post&quot; &gt;</div><div class="line">    &lt;label&gt;爱好:&lt;/label&gt;</div><div class="line">    &lt;select multiple = &quot;multiple&quot;&gt;</div><div class="line">      &lt;option value=&quot;看书&quot;&gt;看书&lt;/option&gt;</div><div class="line">      &lt;option value=&quot;旅游&quot;&gt;旅游&lt;/option&gt;</div><div class="line">      &lt;option value=&quot;运动&quot;&gt;运动&lt;/option&gt;</div><div class="line">      &lt;option value=&quot;购物&quot; selected = &quot;selected&quot;&gt;购物&lt;/option&gt;</div><div class="line">    &lt;/select&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
<form action="save.php" method="post" ><br>    <label>爱好:</label><br>    <select multiple = "multiple"><br>      <option value="看书">看书</option><br>      <option value="旅游">旅游</option><br>      <option value="运动">运动</option><br>      <option value="购物" selected = "selected">购物</option><br>    </select><br></form>


<h5 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h5><p><strong>语法:</strong> <code>&lt;input type=&quot;submit&quot; value = &quot;按钮&quot; /&gt;</code></p>
<input type="submit" value = "按钮" name = "名称" checked = "checked" />

<h5 id="重置按钮"><a href="#重置按钮" class="headerlink" title="重置按钮"></a>重置按钮</h5><p><strong>语法:</strong> <code>&lt;input type=&quot;reset&quot; value = &quot;重置&quot; /&gt;</code></p>
<input type="reset" value = "重置" />

<h4 id="表单中的label标签"><a href="#表单中的label标签" class="headerlink" title="表单中的label标签"></a>表单中的label标签</h4><p>label标签不会向用户呈现任何特殊效果，它的作用是为鼠标用户改进了可用性。如果你在 label 标签内点击文本，就会触发此控件。就是说，当用户单击选中该label标签时，浏览器就会自动将焦点转到和标签相关的表单控件上（就自动选中和该label标签相关连的表单控件上）。</p>
<p><strong>语法:</strong> <code>&lt;label for=&quot;控件id名称&quot;&gt;</code></p>
<p>注意：标签的<code>for</code>属性中的值应当与相关控件的<code>id</code>属性一定要相同。</p>
<form><br>  <label for="male">男</label><br>  <input type="radio" name="gender" id="male" /><br>  <label for="female">女</label><br>  <input type="radio" name="gender" id="female" /><br>  <label for="email">输入你的邮箱地址</label><br>  <input type="email" id="email" placeholder="Enter email"><br></form>


<h4 id="总结input标签的type属性-资料"><a href="#总结input标签的type属性-资料" class="headerlink" title="总结input标签的type属性 资料"></a>总结input标签的<code>type</code>属性 <a href="http://www.w3school.com.cn/html5/att_input_type.asp"><em>资料</em></a></h4><ul>
<li><code>text</code>: 文本输入框</li>
<li><code>password</code>: 密码输入框</li>
<li><code>radio</code>:单选框</li>
<li><code>checkbox</code>:多选框</li>
<li><code>submit</code>:提交按钮</li>
<li><code>reset</code>:重置按钮</li>
</ul>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/8A576722-8BC1-46CF-9981-5E922715E6E6.png" width = "400" height="600"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript和Native的交互]]></title>
      <url>https://CepheusSun.github.io/2016/08/25/JavaScript%E5%92%8CNative%E7%9A%84%E4%BA%A4%E4%BA%92/</url>
      <content type="html"><![CDATA[<p>iOS Dev难免会遇上需要和JavaScript交互的时候，我是这么做的。<br><a id="more"></a></p>
<h2 id="JavaScriptCore"><a href="#JavaScriptCore" class="headerlink" title="JavaScriptCore"></a>JavaScriptCore</h2><p>JSC是webkit的一部分，主要是对JS进行解析和提供执行环境,并且，他是开源的。<br><a href="https://github.com/phoboslab/JavaScriptCore-iOS"><em>JavaScriptCore源码</em></a><br>在iOS7推出后，JSC极大的方便了开发者对js的操作。在此之前通用的方法都是是用<code>webview</code>里面的一个函数<code>stringByEvaluatingJavaScriptFromString</code>,JS 对Native的回调都是通过拦截URL的方式进行的。</p>
<p>JSC中和我们相关的类就大概只有一下5个。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">#ifndef JavaScriptCore_h</div><div class="line">#define JavaScriptCore_h</div><div class="line"></div><div class="line">#include &lt;JavaScriptCore/JavaScript.h&gt;</div><div class="line">#include &lt;JavaScriptCore/JSStringRefCF.h&gt;</div><div class="line"></div><div class="line">#if defined(__OBJC__) &amp;&amp; JSC_OBJC_API_ENABLED</div><div class="line"></div><div class="line">#import &quot;JSContext.h&quot;</div><div class="line">#import &quot;JSValue.h&quot;</div><div class="line">#import &quot;JSManagedValue.h&quot;</div><div class="line">#import &quot;JSVirtualMachine.h&quot;</div><div class="line">#import &quot;JSExport.h&quot;</div><div class="line"></div><div class="line">#endif</div><div class="line"></div><div class="line">#endif /* JavaScriptCore_h */</div></pre></td></tr></table></figure>
<h3 id="JSContext"><a href="#JSContext" class="headerlink" title="JSContext"></a>JSContext</h3><p>JS执行的环境，同时也通过JSVirtualMachine管理着所有对象的生命周期，每个JSValue都和JSContext相关联并且强引用context。</p>
<h3 id="JSValue"><a href="#JSValue" class="headerlink" title="JSValue"></a>JSValue</h3><p>JS对象在JSVirtualMachine中的一个强引用，其实就是Hybird对象。我们对JS的操作都是通过它。并且每个JSValue都是强引用一个context。同时，OC和JS对象之间的转换也是通过它，相应的类型转换如下：</p>
<table>
<thead>
<tr>
<th>Obj-C type</th>
<th style="text-align:center">JS type</th>
</tr>
</thead>
<tbody>
<tr>
<td>nil</td>
<td style="text-align:center">undefined</td>
</tr>
<tr>
<td>NSNull</td>
<td style="text-align:center">null</td>
</tr>
<tr>
<td>NSString</td>
<td style="text-align:center">string</td>
</tr>
<tr>
<td>NSNumber</td>
<td style="text-align:center">number,boolean</td>
</tr>
<tr>
<td>NSDictionary</td>
<td style="text-align:center">Object object</td>
</tr>
<tr>
<td>NSArray</td>
<td style="text-align:center">Object object</td>
</tr>
<tr>
<td>NSDate</td>
<td style="text-align:center">Date object</td>
</tr>
<tr>
<td>NSBlock</td>
<td style="text-align:center">Function  object</td>
</tr>
<tr>
<td>id</td>
<td style="text-align:center">Wrapper object</td>
</tr>
<tr>
<td>Class</td>
<td style="text-align:center">Constructor object</td>
</tr>
</tbody>
</table>
<h3 id="JSManagedValue"><a href="#JSManagedValue" class="headerlink" title="JSManagedValue"></a>JSManagedValue</h3><p>JS和OC对象的内存管理辅助对象。由于JS内存管理是垃圾回收，并且JS中的对象都是强引用，而OC是引用计数。如果双方相互引用，势必会造成循环引用，而导致内存泄露。我们可以用JSManagedValue保存JSValue来避免。</p>
<h3 id="JSVirtualMachine"><a href="#JSVirtualMachine" class="headerlink" title="JSVirtualMachine"></a>JSVirtualMachine</h3><p>JS运行的虚拟机，有独立的堆空间和垃圾回收机制。</p>
<h3 id="JSExport"><a href="#JSExport" class="headerlink" title="JSExport"></a>JSExport</h3><p>一个协议，如果JS对象想直接调用OC对象里面的方法和属性，那么这个OC对象只要实现这个JSExport协议就可以了。</p>
<h2 id="交互过程"><a href="#交互过程" class="headerlink" title="交互过程"></a>交互过程</h2><p>分别是OC -&gt; JS 、 JS -&gt; OC</p>
<p>首先在工程中引入JSC。</p>
<p><img src= "http://ocg4av0wv.bkt.clouddn.com/E203DAC8-DCB9-4E98-95E0-FA250258283C.png" width = 500 height = 400/></p>
<h3 id="JS-gt-OC"><a href="#JS-gt-OC" class="headerlink" title="JS -&gt; OC"></a>JS -&gt; OC</h3><p>这种情况的使用的应该是最多的, 可能你在一个H5页面中要跳转到native页面等等。</p>
<p>我写了一个Demo,并写了一个相关的html代码。</p>
<p>步骤：</p>
<h4 id="1、定义一个协议PsJsObjcDelegate"><a href="#1、定义一个协议PsJsObjcDelegate" class="headerlink" title="1、定义一个协议PsJsObjcDelegate"></a>1、定义一个协议<code>PsJsObjcDelegate</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@protocol PsJsObjcDelegate &lt;JSExport&gt;</div><div class="line">@end</div></pre></td></tr></table></figure>
<h4 id="2、定义一个遵守这个协议的Object-JsObjcBridge"><a href="#2、定义一个遵守这个协议的Object-JsObjcBridge" class="headerlink" title="2、定义一个遵守这个协议的Object JsObjcBridge"></a>2、定义一个遵守这个协议的Object <code>JsObjcBridge</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@interface JsObjcBridge : NSObject &lt;PsJsObjcDelegate&gt;</div><div class="line">@property (nonatomic, weak) JSContext *jsContext;</div><div class="line">@property (nonatomic, weak) UIWebView *webView;</div><div class="line">@property (nonatomic, copy) void (^pSJsObjcModelBlock)(NSInteger type , NSArray *param);</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>因为我选择了通过block来进行这个class 和 vc之间的调用,所以我定义了一个block<code>property</code>来进行这个对象和vc之间的调用。</p>
<h4 id="3、协议方法-注意这里的方法名要和js中的一致"><a href="#3、协议方法-注意这里的方法名要和js中的一致" class="headerlink" title="3、协议方法 (注意这里的方法名要和js中的一致)"></a>3、协议方法 (注意这里的方法名要和js中的一致)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- (void)jsCallNativeWithParam:(NSDictionary *)param;//无返回值</div><div class="line">- (NSString *)jsCallNativeWithParamWithReturn:(NSDictionary *)param;//有返回值</div></pre></td></tr></table></figure>
<h4 id="4、在-JsObjcBridge中实现这个方法"><a href="#4、在-JsObjcBridge中实现这个方法" class="headerlink" title="4、在 JsObjcBridge中实现这个方法"></a>4、在 <code>JsObjcBridge</code>中实现这个方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- (void)jsCallNativeWithParam:(NSDictionary *)param&#123;</div><div class="line">    self.pSJsObjcBridgeBlock(param);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="5、把那个｀-html｀文件导入工程"><a href="#5、把那个｀-html｀文件导入工程" class="headerlink" title="5、把那个｀.html｀文件导入工程"></a>5、把那个｀.html｀文件导入工程</h4><p><img src= "http://ocg4av0wv.bkt.clouddn.com/03FD2A40-D380-46A7-8221-12FC1247B8F0.png" width = 300 height = 400/></p>
<h4 id="6、在Controller中编码"><a href="#6、在Controller中编码" class="headerlink" title="6、在Controller中编码"></a>6、在Controller中编码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">#pragma mark - UIWebViewDelegate</div><div class="line">- (void)webViewDidFinishLoad:(UIWebView *)webView &#123;</div><div class="line">    self.jsContext = [webView valueForKeyPath:@&quot;documentView.webView.mainFrame.javaScriptContext&quot;];</div><div class="line">    JsObjcBridge *model              = [[JsObjcBridge alloc] init];</div><div class="line">    self.jsContext[@&quot;JSInteractive&quot;] = model;</div><div class="line">    model.jsContext                  = self.jsContext;</div><div class="line">    model.webView                    = self.webView;</div><div class="line">    </div><div class="line">    model.pSJsObjcBridgeBlock = ^(NSDictionary *param) &#123;</div><div class="line">        NSLog(@&quot;%@&quot;, param[@&quot;vc&quot;]);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    model.pSJsObjcBridgeBlockWithReturn = ^(NSDictionary *param) &#123;</div><div class="line">        return param[@&quot;vc&quot;];</div><div class="line">    &#125;;</div><div class="line">    self.jsContext.exceptionHandler = ^(JSContext *context, JSValue *exceptionValue) &#123;</div><div class="line">        context.exception = exceptionValue;</div><div class="line">        NSLog(@&quot;异常信息：%@&quot;, exceptionValue);</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="OC-gt-JS"><a href="#OC-gt-JS" class="headerlink" title="OC -&gt; JS"></a>OC -&gt; JS</h3><p>一种是向js 中注入新的js代码、一种是调用js中已有方法。</p>
<p>由于我实在想不到好的应用场景，所以就只能在一个导航栏中左右分别放两个item</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">self.navigationItem.rightBarButtonItem = [[UIBarButtonItem alloc] initWithTitle:@&quot;callJS&quot; style:UIBarButtonItemStylePlain target:self action:@selector(objcCallJsFunction)];</div><div class="line">self.navigationItem.leftBarButtonItem = [[UIBarButtonItem alloc] initWithTitle:@&quot;injectJS&quot; style:UIBarButtonItemStylePlain target:self action:@selector(objcInjectJsFunction)];</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (void)objcCallJsFunction&#123;</div><div class="line">    [self.jsContext[@&quot;jsFunc&quot;] callWithArguments:nil];</div><div class="line">&#125;</div><div class="line">- (void)objcInjectJsFunction&#123;</div><div class="line">    NSString *js = @&quot;function add(a,b) &#123;alert(a+b)&#125;&quot;;</div><div class="line">    [self.jsContext evaluateScript:js];</div><div class="line">    [self.jsContext[@&quot;add&quot;] callWithArguments:@[@2,@3]];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当然你要调用或者注入的js function 是有返回值的那么上面的一句话就应该改成这样了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">JSValue *n = [self.jsContext[@&quot;add&quot;] callWithArguments:@[@2,@3]];</div></pre></td></tr></table></figure></p>
<h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><p>写博文的时候查阅相关资料发现这里还是可能会出现一些循环引用的问题。然后简单整理了一下。</p>
<ol>
<li>OC 的 <code>ARC</code> 和 JS的 <code>GC</code></li>
<li>正常情况下<code>GC</code>都会打破循环引用</li>
</ol>
<p>特殊情况：</p>
<ul>
<li>不要在block里面直接使用context，或者使用外部的<code>JSValue</code>对象。</li>
<li>OC对象不要用属性直接保存<code>JSValue</code>对象，因为这样太容易循环引用了。</li>
<li>不要在不同的 <code>JSVirtualMachine</code> 之间进行传递JS对象。</li>
</ul>
<h2 id="结束的话"><a href="#结束的话" class="headerlink" title="结束的话"></a>结束的话</h2><p>不多说了,只是简单的实现了一下,肯定还是有很多的东西没有考虑到,以后遇到了再完善吧。<a href="https://github.com/ProgramerSunny/jsCallObjc"><em>demo地址</em></a>。在写这个博客的过程中思考了许多,其实在具体场景中还是有很多东西没有想到。而且在代码中调用的方法什么的卸写在一个<code>plist</code>里面，把各种规则放进去,这样更利于维护,和与<code>sever</code>的交互。这些可能都需要去思考的问题。原谅我比较low，并没有在项目中有过这样的应用。吾将上下而求索…</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[我是这样格式化我的代码]]></title>
      <url>https://CepheusSun.github.io/2016/08/19/%E6%88%91%E6%98%AF%E8%BF%99%E6%A0%B7%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%88%91%E7%9A%84%E4%BB%A3%E7%A0%81/</url>
      <content type="html"><![CDATA[<p>这篇文章是我整理的一份代码格式化的东西, 和一份我正在用的clang-format的配置文件。</p>
<p>clang-format 之类的插件在 Xcode8 上已经不能用了,所以… 呵呵</p>
<a id="more"></a>
<h3 id="一、前面的话"><a href="#一、前面的话" class="headerlink" title="一、前面的话"></a>一、前面的话</h3><p>前段时间整理一系列公司的文档,写到代码编写规范和CodeReview规范中都提到代码格式化的问题。很多人都说能都自动化的步骤都应该通过自动化来解决,所以这个时候想到了以前一直舍不得用的clang-format。想起来还是有点惭愧，自从看了sunnyxx的《招聘一个靠谱的iOS》之后就仿佛也有了代码洁癖，但是一直也没有去整理自己的代码编写规范这些东西。后来看到了google的规范文档,感觉越来越想弄一下这个东西。</p>
<p><img src="http://i2.buimg.com/567571/33caa8485b3664b5.png" alt=""></p>
<h3 id="二、clang-format"><a href="#二、clang-format" class="headerlink" title="二、clang-format"></a>二、clang-format</h3><p><a href="https://github.com/travisjeffery/ClangFormat-Xcode"><em>clang-format</em></a><br>是一款Xcode的一个非常好用的插件。具体安装可以去GitHub查看官方的readme。</p>
<h3 id="三、-install-clang-format"><a href="#三、-install-clang-format" class="headerlink" title="三、 install clang-format"></a>三、 install clang-format</h3><p>官方的readme是英文的,由于我用上它和写这篇文章已经有一段时间了，我就简单的看着官方文档整理一下步骤吧！<br><a href="https://github.com/travisjeffery/ClangFormat-Xcode"><em>原文地址</em></a></p>
<ol>
<li>下载或者克隆这个文件<br><img src="http://i4.buimg.com/567571/f6fde5feb67252db.png" alt=""></li>
<li>像运行普通项目一样运行一下</li>
<li>cmd + q 完全退出一下Xcode</li>
<li>重新打开你的项目,应该会让你选择是否load这个插件。不要选skip。</li>
<li>没有第五,你已经装上这个插件了</li>
</ol>
<h3 id="四、How-to-init"><a href="#四、How-to-init" class="headerlink" title="四、How to init"></a>四、How to init</h3><p>在工程目录或者workspace目录下创建一个<code>.clang-format</code>文件<br><img src="http://i4.buimg.com/567571/1da53f4cd1bc9633.png" alt=""><br><img src="http://i4.buimg.com/567571/b5f72a18bea10286.png" alt=""><br><img src="http://i4.buimg.com/567571/20151db030f769c4.png" alt=""><br><img src="http://i4.buimg.com/567571/1214171b519c680c.png" alt=""></p>
<p>完成之后你会发现这个文件在你工程文件中是没有的。如果你在桌面上将任意文件改成.clang-format之后就会出现这个。<br><img src="http://i1.buimg.com/567571/12c3424371497a27.png" alt=""><br>其实还好，只需要打开终端</p>
<p>显示隐藏文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">defaults write com.apple.finder AppleShowAllFiles -bool true &amp;&amp; killall Finder</div></pre></td></tr></table></figure></p>
<p>不显示隐藏文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">defaults write com.apple.finder AppleShowAllFiles -bool false &amp;&amp; killall Finder</div></pre></td></tr></table></figure></p>
<p>通过两句命令就可以打开了。这个时候你可以通过vim打开并且编辑,或者在刚刚在Xcode中创建的时候编辑,不过我通常都是通过sublime来编辑这些东西的。</p>
<p>这个只是一个配置文件,这个文件是可以随意拖动的。</p>
<p>由于公司目前的规范是我写的,所以我也直接把这个文件放在了根目录中</p>
<ol>
<li>打开Finder</li>
<li>cmd＋shift＋g<br><img src="http://i1.buimg.com/567571/65f27507e6dc1145.png" alt=""></li>
<li>前往,前题是你刚过显示了隐藏文件,不然你看到的是很boring的内容</li>
<li>找到<code>.clang-format</code>文件,右键,，选择sublime text<br><img src="http://i4.buimg.com/567571/f2de4faccb5c7098.jpg" alt=""></li>
</ol>
<h3 id="五、How-to-config"><a href="#五、How-to-config" class="headerlink" title="五、How to config"></a>五、How to config</h3><p>这个就简单了,也没什么好说的,我的大概就是这个样子。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"># Custom options in the special build of clang-format (these are not standard options)</div><div class="line"># IndentNestedBlocks: false</div><div class="line"># AllowNewlineBeforeBlockParameter: false</div><div class="line">Language:        Cpp</div><div class="line"># BasedOnStyle:  Google</div><div class="line">AccessModifierOffset: -1</div><div class="line">ConstructorInitializerIndentWidth: 4</div><div class="line">SortIncludes: false</div><div class="line"></div><div class="line">AlignConsecutiveAssignments: true</div><div class="line">AlignAfterOpenBracket: true</div><div class="line">AlignEscapedNewlinesLeft: true</div><div class="line">AlignOperands: false</div><div class="line">AlignTrailingComments: true</div><div class="line"></div><div class="line">AllowAllParametersOfDeclarationOnNextLine: false</div><div class="line">AllowShortBlocksOnASingleLine: false</div><div class="line">AllowShortCaseLabelsOnASingleLine: false</div><div class="line">AllowShortFunctionsOnASingleLine: true</div><div class="line">AllowShortIfStatementsOnASingleLine: true</div><div class="line">AllowShortFunctionsOnASingleLine: All</div><div class="line">AllowShortLoopsOnASingleLine: true</div><div class="line"></div><div class="line">AlwaysBreakAfterDefinitionReturnType: false</div><div class="line">AlwaysBreakTemplateDeclarations: false</div><div class="line">AlwaysBreakBeforeMultilineStrings: false</div><div class="line"></div><div class="line">BreakBeforeBinaryOperators: None</div><div class="line">BreakBeforeTernaryOperators: false</div><div class="line">BreakConstructorInitializersBeforeComma: false</div><div class="line"></div><div class="line">BinPackArguments: true</div><div class="line">BinPackParameters: true</div><div class="line">ColumnLimit: 0</div><div class="line">ConstructorInitializerAllOnOneLineOrOnePerLine: true</div><div class="line">DerivePointerAlignment: false</div><div class="line">ExperimentalAutoDetectBinPacking: false</div><div class="line">IndentCaseLabels: true</div><div class="line">IndentWrappedFunctionNames: false</div><div class="line">IndentFunctionDeclarationAfterType: false</div><div class="line">MaxEmptyLinesToKeep: 2</div><div class="line">KeepEmptyLinesAtTheStartOfBlocks: false</div><div class="line">NamespaceIndentation: Inner</div><div class="line">ObjCBlockIndentWidth: 4</div><div class="line">ObjCSpaceAfterProperty: true</div><div class="line">ObjCSpaceBeforeProtocolList: true</div><div class="line">PenaltyBreakBeforeFirstCallParameter: 10000</div><div class="line">PenaltyBreakComment: 300</div><div class="line">PenaltyBreakString: 1000</div><div class="line">PenaltyBreakFirstLessLess: 120</div><div class="line">PenaltyExcessCharacter: 1000000</div><div class="line">PenaltyReturnTypeOnItsOwnLine: 200</div><div class="line">PointerAlignment: Right</div><div class="line">SpacesBeforeTrailingComments: 1</div><div class="line">Cpp11BracedListStyle: true</div><div class="line">Standard:        Auto</div><div class="line">IndentWidth:     4</div><div class="line">TabWidth:        8</div><div class="line">UseTab:          Never</div><div class="line">BreakBeforeBraces: Custom</div><div class="line">BraceWrapping: </div><div class="line">    AfterClass: true</div><div class="line">    AfterControlStatement: false</div><div class="line">    AfterEnum: false</div><div class="line">    AfterFunction: false</div><div class="line">    AfterNamespace: true</div><div class="line">    AfterObjCDeclaration: true</div><div class="line">    AfterStruct: false</div><div class="line">    AfterUnion: false</div><div class="line">    BeforeCatch: false</div><div class="line">    BeforeElse: false</div><div class="line">    IndentBraces: false</div><div class="line"></div><div class="line">SpacesInParentheses: false</div><div class="line">SpacesInSquareBrackets: false</div><div class="line">SpacesInAngles:  false</div><div class="line">SpaceInEmptyParentheses: false</div><div class="line">SpacesInCStyleCastParentheses: false</div><div class="line">SpaceAfterCStyleCast: false</div><div class="line">SpacesInContainerLiterals: true</div><div class="line">SpaceBeforeAssignmentOperators: true</div><div class="line"></div><div class="line">ContinuationIndentWidth: 4</div><div class="line">CommentPragmas:  &apos;^ IWYU pragma:&apos;</div><div class="line">ForEachMacros:   [ foreach, Q_FOREACH, BOOST_FOREACH ]</div><div class="line">SpaceBeforeParens: ControlStatements</div><div class="line">DisableFormat:   false</div></pre></td></tr></table></figure>
<p><a href="http://clang.llvm.org/docs/ClangFormatStyleOptions.html"><em>英文版 Clang-Format Style Options</em></a> 自己定制的话，看看这个吧！<br><a href="http://www.jianshu.com/p/542e535117eb"><em>ClangFormat语法1.0</em></a> 简书上有一个中文版的,好像不是特别完整,一般自己玩玩也是够了.</p>
<h3 id="六、How-to-use"><a href="#六、How-to-use" class="headerlink" title="六、How to use"></a>六、How to use</h3><ol>
<li>Xcode-Edit-ClangFormat-File选项</li>
<li>选择你想要格式化的代码，然后Edit-ClangFormat-确认File为勾选状态-Format Selected Text</li>
</ol>
<p>设置快捷键</p>
<p>系统偏好设置－键盘－快捷键－应用快捷键- +<br><img src="http://i2.buimg.com/567571/586f472600761b93.jpg" alt=""><br>我自己设置的是<code>option</code>＋<code>,</code> </p>
<h3 id="七、Ending"><a href="#七、Ending" class="headerlink" title="七、Ending"></a>七、Ending</h3><p>作为代码编写者，编写让自己舒服，让reviewer舒服的代码是我们的责任, 在编码过程中难免会出现时间紧任务重的情况，作为软件开发人员，耗费大量的精力去调整自己的代码格式是非常不值得的事情。况且在团队协同开发的时候如果自己编写的代码不符合团队规范，即使能够很好的完成工作，那也是不道德的事情。通过一个简单的工作一劳永逸的解决这个问题，又何乐而不为呢？</p>
<h3 id="八、The-next"><a href="#八、The-next" class="headerlink" title="八、The next"></a>八、The next</h3><p>最近在看《重构》这本书，虽然是java写的，希望自己能在学习之后能够更快速更科学的重构项目，重构代码。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[简单对比了一下Delegate和Block的效率]]></title>
      <url>https://CepheusSun.github.io/2016/08/10/%E7%AE%80%E5%8D%95%E5%AF%B9%E6%AF%94%E4%BA%86%E4%B8%80%E4%B8%8BDelegate%E5%92%8CBlock%E7%9A%84%E6%95%88%E7%8E%87/</url>
      <content type="html"><![CDATA[<p>最近公司的项目完成了，简单的写了个小demo来验证一下block和delegate的效率问题。</p>
<a id="more"></a>
<h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><blockquote>
<p>开始之前还是麻烦直接先看一些结论吧！</p>
</blockquote>
<p>终于，公司的项目给运营进行验证测试了，忙了那么久都没有时间学点新的东西。又倒腾了点新的东西出来，python啊，Go啊，然后感觉需要学习的东西还有很多，自己的能力也不够。买了几本书《Objective—C 高级编程 iOS与OS X多线程和内存管理》、 《重构》、《编程珠玑》….也没有时间看，刚刚才把OC的内存管理看了一遍。</p>
<p>一直在水各种qq群，然后有人在问<code>block</code>怎么用什么什么的，然后在群里就在讨论<code>block</code>和<code>delegate</code>，然后说为什么很多第三方库都是用的<code>delegate</code>，apple自带的控件也全都是用的<code>delegate</code>。</p>
<p>刚刚开始学<code>block</code>的时候，感觉<code>block</code>特别的难，什么鬼都不知道是怎么回事，代码索引也没有。所以我给出的第一个答案就是实用delegate至少在代码可读性上会好很多。</p>
<p>然后在简书看到一篇文章<a href="http://www.jianshu.com/p/bbccac805641"><em>block和delegate傻傻分不清楚</em></a></p>
<blockquote>
<p>由此我们可以看到delegate运行成本低，block成本很高。block出栈需要将使用的数据从栈内存拷贝到堆内存，当然对象的话就是加计数，使用完或者block置nil后才消除；delegate只是保存了一个对象指针，直接回调，没有额外消耗。相对C的函数指针，只多做了一个查表动作 。</p>
</blockquote>
<p>自己想了一下确实是这样的。</p>
<p>后来突然想到了自己一起踩过的坑，由于一直都有使用instrument或者MLeaksFinder来检查内存泄漏的习惯，所以在发现MJRefresh的时候发现内存泄漏，这个时候才发现之前使用block的时候并没有使用<code>weakSelf</code> 和 <code>strongSelf</code> 所以…<br>这就能够很好的解释为什么很多第三方库都会使用<code>delegate</code>而不是<code>block</code>了，毕竟对于目前的iOS市场，充斥着大量新手iOSer，如果使用block的话，第一会增加小白的使用成本，第二虽然不会立马造成crash，但如果不使用<code>weakSelf</code> 和 <code>strongSelf</code>的话，内存无法释放，对于那些写库的大神来说，应该是很难容忍的吧。</p>
<p>所以虽然我在项目中也会大量的使用<code>block</code>（主要是开发效率的提升，毕竟用<code>delegate</code>比较麻烦），但是对比<code>delegate</code>和<code>block</code>，<code>delegate</code>至少在以下三点比<code>block</code>好:</p>
<ol>
<li>代码的可读性。</li>
<li>运行效率。</li>
<li>使用<code>block</code>需要时刻预防循环引用。</li>
</ol>
<p>对于第四点,我想delegate作为一个很经典的设计模式，相比较于block出现的比较早。</p>
<p>作为iOS4的新特性，block最开始，现在可能也最常见的出现在<code>UIView animateWithDuration</code> 和 数组的<code>enumeratedObjectsUsingBlock</code> 方法中。</p>
<p>1</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[UIView animateWithDuration:2.0f animations:^&#123;</div><div class="line">   //do somethings </div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>2</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[self.dataSource enumerateObjectsUsingBlock:^(id  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) &#123;</div><div class="line">    NSLog(@&quot;%@,%@&quot;,obj,@(idx));</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>第二种作为枚举遍历法，被广泛的使用，用以替换之前或者现在都用的 <code>for</code> <code>forin</code>两个循环办法，而这个方法查阅文档之后发现是遵循了<code>NSFastEnumeration</code>这个协议。而这个协议直有下面一个方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(id __unsafe_unretained [])buffer count:(NSUInteger)len;</div></pre></td></tr></table></figure>
<p>这里面的实现原理，并不是本文的讨论范围,这里的block虽然能够代码巨大的效率提升，但也没办法跟delegate进行比较，而且这个应该也是算法的提升吧。如果对这个东西敢兴趣，也可以去看看巧大的文章，我记得他对这个有过深入的研究。</p>
<p>刚刚提到的三点，第一点可能没有办法去验证，第三点可以自己写一个block然后在这个block里面使用<code>self</code>然后再调用这个block，在看这个对象能不能<code>dealloc</code></p>
<p>对于第二点，我大胆的写了一个demo，这也是我最常使用block的场景：通过tableviewcell上的button回调点击时间到controller中。</p>
<p>我在controller中添加一个tableview实现了一些基本的代码之后，为了验证这个问题，我有自定义了一个<code>UITableViewCell</code> </p>
<p><img src="http://i1.piimg.com/567571/1196bd9c84116dd0.png" alt=""></p>
<p>通过拖线</p>
<p><img src="http://i1.piimg.com/567571/70c46c66aad2fecf.png" alt=""></p>
<p>实现了一下两个方法，分别通过block 和delegate 回调了10000次。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- (IBAction)blockAction:(id)sender &#123;</div><div class="line">    for (int i = 0; i &lt; 10000; i++) &#123;</div><div class="line">        self.blk();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">- (IBAction)delegateAction:(id)sender &#123;</div><div class="line">    for (int i = 0; i &lt; 10000; i++) &#123;</div><div class="line">        [self.delegate foocellDelegateButtonClicked];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在自定义cell的<code>.h</code>中声明了一个<code>protocol</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@protocol FooCellDelegate &lt;NSObject&gt;</div><div class="line">@required</div><div class="line">- (void)foocellDelegateButtonClicked;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>和一个<code>block</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">typedef void (^blk_t)(void);</div></pre></td></tr></table></figure>
<p>我们看一下整个<code>.h</code>文件中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">#import &lt;UIKit/UIKit.h&gt;</div><div class="line"></div><div class="line">typedef void (^blk_t)(void);</div><div class="line"></div><div class="line">@protocol FooCellDelegate &lt;NSObject&gt;</div><div class="line"></div><div class="line">@required</div><div class="line"></div><div class="line">- (void)foocellDelegateButtonClicked;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@interface FooCell : UITableViewCell</div><div class="line"></div><div class="line">@property (nonatomic, copy) blk_t blk;</div><div class="line"></div><div class="line">@property (nonatomic, weak) id&lt;FooCellDelegate&gt; delegate;</div><div class="line"></div><div class="line">+ (instancetype)cellWithTableView:(UITableView *)tableView;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>然后在controller中分别接受回调</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath &#123;</div><div class="line">    return (&#123;</div><div class="line">        FooCell *cell = [FooCell cellWithTableView:tableView];</div><div class="line">        cell.delegate = self;</div><div class="line">        cell.blk = ^&#123;</div><div class="line">            NSLog(@&quot;block&quot;);</div><div class="line">        &#125;;</div><div class="line">        cell;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)foocellDelegateButtonClicked &#123;</div><div class="line">    NSLog(@&quot;delegate&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码部分写完了,然后简单的运行了一下,结果分别是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">2016-08-10 14:53:00.466 IB[4649:179409] block</div><div class="line">.</div><div class="line">.</div><div class="line">.</div><div class="line">2016-08-10 14:53:02.926 IB[4649:179409] block</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">2016-08-10 14:53:50.639 IB[4649:179409] delegate</div><div class="line">.</div><div class="line">.</div><div class="line">.</div><div class="line">2016-08-10 14:53:54.325 IB[4649:179409] delegate</div></pre></td></tr></table></figure>
<p>结果还是很直观的<code>2.926</code> - <code>0.466</code>  对比 <code>54.325</code> - <code>50.639</code><br>我发现delegate的效率是要比block高些的。</p>
<p>接下来我又决定在block中使用一下外部变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath &#123;</div><div class="line">    return (&#123;</div><div class="line">        FooCell *cell = [FooCell cellWithTableView:tableView];</div><div class="line">        cell.delegate = self;</div><div class="line">        NSString *str = @&quot;delegate&quot;;</div><div class="line">        cell.blk = ^&#123;</div><div class="line">            NSLog(@&quot;%@&quot;,str);</div><div class="line">        &#125;;</div><div class="line">        cell;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line">- (void)foocellDelegateButtonClicked &#123;</div><div class="line">    NSString *str = @&quot;delegate&quot;;</div><div class="line">    NSLog(@&quot;%@&quot;,str);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于没有对str进行更改，所以我并没有使用<code>__block</code>修饰<code>str</code>;</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">2016-08-10 15:38:41.340 IB[4717:198573] block</div><div class="line">.</div><div class="line">.</div><div class="line">.</div><div class="line">2016-08-10 15:38:44.136 IB[4717:198573] block</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">2016-08-10 15:39:20.837 IB[4717:198573] delegate</div><div class="line">.</div><div class="line">.</div><div class="line">.</div><div class="line">2016-08-10 15:39:23.883 IB[4717:198573] delegate</div></pre></td></tr></table></figure>
<p><code>44.136</code> - <code>41.340</code>  对比 <code>23.883</code> - <code>20.837</code>  2.796  vs  3.046<br>依然是block效率高于delegate</p>
<p>我再用<code>__block</code>修饰了一下,然后</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath &#123;</div><div class="line">    return (&#123;</div><div class="line">        FooCell *cell = [FooCell cellWithTableView:tableView];</div><div class="line">        cell.delegate = self;</div><div class="line">        __weak typeof(self) weakself = self;</div><div class="line">        cell.blk = ^&#123;</div><div class="line">            __strong typeof(weakself) strongself = weakself;</div><div class="line">            NSLog(@&quot;%ld&quot;,strongself-&gt;idx_);</div><div class="line">            strongself-&gt; idx_++;</div><div class="line">        &#125;;</div><div class="line">        cell;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line">- (void)foocellDelegateButtonClicked &#123;</div><div class="line">    NSLog(@&quot;%ld&quot;,idx_);</div><div class="line">    idx_ ++;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">2016-08-10 15:58:19.665 IB[4827:213165] 0</div><div class="line">.</div><div class="line">.</div><div class="line">.</div><div class="line">2016-08-10 15:58:22.866 IB[4827:213165] 9999</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">2016-08-10 15:58:42.689 IB[4827:213165] 0</div><div class="line">.</div><div class="line">.</div><div class="line">.</div><div class="line">2016-08-10 15:58:45.192 IB[4827:213165] 9999</div></pre></td></tr></table></figure>
<p><code>22.866</code> - <code>19.665</code>  对比 <code>45.192</code> - <code>42.689</code>  3.201  vs  2.503   delegate更高</p>
<p><em>对比了大半天才发现文中所谓的效率比较其实是几乎没有的，毕竟是回调了10000次才出现了那么微弱的差距。<br>所以前文对比的所谓的区别也是没有什么道理的。</em></p>
<p>但是可能考虑到运行顺序和可能出现的缓存等等其他可能出现的因素,我也不能下十分完整的定论，但是block作为一个在很多语言都具有的语法,其优越性对比delegate也不会差。</p>
<table>
<thead>
<tr>
<th>程序语言</th>
<th style="text-align:center">Block的名称</th>
</tr>
</thead>
<tbody>
<tr>
<td>C ＋blocks</td>
<td style="text-align:center">block</td>
</tr>
<tr>
<td>SmallTalk</td>
<td style="text-align:center">block</td>
</tr>
<tr>
<td>Ruby</td>
<td style="text-align:center">block</td>
</tr>
<tr>
<td>LISP</td>
<td style="text-align:center">Lambda</td>
</tr>
<tr>
<td>Python</td>
<td style="text-align:center">Lambda</td>
</tr>
<tr>
<td>C++ 11</td>
<td style="text-align:center">Lambda</td>
</tr>
<tr>
<td>Javascript</td>
<td style="text-align:center">Anonymous function</td>
</tr>
</tbody>
</table>
<p>写到这了，其实我也是比较方的，因为到现在也是刚刚才认可这个事情。</p>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>所以到最后，无论block还是delegate 其实都是要看具体的应用场景的，如果脱离的具体的应用场景这样的最求所谓的性能优化其实也是没有什么意义的。所以一味的强行的去对比二者的区别也是没有多大的意义的。毕竟，如此微弱的差距，在排除了其他的因素之后，可能就完全的忽略不计了，在手机端，也不可能有生命回调什么的能够进行10000次。</p>
<p>所以除了可读性和需要预防循环引用。block带来开发效率的提升还是特别的快的。对于第三方库使用delegate的原因，我猜想还是因为使用delegate更贴近于原生的OC代码,毕竟是写出来给别人使用的，更原生，可能更友好。而我们更熟悉的<code>AFNetworking</code> 也是用的block回调网络请求的啊。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如果一个页面需要发送4个网络请求，如何监听到所有的请求都已经回调之后再刷新UI？]]></title>
      <url>https://CepheusSun.github.io/2016/07/27/%E5%A6%82%E6%9E%9C%E4%B8%80%E4%B8%AA%E9%A1%B5%E9%9D%A2%E9%9C%80%E8%A6%81%E5%8F%91%E9%80%814%E4%B8%AA%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%EF%BC%8C%E5%A6%82%E4%BD%95%E7%9B%91%E5%90%AC%E5%88%B0%E6%89%80%E6%9C%89%E7%9A%84%E8%AF%B7%E6%B1%82%E9%83%BD%E5%B7%B2%E7%BB%8F%E5%9B%9E%E8%B0%83%E4%B9%8B%E5%90%8E%E5%86%8D%E5%88%B7%E6%96%B0UI%EF%BC%9F/</url>
      <content type="html"><![CDATA[<p>Model里面有ABCD四个属性，这4个属性每个都不能直接用，都需要去调一个Block返回回来才能用，然后界面上的textview的值需要这4个属性来拼接，每个属性都有可能为空，最后拼出来的东西还不能打乱顺序。</p>
<a id="more"></a>
<p>看了一天的JavaScript基础语法，然后水了一下群，发现一个朋友在问这样的问题:</p>
<p><img src="http://i2.piimg.com/567571/423e50e7a0263f42.png" width=600 height=120 /></p>
<p>简单分析了一下,跟iOS一道面试题一样一样的</p>
<blockquote>
<p>如果一个页面需要发送4个网络请求，如何监听到所有的请求都已经回调之后再刷新UI？</p>
</blockquote>
<p>自己也曾经被问到过两次，当时都是说的声明一个全局变量在收到回调的时候+1，当这个变量等于4的时候再刷新UI。</p>
<p>现在看起来，这样的答案确实low得可怜。其实我是知道有dispatch group 这个东西的，但是，考虑到网络请求都是异步请求并且通过block回调的，那么block里面的内容无论有没有执行完毕，group notify 总是能够在真正受到回调才会刷新数据。</p>
<p>看到了朋友这样的问题，在群里简单的提了我用group的解决方案之后，主动提出了我写一个demo出来的建议，然后我就开始了</p>
<h3 id="temp-one"><a href="#temp-one" class="headerlink" title="temp one"></a>temp one</h3><p>首先我模拟了4个任务分别延时了0.3 0.5 0.1 和马上返回; 然后是通过block回调通知接下来的操作</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">//任务A</div><div class="line">- (void)requestA:(void (^)(NSString* ss))block &#123;</div><div class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.3 * NSEC_PER_SEC)), dispatch_queue_create(0, 0), ^&#123;</div><div class="line">        NSLog(@&quot;aa&quot;);</div><div class="line">        block();</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line">//任务B</div><div class="line">- (void)requestB:(void (^)(NSString* ss))block &#123;</div><div class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.5 * NSEC_PER_SEC)), dispatch_queue_create(0, 0), ^&#123;</div><div class="line">        NSLog(@&quot;bb&quot;);</div><div class="line">        block();</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line">//任务C</div><div class="line">- (void)requestC:(void (^)(NSString* ss))block &#123;</div><div class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.1 * NSEC_PER_SEC)), dispatch_queue_create(0, 0), ^&#123;</div><div class="line">        NSLog(@&quot;cc&quot;);</div><div class="line">        block();</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line">//任务D</div><div class="line">- (void)requestD:(void (^)())block &#123;</div><div class="line">    NSLog(@&quot;dd&quot;);</div><div class="line">    block();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于我要模拟的是在后台的情况下执行请求任务，所以我果断的讲dispatch中的<code>dispatch_get_main_queue</code> 改成了 <code>dispatch_queue_create(0, 0)</code></p>
<p>然后我写了这样的代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">- (void)sendRequestA &#123;</div><div class="line">    dispatch_group_t group = dispatch_group_create();</div><div class="line">    dispatch_queue_t queue = dispatch_get_global_queue(0, 0);</div><div class="line">    </div><div class="line">    </div><div class="line">    dispatch_group_async(group, queue, ^&#123;</div><div class="line">        [self requestA:^(NSString* ss)&#123;</div><div class="line">            NSLog(@&quot;%@&quot;,ss);</div><div class="line">        &#125;];</div><div class="line">    &#125;);</div><div class="line">    dispatch_group_async(group, queue, ^&#123;</div><div class="line">        [self requestB:^(NSString* ss)&#123;</div><div class="line">            NSLog(@&quot;%@&quot;,ss);</div><div class="line">        &#125;];</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    dispatch_group_async(group, queue, ^&#123;</div><div class="line">        [self requestC:^(NSString* ss)&#123;</div><div class="line">            NSLog(@&quot;%@&quot;,ss);</div><div class="line">        &#125;];</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    dispatch_group_async(group, queue, ^&#123;</div><div class="line">        [self requestD:^(NSString* ss)&#123;</div><div class="line">            NSLog(@&quot;%@&quot;,ss);</div><div class="line">        &#125;];</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    dispatch_group_notify(group, dispatch_get_main_queue(), ^&#123;</div><div class="line">        NSLog(@&quot;over&quot;);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我以为这个问题就解决了，然后我很自信的运行了一下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">2016-07-27 16:00:51.268 IB[1944:308855] dd</div><div class="line">2016-07-27 16:00:51.268 IB[1944:308823] over</div><div class="line">2016-07-27 16:00:51.372 IB[1944:308823] cc</div><div class="line">2016-07-27 16:00:51.602 IB[1944:308823] aa</div><div class="line">2016-07-27 16:00:51.796 IB[1944:308823] bb</div></pre></td></tr></table></figure>
<p>很显然我弄错了;</p>
<p>仔细阅读了一下代码和输出的值之后我意识到了，block回调是在notify之后执行的</p>
<h3 id="temp-two"><a href="#temp-two" class="headerlink" title="temp two"></a>temp two</h3><p>然后我看了下意思的输入了disoatch_group。</p>
<p><img src="http://i1.piimg.com/567571/81a097ba5898ac7f.png" width=600 height=120 /></p>
<p>等等<code>disoatch_group_enter</code> <code>disoatch_group_wait</code>  <code>disoatch_group_leave</code> 这三个东西是什么鬼？<br>然后简单百度了一下,然后我就改了一下代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">- (void)sendRequest &#123;</div><div class="line">    dispatch_group_t group = dispatch_group_create();</div><div class="line"></div><div class="line">    dispatch_group_enter(group);</div><div class="line">    dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</div><div class="line">        [self requestA:^(NSString* ss) &#123;</div><div class="line">            dispatch_group_leave(group);</div><div class="line">        &#125;];</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    dispatch_group_enter(group);</div><div class="line">    dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</div><div class="line">        [self requestB:^(NSString* ss) &#123;</div><div class="line">            dispatch_group_leave(group);</div><div class="line">        &#125;];</div><div class="line">    &#125;);</div><div class="line">    dispatch_group_enter(group);</div><div class="line">    dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</div><div class="line">        [self requestC:^(NSString* ss) &#123;</div><div class="line">            dispatch_group_leave(group);</div><div class="line">        &#125;];</div><div class="line">    &#125;);</div><div class="line">    dispatch_group_enter(group);</div><div class="line">    dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</div><div class="line">        [self requestD:^(NSString* ss) &#123;</div><div class="line">            dispatch_group_leave(group);</div><div class="line">        &#125;];</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    dispatch_group_wait(group, DISPATCH_TIME_FOREVER);</div><div class="line"></div><div class="line">    dispatch_async(dispatch_get_main_queue(), ^&#123;</div><div class="line">        NSLog(@&quot;刷新UI&quot;);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再运行一下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">2016-07-27 16:21:25.110 IB[2048:328327] ddd</div><div class="line">2016-07-27 16:21:25.219 IB[2048:328327] ccc</div><div class="line">2016-07-27 16:21:25.431 IB[2048:328327] aaa</div><div class="line">2016-07-27 16:21:25.658 IB[2048:328327] bbb</div><div class="line">2016-07-27 16:21:25.658 IB[2048:328295] 刷新UI</div></pre></td></tr></table></figure>
<p>搞定！</p>
<h3 id="temp-three"><a href="#temp-three" class="headerlink" title="temp three"></a>temp three</h3><p>最开始我在四个任务方法里面的<code>dispatch_after</code>都是Xcode 代码自动补全出来的,参数都是<code>dispatch_get_main_queue()</code> ,在第一次尝试的时候输出并没有什么不一样。</p>
<p>但是在第二次尝试的时候输出变成了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2016-07-27 16:23:29.547 IB[2062:330077] ddd</div></pre></td></tr></table></figure>
<p>我想到了这应该是死锁造成的，因为在四个模拟任务中出了第四个<code>dispatch_after</code>都将回调放到主线程去了，而</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dispatch_group_wait(group, DISPATCH_TIME_FOREVER);</div></pre></td></tr></table></figure>
<p>也是在主线程wait的,考虑到UI的任务都是在主线程中执行的所以我在demo中引入了一个tableview，果然，wait的时候tableview也是卡死的，所以，呵呵。折腾了半天，还是没有找到合适的办法，我决定再深入的看一下文档;</p>
<p>然后我看了一下</p>
<p><img src="http://i4.piimg.com/567571/b6e3b6ef4164d064.png" width=150 height=200 /></p>
<p>这本书<br>看到了这句话<br><img src="http://i4.piimg.com/567571/af4266a02564281b.png" width=600 height=80 /></p>
<p>所以我将调用request的方法改了一下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">- (void)sendRequest &#123;</div><div class="line">    dispatch_group_t group = dispatch_group_create();</div><div class="line"></div><div class="line">    dispatch_group_enter(group);</div><div class="line">    dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</div><div class="line">        [self requestA:^(NSString* ss) &#123;</div><div class="line">            NSLog(@&quot;%@&quot;,ss);</div><div class="line">            dispatch_group_leave(group);</div><div class="line">        &#125;];</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    dispatch_group_enter(group);</div><div class="line">    dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</div><div class="line">        [self requestB:^(NSString* ss) &#123;</div><div class="line">            NSLog(@&quot;%@&quot;,ss);</div><div class="line">            dispatch_group_leave(group);</div><div class="line">        &#125;];</div><div class="line">    &#125;);</div><div class="line">    dispatch_group_enter(group);</div><div class="line">    dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</div><div class="line">        [self requestC:^(NSString* ss) &#123;</div><div class="line">            NSLog(@&quot;%@&quot;,ss);</div><div class="line">            dispatch_group_leave(group);</div><div class="line">        &#125;];</div><div class="line">    &#125;);</div><div class="line">    dispatch_group_enter(group);</div><div class="line">    dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</div><div class="line">        [self requestD:^(NSString* ss) &#123;</div><div class="line">            NSLog(@&quot;%@&quot;,ss);</div><div class="line">            dispatch_group_leave(group);</div><div class="line">        &#125;];</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    dispatch_async(dispatch_queue_create(0, 0), ^&#123;</div><div class="line">        dispatch_group_wait(group, DISPATCH_TIME_FOREVER);</div><div class="line">        dispatch_async(dispatch_get_main_queue(), ^&#123;</div><div class="line">            NSLog(@&quot;刷新UI&quot;);</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>问题完美解决。</p>
<h3 id="temp-four"><a href="#temp-four" class="headerlink" title="temp four"></a>temp four</h3><p>后来我又想了一下，查了一下相关资料,写下了一下代码，然后发现这样也是可以的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">- (void)sendRequestB &#123;</div><div class="line">    dispatch_group_t group = dispatch_group_create();</div><div class="line">    </div><div class="line">    dispatch_group_enter(group);</div><div class="line">    dispatch_group_async(group, dispatch_get_global_queue(0, 0), ^&#123;</div><div class="line">        [self requestA:^(NSString *ss) &#123;</div><div class="line">            NSLog(@&quot;%@&quot;,ss);</div><div class="line">            dispatch_group_leave(group);</div><div class="line">        &#125;];</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    dispatch_group_enter(group);</div><div class="line">    dispatch_group_async(group, dispatch_get_global_queue(0, 0), ^&#123;</div><div class="line">        [self requestB:^(NSString *ss) &#123;</div><div class="line">            NSLog(@&quot;%@&quot;,ss);</div><div class="line">            dispatch_group_leave(group);</div><div class="line">        &#125;];</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    dispatch_group_enter(group);</div><div class="line">    dispatch_group_async(group, dispatch_get_global_queue(0, 0), ^&#123;</div><div class="line">        [self requestC:^(NSString *ss) &#123;</div><div class="line">            NSLog(@&quot;%@&quot;,ss);</div><div class="line">            dispatch_group_leave(group);</div><div class="line">        &#125;];</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    dispatch_group_enter(group);</div><div class="line">    dispatch_group_async(group, dispatch_get_global_queue(0, 0), ^&#123;</div><div class="line">        [self requestD:^(NSString *ss) &#123;</div><div class="line">            NSLog(@&quot;%@&quot;,ss);</div><div class="line">            dispatch_group_leave(group);</div><div class="line">        &#125;];</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    dispatch_group_notify(group, dispatch_get_main_queue(), ^&#123;</div><div class="line">        NSLog(@&quot;over&quot;);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所以我大胆的得出了如果在block情况下使用<code>dispatch_grop</code>是需要在开始人物的时候<code>enter</code> 并且在结束任务的时候<code>leave</code> 这样的话使用<code>dispatch_notify</code>也是能够达到同样的效果的。</p>
<h3 id="temp-five"><a href="#temp-five" class="headerlink" title="temp five"></a>temp five</h3><p>查阅了猿题库YTKNetwork相关代码之后，看到了<code>YTKBatchRequest</code>这个类,他的<code>init</code>方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">- (id)initWithRequestArray:(NSArray *)requestArray &#123;</div><div class="line">    self = [super init];</div><div class="line">    if (self) &#123;</div><div class="line">        _requestArray = [requestArray copy];</div><div class="line">        _finishedCount = 0;</div><div class="line">        for (YTKRequest * req in _requestArray) &#123;</div><div class="line">            if (![req isKindOfClass:[YTKRequest class]]) &#123;</div><div class="line">                YTKLog(@&quot;Error, request item must be YTKRequest instance.&quot;);</div><div class="line">                return nil;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return self;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>并且这个类有一个property <code>finishedCount</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@property (nonatomic) NSInteger finishedCount;</div></pre></td></tr></table></figure>
<p>而且这个property出了在<code>initWithRequestArray</code>中进行了原始赋值以外只在<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (void)requestFinished:(YTKRequest *)request;</div></pre></td></tr></table></figure></p>
<p>这个方法里面使用到了。</p>
<p>大概猜到了YTKNetwork在处理批量网络请求的时候，应该是先调用<code>initWithRequestArray</code>这个初始化方法，把所有网络请求的实例放进去，然后再调用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- (void)startWithCompletionBlockWithSuccess:(void (^)(YTKBatchRequest *batchRequest))success</div><div class="line">                                    failure:(void (^)(YTKBatchRequest *batchRequest))failure &#123;</div><div class="line">    [self setCompletionBlockWithSuccess:success failure:failure];</div><div class="line">    [self start];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个方法开始举行网络请求，最后通过<code>finishedCount</code>这个熟悉来进行回调，如果有某一个失败了，那最后就返回失败巴拉巴拉…<br>这段写的有点水，主要是没有十分仔细的去阅读YTKNetwork的源码。大概看了一下，YTKNetwork的处理思路跟我之前的思路有些不谋而合，也是通过添加一个flag值来判断回调是否全部收到。不过经过猿题库团队的封装之后,这种问题的处理方式就变得更加的优雅了。</p>
<p>由于我demo只是写了几个简单的方法来模拟这种应用场景，所以我也简单的用YTK的思路来进行一下模拟</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">- (void)sendRequestC &#123;</div><div class="line">    _requesrCount_ = 0;</div><div class="line">    // 模拟的数组</div><div class="line">//    NSArray *requestArray = @[@&quot;A&quot;,@&quot;B&quot;,@&quot;C&quot;,@&quot;D&quot;];</div><div class="line">    dispatch_queue_t queue = dispatch_queue_create(0, 0);</div><div class="line">    dispatch_async(queue, ^&#123;</div><div class="line">        [self requestA:^(NSString *ss) &#123;</div><div class="line">            NSLog(@&quot;%@&quot;,ss);</div><div class="line">            [self finishRequest];</div><div class="line">        &#125;];</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    dispatch_async(queue, ^&#123;</div><div class="line">        [self requestB:^(NSString *ss) &#123;</div><div class="line">            NSLog(@&quot;%@&quot;,ss);</div><div class="line">            [self finishRequest];</div><div class="line">        &#125;];</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    dispatch_async(queue, ^&#123;</div><div class="line">        [self requestC:^(NSString *ss) &#123;</div><div class="line">            NSLog(@&quot;%@&quot;,ss);</div><div class="line">            [self finishRequest];</div><div class="line">        &#125;];</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    dispatch_async(queue, ^&#123;</div><div class="line">        [self requestD:^(NSString *ss) &#123;</div><div class="line">            NSLog(@&quot;%@&quot;,ss);</div><div class="line">            [self finishRequest];</div><div class="line">        &#125;];</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">&#125;</div><div class="line">- (void)finishRequest &#123;</div><div class="line">    _requesrCount_ ++;</div><div class="line">    //由于没有模拟,所以没有使用array.count来判断</div><div class="line">    if (_requesrCount_ == 4) &#123;</div><div class="line">        dispatch_async(dispatch_get_main_queue(), ^&#123;</div><div class="line">            NSLog(@&quot;over&quot;);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果是:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">2016-07-29 14:58:23.068 IB[3403:280129] ddd</div><div class="line">2016-07-29 14:58:23.169 IB[3403:280164] ccc</div><div class="line">2016-07-29 14:58:23.390 IB[3403:280164] aa</div><div class="line">2016-07-29 14:58:29.091 IB[3403:280164] bbb</div><div class="line">2016-07-29 14:58:29.091 IB[3403:280129] over</div></pre></td></tr></table></figure>
<p>好了第三种思路完成。</p>
<h3 id="temp-six"><a href="#temp-six" class="headerlink" title="temp six"></a>temp six</h3><p>然后我又看到资料说GCD的信号量也能实现这种需求，看了一下相关资料，然后我是这写了这段代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">- (void)sendRequestD&#123;</div><div class="line">    dispatch_group_t group =  dispatch_group_create();</div><div class="line">    dispatch_group_enter(group);</div><div class="line">    dispatch_group_async(group, dispatch_get_global_queue(0, 0), ^&#123;</div><div class="line">        dispatch_semaphore_t semapore = dispatch_semaphore_create(0);</div><div class="line">        dispatch_async(dispatch_queue_create(0, 0), ^&#123;</div><div class="line">            [self requestA:^(NSString *ss) &#123;</div><div class="line">                NSLog(@&quot;%@&quot;,ss);</div><div class="line">                dispatch_semaphore_signal(semapore);</div><div class="line">            &#125;];</div><div class="line">        &#125;);</div><div class="line">        dispatch_semaphore_wait(semapore, DISPATCH_TIME_FOREVER);</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    </div><div class="line">    dispatch_group_async(group, dispatch_get_global_queue(0, 0), ^&#123;</div><div class="line">        dispatch_semaphore_t semapore = dispatch_semaphore_create(0);</div><div class="line">        dispatch_async(dispatch_queue_create(0, 0), ^&#123;</div><div class="line">            [self requestB:^(NSString *ss) &#123;</div><div class="line">                NSLog(@&quot;%@&quot;,ss);</div><div class="line">                dispatch_semaphore_signal(semapore);</div><div class="line">            &#125;];</div><div class="line">        &#125;);</div><div class="line">        dispatch_semaphore_wait(semapore, DISPATCH_TIME_FOREVER);</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    dispatch_group_async(group, dispatch_get_global_queue(0, 0), ^&#123;</div><div class="line">        dispatch_semaphore_t semapore = dispatch_semaphore_create(0);</div><div class="line">        dispatch_async(dispatch_queue_create(0, 0), ^&#123;</div><div class="line">            [self requestC:^(NSString *ss) &#123;</div><div class="line">                NSLog(@&quot;%@&quot;,ss);</div><div class="line">                dispatch_semaphore_signal(semapore);</div><div class="line">            &#125;];</div><div class="line">        &#125;);</div><div class="line">        dispatch_semaphore_wait(semapore, DISPATCH_TIME_FOREVER);</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    </div><div class="line">    dispatch_group_async(group, dispatch_get_global_queue(0, 0), ^&#123;</div><div class="line">        dispatch_semaphore_t semapore = dispatch_semaphore_create(0);</div><div class="line">        dispatch_async(dispatch_queue_create(0, 0), ^&#123;</div><div class="line">            [self requestD:^(NSString *ss) &#123;</div><div class="line">                NSLog(@&quot;%@&quot;,ss);</div><div class="line">                dispatch_semaphore_signal(semapore);</div><div class="line">            &#125;];</div><div class="line">        &#125;);</div><div class="line">        dispatch_semaphore_wait(semapore, DISPATCH_TIME_FOREVER);</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    dispatch_group_notify(group, dispatch_get_main_queue(), ^&#123;</div><div class="line">        NSLog(@&quot;over&quot;);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>很不幸:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">2016-07-29 15:44:21.322 IB[3553:314160] ddd</div><div class="line">2016-07-29 15:44:21.424 IB[3553:314355] ccc</div><div class="line">2016-07-29 15:44:21.639 IB[3553:314355] aa</div><div class="line">2016-07-29 15:44:21.842 IB[3553:314355] bbb</div></pre></td></tr></table></figure>
<p>over是没有打印出来的，具体原因，我等我再仔细查找查找吧！</p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>没有结语,不知道具体实践中有没有其他更好的办法。如果有，也可以给我留言，我们一起讨论。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS中的预编译指令]]></title>
      <url>https://CepheusSun.github.io/2016/07/26/iOS%E4%B8%AD%E7%9A%84%E9%A2%84%E7%BC%96%E8%AF%91%E6%8C%87%E4%BB%A4%E7%9A%84%E5%88%9D%E6%AD%A5%E6%8E%A2%E7%A9%B6-%E8%BD%AC/</url>
      <content type="html"><![CDATA[<p>iOS中的一些预编译指令。<br><a id="more"></a></p>
<h2 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h2><p>举一个简单的的例子，老婆说了句“你给我滚出去睡沙发”。这句话的处理流程事这样的</p>
<p><img src="http://i4.piimg.com/567571/5d9de7ecac719da4.png" width=600 height=400 /></p>
<p>程序的编译其实就是计算机在执行过程之前，把老婆的命令转换成电信号的过程。在计算机世界中，这个玩意儿叫过编译器（compiler），什么GCC啊clang啊什么什么的都是说的这个东西。看起来很高大上，其实就是一个翻译的东西。人把老婆的指令翻译成电波，编译器把各种语言翻译成01010101….</p>
<pre><code>ps : 这篇文章是我在阅读了戴伟来的文章之后,根据原文整理的一个笔记。所以文中会有很多地方都摘录了文中的句子。感谢@戴伟来。如果你想直接看一下原文的话，最后有链接。
</code></pre><blockquote>
<p>编译器的工作原理基本上都是三段式的，前端、优化器、后端。</p>
<blockquote>
<p>前端负责解析源码，检查语法错误，并将其翻译成抽象的语法树; </p>
<p>优化器对这一中间代码进行优化，使代码更佳高效。</p>
<p>后端负责将优化过的代码转化成对应机器的代码。</p>
</blockquote>
</blockquote>
<p><img src="http://i4.piimg.com/567571/68513aafd1af8015.png" width=650 height=180 /></p>
<p>LLVC编译器实际上是用C++写的，那C++的编译器呢？当然是汇编了，所以编译器和计算机语言的进步就是这样迭代发展的，再之后就是用高级语言写更高级的编译器，更高级的编译器就能编译更加高级的语言….那么问题来了，世界上计算机语言那么多，各种不同的架构，Intel ARM，怎么让编译语言分别产生不同的架构的执行码呢，这个时候就应该想到刚刚的三段式模型了，当我们要支持多种语言的时候，只需要添加多个前端就可以了。当我们要支持多种目标机器的时候，只需要添加多个后端就可以了。对于中间的优化器，我们可以使用通用的中间代码。gcc可以支持c、cpp、java….等语言的编译。</p>
<p><img src="http://i2.piimg.com/567571/fbcad0c8c26e0977.png" width=650 height=180 /></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>由于文中作者使用的是Xcode6，但是现在我已经用到了Xcode7.3，而Xcode8页已经beta了。所以我讲使用我目前正在使用的Xcode7.3来进行本文。由于APPLE已经不在Xcode中内置GCC了，所以我就只能研究研究LLVM了。</p>
<p>如果对各种编译器的区别感兴趣的话可以看看下面两篇文章</p>
<ul>
<li><a href="http://www.cnblogs.com/zuopeng/p/4141467.html"><em>《LLVM和GCC的区别》</em></a></li>
<li><a href="http://www.programmer.com.cn/9436/"><em>《《三好学生Chris Lattner的LLVM编译工具链》》</em></a></li>
</ul>
<p>如果阅读过优秀的源码，你一定会看到很多的<code>#define</code> <code>#if</code> <code>#error</code>之类的代码,预编译对程序之后的编译提供了很多方便以及优化，对于错误处理，包引用、跨平台等都有着极大的帮助。</p>
<h3 id="包含文件"><a href="#包含文件" class="headerlink" title="包含文件"></a>包含文件</h3><h4 id="include"><a href="#include" class="headerlink" title="#include"></a>#include</h4><p><code>#include&quot; &quot;</code> 、<code>#include&lt; &gt;</code>的区别:<code>#include“”</code>包含和使用<code>#include &lt; &gt;</code>包含的不同之处就是使用&lt;&gt;包含时，预处理器会搜索C函数库头文件路径下的文件，而使用“”包含时首先搜索程序所在目录，其次搜索系统Path定义目录，如果还是找不到才会搜索C函数库头文件所在目录。</p>
<blockquote>
<p>使用#include的时候包含文件的时候是不能递归包含的，例如a.h文件包含b.h，而b.h就不<br>能再包含a.h了；还有就是重复包含(比如a.h包含了b.h,然后main.c中又包含了a.h和b.h)虽然是允许的但是这会降低编译性能。那该怎么办呢？</p>
<blockquote>
<ol>
<li>使用#import替代include</li>
<li>使用宏判断(宏判断下面会详解)，xcode很聪明，只要新建一个头文件a.h 里面就自动就生成了</li>
</ol>
</blockquote>
</blockquote>
<h4 id="include-next"><a href="#include-next" class="headerlink" title="#include_next"></a>#include_next</h4><p>这个是非C标准库里面的预处理指令,我没有用过。</p>
<h4 id="import"><a href="#import" class="headerlink" title="#import"></a>#import</h4><p>OC特有的，智能的<code>＃include</code>,解决了<code>＃include</code>的重复包含问题。</p>
<h3 id="宏定义"><a href="#宏定义" class="headerlink" title="宏定义"></a>宏定义</h3><h4 id="define"><a href="#define" class="headerlink" title="#define"></a>#define</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//this defines PI</div><div class="line">#define M_PI 3.141592</div></pre></td></tr></table></figure>
<p><code>#define</code> 关键字表面即将开始定义一个宏，M_PI是宏的名字，空格过后是宏的内容。类似这样的宏编译器会在语义分析之后讲M_PI替换为3.14159，这是宏的最基本用法。</p>
<p>还有一种是函数宏函数宏顾名思义，就是行为类似函数，可以接受参数的宏。具体来说，在定义的时候，如果我们在宏名字后面跟上一对括号的话，这个宏就变成了函数宏。从最简单的例子开始，比如我在开发中最常用的两个宏</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#define WS(weakSelf) __weak __typeof(&amp;*self)weakSelf = self;</div><div class="line">#define SS(strongSelf) __strong typeof(&amp;*weakSelf) strongSelf = weakSelf;</div></pre></td></tr></table></figure>
<p>这两个宏的意思应该不用我说了吧，如果你没看懂而且你又喜欢用block的话，那建议你用instrument 的leaks看看是不是一串红点。</p>
<p>原文中还有一个MIN宏定义的正确用法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#define MIN(A,B)    (&#123; __typeof__(A) __a = (A); __typeof__(B) __b = (B); __a &lt; __b ? __a : __b; &#125;)</div></pre></td></tr></table></figure>
<p>接下来再把我使用的log宏放出来</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#ifdef DEBUG</div><div class="line">#   define PSLog(fmt, ...) NSLog((@&quot;%s [%d 行] &quot; fmt), __PRETTY_FUNCTION__, __LINE__, ##__VA_ARGS__);</div><div class="line">#else</div><div class="line">#   define PSLog(...)</div><div class="line">#endif</div></pre></td></tr></table></figure>
<p>这个宏的意思请分别在release 和 debug下测试</p>
<h4 id="＃undef"><a href="#＃undef" class="headerlink" title="＃undef"></a>＃undef</h4><p>当你使用了<code>#define</code>宏定义后，则在整个程序的运行周期内这个宏都是有效的，但有时候我们在某个逻辑里希望这个宏失效不想使用，则会使用</p>
<h3 id="条件编译"><a href="#条件编译" class="headerlink" title="条件编译"></a>条件编译</h3><h4 id="if-else-endif"><a href="#if-else-endif" class="headerlink" title="#if #else #endif"></a>#if #else #endif</h4><p>如果<code>＃if 之后的条件语句成立的话</code>编译<code>＃else</code>里面的代码 反之编译 <code>＃else</code> 之后的代码 <code>#endif</code> 结束语句<br>接下来是一些预定的宏</p>
<ul>
<li><code>DEBUG</code> DEBUG环境下返回YES</li>
<li><code>__has_feature(objc_arc)</code> 开启ARC时返回YES</li>
<li><code>__IPHONE_OS_VERSION_MIN_REQUIRED &lt; __IPHONE_7_0</code> 如果手机系统小于7.0 返回YES,版本策略</li>
</ul>
<h4 id="if-defined-ifdef-ifndef-elif"><a href="#if-defined-ifdef-ifndef-elif" class="headerlink" title="#if defined #ifdef #ifndef #elif"></a>#if defined #ifdef #ifndef #elif</h4><ul>
<li><code>#if defined (AAA)</code> : 如果已经定义了AAA这个宏,返回YES，可用于复杂条件<code>#if defined (AAA) &amp;&amp; defined (BBB)</code>或者<code>#if defined (AAA) || VERSION &gt; 12</code></li>
<li><code>#iddef （AAA）</code>: 如果已经定义了AAA这个宏,返回YES，单个条件</li>
<li><code>#ifndef</code> : if not defined 的缩写</li>
<li><code>#elif</code> : 跟<code>#if</code>一起使用，else if的缩写</li>
</ul>
<h3 id="错误、警告处理"><a href="#错误、警告处理" class="headerlink" title="错误、警告处理"></a>错误、警告处理</h3><p>####　#error</p>
<p>如果编译器遇到这货，马上就会罢工。</p>
<p>如果你在开发一些arc only的库，那么一下代码就有了作用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#if !__has_feature(objc_arc)</div><div class="line">#error &quot;我的低调不是你装逼的资本！这个库需要开启ARC，不然你别用！&quot;</div><div class="line">#endif</div></pre></td></tr></table></figure>
<h4 id="warning"><a href="#warning" class="headerlink" title="#warning"></a>#warning</h4><p>这个用法很简单，只要后面跟上你想警告的话就OK了，这样你就可以让编译器提醒这个警告。这个我经常用。但是还有一个更好用的<code>TODO</code>脚本,一会而我会放出来。</p>
<h3 id="编译器控制"><a href="#编译器控制" class="headerlink" title="编译器控制"></a>编译器控制</h3><h4 id="pragma"><a href="#pragma" class="headerlink" title="#pragma"></a>#pragma</h4><p>这个应该算是使用的非常多的指令了吧，应该所有的程序员都应该知道代码<code>＃pragma mark</code>的作用。</p>
<h5 id="pragma-mark"><a href="#pragma-mark" class="headerlink" title="#pragma mark"></a>#pragma mark</h5><p>这个真没有什么好说的了，记得<code>＃pragma mark</code> 和<code>＃pragma mark －</code>的区别就好了</p>
<blockquote>
<p><code>#pragma</code>非常复杂需要你对编译器底层非常的了解，只有当你开发一些比较底层的framework的时候才可能比较多用的。 <a href="http://clang.llvm.org/get_started.html"><em>Clang使用手册</em></a></p>
</blockquote>
<h5 id="pragma-message-“”"><a href="#pragma-message-“”" class="headerlink" title="#pragma message(“”)"></a>#pragma message(“”)</h5><p>可以输出调试信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#pragma clang disgnostic push</div><div class="line">#pragma clang disgnostic ignored &quot;clang的参数&quot;  //屏蔽某类警告</div><div class="line">#pragma clang disgnostic pop</div></pre></td></tr></table></figure>
<p>如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#pragma clang disgnostic push</div><div class="line">#pragma clang disgnostic ignored &quot;-Wunused-variable&quot;</div><div class="line"> </div><div class="line">int i = 1;</div><div class="line">#pragma clang disgnostic pop</div></pre></td></tr></table></figure>
<p>如果没有被使用的时候不会报出警告</p>
<p>关于警告一类的文章可以看看<a href="https://onevcat.com/#blog"><em>喵神王巍</em></a>的博客。</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>#####line<br>这个就没什么好说的，如果你自定义过NSLog 或者看到其他自定义的log并且点进去看过的话应该会看得到<code>__line__</code>这个东西吧，这表示本行语句在源文件中的位置信息。而<code>＃line</code>就是可以改变当前行的行号在编译器中的表示。并且之后的行号也会相应的改变。比如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#include&lt;stdio.h&gt;</div><div class="line">main()&#123;</div><div class="line">	printf(&quot;%d\n&quot;,__line__);</div><div class="line">#line 100 // 指定下一行的__line__为100</div><div class="line">	printf(&quot;%d\n&quot;,__line__);</div><div class="line">	printf(&quot;%d\n&quot;,__line__);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出为,如果第一个printf在第三行的话</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">3</div><div class="line">100</div><div class="line">101</div></pre></td></tr></table></figure>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>刚刚开始写博客，这是我水的第二篇博文了,依然是那么的水，主要还是为了想要测试一下HEXO的玩法。以后希望自己能够在javascript 、python 、 React Native 这三个方向进步。写这个博客也是为了学习一下javescript，结果几乎没有用到js的知识。以后写一些有关于这三个方向的学习心得或者说是学习笔记吧。这篇文章发出来之后，博客的基本用法也就学的七七八八了，期待自己的进阶之旅，也期待自己在iOS的进阶之旅，也期待自己在is py rn这三个方向的入门之旅。</p>
<p><a href="http://www.cnblogs.com/daiweilai/p/4234336.html"><em>戴伟来地址</em></a></p>
<p>哦, 对了那个TODO是这样设置的：</p>
<p><img src="http://i4.piimg.com/567571/397d615e3cafdbcf.png" width=650 height=400 /></p>
<p>第四步中的脚本为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">KEYWORDS=&quot;TODO:|FIXME:|\?\?\?:|\!\!\!:&quot;</div><div class="line">find &quot;$&#123;SRCROOT&#125;&quot; \( -name &quot;*.h&quot; -or -name &quot;*.m&quot; \) -print0 | xargs -0 egrep --with-filename --line-number --only-matching &quot;($KEYWORDS).*\$&quot; | perl -p -e &quot;s/($KEYWORDS)/ warning: \$1/&quot;</div></pre></td></tr></table></figure>
<p>原理是根据正则表达式去判断。</p>
<p>用起来是这样的:</p>
<p><img src="http://i4.piimg.com/567571/e3ab0fb1840550e3.png" width=650 height=50 /></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[我是这样搭建我的博客的]]></title>
      <url>https://CepheusSun.github.io/2016/07/15/%E6%88%91%E6%98%AF%E8%BF%99%E6%A0%B7%E6%90%AD%E5%BB%BA%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%9A%84/</url>
      <content type="html"><![CDATA[<p>通过GitHub pages &amp; Hexo 搭建我的个人博客。<br><a id="more"></a></p>
<h3 id="说在前面的话"><a href="#说在前面的话" class="headerlink" title="说在前面的话"></a>说在前面的话</h3><p>转眼，已经做了那么久的开发了。相信跟我一样，很多的iOSer都是在<a href="http://blog.devtang.com/"><em>唐巧的技术博客</em></a>、<a href="https://onevcat.com/#blog"><em>oneV’s Den</em></a>、<a href="http://blog.ibireme.com/archive/"><em>ibireme</em></a>等等大神的技术博客里面汲取营养，每次看到那么漂亮的技术博客，总会想自己也弄一个来玩玩，在看了群里@bestswifter的介绍之后，结合另一个群里的<a href="http://www.jianshu.com/p/834d7cc0668d"><em>锤神 水瓶座_iOSer</em></a>的文章，我也完成了我的技术博客的搭建。</p>
<p>最开始也想快速搭建的，结果弄了一半公司的项目突然要拆分，所以搁置了一段时间，终于闲下来了，公司老大强烈建议我从现在开始写技术博客。想想也是，坚持总结和梳理，5年10年以后，终会是会又一些收获的，所以我也大胆的搭建了这个博客。并且按照国际案例，第一篇博文总是要说说这个博客是怎么出生的。</p>
<h3 id="简单的说一下这个博客的搭建过程"><a href="#简单的说一下这个博客的搭建过程" class="headerlink" title="简单的说一下这个博客的搭建过程"></a>简单的说一下这个博客的搭建过程</h3><blockquote>
<p>首先，这个博客是在Mac环境下进行搭建的。</p>
</blockquote>
<ol>
<li>注册Github帐号。</li>
<li>在Github上创建以第一步创建的Github用户名(name)为头的仓库name.github.io</li>
<li>在你的Mac上配置你的Hexo环境，这个嘛，看是看Hexo的官方文档比较好。<a href="https://hexo.io/zh-cn/docs/"><em>这里是传送门</em></a>;<br> ‘这一步比较复杂，坑也大多数在这里所以一定要好好的看Hexo的官方文档’</li>
<li>第三步使用命令<br> hexo clean<br> hexo g<br> hexo d   这一步如果出现not found 错误 使用npm install hexo-deployer-git –save命令解决然后再用hexo d 尝试部署</li>
<li>选择一个你喜欢的主题，这个就可以用<a href="https://www.google.com/"><em>google</em></a>、或者<a href="https://baidu.com"><em>baidu</em></a>去找了。<blockquote>
<p>我因为个人比较懒，所以用了锤神博客推荐的主题Next了，可能你们比我还懒，所以<a href="https://github.com/iissnan/hexo-theme-next"><em>传送门</em></a>去看文档吧。</p>
</blockquote>
</li>
<li>根据第5步的传送门，再去定制你自己的blog吧。由于我自己前端知识薄弱，所以现在暂时还不能深入的了解详细的细节。不过还好，公司前端就在我旁边，一些问题还能够直接请教。</li>
<li>(可选)最后一步就没什么好说的了，我不是土豪，所以没有买域名，也没有办法尝试下一步的域名绑定了。如果有朋友完成过，那么请你教我好吗？</li>
</ol>
]]></content>
    </entry>
    
  
  
</search>
