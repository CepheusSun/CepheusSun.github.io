<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[ExpressibleByStringLiteral]]></title>
      <url>http://www.CepheusSun.com/ExpressibleByStringLiteral.html</url>
      <content type="html"><![CDATA[<p>从字面意思上看，<strong>通过字符串字面意思表达</strong>。这是一个协议,  就是说实现这个协议可以通过字面意思实例化这个类。</p>
<p>我们查看 String 这个类, Swift 实际上已经给 String 这个类实现了 <code>ExpressibleByStringLiteral</code> 这个协议。所以可以通过</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> aString = <span class="string">"this is a string"</span></div></pre></td></tr></table></figure>
<p>来初始化一个 String 对象。通过查看<a href="https://developer.apple.com/documentation/swift/expressiblebystringliteral">文档</a>：</p>
<p>这个协议已经被</p>
<ul>
<li>CSLocalizedString</li>
<li>StaticString</li>
<li>NSMutableString</li>
<li>String</li>
<li>NSString</li>
<li>SubString</li>
<li>Selector</li>
</ul>
<p>这几个东西实现了。</p>
<p>这个协议有什么用呢？其实我们可以通过实现这个协议，来帮助我们更简单的初始化一些东西。比如说: URL。</p>
<p>在实际开发中, 每次初始化一个 URL 都需要</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> urls = <span class="type">URL</span>.<span class="keyword">init</span>(string: <span class="string">"https://www.baidu.com"</span>)</div></pre></td></tr></table></figure>
<p>这样来初始化一个 URL 出来， 这个初始化出来的 URL 又是一个 optional 的，在使用的使用还需要给他解包什么的。但是每次都要这样实在是很烦。所以我们可以通过这个协议来简化这个过程。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">URL</span>: <span class="title">ExpressibleByStringLiteral</span> </span>&#123;</div><div class="line">    </div><div class="line"><span class="keyword">public</span> <span class="keyword">init</span>(stringLiteral value: <span class="type">String</span>) &#123;</div><div class="line">	<span class="keyword">guard</span> <span class="keyword">let</span> url = <span class="type">URL</span>(string: <span class="string">"<span class="subst">\(value)</span>"</span>) <span class="keyword">else</span> &#123;</div><div class="line">		<span class="built_in">preconditionFailure</span>(<span class="string">"This url: <span class="subst">\(value)</span> is not invalid"</span>)</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">self</span> = url</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>这样就可以通过</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> url: <span class="type">URL</span> = <span class="string">"https://www.baidu.com"</span></div><div class="line"><span class="keyword">let</span> task = <span class="type">URLSession</span>.shared.dataTask(with: url)</div><div class="line"><span class="keyword">let</span> task2 = <span class="type">URLSession</span>.shared.dataTask(with: <span class="string">"https://www.baidu.com"</span>)</div></pre></td></tr></table></figure>
<p>这种方式去初始化一个 URL 了，然后当这个 URL 不对的时候就会抛出异常。</p>
<p>当然还有一些其他的类, 也可以通过实现这个协议的方式来做这件事情。比如说:</p>
<p>我们有一个商品类</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Product</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> `id`: <span class="type">String</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个结构体我们需要这样实现</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> p = <span class="type">Product</span>(id: <span class="string">"xx"</span>)</div></pre></td></tr></table></figure>
<p>这时候我们再实现这个协议</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Product</span>: <span class="title">ExpressibleByStringLiteral</span> </span>&#123;</div><div class="line">    <span class="keyword">init</span>(stringLiteral value: <span class="type">String</span>) &#123;</div><div class="line">        <span class="keyword">self</span> = <span class="type">Product</span>(id: value)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> p2: <span class="type">Product</span> = <span class="string">"xx"</span></div></pre></td></tr></table></figure>
<p>当然还可以直接通过一个字符串初始化一个 Controller 这种做法。</p>
<p><strong>当然，本人还是不支持对这种自定义的类做这种事情，确实是一种非常风骚的做法。暂时没有想到十分具体的场景。但是知道这个小技巧还是很不错的。</strong></p>
<p>不过，对<code>URL</code> <code>Date</code> 这类，在开发中经常会以字符串来表示，但是又是字符串东西来说，这样去写还是挺不错的。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Date</span>: <span class="title">ExpressibleByStringLiteral</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">init</span>(stringLiteral value: <span class="type">String</span>) &#123;</div><div class="line">        <span class="keyword">let</span> dateformatter = <span class="type">DateFormatter</span>()</div><div class="line">        dateformatter.dateFormat = <span class="string">"YYYY-MM-dd"</span></div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> date = dateformatter.date(from: value) <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">preconditionFailure</span>(<span class="string">"This date: <span class="subst">\(value)</span> is not invalid"</span>)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">self</span> = date</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> date: <span class="type">Date</span> = <span class="string">"1990-09-09"</span></div></pre></td></tr></table></figure>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/2017-11-27-070845.png" alt=""></p>
<p>看了一下，还有好几种类似的协议。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[最近很火的 Safe Area 到底是什么]]></title>
      <url>http://www.CepheusSun.com/SafeArea.html</url>
      <content type="html"><![CDATA[<p>iOS 7 之后苹果给 <em>UIViewController</em> 引入了 <em>topLayoutGuide</em> 和 <em>bottomLayoutGuide</em> 两个属性来描述不希望被透明的状态栏或者导航栏遮挡的最高位置(status bar, navigation bar, toolbar, tab bar 等)。这个属性的值是一个 length 属性( <em>topLayoutGuide.length</em>)。 这个值可能由当前的 ViewController 或者 NavigationController 或者 TabbarController 决定。</p>
<ul>
<li>一个独立的ViewController，不包含于任何其他的ViewController。如果状态栏可见，topLayoutGuide表示状态栏的底部，否则表示这个ViewController的上边缘。</li>
<li>包含于其他ViewController的ViewController不对这个属性起决定作用，而是由容器ViewController决定这个属性的含义：<ul>
<li>如果导航栏（Navigation Bar）可见，topLayoutGuide表示导航栏的底部。</li>
<li>如果状态栏可见，topLayoutGuide表示状态栏的底部。</li>
<li>如果都不可见，表示ViewController的上边缘。<br>这部分还比较好理解，总之是屏幕上方任何遮挡内容的栏的最底部。</li>
</ul>
</li>
</ul>
<p>iOS 11 开始弃用了这两个属性， 并且引入了 Safe Area 这个概念。苹果建议: <strong>不要把 Control 放在 Safe Area 之外的地方</strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// These objects may be used as layout items in the NSLayoutConstraint API</span></div><div class="line"><span class="meta">@available</span>(iOS, introduced: <span class="number">7.0</span>, deprecated: <span class="number">11.0</span>)</div><div class="line">open <span class="keyword">var</span> topLayoutGuide: <span class="type">UILayoutSupport</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line"></div><div class="line"><span class="meta">@available</span>(iOS, introduced: <span class="number">7.0</span>, deprecated: <span class="number">11.0</span>)</div><div class="line">open <span class="keyword">var</span> bottomLayoutGuide: <span class="type">UILayoutSupport</span> &#123; <span class="keyword">get</span> &#125;</div></pre></td></tr></table></figure>
<p>今天, 来研究一下 iOS 11 中新引入的这个 API。</p>
<a id="more"></a>
<h3 id="UIView-中的-safe-area"><a href="#UIView-中的-safe-area" class="headerlink" title="UIView 中的 safe area"></a>UIView 中的 safe area</h3><p>iOS 11 中 UIViewController 的 topLayoutGuide 和 bottonLayoutGuide 两个属性被 UIView 中的 safe area 替代了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@available</span>(iOS <span class="number">11.0</span>, *)</div><div class="line">open <span class="keyword">var</span> safeAreaInsets: <span class="type">UIEdgeInsets</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line"></div><div class="line"><span class="meta">@available</span>(iOS <span class="number">11.0</span>, *)</div><div class="line">open <span class="function"><span class="keyword">func</span> <span class="title">safeAreaInsetsDidChange</span><span class="params">()</span></span></div></pre></td></tr></table></figure>
<p><strong>safeAreaInsets</strong></p>
<p>这个属性表示相对于屏幕四个边的间距， 而不仅仅是顶部还有底部。这么说好像没有什么感觉, 我们来看一看这个东西分别在 iPhone X 和 iPhone 8 中是什么样的吧！</p>
<p>什么都没有做, 只是新建了一个工程然后在 <code>Main.storyboard</code> 中的 <em>UIViewController</em> 中拖了一个橙色的 View 并且设置约束为:</p>
<center><br><br><img src="http://ocg4av0wv.bkt.clouddn.com/2017-10-23-035620.jpg" width="300"><br><br></center>

<p>在 <code>ViewController.swift</code> 的 <code>viewDidLoad</code> 中打印</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="built_in">print</span>(view.safeAreaInsets)</div><div class="line">    &#125;</div><div class="line"><span class="comment">// 无论是iPhone 8 还是 iPhone X 输出结果均为</span></div><div class="line"><span class="comment">// UIEdgeInsets(top: 0.0, left: 0.0, bottom: 0.0, right: 0.0)</span></div></pre></td></tr></table></figure>
<center><br><br><img src="http://ocg4av0wv.bkt.clouddn.com/2017-10-23-035012.jpg" width="500"><br><br></center>

<center>iPhone 8 VS iPhone X Safe Area (竖屏)</center>

<center><br><br><img src="http://ocg4av0wv.bkt.clouddn.com/2017-10-23-035302.jpg" width="500"><br><br></center>

<center>iPhone 8 VS iPhone X Safe Area (横屏)</center>

<p>这样对比可以看出, iPhone X 同时具有上下, 还有左右的 Safe Area。</p>
<p><strong>再来看这个例子: </strong> 拖两个自定义的 View, 这个 View 上有一个 显示很多字的Label。然后设置这两个 View 的约束分别是:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> view1 = <span class="type">MyView</span>()</div><div class="line"><span class="keyword">let</span> view2 = <span class="type">MyView</span>()</div><div class="line">view.addSubview(view1)</div><div class="line">view.addSubview(view2)</div><div class="line"><span class="keyword">let</span> screenW = <span class="type">UIScreen</span>.main.bounds.size.width</div><div class="line"><span class="keyword">let</span> screenH = <span class="type">UIScreen</span>.main.bounds.size.height</div><div class="line"></div><div class="line">view1.frame = <span class="type">CGRect</span>(</div><div class="line">	x: <span class="number">0</span>,</div><div class="line">	y: <span class="number">0</span>,</div><div class="line">	width:screenW,</div><div class="line">	height: <span class="number">200</span>)</div><div class="line"></div><div class="line">view2.frame = <span class="type">CGRect</span>(</div><div class="line">	x: <span class="number">0</span>,</div><div class="line">	y: screenH - <span class="number">200</span>,</div><div class="line">	width:screenW,</div><div class="line">	height: <span class="number">200</span>)</div></pre></td></tr></table></figure>
<center><br><br><img src="http://ocg4av0wv.bkt.clouddn.com/2017-10-23-042453.jpg" width="300"><br><br></center>

<p>可以看出来， 子视图被顶部的刘海以及底部的 home 指示区挡住了。我们可以使用 frame 布局或者 auto layout 来优化这个地方:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> insets = <span class="type">UIApplication</span>.shared.delegate?.window??.safeAreaInsets ?? <span class="type">UIEdgeInsets</span>.zero</div><div class="line">            </div><div class="line">view1.frame = <span class="type">CGRect</span>(</div><div class="line">	x: insets.<span class="keyword">left</span>,</div><div class="line">	y: insets.top,</div><div class="line">	width:view.bounds.width - insets.<span class="keyword">left</span> - insets.<span class="keyword">right</span>,</div><div class="line">	height: <span class="number">200</span>)</div><div class="line"></div><div class="line">view2.frame = <span class="type">CGRect</span>(</div><div class="line">	x: insets.<span class="keyword">left</span>,</div><div class="line">	y: screenH - insets.bottom - <span class="number">200</span>,</div><div class="line">	width:view.bounds.width - insets.<span class="keyword">left</span> - insets.<span class="keyword">right</span>,</div><div class="line">	height: <span class="number">200</span>)</div></pre></td></tr></table></figure>
<center><br><br><img src="http://ocg4av0wv.bkt.clouddn.com/2017-10-23-052419.jpg" width="300"><br><br></center>

<p>这样起来好多了,  还有另外一个更好的办法是直接在自定义的 View 中修改 Label 的布局:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">layoutSubviews</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="keyword">super</span>.layoutSubviews()</div><div class="line">	<span class="keyword">if</span> #available(iOS <span class="number">11.0</span>, *) &#123;</div><div class="line">		label.frame = safeAreaLayoutGuide.layoutFrame</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<center><br><br><img src="http://ocg4av0wv.bkt.clouddn.com/2017-10-23-052726.jpg" width="300"><br><br></center>

<p>这样, 不仅仅是在 ViewController 中能够使用 safe area 了。</p>
<h3 id="UIViewController-中的-safe-area"><a href="#UIViewController-中的-safe-area" class="headerlink" title="UIViewController 中的 safe area"></a>UIViewController 中的 safe area</h3><p>在 iOS 11 中 UIViewController 有一个新的属性</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@available</span>(iOS <span class="number">11.0</span>, *)</div><div class="line">open <span class="keyword">var</span> additionalSafeAreaInsets: <span class="type">UIEdgeInsets</span></div></pre></td></tr></table></figure>
<p>当 view controller 的子视图覆盖了嵌入的子 view controller 的视图的时候。比如说， 当 UINavigationController 和 UITabbarController 中的 bar 是半透明(translucent) 状态的时候, 就有 <code>additionalSafeAreaInsets</code></p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/2017-10-24-034928.jpg" width="300"></p>
<p>自定义的 View 上面的 label 布局兼容了 safe area。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// UIView</span></div><div class="line"><span class="meta">@available</span>(iOS <span class="number">11.0</span>, *)</div><div class="line">open <span class="function"><span class="keyword">func</span> <span class="title">safeAreaInsetsDidChange</span><span class="params">()</span></span></div><div class="line"></div><div class="line"><span class="comment">//UIViewController</span></div><div class="line"><span class="meta">@available</span>(iOS <span class="number">11.0</span>, *)</div><div class="line">open <span class="function"><span class="keyword">func</span> <span class="title">viewSafeAreaInsetsDidChange</span><span class="params">()</span></span></div></pre></td></tr></table></figure>
<p>这两个方法分别是 UIView 和 UIViewController 的 safe area insets 发生改变时调用的方法，如果需要做一些处理，可以重写这个方法。有点类似于 KVO 的意思。</p>
<h4 id="模拟-iPhone-X-的-safe-area"><a href="#模拟-iPhone-X-的-safe-area" class="headerlink" title="模拟 iPhone X 的 safe area"></a>模拟 iPhone X 的 safe area</h4><p>额外的 safe area insets 也能用来测试你的 app 是否支持 iPhone X。在没有 iPhone X 也不方便使用模拟器的时候， 这个还是很有用的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//竖屏</div><div class="line">additionalSafeAreaInsets.top = 24.0</div><div class="line">additionalSafeAreaInsets.bottom = 34.0</div><div class="line"></div><div class="line">//竖屏, status bar 隐藏</div><div class="line">additionalSafeAreaInsets.top = 44.0</div><div class="line">additionalSafeAreaInsets.bottom = 34.0</div><div class="line"></div><div class="line">//横屏</div><div class="line">additionalSafeAreaInsets.left = 44.0</div><div class="line">additionalSafeAreaInsets.bottom = 21.0</div><div class="line">additionalSafeAreaInsets.right = 44.0</div></pre></td></tr></table></figure>
<h3 id="UIScrollView-中的-safe-area"><a href="#UIScrollView-中的-safe-area" class="headerlink" title="UIScrollView 中的 safe area"></a>UIScrollView 中的 safe area</h3><p>在 scroll view 上加一个 label。设置scroll 的约束为:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">scrollView.snp.makeConstraints &#123; (make) <span class="keyword">in</span></div><div class="line">    make.edges.equalToSuperview()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/2017-10-24-064951.jpg" width="300"></p>
<p>iOS 7 中引入 UIViewController 的 <em>automaticallyAdjustsScrollViewInsets</em> 属性在 iOS11 中被废弃掉了。取而代之的是 UIScrollView  的 <em>contentInsetAdjustmentBehavior</em></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@available</span>(iOS <span class="number">11.0</span>, *)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">UIScrollViewContentInsetAdjustmentBehavior</span> : <span class="title">Int</span> </span>&#123;    </div><div class="line">    <span class="keyword">case</span> automatic          <span class="comment">//default value</span></div><div class="line">    <span class="keyword">case</span> scrollableAxes</div><div class="line">    <span class="keyword">case</span> never</div><div class="line">    <span class="keyword">case</span> always</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@available</span>(iOS <span class="number">11.0</span>, *)</div><div class="line">open <span class="keyword">var</span> contentInsetAdjustmentBehavior: <span class="type">UIScrollViewContentInsetAdjustmentBehavior</span></div></pre></td></tr></table></figure>
<h4 id="Content-Insets-Adjustment-Behavior"><a href="#Content-Insets-Adjustment-Behavior" class="headerlink" title="Content Insets Adjustment Behavior"></a>Content Insets Adjustment Behavior</h4><p><em>never</em> 不做调整。</p>
<p><em>scrollableAxes</em> content insets 只会针对 scrollview 滚动方向做调整。</p>
<p><em>always</em> content insets 会针对两个方向都做调整。</p>
<p><em>automatic</em> 这是默认值。当下面的条件满足时， 它跟 always 是一个意思</p>
<ul>
<li>能够水平滚动，不能垂直滚动</li>
<li>scroll view 是 当前 view controller 的第一个视图</li>
<li>这个controller 是被navigation controller 或者 tab bar controller 管理的</li>
<li><em>automaticallyAdjustsScrollViewInsets</em> 为 true</li>
</ul>
<p>在其他情况下 <em>automoatc</em> 跟 <em>scrollableAxes</em> 一样</p>
<h4 id="Adjusted-Content-Insets"><a href="#Adjusted-Content-Insets" class="headerlink" title="Adjusted Content Insets"></a>Adjusted Content Insets</h4><p>iOS 11 中 UIScrollView 新加了一个属性: <em>adjustedContentInset</em></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@available</span>(iOS <span class="number">11.0</span>, *)</div><div class="line">open <span class="keyword">var</span> adjustedContentInset: <span class="type">UIEdgeInsets</span> &#123; <span class="keyword">get</span> &#125;</div></pre></td></tr></table></figure>
<p><em>adjustedContentInset</em> 和 <em>contentInset</em> 之间有什么区别呢？</p>
<p>在同时有 navigation 和 tab bar 的 view controller 中添加一个 scrollview 然后分别打印两个值:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//iOS 10</span></div><div class="line"><span class="comment">//contentInset = UIEdgeInsets(top: 64.0, left: 0.0, bottom: 49.0, right: 0.0)</span></div><div class="line"><span class="comment">//iOS 11</span></div><div class="line"><span class="comment">//contentInset = UIEdgeInsets(top: 0.0, left: 0.0, bottom: 0.0, right: 0.0)</span></div><div class="line"><span class="comment">//adjustedContentInset = UIEdgeInsets(top: 64.0, left: 0.0, bottom: 49.0, right: 0.0)</span></div></pre></td></tr></table></figure>
<p>然后再设置:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 给 scroll view 的四个方向都加 10 的间距</span></div><div class="line">scrollView.contentInset = <span class="type">UIEdgeInsets</span>(top: <span class="number">10</span>, <span class="keyword">left</span>: <span class="number">10</span>, bottom: <span class="number">10</span>, <span class="keyword">right</span>: <span class="number">10</span>)</div></pre></td></tr></table></figure>
<p>打印:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//iOS 10</span></div><div class="line"><span class="comment">//contentInset = UIEdgeInsets(top: 74.0, left: 10.0, bottom: 59.0, right: 10.0)</span></div><div class="line"><span class="comment">//iOS 11</span></div><div class="line"><span class="comment">//contentInset = UIEdgeInsets(top: 10.0, left: 10.0, bottom: 10.0, right: 10.0)</span></div><div class="line"><span class="comment">//adjustedContentInset = UIEdgeInsets(top: 74.0, left: 10.0, bottom: 59.0, right: 10.0)</span></div></pre></td></tr></table></figure>
<p>由此可见，在 iOS 11 中 scroll view 实际的 content inset 可以通过 <em>adjustedContentInset</em> 获取。这就是说如果你要适配 iOS 10 的话。这一部分的逻辑是不一样的。</p>
<p>系统还提供了两个方法来监听这个属性的改变</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//UIScrollView</span></div><div class="line"><span class="meta">@available</span>(iOS <span class="number">11.0</span>, *)</div><div class="line">open <span class="function"><span class="keyword">func</span> <span class="title">adjustedContentInsetDidChange</span><span class="params">()</span></span></div><div class="line"></div><div class="line"><span class="comment">//UIScrollViewDelegate</span></div><div class="line"><span class="meta">@available</span>(iOS <span class="number">11.0</span>, *)</div><div class="line"><span class="keyword">optional</span> <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">scrollViewDidChangeAdjustedContentInset</span><span class="params">(<span class="number">_</span> scrollView: UIScrollView)</span></span></div></pre></td></tr></table></figure>
<h3 id="UITableView-中的-safe-area"><a href="#UITableView-中的-safe-area" class="headerlink" title="UITableView 中的 safe area"></a>UITableView 中的 safe area</h3><p>我们现在再来看一下 UITableView 中 safe area 的情况。我们先添加一个有自定义 header 以及自定义 cell 的 tableview。设置边框为 self.view 的边框。也就是</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tableView.snp.makeConstraints &#123; (make) <span class="keyword">in</span></div><div class="line">	make.edges.equalToSuperview()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tableView.frame = view.bounds</div></pre></td></tr></table></figure>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/2017-10-23-073208.jpg"></p>
<p>自定义的 header 上面有一个 lable，自定义的 cell 上面也有一个 label。将屏幕横屏之后会发现，cell 以及 header 的布局均自动留出了 safe area 以外的距离。cell 还是那么大，只是 cell 的 contnt view 留出了相应的距离。这其实是 UITableView 中新引入的属性管理的:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@available</span>(iOS <span class="number">11.0</span>, *)</div><div class="line">open <span class="keyword">var</span> insetsContentViewsToSafeArea: <span class="type">Bool</span></div></pre></td></tr></table></figure>
<p><code>insetsContentViewsToSafeArea</code> 的默认值是 true， 将其设置成 no 之后:</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/2017-10-24-025524.jpg"></p>
<p>可以看出来 footer 和 cell 的 content view 的大小跟 cell 的大小相同了。这就是说：<strong>在 iOS 11 下, 并不需要改变 header/footer/cell 的布局， 系统会自动区适配 safe area</strong></p>
<p>需要注意的是, Xcode 9 中使用 IB 拖出来的 TableView 默认的边框是 safe area 的。所以实际运行起来 tableview 都是在 safe area 之内的。</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/2017-10-24-live.gif"></p>
<h3 id="UICollectionView-中的-safe-area"><a href="#UICollectionView-中的-safe-area" class="headerlink" title="UICollectionView 中的 safe area"></a>UICollectionView 中的 safe area</h3><p>我们在做一个相同的 collection view 来看一下 collection view 中是什么情况:</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/2017-10-24-025524.jpg"></p>
<p>这是一个使用了 <code>UICollectionViewFlowLayout</code> 的 collection view。 滑动方向是竖向的。cell 透明， cell 的 content view 是白色的。这些都跟上面 table view 一样。header(UICollectionReusableView) 没有 content view 的概念, 所以给其自身设置了红色的背景。</p>
<p>从截图上可以看出来， collection view 并没有默认给 header cell footer 添加safe area 的间距。能够将布局调整到合适的情况的方法只有将 header/ footer / cell 的子视图跟其 safe area 关联起来。跟 IB 中拖 table view 一个道理。</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/2017-10-24-030448.jpg"></p>
<p>现在我们再试试把布局调整成更像 collection view 那样:</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/2017-10-24-030732.jpg"></p>
<p>截图上可以看出来横屏下, 左右两边的 cell 都被刘海挡住了。这种情况下, 我们可以通过修改 section insets 来适配 safe area 来解决这个问题。但是再 iOS 11 中， UICollectionViewFlowLayout 提供了一个新的属性 <em>sectionInsetReference</em> 来帮你做这件事情。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@available</span>(iOS <span class="number">11.0</span>, *)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">UICollectionViewFlowLayoutSectionInsetReference</span> : <span class="title">Int</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">case</span> fromContentInset</div><div class="line"></div><div class="line">    <span class="keyword">case</span> fromSafeArea</div><div class="line"></div><div class="line">    <span class="keyword">case</span> fromLayoutMargins</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/// The reference boundary that the section insets will be defined as relative to. Defaults to `.fromContentInset`.</span></div><div class="line"><span class="comment">/// <span class="doctag">NOTE:</span> Content inset will always be respected at a minimum. For example, if the sectionInsetReference equals `.fromSafeArea`, but the adjusted content inset is greater that the combination of the safe area and section insets, then section content will be aligned with the content inset instead.</span></div><div class="line"><span class="meta">@available</span>(iOS <span class="number">11.0</span>, *)</div><div class="line">open <span class="keyword">var</span> sectionInsetReference: <span class="type">UICollectionViewFlowLayoutSectionInsetReference</span></div></pre></td></tr></table></figure>
<p>可以看出来，系统默认是使用 <code>.fromContentInset</code> 我们再分别修改, 看具体会是什么样子的。 </p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/2017-10-24-032133.jpg"></p>
<center>fromSafeArea</center>

<p>这种情况下 section content insets 等于原来的大小加上 safe area insets 的大小。</p>
<p>跟使用 <code>.fromLayoutMargins</code> 相似使用这个属性 colection view 的 layout margins 会被添加到 section content insets 上面。</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/2017-10-24-032133.jpg"></p>
<h3 id="IB-中的-Safe-Area"><a href="#IB-中的-Safe-Area" class="headerlink" title="IB 中的 Safe Area"></a>IB 中的 Safe Area</h3><p>前面的例子都说的是用代码布局要实现的部分。但是很多人都还是习惯用 Interface Builder 来写 UI 界面。苹果在 WWDC 2107 Session 412 中提到:<strong>Storyboards 中的 safe area 是向下兼容的</strong> 也就是说, 即使在 iOS10 及以下的 target 中，也可以使用 safe area 来做布局。<strong>唯一需要做的就是给每个 stroyboard 勾选 Use Safe Area Layout Guide</strong>。实际测试看，应该是 iOS9 以后都只需要这么做。</p>
<p><strong>知识点</strong>: 在使用 IB 设置约束之后， 注意看相对的是 superview 还是 topLayoutGuide/bottomLayoutGuide， 包括在 Xcode 9 中勾选了 Use Safe Area Layout Guide 之后，默认应该是相对于 safe area 了。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>在适配 iPhone X 的时候首先是要理解 safe area 是怎么回事。盲目的 <code>if iPhoneX{}</code> 只会给之后的工作代码更多的麻烦。</li>
<li>如果只需要适配到 iOS9 之前的 storyboard 都只需要做一件事情。</li>
<li>Xcode9 用 IB 可以看得出来, safe area 到处都是了。理解起来很简单。就是系统对每个 View 都添加了 safe area， 这个区域的大小，是否跟 view 的大小相同是系统来决定的。在这个 View 上的布局只需要相对于 safe area 就可以了。每个 View 的 safe area 都可以通过 iOS 11 新增的 API <strong>safeAreaInsets</strong> 或者 <strong>safeAreaLayoutGuide</strong> 获取。</li>
<li>对与 UIViewController 来说新增了 <strong>additionalSafeAreaInsets</strong> 这个属性, 用来管理有 tabbar 或者 navigation bar 的情况下额外的情况。</li>
<li>对于 UIScrollView， UITableView， UICollectionView 这三个控件来说，系统以及做了大多数的事情。<ul>
<li>scrollView 只需要设置 contentInsetAdjustmentBehavior 就可以很容易的适配带 iPhoneX</li>
<li>tableView 只需要在 cell header footer 等设置约束的时候相对于 safe area 来做</li>
<li>对 collection view 来说修改 <em>sectionInsetReference</em> 为 .safeArea 就可以做大多数的事情了。</li>
</ul>
</li>
<li>总的来说， safe area 可以看作是系统在所有的 view 上加了一个虚拟的 view， 这个虚拟的 view 的大小等都是跟 view 的位置等有关的(当然是在 iPhoneX上才有值) <strong>以后在写代码的时候，自定义的控件都尽量针对 safe area 这个虚拟的 view 进行布局。</strong></li>
</ol>
<p><a href="https://medium.com/rosberryapps/ios-safe-area-ca10e919526f">参考文章</a> 可能需要梯子<br><a href="https://useyourloaf.com/blog/safe-area-layout-guide/">参考文章</a> 可能需要梯子</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Swift4 中的范型约束]]></title>
      <url>http://www.CepheusSun.com/Swift4%E4%B8%AD%E7%9A%84%E8%8C%83%E5%9E%8B%E7%BA%A6%E6%9D%9F.html</url>
      <content type="html"><![CDATA[<p>范型可以说是 Swift 跟 OC 相比最大的优势了。通过给像集合这类东西关联范型, 可以写出更可预测并且更安全的代码。在 Swift4 中类型约束更为强大， 它能够让我们更能够轻而易举的做很多事情。即使是通用代码, 也能充分的利用 Swift 的类型系统。</p>
<h2 id="例1"><a href="#例1" class="headerlink" title="例1:"></a>例1:</h2><p>首先我们来看看一个简单的例子。比如说给一个数字数字求和。我们可能会些这样的代码:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在这段代码中, 我们定义了一个方法, 接受一个 Int 数组作为参数, 在方法内部使用高阶函数 reduce 最后返回这个结果。</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(<span class="number">_</span> numbers: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">return</span> numbers.<span class="built_in">reduce</span>(<span class="number">0</span>, +)</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</div><div class="line">sum(array) <span class="comment">// 15</span></div></pre></td></tr></table></figure>
<p>使用范型约束, 我们可以这样来实现这个需求:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在这段代码中, 我们给 Array 添加了类型约束的 Extension。当数组的 Element 遵守了 Numeric 协议的时候, Array 就拥有 sum 这个方法。</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Array</span> <span class="title">where</span> <span class="title">Element</span>: <span class="title">Numeric</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">()</span></span> -&gt; <span class="type">Element</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">reduce</span>(<span class="number">0</span>, +)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">array.sum() <span class="comment">// 15</span></div></pre></td></tr></table></figure>
<p>两者相比, 使用范型约束最大的优势是使用扩展, 能够让这个功能跟调用者更紧密。比较一下:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> sum = sum(array)</div><div class="line"><span class="keyword">let</span> sum = array.sum()</div></pre></td></tr></table></figure>
<p>在 OC 里面， 可能有些同学会写一个 <code>XXXTool</code> 之类的类, 来封装这种类型的功能。 或者是直接写成 C 的函数。但是不论怎么写,  这样貌似都不是特别的 OOP。或者OC 还可以直接给 NSArray 加一个 category, 然后再实现相似的功能。但是, 这样做不就等于所有的 array 都具有这个功能了吗？</p>
<a id="more"></a>
<h2 id="例2"><a href="#例2" class="headerlink" title="例2"></a>例2</h2><p>再来看这样的需求: 计算某个包含字符串集合中有多少个单词。我们可以通过给集合添加一个扩展轻松的完成这件事情。给 <code>Collection</code> 添加一个约束, 限制集合中的 <code>Element</code> 是 <code>String</code>类型：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Collection</span> <span class="title">where</span> <span class="title">Element</span> == <span class="title">String</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">countWords</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">reduce</span>(<span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">let</span> components = $<span class="number">1</span>.components(separatedBy: .whitespacesAndNewlines)</div><div class="line">            <span class="keyword">return</span> $<span class="number">0</span> + components.<span class="built_in">count</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> array2 = [<span class="string">"sunny"</span>,<span class="string">"cloudy"</span>,<span class="string">"apple orange"</span>]</div><div class="line">array2.countWords() <span class="comment">// 4</span></div></pre></td></tr></table></figure>
<p>还有一个很酷的做法是约束集合类型中的 <code>Element</code> 是 <code>Closure</code>:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Sequence</span> <span class="title">where</span> <span class="title">Element</span> ==  () -&gt; <span class="title">Void</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">callAll</span><span class="params">()</span></span> &#123;</div><div class="line">        forEach &#123; $<span class="number">0</span>() &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> closure1 = &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"1"</span>)</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> closure2 = &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"2"</span>)</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> array3 = [closure1, closure2]</div><div class="line">array3.callAll() </div><div class="line"><span class="comment">//1</span></div><div class="line"><span class="comment">//2</span></div></pre></td></tr></table></figure>
<h2 id="例3"><a href="#例3" class="headerlink" title="例3"></a>例3</h2><p>还有一个很好用的特性是使用协议定义 API 的时候。这几乎是写可测试代码以及功能解耦的最佳实践了。需要注意的是, 在需要灵活使用嵌套类型的时候, 这可能会有点麻烦。</p>
<p>看例子吧！我们经常都想要定义一些通用的 API， 来管理程序中的各种 model。这时候肯定会想要定义一个协议:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">ModelManager</span> </span>&#123;</div><div class="line">    associatedtype <span class="type">Model</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在我们再来定一个查找符合某个条件的方法:传入某个查询条件, 然后返回符合这个条件的模型数组。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">ModelManager</span> </span>&#123;</div><div class="line">    associatedtype <span class="type">Model</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">models</span><span class="params">(matching query: String)</span></span> -&gt; [<span class="type">Model</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个时候， 这个协议变成了这样。这个样子依然有问题，不够灵活, 而且还有一个很恐怖的问题: 硬编码。接下来我们试着使用范型约束来使用 Swift 的类型系统, 让这个功能更灵活, 并且使用类型系统来解决硬编码的问题。</p>
<p>接下来， 再给 <code>ModelManager</code>  关联两个类型， <code>Query</code> 和 <code>Collection</code>。<code>Query</code> 用来描述查询的条件。他可以是任何东西, 只要能够描述查询条件就可以。当然, 个人认为可能 enum 是最好的选择。<code>Collection</code>用来描述查询结果, 他用来限制返回的结果就是这个管理类的模型。现在这个协议就成这样了:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">ModelManager</span> </span>&#123;</div><div class="line">    associatedtype <span class="type">Model</span></div><div class="line">    associatedtype <span class="type">Collection</span>: <span class="type">Swift</span>.<span class="type">Collection</span> <span class="keyword">where</span> <span class="type">Collection</span>.<span class="type">Element</span> == <span class="type">Model</span></div><div class="line">    associatedtype <span class="type">Query</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">models</span><span class="params">(matching query: Query)</span></span> -&gt; <span class="type">Collection</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有了上面的基础, 就可以很方便的实现一些具有查询功能的模型管理类了。比如说我们要用户管理类, 需要通过用户姓名和年龄段来查询符合要求的用户:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 定义 User 模型</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">User</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> name: <span class="type">String</span></div><div class="line">    <span class="keyword">var</span> age: <span class="type">Int</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// 定义 User 管理类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserManager</span>: <span class="title">ModelManager</span> </span>&#123;</div><div class="line">    <span class="keyword">typealias</span> <span class="type">Model</span> = <span class="type">User</span></div><div class="line">    <span class="comment">// 查询条件, 姓名或者年龄</span></div><div class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Query</span> </span>&#123;</div><div class="line">        <span class="keyword">case</span> name(<span class="type">String</span>)</div><div class="line">        <span class="keyword">case</span> ageRange(<span class="type">Range</span>&lt;<span class="type">Int</span>&gt;)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 查询方法</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">models</span><span class="params">(matching query: Query)</span></span> -&gt; [<span class="type">User</span>] &#123;</div><div class="line">        <span class="comment">// 这里做了几个假的数据</span></div><div class="line">        <span class="keyword">let</span> user1 = <span class="type">User</span>(</div><div class="line">            name: <span class="string">"sunny"</span>,</div><div class="line">            age: <span class="number">25</span>)</div><div class="line">        <span class="keyword">let</span> user2 = <span class="type">User</span>(</div><div class="line">            name: <span class="string">"lily"</span>,</div><div class="line">            age: <span class="number">18</span>)</div><div class="line">        <span class="keyword">let</span> user3 = <span class="type">User</span>(</div><div class="line">            name: <span class="string">"michael"</span>,</div><div class="line">            age: <span class="number">30</span>)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> users = [user1, user2, user3]</div><div class="line">        </div><div class="line">        <span class="keyword">switch</span> query &#123;</div><div class="line">        <span class="keyword">case</span> .name(<span class="keyword">let</span> name):</div><div class="line">            <span class="keyword">return</span> users.<span class="built_in">filter</span>&#123; $<span class="number">0</span>.name == name &#125;</div><div class="line">        <span class="keyword">case</span> .ageRange(<span class="keyword">let</span> range):</div><div class="line">            <span class="keyword">return</span> users.<span class="built_in">filter</span>&#123; range ~= $<span class="number">0</span>.age &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> manager = <span class="type">UserManager</span>()</div><div class="line">manager.models(matching: .name(<span class="string">"sunny"</span>)) <span class="comment">// [&#123;name "sunny", age 25&#125;]</span></div><div class="line">manager.models(matching: .ageRange(<span class="number">10</span> ..&lt; <span class="number">20</span>)) <span class="comment">// [&#123;name "lily", age 18&#125;]</span></div></pre></td></tr></table></figure>
<p>对有些模型来说, 使用字典来作为返回的 <code>Collection</code>可能是更好的方法。下面这个例子是用来通过影片名称和导演名字来筛选电影的例子。返回的结果通过电影分类来做分类。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 定义电影分类的枚举, 因为要作为字典的 Key 所有需要 Hashable 协议。</span></div><div class="line"><span class="comment">// 使用String 类型的枚举只是为了 hashValue</span></div><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Genre</span>: <span class="title">String</span>, <span class="title">Hashable</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> cartoon = <span class="string">"cartoon"</span></div><div class="line">    <span class="keyword">case</span> action = <span class="string">"action"</span></div><div class="line">    <span class="keyword">case</span> comedy = <span class="string">"Comedy"</span></div><div class="line">    </div><div class="line">    <span class="keyword">var</span> hashValue: <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.rawValue.hashValue</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> ==<span class="params">(lhs: Genre, rhs: Genre)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">        <span class="keyword">return</span> lhs.rawValue == rhs.rawValue</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 定义电影模型, 因为要作为字典的 Key 所有需要 Hashable 协议。</span></div><div class="line"><span class="comment">// 使用String 类型的枚举只是为了 hashValue</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Movie</span>: <span class="title">Hashable</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> name: <span class="type">String</span></div><div class="line">    <span class="keyword">var</span> director: <span class="type">String</span></div><div class="line">    <span class="keyword">var</span> genre: <span class="type">Genre</span></div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="keyword">var</span> hashValue: <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">Int</span>(<span class="string">"<span class="subst">\(name.hashValue)</span>"</span> + <span class="string">"<span class="subst">\(director.hashValue)</span>"</span>)!</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> ==<span class="params">(lhs: Movie, rhs: Movie)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">        <span class="keyword">return</span> lhs.name == rhs.name &amp;&amp; lhs.director == rhs.director &amp;&amp; lhs.genre == rhs.genre</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MovieManager</span>: <span class="title">ModelManager</span> </span>&#123;</div><div class="line">    <span class="keyword">typealias</span> <span class="type">Model</span>  = (key: <span class="type">Genre</span>, value: <span class="type">Movie</span>)</div><div class="line">    </div><div class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Query</span> </span>&#123;</div><div class="line">        <span class="keyword">case</span> name(<span class="type">String</span>)</div><div class="line">        <span class="keyword">case</span> director(<span class="type">String</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">models</span><span class="params">(matching query: Query)</span></span> -&gt; [<span class="type">Genre</span> : <span class="type">Movie</span>] &#123;</div><div class="line">	    <span class="comment">// 方法跟上个例子差不多, 就不实现了</span></div><div class="line">        <span class="keyword">return</span> [:]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用范型约束能够很容易的进行面向协议编程(POP)。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Scrum 实践步骤(摘自:《敏捷革命》)]]></title>
      <url>http://www.CepheusSun.com/Scrum%E5%AE%9E%E8%B7%B5%E6%AD%A5%E9%AA%A4(%E6%91%98%E8%87%AA%E3%80%8A%E6%95%8F%E6%8D%B7%E9%9D%A9%E5%91%BD).html</url>
      <content type="html"><![CDATA[<p>在现在这家公司带了一段时间了，发现了很多因为流程的不完善, 各个流程之间的衔接的不顺畅带来的”浪费”。加上之前有过的敏捷开发的经验, 和看过的一些想过的资料。又在微信读书上看了《敏捷革命》这本书,  才发现敏捷开发原来是一门非常厉害的学问。在看书的过程中就想着自己总结写一个类似于“破.守.离(先学习规则和形式,  掌握之后再进行创新。最后再特别熟悉的状态下，就可以摆脱形式的束缚，随性发挥。因为一切都已烂熟于心。几乎可以在下意识的状态下做出决定。)”的东西。看到最后就看到了这么一段。</p>
<a id="more"></a>
<ol>
<li><p><strong>挑选一位产品负责人。</strong>这个人必须知道自己带领的团队需要做什么、制造什么产品以及取得什么成果，必须全面考虑到风险与回报、什么具有可行性、什么能做以及他们对什么富有热情。</p>
</li>
<li><p><strong>挑选一个团队。</strong>真正做事的是谁？这个团队必须能够落实产品负责人的愿景。团队规模宜小不宜大，一般3～9人较为合适。</p>
</li>
<li><p><strong>挑选 Scrum 主管。</strong>主管为 Scrum 过程负责，负责培训团队其他成员，确保 Scrum 得到正确运用，帮助团队消除一切障碍。</p>
</li>
<li><p><strong>拟定待办事项清单，并确定优先顺序。</strong>这个清单高屋建瓴地列出为了落实产品负责人的愿景而需要完成的所有事项。在产品的整个研发过程中，这个清单一直存在，并有所演变，相当于产品研发的“路线图”。无论在任何时间，想要知道一个团队要做的所有事项(按照优先顺序排列)，待办事项清单都是唯一具有决定性的参考依据。待办事项清单只有一份，意味着产品负责人从头到尾必须不断地对优先顺序加以调整。产品负责人应该与所有利益相关者和团队进行协商，以确保产品待办事项清单既能反映用户的需求，又不会超出团队的能力范围。</p>
</li>
<li><p><strong>改进和评估待办事项清单。</strong>让负责实际开发工作的团队对待办事项作出评估，是一个至关重要的环节。团队应该审视每个事项，看看是否切实可行。但要完成这些事项，现有的信息足够吗？该项目是否细分到了可以评估的程度？团队是否具有了每个成员都能接受、用于评定一个事项已完成的标准？一个事项能够带来显著的价值？各个事项在完成后必须产生能够用来展示的成果，如果这个成果能够交付给客户试用会更好。不要用所需小时去评估，一位人们根本不擅长做出这么精确的评估。要用相对难度去评估，比如，难度是小、中或大。更好的方式是采用斐波那契数列的数字(1,2,3,5,8,13,21……)。</p>
</li>
<li><p><strong>冲刺规划会。</strong>这是一场 Scrum 会议。团队成员、Scrum 主管以及产品负责人坐到一起，规划冲刺的内容。冲刺周期一般是固定的，不超过一个月，大部分是一至两周。团队要从待办事项的顶端着手(即从最重要的事项着手)，看看一个冲刺阶段中能完成多少。如果团队已经开展过好几个冲刺，那就记录下每个冲刺完成事项的”点数“。这个数字相当于团队的速度。 Scrum 主管与团队成员应努力在每一个冲刺阶段中提高这个数字。团队成员和产品负责人也可以借助“点数”确保每个人都能够了解待办事项对于落实最终愿景的作用。对于冲刺目标，即在这一冲刺阶段完成那些事项，所有人都应形成共识。</p>
<p>​    Scrum 的基石之一在于，产品负责人告诉开发团队他需要完成产品订单中的那些订单项。开发团队决定在下一次冲刺中他们能够承诺完成多少订单项。在冲刺的过程中，没有人能够变更冲刺内容。团队必须在冲刺阶段自主工作。</p>
</li>
<li><p><strong>工作透明化。</strong>在 Scrum 中，最常见的做法是准备一块白板，上面分成三栏：待办事项、在办事项、完成事项。把待办事项写到便签纸上，随着进度的推进，将相应的便签纸转移到其他栏目。</p>
<p>​    让工作透明化的另一个工具是燃尽图。在这张图中，一个轴代表工作量，另一个轴代表时间。每天，Scrum 主管都会记录待完成的剩余点数，而后画在燃尽图。理想的情况下，该图是一条向下的曲线，随着剩余工作的完成，“燃尽”至零。</p>
</li>
<li><p><strong>每日立会。</strong>这是 Scrum 的活力源泉。团队每天在固定时间进行内部沟通，时间一般不超过15分钟，且站立进行，Scrum 主管想团队成员提出下列问题:</p>
<ol>
<li><p>你昨天做了什么去帮助团队完成冲刺？</p>
</li>
<li><p>今天你打算做什么来帮助团队完成冲刺？</p>
</li>
<li><p>什么因素阻碍了团队的前进之路？</p>
</li>
</ol>
</li>
</ol>
<p>​        Scrum主管要问的问题就是这么多！整个会议的内容就是这么多！如果会议时间超过15分钟，那就说明开会的方法存在问题。这样做的意义在于让整个团队清楚地知道在这一个冲刺周期内各项任务的进展。所有任务都能按时完成吗？有没有机会帮助其他团队成员克服障碍？团队的任务都不是自上而下分派的，而是自主决定、自主完成的，也不需要向上司做详细的汇报。Scrum 主管负责消除团队面临的障碍。</p>
<ol>
<li><p><strong>冲刺评估或冲刺展示。</strong>在冲刺结束前，给产品负责人展示成果，也就是展示哪些事项可以挪到“完成事项”那一栏，并且接受评价。这是一场公开的会议，任何人都可以是参与者，不仅仅包括产品负责人、Scrum 主管及开发团队，还包括利益相关者、管理人员与客户。<br>​        团队应该只展示那些符合“完成定义”的事项，也就是全部完成，不需要在做工作就能交付的成果。这个成果或许不是完成的产品，但至少是一项完整的、可以使用的功能。</p>
</li>
<li><p><strong>冲刺回顾。</strong>团队展示之前冲中创造的成果，也就是展示已完成的事项，看看可以为顾客传递哪些价值，并征求反馈意见，大家就会坐下来想想哪些事执行得很顺利，哪些事应该做的更好，以及在下一个冲刺阶段中做出什么改善。那么，如何发现流程中的哪个环节需要改善呢？</p>
<p>​    要让这个冲刺回顾过程有效，团队需要互相信任。必须记住关键的一点，即大家不要从团队中找一个人当成责备对象，而是要将注意力集中在流程上，认真分析一下几个问题：为什么会发生那件事？为什么我们当时忽略了？怎样才能加快工作进度？作为一个团队，大家要集思广益，共同寻求问题解决之道。这一点是至关重要的。</p>
<p>​    于此同时，团队必须有勇气把真正的障碍摆到台面上来，这样做是为了解决问题，而不是为了指责某个成员。团队成员必须能够认真探讨问题，并虚心接受他人反馈的意见和建议，以便寻求问题解决之道，而非只想着为自己辩解。</p>
<p>​    然后就进入了关键环节。团队确定一个最值得改善的地方，将其设定为下一个冲刺阶段的首要任务，当然，改善的结果必须通过“验收测试”。你如何证明自己成功的完成了改善？你需要用具体的、可操作的方式界定什么是“成功”，这样，在下一个冲刺回顾会议中才能很快判断出是否已完成改善。</p>
</li>
<li><p><strong>上一个冲刺阶段结束后，立即开始新的冲刺阶段。</strong>利用在之前的冲刺过程中，团队在消除障碍、改善流程方面积累的经验。</p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[你好！若尔盖]]></title>
      <url>http://www.CepheusSun.com/%E4%BD%A0%E5%A5%BD%EF%BC%81%E8%8B%A5%E5%B0%94%E7%9B%96.html</url>
      <content type="html"><![CDATA[<p>国庆来了一次说走就走，除了开车很累，还有轻微的高原反应，一切都很好。</p>
<p>一次旅行，还是想到了很多…</p>
<a id="more"></a>
<p><img src="http://upload-images.jianshu.io/upload_images/1769276-623549c6a8bce98a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1080/q/50" alt="红原的牧民家"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1769276-e99cc3ebc8621174.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1080/q/50" alt="花湖"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1769276-e2f6516dadda9c14.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1080/q/50" alt="天空"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1769276-dfa9c5ac1727db9c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1080/q/50" alt="松潘，尕力台大桥"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1769276-4ae9c9f84459574e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1080/q/50" alt="在路上"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1769276-c2ab626a5629dbeb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1080/q/50" alt="貌似是白河"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1769276-cbd39de9355eb7c5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1080/q/50" alt="女伴"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1769276-bd52c466ac8c3f33.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1080/q/50" alt="红原的马，黄昏"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1769276-5758663bb051f786.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1080/q/50" alt="我，和我的车"></p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/2017-10-06-052546.jpg" alt=""><img src="http://ocg4av0wv.bkt.clouddn.com/2017-10-06-052701.jpg" alt=""></p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/2017-10-06-052720.jpg" alt=""></p>
<p>这个时候海拔一直在网上爬。</p>
<p>牦牛就开始多了起来了, 之后沿途都有很多的牦牛。</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/2017-10-06-052756.jpg" alt=""></p>
<p>原谅我单反玩的不好， 大上午的拍成了这样。我们也不断的要停下车来拍照什么的。</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/2017-10-06-052902.jpg" alt=""></p>
<p>运气真的很好， 或者是真的季节到了。沿途有好几十公里都是这样的景色。在往前走没多久, 就开始出现草原的。</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/2017-10-06-053052.jpg" alt=""></p>
<p>第一次看见草原，真的很兴奋。</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/2017-10-06-053127.jpg" alt=""></p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/2017-10-06-054014.jpg" alt=""></p>
<p>这张照片很漂亮, 远处的雪山, 路，云 , 草原。</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/2017-10-06-054323.jpg" alt=""></p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/2017-10-06-054415.jpg" alt=""></p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/2017-10-06-054444.jpg" alt=""></p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/2017-10-06-054521.jpg" alt=""></p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/2017-10-06-054553.jpg" alt=""></p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/2017-10-06-054621.jpg" alt=""></p>
<p>2017年国庆。 成都-成灌、都汶高速-汶川-G213-松潘-G213-若尔盖-S209-红原-G317-马尔康-G317-理县-汶川-成都</p>
<p>这一次，算是圆了草原梦了，一直都很想到草原，到沙漠，到大海。</p>
<p>这一次，也学到了好多东西，至少在地理上面，更清楚哪里是哪里了。</p>
<p>这一趟，毫无压力的挨住了4300的海拔，在4300海拔的地方快跑爬坡，没有什么特别的感觉。以后可以找机会去西藏了。</p>
<p>运气很好，因为前段时间九寨沟地震的缘故，全程交通十分畅通，以至于在213国道上，超速了，6分。还好平时开车稳，在成都几乎不可能违章扣分。</p>
<p>也是因为运气吧，也不叫运气。在松潘的时候下了一场雨。不知道是不是因为这个原因，松潘去若尔盖的路上，遇到了几乎100公里的雪山。很漂亮，特别是配合着雪地里的牦牛。成都全年不下雪，所以很震撼。</p>
<p>路上的风景真的很漂亮，甚至比最终的目的地还要漂亮。这次出门实际上是没有目的地的，出门的时候只是想看看能走多远。然后一不小心就走到了若尔盖。在花湖玩了之后，还想过继续往前走的，走了可能一个小时，想着再往前就是甘肃境内了，当时不知道甘肃有什么好玩的就决定往回走红原了。后来查了下甘南，其实再往前走走还是很有意思的。花湖，因为季节的原因，并没有花，只是里面有一个湖，并没有get到什么，那边路途上湖不多，水到挺多，在Google earth上看湖都离路远。不知道那里是无人区还是怎么样。除了那个湖，就只有草原了，但是沿途基本上都是无穷无尽的草原，所以……</p>
<p>上了高原之后，整个的旅途都是摄影爱好者的天堂，真的是随便一拍都是桌面的感觉。我这种渣渣，都拍到了一些自己还蛮喜欢的照片。</p>
<p>若尔盖到红原，这条路，路况非常好。风景个人觉得比松潘到若尔盖的草原漂亮。但是松潘线上毕竟几十公里雪山，都很喜欢。</p>
<p>准备工作做的不好，所以这次旅行没有尽兴。</p>
<p>自驾游，很给力。就是开车的人很辛苦。这一次全程我自己开车。要是有一个比较信任驾驶技术的老司机同行就好了，可以换着开。在若尔盖，因为太累，都把车停路边睡了半个小时。前一天认床，几乎一夜没睡。</p>
<p>高原土豪真多。骑马的时候跟牧民聊天，他们家最多的时候有2000多头牦牛，几千到一万多一头，随随便便一两千万的家底儿啊。我得写多少代码。</p>
<p>高原也挺落后的，跟我聊天的牧民居然娶了俩媳妇儿，而且当地打女人很正常。想想成都的耙耳朵，唉……</p>
<p>下次想走走康定新都桥这条线，看看能走多远。</p>
<p>有机会还是要走到青海湖。放假前一个月还在考虑要不要去呢？</p>
<p>西藏是一定要去的，川藏线那么美。</p>
<p>下次换车一定换越野，出去玩，还是排量大点的越野得劲儿啊。至少排量要大点啊，1.6的排量，跑起来真的好辛苦。</p>
<p>以后还是要多读书，到松潘的时候，第一想到的居然是松潘黄龙，而不是文成公主。好歹受过高等教育，今年也多多少少关注了一下历史，实在是不应该啊！</p>
<p>以后还是应该带着父母去这些地方，这两年因为老妈太忙可能没机会，看到这样的雪，这样的风景，她肯定会非常兴奋的。</p>
<p>回来之后看到追逐藏羚羊的消息，真的是不知道说什么。旅行，还是应该带着信仰，带着对大自然的敬畏去的。不知道这些人旅行的意义是什么。</p>
<p>本来以为会看到朝拜的人，确实没有这份幸运。网上有人说愚昧，不管怎么样，也应该尊重别人的信仰，他们信仰这些，跟我们信仰科学一样，没有高低之分，信仰是无价的，而大多数中国人缺的就是这个。</p>
<p>很想保护住这些东西，网上看到，青藏高原的冰川消失的速度，实在感到痛心。就跟人的生老病死一样，这件事情让我感觉很无力。要是能好好的保护就好了。</p>
<p>回来之后好好看看余秋雨先生的《山河之书》。</p>
<p>还有一点，一路都在感叹当年红军长征时候的不易。我们还是应该珍惜现在的一切，作为党员，还是觉得我们的干部们都应该去体验一下长征路，好好的想想那些老前辈。党不忘本，党员干部更不应该…</p>
<p>下次去高原应该:</p>
<p>1.带冬天的衣服，毕竟若尔盖全年平均气温只有2度。</p>
<p>2.带唇膏，风吹的嘴巴真的好干。</p>
<p>3.带帐篷睡袋。一个牧民告诉我的，这样确实很酷。</p>
<p>4.红景天，抱着对自己对同伴负责的态度。提前预防高原反应。红原出来在长江黄河分水岭有4300+的海拔，红原3500左右，加上恶劣的气候。虽然只是在青藏高原的边缘。很多人还是会高反的，在红原的酒店遇到了好几个高反的游客。</p>
<p>5.爱护哪里的一草一木，以及可能遇到的牛羊马。</p>
<p>最后了。</p>
<p>很爱旅行，很爱大自然。希望那里一切都好。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[半年的远程办公我学到了什么]]></title>
      <url>http://www.CepheusSun.com/%E5%8D%8A%E5%B9%B4%E7%9A%84%E8%BF%9C%E7%A8%8B%E5%8A%9E%E5%85%AC%E6%88%91%E5%AD%A6%E5%88%B0%E4%BA%86%E4%BB%80%E4%B9%88.html</url>
      <content type="html"><![CDATA[<p><a href="https://dev.to/peteranglea/6-months-of-working-remotely-taught-me-a-thing-orten">6 Months of Working Remotely Taught Me a Thing or Ten</a>这篇文章是我在 Twitter 上看到的, 作者自身具有半年的远程开发经历。作为一种还算比较新的团队合作方式, 远程办公这种形式对自身以及团队都有着比较高的要求。我本身对这样的工作方式也非常向往(虽然在目前看来不大可能实现)，但是还是希望能够学到更多有用的东西…</p>
<a id="more"></a>
<p>下面是文章的翻译:</p>
<p>六个月以前, 我入职 Helix Education 这家公司的高级前端工程师。工作内容跟我之前的工作经历基本相同: 制作网页,  写代码, 与作家还有设计师合作。</p>
<p>唯一的区别是我现在是远程办公了。并且, 我跟我的同事们基本上都不在同一个时区。</p>
<p>开始第一份远程办公的工作之前,  我并不知道, 我需要准备些什么东西。在接受这个挑战之前, 我查了很多资料。我还是不确定它会跟别人说的那么好, 还是会给我的工作、学习中带来一场灾难。</p>
<p>但是现在看起来, 远程办公是一把双刃剑。有很多的优点, 也有一些缺点。如果你自己正在远程办公或者打算找一个这样的工作, 下面是我在六个月的时间里总结到了十点经验。</p>
<h3 id="1-让别人随时能找到你"><a href="#1-让别人随时能找到你" class="headerlink" title="1. 让别人随时能找到你"></a>1. 让别人随时能找到你</h3><p>这是我在前辈那里得到最好的经验了。在家办公, 肯定会有很多需要沟通的部分, 如果你什么时候联系不上了, 需要联系到你的那个人的工作就不得不被你给耽误。</p>
<p>只有1分钟的事情，却等了你好几个小时。你就会在你的同事的心中树立”那哥们总是不在”的形象。</p>
<p>远程办公, 就必须要避免给别人留下这种印象。</p>
<p>努力建立起随时都能找到你的形象。及时获取项目最近的状态, 不然你就跟你的同事不同步了。</p>
<p>你们之间可能还会有时差。由于时差的关系, 我的时间比我的同事早了两个小时。如果没有必要强行把时间调整同步的话, 一定要确定别人知道在什么时候能够及时的联系到你。并且确实能够联系到你。利用只有你自己在工作的时间尽可能的高效工作。 这样做, 你才有时间去给其他人沟通。</p>
<h3 id="2-沟通的时候说清楚"><a href="#2-沟通的时候说清楚" class="headerlink" title="2. 沟通的时候说清楚"></a>2. 沟通的时候说清楚</h3><p>远程办公绝大部分的沟通都是通过 Chat Slack， HipChat， text messages 这些方式进行的。跟面对面的沟通不同, 没有了那些语言表达的技巧和面部表情, 很容易出现在理解上的偏差。</p>
<p>除非你和同事之间已经非常了解了, 不要小看<strong>避免理解偏差</strong>这件事情。在你点击发送按钮的时候,  看一下你到底说了什么。确保这些话在不同的心情或者语调下他们的意思不会被误解。</p>
<p>当你们在进行视频会议的时候, 尽可能的简洁。 视频传送过程中偶尔出现的卡顿, 可能会带来一些误解, 或者会被要求重新说一遍。还有就是微笑, <strong>微笑能提升你的颜值哦！ </strong></p>
<h3 id="3-别总是谈工作"><a href="#3-别总是谈工作" class="headerlink" title="3. 别总是谈工作"></a>3. 别总是谈工作</h3><p>花点时间去了解你的同事,  尤其是在加入新的团队的时候。不要每次交流都是在说工作。</p>
<p>跟他们聊聊打招呼, 聊聊天气, 聊聊办公室八卦(但是不要太多管闲事)。因为你不在办公室里面, 所以你也听不到她们在办公室里面的打趣, 或者是那些茶水间谈话。</p>
<p>除非是齐心协力的去做某件事情, 某个同事的生日, 有人离开这个团队, 或者是重要的通知。其他的部分, 你都会错过。</p>
<h3 id="4-多表达正面积极的东西"><a href="#4-多表达正面积极的东西" class="headerlink" title="4. 多表达正面积极的东西"></a>4. 多表达正面积极的东西</h3><p>你还需要去培养出团队协作的感觉。你没办法跟他们一起分享每一件小成功, 但是有一个积极的关系能够让你更轻松的把工作做好。</p>
<p>有些同事可能没有那么频繁的跟你沟通。在这种情况下, 要尽量让他们得到关于你的消息都是正面的。这就又回到了一个事实上:<strong>要积极地去塑造别人对自己的印象, 没有人喜欢一个消极的人。</strong></p>
<h3 id="5-舒适的工作环境能够提高效率"><a href="#5-舒适的工作环境能够提高效率" class="headerlink" title="5. 舒适的工作环境能够提高效率"></a>5. 舒适的工作环境能够提高效率</h3><p>对想远程办公的人来说, 能够在自己喜欢的咖啡厅工作是非常诱人的。但老实说, 这不大现实。在家里的办公桌上, 我的效率是平常的三倍(有三个屏幕, 笔记本 + 两个分屏)。如果需要, 是不是的换一个地方, 但是放弃游牧生活的话, 你会工作的更好。</p>
<p>还有, <strong>不要在卧室工作</strong>。一定要把工作和个人生活分开(在床上躺一会, 这太诱人了)。如果可以的话, 在家里划一个空间出来。不受打扰的工作(尤其是有小孩, 或者是总是打断你注意力的猫),  然后在工作结束之后再出来。</p>
<p>为了避免久坐, 建议去搞一个升降桌。我自己还有一个球椅, 它能够帮助我燃烧卡路里, 保持更健康的姿势, 并且还挺有趣的。</p>
<h3 id="6-穿上裤子工作"><a href="#6-穿上裤子工作" class="headerlink" title="6. 穿上裤子工作"></a>6. 穿上裤子工作</h3><p>另外一个已经远程办公很长时间的朋友告诉我, 上午开始工作之前就要把一切准备好。整理好被子, 梳好头发。穿上衣服(完全穿好-包括裤子) 。 他们通过视频通话只能看见你的脸, 并不代码你能那么自由。</p>
<p>你可以考虑穿的跟在办公室上班一样, 免得别人说你成天穿睡衣上班。在开始工作之前就让自己一切就绪, 能够让你很快的进入工作状态, 也能帮助你战胜惰性思想。</p>
<h3 id="7-多出门"><a href="#7-多出门" class="headerlink" title="7. 多出门"></a>7. 多出门</h3><p>即使你很享受独处,  也要放弃隐士这种倾向。我经常发现我已经好多天没出过门了。</p>
<p>去看看你的信箱(真的那种, btw, 国人貌似看了也没什么意义)。午餐时间出去走走。周末还是要走出去, 即使是帮人跑腿儿。</p>
<p>散步、阳光能对你的工作效率, 精神健康产生奇效。也能让你的思维活泛起来, 说不定什么时候就产生了什么奇效。</p>
<p>跟这个还有点关系的是。每天结束工作之后, 就没在回去接着做了。在远程工作的人来说, 这点很难。 毕竟工作就在你的隔壁房间。但是尽量不要回到办公桌上。每天晚上都列出来一个明天需要完成的工作清单, 然后等到明天说。这也是为什么要在你家里划出单独的空间来工作的原因。</p>
<h3 id="8-多视频交流"><a href="#8-多视频交流" class="headerlink" title="8. 多视频交流"></a>8. 多视频交流</h3><p>一直把自己隔离起来, 只是打打电话, 不可能建立起来正常的人际关系。在跟你交流的时候, 人们需要看见你的脸。有个朋友告诉我, 他从来没有让某个远程员工打开过摄像头, 最后的结果是, 他完全不了解。</p>
<h3 id="9-同时做多个项目"><a href="#9-同时做多个项目" class="headerlink" title="9. 同时做多个项目"></a>9. 同时做多个项目</h3><p>你没看错！ 这听起来像是要你从两头点蜡烛。但是如果是在远程办公的话。你不可能总是能随时找到你的同事。等别人回你消息的时候, 这样才能够随时有事情做。</p>
<p>远程办公，在沟通上肯定是低效的。要在这一点上提前做好准备。</p>
<h3 id="10-利用远程办公的福利-多承担负责"><a href="#10-利用远程办公的福利-多承担负责" class="headerlink" title="10. 利用远程办公的福利, 多承担负责"></a>10. 利用远程办公的福利, 多承担负责</h3><p>我没有说谎。远程办公有很多的福利。这是只有远程办公者特权。跟其他同事相比, 你节约了很多的时间和金钱上的开销。不要去炫耀这些(没人喜欢跟这种人一起工作)。</p>
<p>好好的利用你的空闲时间, 无论是对你自己, 还是对团队都是有好处的。不用每天早上挤1个小时地铁, 你可以比别人多休息一会儿。所以在工作的时候就应该更努力的工作。你也可以利用一部分的时间来阅读, 听听广播, 或者学习。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>远程办公是一项特权。 不一定是最理想的方式, 但是他会带来很大的回报。知道它潜在的风险,  并努力的去弥补这些缺陷。你会变得更高效,  跟同事的关系会更好,  让老板更开心！</p>
<p>好了,  回去工作吧！</p>
<p>别忘了穿裤子哦！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Swift4.Codable]]></title>
      <url>http://www.CepheusSun.com/Swift4.Codable.html</url>
      <content type="html"><![CDATA[<p>WWDC2017中发布的 Swift4.0 有一个有趣的新特性： Coadble. 今天我们就来聊聊这个 Swift4.0 带来的协议！</p>
<h3 id="Serialization"><a href="#Serialization" class="headerlink" title="Serialization"></a>Serialization</h3><p>对现在需要随时联网的移动应用来说，把值序列化成能够在硬盘或者通过网络传送的数据是一个基本的需求。但是在苹果的生态中我们的选择很有限。</p>
<a id="more"></a>
<ol>
<li><code>NSCoding</code> 协议提供了对复杂对象的序列化能力，它在自定义类型身上也是有效的。但是，不完善的系列化格式并不适合跨平台的需求, 并且他需要我们手写代码来做编解码的工作。</li>
<li><code>NSPropertyListSerialization</code> 和 <code>NSJSONSerialization</code> 能够让数据能够在 Cocoa 类(NSDictionary/NSString)和属性列表以及 JSON 之间转换。JSON 几乎是所有网络传输的标准格式。由于这些API 只提供了基础类型的转换, 我们必须要编写很多代码从这些值中取出具体类型信息。这些代码通常都是很难复用的，而且这种方式对脏数据的处理能力也不行。</li>
<li><code>NSXMLParser</code> and <code>NSXMLDocument</code> 这种方式是给那些受虐狂，或者是那些深陷 XML 泥潭的人使用的。基本数据和模型对象之间转换的工作还是需要程序员来做。</li>
</ol>
<p>这些方法往往会带来大量的样板代码。声明一个叫做 foo 的 Stirng 属性，这个属性会通过将 String 存储在 foo 下进行编码，并通过检索 foo 这个 key ，找到这个值，然后把它转换成String。如果在其中的某个过程中失败的话，就抛出错误。然后在声明第二个属性…..</p>
<p>程序员当然不可能会喜欢这类重复性的工作。这种工作是计算机做的事情。我们只想要做这样的事情:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Whatevet</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> foo: <span class="type">String</span></div><div class="line">  <span class="keyword">var</span> bar: <span class="type">String</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后他就可以序列化了。这其实是有可能的，毕竟所有必要的信息都有了。</p>
<p>映射是一个很常见的方法，很多 OC 的程序员都写过自动将 JSON 转换成 OC 类型的代码。OC 在运行时能够提供转换需要的所有信息。但是对 Swift 来说呢？ 我们当然也能够使用 OC 的 runtime 或者使用 Swift 的镜像, 然后用一些很奇怪的方法来弥补他在这方面的不足。</p>
<p>在苹果的生态系统之外，这已经是很多语言常见的解决方案了。但是这也可能带来奇怪的安全漏洞。</p>
<p>映射并不是一个很好的解决方案。让他出错并且导致安全问题是很容易的事情。它没有使用静态类型，导致了很多bug都只能在运行时才能暴露出来。并且它的效率也不高，因为它对元数据做了很多的字符串查找。</p>
<p>Swift 采用了编译器代码生成的方法，来做这件事情。这就是说有些内容是被嵌入到编译器种的。但是这样做效率却很高，具备静态类型所有优点的同时，在使用上也不会带来什么麻烦。</p>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Swift 新引入的 Codable 是建立在一些基础协议之上的。</p>
<p><code>Encodable</code> 这个协议用在那些需要被编码的类型上。如果遵守了这个协议，并且这个类的所有属性都是 Encodable 的， 编译器就会自动的生成相关的实现。如果不是，或者说你需要自定义一些东西，就需要自己实现了。</p>
<p><code>Decodable</code>这个协议跟 <code>Encodable</code> 相反，它表示那些能够被解档的类型。跟 <code>Encodable</code> 一样,编译器也会自动为你生成相关的实现，前提是所有属性都是 Decodable 的</p>
<p>由于这两个协议总是一起出现，所以就引入了第三个协议:<code>Codable</code> 。<code>Codable</code>只是把 <code>Decodable</code>  和 <code>Encodable</code> 连到了一起。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typealias</span> <span class="type">Codable</span> = <span class="type">Decodable</span> &amp; <span class="type">Encodable</span></div></pre></td></tr></table></figure>
<p>这两个协议都很简单。每一个都只有一个实现:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Encodable</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">func</span> <span class="title">encode</span><span class="params">(to encoder: Encoder)</span></span> <span class="keyword">throws</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Decodable</span> </span>&#123;</div><div class="line">	<span class="keyword">init</span>(from decoder: <span class="type">Decoder</span>) <span class="keyword">throws</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这两个协议说明了对象能够自己编码和解码自己。你不需要去考虑他们的基础用法，因为 <code>Codable</code> 已经给你添加了默认实现的所有细节, 只有在你需要自己实现 Codable 的时候才需要用到他们。这是比较复杂的部分了，后面我们会再说这个问题。</p>
<p>最后，还有一个叫 <code>CodingKey</code> 的协议，用来表示编码和解码的 key。与使用普通的字符串相比，他为程序添加了一个额外的静态类型检查层。他提供了 String 和一个可选的 Int 作为位置键。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">CodingKey</span> </span>&#123;</div><div class="line">	<span class="keyword">var</span> stringValue: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">	<span class="keyword">init</span>?(stringValue: <span class="type">String</span>)</div><div class="line">	<span class="keyword">var</span> intValue: <span class="type">Int</span>? &#123; <span class="keyword">get</span> &#125;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">init</span>?(intValue: <span class="type">Int</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="编码器和解码器"><a href="#编码器和解码器" class="headerlink" title="编码器和解码器"></a>编码器和解码器</h3><p>Encoder 和 Decoder 的基本概念跟 NSCoder 类似。对象接受一个编码器然后调用自己的方法来编码或者解码。</p>
<p><code>NSCoder</code> 的API 是很直接的。NSCoder 有一系列像是 <code>encodeObject:forKey</code> 还有<code>encodeInteger:forKey</code>的方法。对象调用他们来完成他们的编码。当然还有一些不需要 key 的方法比如说<code>encodeObject:</code> 和<code>encodeInteger</code> 。他们不需要通过键来定位。</p>
<p>Swift 的 API 就没那么直接了。 Encoder 不提供编码方法而是提供容器，由容器来做编码的工作。一个用于键控编码，一个用于无键编码，一个用来编码单个的值。</p>
<p>这样设计能够让事情更清晰， 也更适合那些便于携带的序列化格式。NSCoder 指需要使用苹果的编码格式，所以放在一起是没有问题的。但是 Encoder 必须使用JSON这一类东西:如果一个对象使用了键编码，就会产生一个 JSON 字典，如果使用的无键编码，产生的就是一个 JSON 数组。但是如果对象是为空，并且没有编码值呢？使用 NSCoder， 是无法知道到底输出什么的。要是使用 <code>Encoder</code> 的话, 对象会请求一个有键容器或者是无键容器这时候编码器就能够从中的值到底需要返回什么了。</p>
<p><code>Decoder</code> 也差不多，我们不直接从中获取解码值，而是通过请求一个容器，从这个容器中获取。跟 <code>Encoder</code> 一样, <code>Decoder</code> 也提供了有键容器、无键容器，还有用来解码单个值的容器。</p>
<p>因为容器这个设计， <code>Encoder</code> 和<code>Decoder</code> 这两个协议就非常的小的。他们只需要少量的信息(路径 info 之类的), 加上一些获取容器的方法。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Encoder</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> codingPath: [<span class="type">CodingKey</span>?] &#123; <span class="keyword">get</span> &#125;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">var</span> userInfo: [<span class="type">CodingUserInfoKey</span> : <span class="type">Any</span>] &#123; <span class="keyword">get</span> &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">container</span>&lt;Key&gt;<span class="params">(keyedBy type: Key.<span class="keyword">Type</span>)</span></span></div><div class="line">          -&gt; <span class="type">KeyedEncodingContainer</span>&lt;<span class="type">Key</span>&gt; <span class="keyword">where</span> <span class="type">Key</span> : <span class="type">CodingKey</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">unkeyedContainer</span><span class="params">()</span></span> -&gt; <span class="type">UnkeyedEncodingContainer</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">singleValueContainer</span><span class="params">()</span></span> -&gt; <span class="type">SingleValueEncodingContainer</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Decoder</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> codingPath: [<span class="type">CodingKey</span>?] &#123; <span class="keyword">get</span> &#125;</div><div class="line">  <span class="keyword">var</span> userInfo: [<span class="type">CodingUserInfoKey</span> : <span class="type">Any</span>] &#123; <span class="keyword">get</span> &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">container</span>&lt;Key&gt;<span class="params">(keyedBy type: Key.<span class="keyword">Type</span>)</span></span> <span class="keyword">throws</span></div><div class="line">          -&gt; <span class="type">KeyedDecodingContainer</span>&lt;<span class="type">Key</span>&gt; <span class="keyword">where</span> <span class="type">Key</span> : <span class="type">CodingKey</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">unkeyedContainer</span><span class="params">()</span></span> <span class="keyword">throws</span> -&gt; <span class="type">UnkeyedDecodingContainer</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">singleValueContainer</span><span class="params">()</span></span> <span class="keyword">throws</span> -&gt; <span class="type">SingleValueDecodingContainer</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>复杂的部分是在这些容器里面的。你可以通过递归在 Codable 的属性中走到很深的节点。不过，某些时候，我们需要获取可以被编解码的元数据类型。 在 Codable 中这种类型可能是各种 <code>Int</code>、 <code>Float</code> 、<code>Double</code>、 <code>Bool</code> 、<code>String</code>….。这就形成了一整套相似的编解码方法。无键容器也直接支持编码这些类型的序列。</p>
<p>除了这些基本的方法之外，还有一些方法来支持各种不同的使用场景。</p>
<ul>
<li>KeyedDecodingContainer 有个叫做 <code>decodeIfPresent</code> 的方法，这个方法会返回一个 可选类型， 当找不到某个 key 的时候，返回 nil 而不是抛出异常。</li>
<li>编码容器也支持软编码, 只有在其他对象也在编码的时候才会编码。这个可以用来处理一些复杂的父引用。</li>
<li>还有一写方法用来获取嵌套容器，这种容器能够编码不同的层次结构。</li>
<li>最后还有获取 super 编解码器的方法, 这种方法能够让子类和父类在编解码的过程中共存,子类能够直接编码自己, 也能够通过调用父类编码器来编码自己, 唯一的要求是 key 不冲突。</li>
</ul>
<h3 id="实现-Codable"><a href="#实现-Codable" class="headerlink" title="实现 Codable"></a>实现 Codable</h3><p>实现 Codable 是很简单：遵守协议，然后编译器就会自动帮你做剩下的事情了。</p>
<p>要知道它到底干了什么，我们先看看它的最终效果是什么样的，然后再看看如果要自己搞，应该做些什么。我们先看看这个 Codable 的类型:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span>: <span class="title">Codable</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> name: <span class="type">String</span></div><div class="line">  <span class="keyword">var</span> age: <span class="type">Int</span></div><div class="line">  <span class="keyword">var</span> quest: <span class="type">String</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译器会自动生成对应的 key 嵌套在 Person 类中。如果我们自己来做这件事情，这个嵌套类型会是这样的。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">enum</span> <span class="title">CodingKeys</span>: <span class="title">CodingKey</span> </span>&#123;</div><div class="line">  <span class="keyword">case</span> name</div><div class="line">  <span class="keyword">case</span> age</div><div class="line">  <span class="keyword">case</span> quest</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这些枚举对应 Person 类中的各种属性名称。编译器很智能的给每个CodingKey 的值匹配了对应的属性名，这就是说属性名就是归档这个对象所要用的 key 值。</p>
<p>如果我们需要用不同的名称, 只需要提供我们自己的 CodingKey 。像这样:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">enum</span> <span class="title">CodingKeys</span>:<span class="title">String</span>, <span class="title">CodingKey</span> </span>&#123;</div><div class="line">  <span class="keyword">case</span> name = <span class="string">"person_name"</span></div><div class="line">  <span class="keyword">case</span> age</div><div class="line">  <span class="keyword">case</span> quest</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样写就会让 Person 的 name 属性通过 “person_name”来实现编码和解码。这就是我们需要做的所有事情了。编译器能够很轻松的接受我们自定义的 CodingKey 类型，然后帮你实现 Codable 剩下的部分，并且这些默认的实现支持我们的自定义类型。</p>
<p>编译器同时也生成了 <code>encode(to:)</code> 、<code>init(from:)</code> 相关的实现。 <code>encode(to:)</code> 的实现, 首先获取到有键容器然后挨个去 encode 所有的属性。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">encode</span><span class="params">(to encoder: Encoder)</span></span> <span class="keyword">throws</span> &#123;</div><div class="line">  <span class="keyword">var</span> container = encoder.container(keyedBy: <span class="type">CodingKeys</span>.<span class="keyword">self</span>)</div><div class="line">  </div><div class="line">  <span class="keyword">try</span> container.encode(name, forKey: .name)</div><div class="line">  <span class="keyword">try</span> container.encode(age, forKey: .age)</div><div class="line">  <span class="keyword">try</span> container.encode(quest, forKey: .quest)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译器也会实现 <code>inin(from:)</code> 像是这样：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">init</span>(from decoder: <span class="type">Decoder</span>) <span class="keyword">throws</span> &#123;</div><div class="line">  <span class="keyword">let</span> container = <span class="keyword">try</span> decoder.container(keyedBy:<span class="type">CodingKeys</span>.<span class="keyword">self</span>)</div><div class="line">  </div><div class="line">  name = <span class="keyword">try</span> container.decode(<span class="type">String</span>.<span class="keyword">self</span>, forKey: .name)</div><div class="line">  age = <span class="keyword">try</span> container.decode(<span class="type">String</span>.<span class="keyword">self</span>, forKey: .age)</div><div class="line">  quest = <span class="keyword">try</span> container.decode(<span class="type">String</span>.<span class="keyword">self</span>, forKey: .quest)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这就是全部的东西了。就像 CodingKeys 一样, 如果你需要自定义一些具体的行为。你可以自己实现你需要的部分，然后让编译器为你补全剩下的部分。然而，还是没有办法去指定某一个属性的行为，所以，还是需要把所有的属性都实现一边，即使你希望其余的部分都是默认的。不过这应该还好吧！😂</p>
<p>如果你准备自定义所有的过错。Person 类完整的Codable 实现大概是这样的:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Person</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="class"><span class="keyword">enum</span> <span class="title">CodingKeys</span>: <span class="title">CodingKey</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> name</div><div class="line">    <span class="keyword">case</span> age</div><div class="line">    <span class="keyword">case</span> quest</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">encode</span><span class="params">(to encoder:Encoder)</span></span> <span class="keyword">throws</span> &#123;</div><div class="line">	<span class="keyword">var</span> container = encoder.container(keyedBy: <span class="type">CodingKeys</span>.<span class="keyword">self</span>)</div><div class="line"></div><div class="line">	<span class="keyword">try</span> container.encode(name, forKey: .name)</div><div class="line">	<span class="keyword">try</span> container.encode(age, forKey: .age)</div><div class="line">	<span class="keyword">try</span> container.encode(quest, forKey: .quest)</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">init</span>(from decoder: <span class="type">Decoder</span>) <span class="keyword">throws</span> &#123;</div><div class="line">	<span class="keyword">let</span> container = <span class="keyword">try</span> decoder.container(keyedBy: <span class="type">CodingKeys</span>.<span class="keyword">self</span>)</div><div class="line"></div><div class="line">	name = <span class="keyword">try</span> container.decode(<span class="type">String</span>.<span class="keyword">self</span>, forKey: .name)</div><div class="line">	age = <span class="keyword">try</span> container.decode(<span class="type">Int</span>.<span class="keyword">self</span>, forKey: .age)</div><div class="line">	quest = <span class="keyword">try</span> container.decode(<span class="type">String</span>.<span class="keyword">self</span>, forKey: .quest)</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="实现-Encoder、-Decoder"><a href="#实现-Encoder、-Decoder" class="headerlink" title="实现 Encoder、 Decoder"></a>实现 Encoder、 Decoder</h3><p>你可能永远都不需要自己实现 <code>Endocer</code> 或者是 <code>Decoder</code>. Swift 已经很好的支持了 JSON、PropertyList。而这两个基本上包含了所有的可能遇见的数据格式。</p>
<p>当然你也可以自己去实现一套来支持你的自定义格式。container  协议的大小说明这需要花点精力，但是这只是大小的问题，而不是增加了什么复杂度。</p>
<p>要实现自定义的 <code>Encoder</code>,  你需要一个实现了 Encoder 协议 同时也要实现容器协议的东西。实现三个容器协议需要大量的模版代码，来实现编解码。</p>
<p>他们具体要怎么做完全是看你了， 编码器可能需要保存正在被编码的的数据，容器需要给编码器提供正在被编码数据的各种信息。</p>
<p>实现自定义的 <code>Decoder</code> 也差不多。你需要在实现这个协议的同时实现容器协议。解码器保存序列化数据，容器跟他通信提供具体的类型信息。</p>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>Swift 4 的 Codable 看起来是很强大，他们简化很多代码。对 JSON 来说， 声明对应的模型来遵守 Codable 协议，让后让编译器做剩下的事情，就完全够了。如果需要，你还可以实现这个协议的某一个部分来满足你自己的需求，甚至你还可以完全自己实现。</p>
<p>Encoder 和 Decoder 都很复杂，但是没办法。通过自己实现 Encoder 和 Decoder 来支持一个自定义数据格式需要做一些工作，但这基本上也都是做一些填空题。</p>
<p><a href="https://www.mikeash.com/pyblog/friday-qa-2017-07-14-swiftcodable.html">原文地址:Friday Q&amp;A 2017-07-14: Swift.Codable</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS 内存泄漏三两事]]></title>
      <url>http://www.CepheusSun.com/iOS%20%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E4%B8%89%E4%B8%A4%E4%BA%8B.html</url>
      <content type="html"><![CDATA[<p>相信大家都有过重写 <code>dealloc</code> 方法来检查某个 view controller 在消失后是否被释放的经历。这几乎是 iOS 中寻找由于引用循环造成内存泄漏最有效的方法了。基本上每次发布，都会做很多次这种事情。不得不说这件事情很无聊，并且很可能会出错。<strong>如果我们在日常的开发中, 提前的学习相关的知识, 那该多好？</strong></p>
<a id="more"></a>
<p>下面是两个很少见的 <code>UIViewController</code>的属性:</p>
<ul>
<li><code>isBeingDismissed</code> 当一个模态推送出来的 view controller 正在消失的时候, 为: true.</li>
<li><code>isMovingFromParentViewController</code> ,当一个 view controller 正在从它的父 view contrlller 中移除的时候(包括从系统的容器试图比如说 UINavigationController), 为true.</li>
</ul>
<p>如果这两个属性有一个是 <code>true</code> 的话, 这个 view controller 就会自动的被释放掉。我们不知道一个 view contrller 完成内部状态的改变，并且被 ARC 释放掉需要耗费多长的时间。为了简单起见，我们假设它不会超过两秒。</p>
<p>1.现在看看下面的代码(文末会有OC版):</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIViewController</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">dch_checkDeallocation</span><span class="params">(afterDelay delay: TimeInterval = <span class="number">2.0</span>)</span></span> &#123;</div><div class="line">        <span class="keyword">let</span> rootParentViewController = dch_rootParentViewController</div><div class="line"></div><div class="line">        <span class="comment">// We don’t check `isBeingDismissed` simply on this view controller because it’s common</span></div><div class="line">        <span class="comment">// to wrap a view controller in another view controller (e.g. in UINavigationController)</span></div><div class="line">        <span class="comment">// and present the wrapping view controller instead.</span></div><div class="line">        <span class="keyword">if</span> isMovingFromParentViewController || rootParentViewController.isBeingDismissed &#123;</div><div class="line">            <span class="keyword">let</span> type = type(of: <span class="keyword">self</span>)</div><div class="line">            <span class="keyword">let</span> disappearanceSource: <span class="type">String</span> = isMovingFromParentViewController ? <span class="string">"removed from its parent"</span> : <span class="string">"dismissed"</span></div><div class="line"></div><div class="line">            <span class="type">DispatchQueue</span>.main.asyncAfter(deadline: .now() + delay, execute: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="keyword">in</span></div><div class="line">                <span class="built_in">assert</span>(<span class="keyword">self</span> == <span class="literal">nil</span>, <span class="string">"<span class="subst">\(type)</span> not deallocated after being <span class="subst">\(disappearanceSource)</span>"</span>)</div><div class="line">            &#125;)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">var</span> dch_rootParentViewController: <span class="type">UIViewController</span> &#123;</div><div class="line">        <span class="keyword">var</span> root = <span class="keyword">self</span></div><div class="line"></div><div class="line">        <span class="keyword">while</span> <span class="keyword">let</span> parent = root.parent &#123;</div><div class="line">            root = parent</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> root</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 在延时操作这个闭包中，我们首先通过 <code>[weak self]</code> 来避免这个闭包强引用self。然后通过断言让程序在 <code>self</code> 不为空的时候抛出异常。<strong>只有存在循环引用的情况下这个 view controller 才不为空。</strong></p>
<p>现在我们需要做的就是在 <code>viewDidDisappear</code> 中调用这个方法。只要是你需要检查它在消失后是不是被释放掉的 view controller 都需要添加这个方法。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidDisappear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123;</div><div class="line">    <span class="keyword">super</span>.viewDidDisappear(animated)</div><div class="line"></div><div class="line">    dch_checkDeallocation()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果发声了内存泄漏，我们就会得到下面的断言:</p>
<p><img src="http://holko.pl/public/images/deallocation_checker@2x.png" alt=""></p>
<p>这个时候，我们只需要打开 Xcode 的 <a href="https://developer.apple.com/library/content/documentation/DeveloperTools/Conceptual/debugging_with_xcode/chapters/special_debugging_workflows.html#//apple_ref/doc/uid/TP40015022-CH9-DontLinkElementID_1">Memory Graph Debugger</a> 找到并且解决这些循环引用。</p>
<ol>
<li>另外在 twitter 上也看到了类似的解决方案。</li>
</ol>
<p><img src="https://pbs.twimg.com/media/DH_nWyhXUAIqByQ.png" alt=""></p>
<p>3.使用国人写的 MLeaksFinder 在每次发生内存泄漏的时候都会弹窗。并且没有代码侵入性，只需要使用 CocosPod 导入就可以了。</p>
<p>4.在使用图片资源的时候，少使用  <code>imageNamed:</code> 方法去获取使用频次不高的图片资源。因为使用 <code>imageNamed:</code>加载的图片资源会一直存在内存里面， 对内存的浪费也是巨大的。</p>
<p>5.上面的方法写了一个 OC 版本的： </p>
<p>.h:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">#import &lt;UIKit/UIKit.h&gt;</div><div class="line"></div><div class="line">@interface UIViewController (FindLeaks)</div><div class="line"></div><div class="line"></div><div class="line">// 默认为 NO</div><div class="line">@property (nonatomic) BOOL noCheckLeaks;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>.m:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line">//</div><div class="line">//  UIViewController+FindLeaks.m</div><div class="line">//  Leaks</div><div class="line">//</div><div class="line">//  Created by sunny on 2017/8/27.</div><div class="line">//  Copyright © 2017年 CepheusSun. All rights reserved.</div><div class="line">//</div><div class="line"></div><div class="line">#import &quot;UIViewController+FindLeaks.h&quot;</div><div class="line">#import &lt;objc/runtime.h&gt;</div><div class="line"></div><div class="line">static const char *noCheckLeaksKey = &quot;noChechLeaksKey&quot;;</div><div class="line"></div><div class="line">@interface NSObject (MethodSwizzling)</div><div class="line"></div><div class="line">+ (void)sy_swizzleInstanceSelector:(SEL)origSelector</div><div class="line">                   swizzleSelector:(SEL)swizzleSelector;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation UIViewController (FindLeaks)</div><div class="line"></div><div class="line">#pragma mark - Binding Property</div><div class="line">- (BOOL)noCheckLeaks &#123;</div><div class="line">    return [objc_getAssociatedObject(self, noCheckLeaksKey) boolValue];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)setNoCheckLeaks:(BOOL)noCheckLeaks &#123;</div><div class="line">    objc_setAssociatedObject(self, noCheckLeaksKey, [NSNumber numberWithBool:noCheckLeaks], OBJC_ASSOCIATION_RETAIN_NONATOMIC);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">#pragma mark - Check</div><div class="line">+ (void)load &#123;</div><div class="line">    </div><div class="line">#if DEBUG</div><div class="line">    [self sy_swizzleInstanceSelector:@selector(viewDidDisappear:) swizzleSelector:@selector(fl_viewDidDisappear:)];</div><div class="line">#endif</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)fl_viewDidDisappear:(BOOL)animated &#123;</div><div class="line">    [self fl_viewDidDisappear:animated];</div><div class="line">    if (!self.noCheckLeaks) &#123;</div><div class="line">        [self fl_checkDeallocationAfterDelay:2];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)fl_checkDeallocationAfterDelay:(NSTimeInterval)delay &#123;</div><div class="line">    UIViewController *root = [self fl_rootParentViewController];</div><div class="line">    if (self.isMovingFromParentViewController || root.isBeingDismissed) &#123;</div><div class="line">        NSString *type = NSStringFromClass([self class]);</div><div class="line">        NSString *disappearanceSource = self.isMovingFromParentViewController ? @&quot;removed from its parent&quot; : @&quot;dismissed&quot;;</div><div class="line">        __weak typeof(self) weakSelf = self;</div><div class="line">        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delay * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</div><div class="line">            NSString *assert = [NSString stringWithFormat:@&quot;%@ not deallocated after being %@&quot;,</div><div class="line">             type, disappearanceSource];</div><div class="line">            NSAssert(weakSelf == nil,assert);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (UIViewController *)fl_rootParentViewController &#123;</div><div class="line">    UIViewController *root = self;</div><div class="line">    while (root.parentViewController) &#123;</div><div class="line">        root = root.parentViewController;</div><div class="line">    &#125;</div><div class="line">    return root;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation NSObject (MethodSwizzling)</div><div class="line"></div><div class="line">+ (void)sy_swizzleInstanceSelector:(SEL)origSelector</div><div class="line">                   swizzleSelector:(SEL)swizzleSelector &#123;</div><div class="line">    </div><div class="line">    Method origMethod = class_getInstanceMethod(self, origSelector);</div><div class="line">    Method swizzleMethod = class_getInstanceMethod(self, swizzleSelector);</div><div class="line">    </div><div class="line">    BOOL isAdd = class_addMethod(self, origSelector, method_getImplementation(swizzleMethod), method_getTypeEncoding(swizzleMethod));</div><div class="line">    </div><div class="line">    if (!isAdd) &#123;</div><div class="line">        method_exchangeImplementations(origMethod, swizzleMethod);</div><div class="line">    &#125;else &#123;</div><div class="line">        class_replaceMethod(self, swizzleSelector, method_getImplementation(origMethod), method_getTypeEncoding(origMethod));</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>只需要在不需要检查的方法中设置属性为 YES 就好了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[一个人的敏捷开发]]></title>
      <url>http://www.CepheusSun.com/%E4%B8%80%E4%B8%AA%E4%BA%BA%E7%9A%84%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91.html</url>
      <content type="html"><![CDATA[<p><img src="http://ocg4av0wv.bkt.clouddn.com/2017-07-21-114524.jpg" width="500"></p>
<p>不论是在一些大型的开发团队，还是作为独立开发者。我们经常会被预算、技术迭代，以及时间限制。找到合适的工作方式去适应这些限制, 是所有团队都需要去考虑的问题。</p>
<p><a href="https://www.raywenderlich.com/u/alex_andrews">Alex Andrews</a> 在成立 <a href="http://www.tenkettles.com/">Ten Kettles</a> 的时候花了很多了精力去考虑这个问题。直到有一天上帝把敏捷开发砸到了他的头上，很快他就找到了适合他的敏捷开发之道。他认为敏捷开发极大的解放了他的生产力。</p>
<p>这篇文章就会聊到他是怎么进行敏捷开发的。</p>
<a id="more"></a>
<h2 id="远古时代"><a href="#远古时代" class="headerlink" title="远古时代"></a>远古时代</h2><p>2014年 3月 1 日，是 Ten Kettles 成立的第一天。那时候整个公司只有我一个人，没有流程来遵循。什么时候开始工作，做什么软件，怎么安排任务……. 都由我自己决定。</p>
<p>那时候，我喜欢 free style，虽然有时候会让我不大舒服。早些时候，我在其他公司做搜索工程师, 预估工期是我最自豪的能力: 你给我一个需求，我告诉你什么时候完成，到那个时候，我把代码拿出来。现在做 app 跟那时候是一样的，只不过设计产品的人换了而已，但是知道 2014 年年底，我都还没意识到这点。</p>
<p>后来，我慢慢发现独立开发者这个称呼不是特别准确。因为写代码甚至都不是我现在最主要的工作内容，影响我工作效率的事情不是写代码，而是设计产品。</p>
<p><em>“再加一个功能… “</em></p>
<p><em>”不，这样设计不对… “</em></p>
<p><em>”加载的时候等服务器返回了在进入主界面….”</em></p>
<p>这些想法简直无处不在, 我几乎随时都在考虑这些问题！</p>
<p>这让我的工作效率严重低下。我的音乐类app，远远的超出了计划。虽然最后做出了满意的产品，但是现在回过头去看，总想问自己，为什么那么长的时间却只做了这么点事情？</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/2017-07-22-060635.jpg" width="500"></p>
<p>结果是很好的，但是过程并不完美。我需要一个更好的工作方式。需要一个能让我更高效，更赚钱，更幸福的工作方式！</p>
<h2 id="哇，敏捷开发"><a href="#哇，敏捷开发" class="headerlink" title="哇，敏捷开发"></a>哇，敏捷开发</h2><p>一直都在重复那些无聊且进展缓慢的工作。我决定给自己一个改变，所以我把精力放在了一些外包工作上面……</p>
<p>知道接触到了一家中等规模的公司, 他们正好在使用敏捷开发来进行项目管理。我开始去了解敏捷开发的, 期望她能够让我更高效的编程。看了很多相关的书或者文章之后，我惊喜的发现敏捷开发触及到了的三个痛点：</p>
<ul>
<li>高产出</li>
<li>高效率</li>
<li>更happy</li>
</ul>
<p>于是，我开始思考在我自己的产品中运用这套理论。</p>
<p>这家公司的项目做完，我去了蒙特利尔, 打算给自己放个假，也仔细的想想怎么让这套理论给我带来效益。我重新看之前的笔记，重新读了两本很好的书，思考了实际情况下的一些问题，最后总结出了改革我的公司的一些办法。</p>
<h2 id="敏捷开发的基本原则"><a href="#敏捷开发的基本原则" class="headerlink" title="敏捷开发的基本原则"></a>敏捷开发的基本原则</h2><p>什么是敏捷开发呢？这里有一段我第一本读到的书中的摘录:</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/2017-07-21-124818.jpg" width="500"></p>
<blockquote>
<p>敏捷团队通常由7个左右的人组成，每个任务阶段叫做一个 sprint，包括了回顾和总结的时间。敏捷开发有一个咒语”检察和调整”。敏捷团队具有一个很明显的特征：工作流程和产品在不断的进步。</p>
</blockquote>
<p>独立开发跟 5-9 人的团队开发还是有很多不一样的地方的。这段话讲到的内容跟我使用的敏捷开发还是有一些区别。 我更多的是去定义整个工作流程的一些基本原则.</p>
<p>敏捷开发核心原则:</p>
<ul>
<li><strong>主动变化</strong>。经常把产品给别人体验，无论是最终的用户，测试用户，甚至是一些懂行的朋友。这样可以避免把资源投入到没有必要的功能上。让测试用去去使用 beta 版本的产品，及时根据反馈来调整方向，这样能节约很多的时间。</li>
<li><strong>效率优先，并量化它</strong>。短期内最大的量化指标就是产出，并不是销售或者发版数量。要知道每周完成了多少有效任务, 就需要去量化它。这样才能跟踪进度，并优化它。</li>
<li><strong>自我总结</strong>。定期去回顾总结。</li>
</ul>
<h2 id="如何进行敏捷开发"><a href="#如何进行敏捷开发" class="headerlink" title="如何进行敏捷开发"></a>如何进行敏捷开发</h2><p>知道了敏捷开发的核心原则，那么应该怎么样去实践呢？</p>
<h3 id="Sprint"><a href="#Sprint" class="headerlink" title="Sprint"></a>Sprint</h3><p>就是在固定周期的时间里面完成特定的需求，相当于迭代。在这个 sprint 中你应该把全部的尽力用在完成这些需求上面。</p>
<p>一个 sprint 通常有一到四周，这个由你自己的风格和产品决定。我自己的标准是两周一个 sprint。我觉得这样有足够的时间来完成真正有意义的任务。下面是我的 sprint计划图：</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/2017-07-22-022732.jpg" width="500"></p>
<p>可以看出来，每个 sprint 中都有很多时间用来做核心的任务，还有一些其他的东西:</p>
<ul>
<li>每日站会 Daily Stand-up Meeting</li>
<li>每周畅想 Weekly Story Time</li>
<li>发布         Sprint Release</li>
<li>敏捷迭代回顾 Sprint Retrospective</li>
<li>敏捷迭代计划 Sprint Plan</li>
</ul>
<h4 id="每日站会（5-min）"><a href="#每日站会（5-min）" class="headerlink" title="每日站会（5 min）"></a>每日站会（5 min）</h4><p>敏捷开发有一个很基础的部分就是自我审查和迭代，尤其是在生产上面。当我们原计划在某一天完成某项任务，但是最后没有完成，这时候就需要总结到底发生了什么，然后在去优化你的工作流。</p>
<p>每日站会是敏捷开发的主要特点。在传统的敏捷开发中，每日站会让每个团队的成员都聊一下昨天的进度，今天的计划和存在的风险。</p>
<ul>
<li>为了简化会议, 避免会议时间太长所以要求大家都站着开这个会。</li>
<li>让所有成员都能跟上节奏，及时暴露出风险和挑战。</li>
</ul>
<p>那一个人怎么搞呢？</p>
<p>我汲取了敏捷开发中的优点。自己总结了一套适合独立开发的每日站会: 拍短片(45 秒) 。</p>
<p>主要是这些内容：</p>
<ul>
<li><p><strong>回顾</strong>：首先看一下昨天的短片，看看昨天定下的任务是什么。</p>
</li>
<li><p><strong>总结</strong>：没有完成昨天的目标？想想为什么没有完成，还有什么地方没有做到更好。是中午开了一个会，耽误了写代码的时间。还是准备 App Store 的截图花的时间超预算了。</p>
</li>
<li><p><strong>准备</strong>：在不到两分钟的时间里，思考一下今天的短片说什么，回答下面的问题：昨天做了什么？今天准备做什么？什么影响了进度。比如这样。</p>
<blockquote>
<p>我昨天我做了 A 的 App Store截图。今天我要写更新日志，然后下午跟一个供应商讨论一下合作。总结：在做截图的时候花了太多的水岸，所以没有完成本来计划的更新日志。下次尝试使用自动化工具。</p>
</blockquote>
</li>
<li><p><strong>拍摄</strong>：拍下这个短片，然后就好了。这些片子在最后的sprint 回顾中还会用到。</p>
</li>
</ul>
<h4 id="每周畅想-（30-45-min）"><a href="#每周畅想-（30-45-min）" class="headerlink" title="每周畅想 （30-45 min）"></a>每周畅想 （30-45 min）</h4><p>在每个 sprint 中，都会花很多的时间去做程序员。很少花时间去考虑公司发展这类东西，要不要做一个新的 App 、大改现在的 app 等灯。<strong>Story Time</strong> 这段时间就是我用来做 CEO 的时间。我建议尽量到其他环境去做这件事情，咖啡店什么的。</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/2017-07-22-033948.jpg" width="500"></p>
<p>在 Story Time ，我会去整理一下从用户那里收到的反馈，考虑今后加什么功能，考虑怎么运营 app 和公司。然后把一些实际的想法加到一个列表里面我叫它需求池。</p>
<p>需求池里面都是一些比较大的任务。它帮助我计划下一个 sprint。所以在 Store Time 中也需要去修改和整理需求池。比如:</p>
<p>在统计中看到了更多巴西方面的东西，这就是说，你可能需要加入葡萄牙语，而不是原计划的西班牙语。或者可能看到了一些用户希望的小功能。这时候也需要考虑是不是把这个需求加入这个列表。</p>
<h4 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h4><p>敏捷开发还有个原则就是要让你做的工作能够产出成品。这就是在 Sprint Release 中需要做的事情。不一定需要是一个完整的 app，但是把这段时间的工作拿给其他人试一下也是很重要的。让测试用户体验，从他们那儿得到一些反馈。</p>
<p>在敏捷开发的过程中，发布的范围会逐渐的扩大。比如说，最开始你可能只需要发布一个只有一两个新功能的 beta 版。这时候可以优先的去考虑最重要的功能，这样能够尽快的拿到测试反馈。如果你的测试用户根本都没有提到过某个功能，这就是说这没那么重要。这也能帮你决定下个 sprint 中任务的优先级。</p>
<h4 id="Last-Day-of-the-Sprint"><a href="#Last-Day-of-the-Sprint" class="headerlink" title="Last Day of the Sprint"></a>Last Day of the Sprint</h4><p>已经花了9天来完成这个 sprint 的目标，终于到了最后一天了。这一天可能是最轻松的一天，因为今天可能不需要做开发工作。今天是用来回顾这个 sprint，计划下一个 sprint 的一天，然后还可以休息休息。</p>
<p>这可能会让人觉得奇怪，在截止日期做这样的事情？上学的时候，我经常会在回家的路上看书。但是这样我会走偏方向，然后摔倒。敏捷开发也一样，如果不经常抬头看看方向，可能方向就错了。</p>
<p>确保方向正确，这就是 sprint 最后一天做的事情。这是一整天，或者是在是时间紧迫，半天也可以。这一天，抬头看看周围，确保做的事最重要的事情。因为即便你非常的高产出，在不重要的事情上花时间也是不值得的。</p>
<p>现在来看看这天要做什么吧！</p>
<h5 id="Retrospective-回顾-（小于2h）"><a href="#Retrospective-回顾-（小于2h）" class="headerlink" title="Retrospective(回顾) （小于2h）"></a>Retrospective(回顾) （小于2h）</h5><p>打开一个新的文档，或者是在笔记本上翻开新的一页，写下你对刚刚过去的两个星期的总结。这是你发现是什么阻碍你的效率的好机会。</p>
<p>这写是一些简单的问题：</p>
<ul>
<li>我完成了什么？</li>
<li>我达成了我 sprint 的目标了吗？</li>
<li>这个 sprint 最的好的是什么？还有什么地方可以做到更好？</li>
<li>有什么影响效率的因素？回顾每天的短片来找到这个问题的答案。</li>
<li>有什么没什么必要的事情让你焦虑了，或者让你觉得很爽？</li>
</ul>
<p>如果你发现出去走走比在桌子边上回顾，那就出去走走吧！然后回来迅速的写下你的总结。我发现这样确实更有效果。</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/2017-07-22-033938.jpg"  width="500"></p>
<h5 id="Sprint-计划-（小于2h）"><a href="#Sprint-计划-（小于2h）" class="headerlink" title="Sprint 计划 （小于2h）"></a>Sprint 计划 （小于2h）</h5><p>在回顾两次 Story Time 和需求池之间，你应该好好想想下一个 sprint 要做什么。把需求池整理一下，然后挑几个最重要的！</p>
<p>下面是一个简单的例子。说你现在有个快完成了的 app ，你计划下个 sprint 加入最后一个功能，然后做一些自测工作，最后把 Beta 版发布出去。在你的计划文档中，就是下面的内容：</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/2017-07-22-045041.jpg" width="500"></p>
<p>在两个星期的 sprint 中，可能还会有更多的任务需要完成。这只是简单的举个例子。</p>
<p>看每个任务后面的数字，这些都是任务评分。比如说，一个 1 分的任务，需要花 2 分任务一半的时间去完成。这个标准需要你自己来定。就我来说，我还是喜欢用1，2，3，5，8这样的数字，这样可以纠正我们低估大任务的倾向。没有4，所以我必须得用5这个数字。</p>
<p>当你完成所有任务的时候，去想想每一个任务相对于其他的任务需要花费的时间。冷静下来，去预测每一项任务需要花费的时间。</p>
<p>如果某一项任务很复杂，但是你已经做过很多次了，那就可以少估计一点时间，也就是说可以减少这个分值。如果某个任务很简单，但是你还不熟悉。就可以多估计一点时间，也就是加点这个分值。</p>
<p>当你完成任务的时候，只需要把所有分值都加起来，然后跟上个 sprint 做一个比较。如果你经常得到 80-100分的总分，那么下个 sprint 的总分应该就差不多是80的样子了。</p>
<p>这可以说是敏捷开发中最有效的事情了，也是我任务最难做的一部分了，我经常发现，我总是减少我想做的事情的评分，给重要的任务更多的评分。有了 sprint 计划，就擦掉你上个 sprint 的任务板，然后为下个 sprint 做准备！</p>
<p>什么是任务板(Task Board)呢？</p>
<blockquote>
<p>译者: 在之前的敏捷开发实践中，都会有一个白板，清晰的写上这些东西。下个部分会讲到。</p>
</blockquote>
<h4 id="任务板"><a href="#任务板" class="headerlink" title="任务板"></a>任务板</h4><p>现在我们就来说说任务板。即使我在我的笔记本或者其他地方已经了我这个 sprint 的计划，我每天的任务还是会在任务板上组织。我把这个任务板放在办公室的墙上。上面会写一些东西，主要是：<strong>TODO</strong>、<strong>DOING</strong>、<strong>DONE</strong>。</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/2017-07-22-051037.jpg" width="500"></p>
<p>每天下班的之前，我都把第二天的任务写在一个便签上，然后把它们贴在TODO这一块。假如我上个 sprint 平均每天拿到了10分，我就会给下一天贴上10分的任务。</p>
<p>第二天早上，我就会把 <strong>TODO</strong> 上的第一个便签拿到 <strong>DOING</strong> 这边。这样做能够让我更容易集中精力。</p>
<p>任务完成的时候，把这个便签拿到 <strong>DONE</strong> 这边。看到 <strong>DONE</strong> 越来越多，是一件很有成就感的事情。</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/2017-07-22-051624.jpg" width="500"></p>
<h4 id="Rest-and-Explore"><a href="#Rest-and-Explore" class="headerlink" title="Rest and Explore"></a>Rest and Explore</h4><p>回到 sprint 中间来。现在你到了 sprint 的最后一个下午了。这个下午就好好的放松一下吧！我经常都是坐在沙发上，看看 Raywenderlich.com 上的教程，或者学点新的知识。</p>
<p>不要把这件事情当作例行工作那样做。只需要做一些跟工作有关，由能让你放松的工作。喝一杯饮料，听听音乐，庆祝庆祝这个 sprint 你完成的工作，多好！</p>
<h2 id="一些建议"><a href="#一些建议" class="headerlink" title="一些建议"></a>一些建议</h2><p>对独立开发者来说选择正确的工作方式是很个人的事情。这跟你的精力相关。同时也需要要激励你，让你成长。以这个为核心原则，就能够找到适合你自己的敏捷开发之道了。</p>
<p>额外的建议：</p>
<ul>
<li>在刚刚开始的时候，不要因为实际完成的任务比计划完成的任务差很多而感到不好。在下个 sprint 中调整就好了。不断的调整正是敏捷开发的意义。</li>
<li>每隔一两天就调整一下这个 sprint 的计划。review 每一个任务，调整他的分值。如果分值变得很高，就需要把一些低优先级的任务移除掉了。</li>
<li>计划细节是一件很麻烦的事情。如果你跟我一样也是两周一个 sprint。第二个星期的计划没有那么详细也是可以的。每天的调整能够慢慢的丰富它。</li>
<li>对公司来说，有一个长期计划是必要的，但是不要死咬住这个计划不放。保持一个流动的需求池来适应改变。</li>
<li>即便这是我在做 Ten Kettles 的 app 的时候总结的东西。他们在做外包的时候也是很好用的这只需要做一些很小的改动。比如说任务板，可能就需要做成虚拟的了，这样才能让甲方知道你现在是什么情况。</li>
<li>别样了买马克笔还有标签纸。</li>
</ul>
<p>我第一次意识到作为独立开发者，我需要更好的工作方式的时候，我想到了三个需求。更高效的产出，从 app 中获得更多的收入，更多的幸福感。我也很高兴这样的改变确实带来了这些东西。app 的迭代频率大大的上升，每个月的平均收入增长了 18%，用户也更满意(在 App Store中平均分 4.75)，而且工作和生活找到了更好的平衡点。有了周末，一切都更好了。</p>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>这是一篇最近的采访，关于我最近在 Ten Kettles 的的细节。</p>
<p>记住下面三个敏捷开发的基本原则</p>
<ul>
<li>主动改变</li>
<li>效率优先</li>
<li>不断的总结</li>
</ul>
<p>看起来很简单，但是有很好工作流程，这几点能够明显的影响你的工作。</p>
<p>如果你想要学习更多关于敏捷开发，尤其是在团队中的敏捷开发的话，这有一些资料。</p>
<p>我最开始看的两本书是：</p>
<ul>
<li><a href="https://www.amazon.com/Scrum-Doing-Twice-Work-Half/dp/038534645X/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1495477992&amp;sr=1-1&amp;keywords=scrum+art+of+doing">Scrum: The Art of Doing Twice the Work in Half the Time (Sutherland, Sutherland)</a></li>
<li><a href="https://www.amazon.com/Scrum-Breathtakingly-Brief-Agile-Introduction/dp/193796504X">Scrum: a Breathtakingly Brief and Agile Introduction (Sims, Johnson)</a></li>
</ul>
<p><strong>这篇文章翻译自Ray wenderlich <a href="https://www.raywenderlich.com/162654/scrum-one-bring-scrum-one-person-operation">Scrum Of One: How to Bring Scrum into your One-Person Operation</a></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[用 ReSwift 实现 Redux 架构]]></title>
      <url>http://www.CepheusSun.com/ReSwiftAndRedux.html</url>
      <content type="html"><![CDATA[<p>随着 app 的发展， MVC 渐渐的满足不了业务的需求。大家都在探索各种各样的架构模式来适应这种情况，像是MVVM、VIPER、<a href="https://eng.uber.com/new-rider-app/">Riblets</a> 等等。 他们都有各自的特点，但是都有同一个核心: 通过多向数据流将代码按照单一职责原则来划分代码。在多向数据流中，数据在各个模块中传递。</p>
<p>多向数据流并不一定是你想要的，反而，单向数据流才是我们更喜欢的数据传递方式。在这个 ReSwift 的教程中，你会学到如何使用 ReSwift 来实现单向数据流，并完成一个状态驱动的游戏——<strong>MemoryTunes</strong></p>
<a id="more"></a>
<h2 id="什么是-ReSwift"><a href="#什么是-ReSwift" class="headerlink" title="什么是 ReSwift"></a>什么是 ReSwift</h2><p><a href="https://github.com/ReSwift/ReSwift">ReSwift</a> 是一个轻量级的框架，能够帮助你很轻松的去构建一个 Redux 架构的app。当然它是用Swift 实现的。</p>
<p>RxSwift 有以下四个模块</p>
<ul>
<li><strong>Views</strong>： 响应 <strong>Store</strong> 的改变，并且把他们展示在页面上。views 发出 <strong>Actions</strong>。</li>
<li><strong>Actions</strong>:发起app 种状态的改变。Action 是有 <strong>Reducer</strong> 操作的。</li>
<li><strong>Reducers</strong>: 直接改变程序的状态，这些状态由 <strong>Store</strong> 来保存。</li>
<li><strong>Store</strong>:保存当前的程序的状态。其他模块，比如说 <strong>Views</strong> 可以订阅这个状态，并且响应状态的改变。</li>
</ul>
<p>ReSwift 至少有以下这些优势:</p>
<ul>
<li><strong>很强的约束力</strong>：把一些代码放在不合适的地方往往具有很强的诱惑性，虽然这样写很方便。ReSwift 通过很强的约束力来避免这种情况。</li>
<li><strong>单向数据流</strong>：多向数据流的代码在阅读和debug上都可能变成一场灾难。一个改变可能会带来一系列的连锁反应。而单向数据流就能让程序的运行更加具有可预测性，也能够减少阅读这些代码的痛苦。</li>
<li><strong>容易测试</strong>：大多数的业务逻辑都在Reducer 中，这些都是纯的功能。</li>
<li><strong>复用性</strong>：ReSwift 中的每个组件—Store、Reducer、Action ，都是能在各个平台独立运行的，可以很轻松的在iOS、macOS、或者tvOS 中复用这些模块。</li>
</ul>
<h3 id="多向数据流-vs-单向数据流"><a href="#多向数据流-vs-单向数据流" class="headerlink" title="多向数据流 vs. 单向数据流"></a>多向数据流 vs. 单向数据流</h3><p>通过以下的几个例子，我们来理解一下什么是数据流。一个基于 VIPER 架构实现的程序就允许数据在其组件中多向传递。</p>
<center><br><br><img src="http://ocg4av0wv.bkt.clouddn.com/2017-07-20-033011.jpg" alt="VIPER 中的多向数据流"><br><br>VIPER 中的多向数据流</center>

<p>跟 ReSwift 中的数据传递方向比较一下：</p>
<center><br><br><img src="http://ocg4av0wv.bkt.clouddn.com/2017-07-20-033331.jpg" alt=""><br><br>ReSwift 中的单向数据流</center>

<p>可以看出来，数据是单向传递的，这么做，可以让程序中的数据传递更加清晰，也能够很轻松的定位到问题的所在。</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>这是一个已经把整个框架差不多搭建起来的模版项目，包含了一些骨架代码，和库。<a href="https://github.com/CepheusSun/Translate/tree/master/demos/ReSwiftAndRedux">GitHub</a></p>
<p>首先需要做一些准备工作，首先就是要设置这个app最重要的部分:state</p>
<p>打开<strong>AppState.swift</strong> 文件，创建一个 AppState 的结构体:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> ReSwift</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">AppState</span> : <span class="title">StateType</span></span>&#123;</div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个结构体定义了整个app的状态。</p>
<p>在创建包含所有的 AppState 的 <strong>Store</strong> 之前，还要创建一个主 Reducer</p>
<center><br><br><img src="http://ocg4av0wv.bkt.clouddn.com/2017-07-20-034323.jpg" alt=""><br><br></center>

<p>Reducer 是唯一可以直接改变 <strong>Store</strong> 中 <strong>AppState</strong> 的值的地方。只有 Action 可以驱动 Reducer 来改变当前程序的状态。而 Reducer 改变当前 AppState 的值，又取决于他接受到的 Action 类型。</p>
<blockquote>
<p>注意，在程序中只有一个 Store， 他也只有一个主 Reducer</p>
</blockquote>
<p>接下来在<strong>AppReducer.swift</strong> 中创建主 reducer：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> ReSwift</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">appReducer</span><span class="params">(action: Action, state: AppState?)</span></span> -&gt; <span class="type">AppState</span> &#123;</div><div class="line">  <span class="keyword">return</span> <span class="type">AppState</span>()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>appReducer</strong> 是一个接收 Action 并且返回改变之后的 AppState 的函数。参数 state 是程序当前的 state。 这个函数可以根据他接收的 Action 直接改变这个 状态。现在就可以很容易的创建一个 AppState 值了。</p>
<p>现在应该创建 Store 来保存 state 了。</p>
<center><br><br><img src="http://ocg4av0wv.bkt.clouddn.com/2017-07-20-035231.jpg" alt=""><br><br></center>

<p>Store 包含了整个程序当前的状态：这是 AppState 的一个实例。打开<strong>AppDelegate.swift</strong> ,在 impore UIkit 下面添加如下代码:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> ReSwift</div><div class="line"></div><div class="line"><span class="keyword">var</span> store = <span class="type">Store</span>&lt;<span class="type">AppState</span>&gt;(reducer: appReducer, state: <span class="literal">nil</span>)</div></pre></td></tr></table></figure>
<p>这段代码通过 appReducer 创建了一个全局的变量store，appReducer 是这个 Store 的主 Reducer，他包含了接收到action的时候，store 应该怎么改变的规则。因为这是一些准备工作，所以只是传递了一个 nil state 进去。</p>
<p>编译运行，当然，什么都看不见。因为还没写啊！</p>
<h2 id="App-Routing"><a href="#App-Routing" class="headerlink" title="App Routing"></a>App Routing</h2><p>现在可以创建第一个实质的 state了，可是使用 IB 的导航，或者是 routing。</p>
<p>App 路由在所有的架构模式中都是一个挑战，在 ReSwift 中也是。在 MemoryTunes 中将使用很简单的方法来做这件事情，首先需要通过 enum 定义所有的终点，然后让 AppState 持有当前的终点。AppRouter 就会响应这个值的改变，达到路由的目的。</p>
<p>在 <strong>AppRouter.swift</strong> 中添加下面的代码：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> ReSwift</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">RoutingDestination</span>: <span class="title">String</span> </span>&#123;</div><div class="line">  <span class="keyword">case</span> menu = <span class="string">"MenuTableViewController"</span></div><div class="line">  <span class="keyword">case</span> categories = <span class="string">"CategoriesTableViewController"</span></div><div class="line">  <span class="keyword">case</span> game = <span class="string">"GameViewController"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个枚举代表了app 中的所有 ViewController。</p>
<p>到现在，终于有能够放在你程序状态中的数据了。在这个例子里面，只有一个 state 结构体(AppState), 你也可以在这个 state 里面通过子状态的方法，将状态进行分类，这是一个很好的实践。</p>
<p>打开 <strong>RoutingState.swift</strong> 添加如下的子状态结构体：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> ReSwift</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">RoutingState</span>: <span class="title">StateType</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> navigationState: <span class="type">RoutingDestination</span></div><div class="line">  </div><div class="line">  <span class="keyword">init</span>(navigationState: <span class="type">RoutingDestination</span> = .menu) &#123;</div><div class="line">    <span class="keyword">self</span>.navigationState = navigationState</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>RoutingState 包含了 navigationState， 这个东西，就是当前屏幕展示的界面。</p>
<blockquote>
<p>menu 是 navigationState 的默认值。如果没有制定的话，将它设置成这个app的最初状态。</p>
</blockquote>
<p>在 <strong>AppState.swift</strong> 中，添加如下代码:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> routingState: <span class="type">RoutingState</span></div></pre></td></tr></table></figure>
<p>现在 AppState 就有了 RoutingState 这个子状态。编译一下，会发现一个错误。</p>
<center><br><br><img src="http://ocg4av0wv.bkt.clouddn.com/2017-07-20-091710.jpg" alt=""><br><br></center>

<p><em>appReducer</em> 编译不过了！因为我们给 <em>AppState</em> 添加了 <em>routingState</em>，但是在初始化的时候并没有把这个东西传进去。现在还需要一个 reducer 来创建 <em>routingState</em></p>
<p>现在我们只有一个主 <strong>Reducer</strong>， 跟 state 类型，我们也可以通过 子Reducer 来将 Reducer 划分开来。</p>
<center><br><br><img src="http://ocg4av0wv.bkt.clouddn.com/2017-07-21-014930.jpg" alt=""><br><br></center>

<p>在 <strong>RoutingReducer.swift</strong> 中添加下面的 <strong>Reducer</strong>：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> ReSwift</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">routingReducer</span><span class="params">(action: Action, state: RoutingState?)</span></span> -&gt; <span class="type">RoutingState</span> &#123;</div><div class="line">  <span class="keyword">let</span> state = state ?? <span class="type">RoutingState</span>()</div><div class="line">  <span class="keyword">return</span> state</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>跟 主 Reducer 差不多， <em>routionReducer</em> 根据接收到的 Action 改变状态，然后将这个状态返回。到现在，还没有创建 action 所以如果没有接收到 state 的话，就 new 一个 <em>RoutingState</em>，然后返回。</p>
<p>子 reducer 负责创造他们对应的 子状态。</p>
<p>现在回到 <strong>AppReducer.swift</strong> 去改变这个编译错误:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> <span class="type">AppState</span>(routingState: routingReducer(action: action, </div><div class="line">										 state: state?.routingState))</div></pre></td></tr></table></figure>
<p>给 AppState 的初始化方法中添加了对应的参数。其中的 action 和 state 都是由main reducer 传递进去的。</p>
<h3 id="订阅-subscribing"><a href="#订阅-subscribing" class="headerlink" title="订阅  subscribing"></a>订阅  subscribing</h3><p>还记得 RoutingState 里面那个默认的 state <code>.menu</code> 吗？他就是 app 默认的状态。只是你还没有订阅它。</p>
<p>任何的类都可以定于这个 store， 不仅仅是 <strong>View</strong>。当一个类订阅了这个 Store 之后，每次 state 的改变他都会得到通知。我们在 <em>AppRouter</em> 中订阅这个 Store， 然后收到通知之后，push 一个 Controller</p>
<p>打开 <strong>AppRouter.swift</strong> 然后重新写 <em>AppRouter</em></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">AppRouter</span> </span>&#123;</div><div class="line">  </div><div class="line">  <span class="keyword">let</span> navigationController: <span class="type">UINavigationController</span></div><div class="line">  </div><div class="line">  <span class="keyword">init</span>(window: <span class="type">UIWindow</span>) &#123;</div><div class="line">    navigationController = <span class="type">UINavigationController</span>()</div><div class="line">    window.rootViewController = navigationController</div><div class="line">    </div><div class="line">    <span class="comment">// 1</span></div><div class="line">    store.subscribe(<span class="keyword">self</span>) &#123;</div><div class="line">      $<span class="number">0</span>.select &#123;</div><div class="line">        $<span class="number">0</span>.routingState</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">// 2</span></div><div class="line">  fileprivate <span class="function"><span class="keyword">func</span>  <span class="title">pushViewController</span><span class="params">(identifier: String, animated: Bool)</span></span> &#123;</div><div class="line">    <span class="keyword">let</span> viewController = instantiateViewController(identifier: identifier)</div><div class="line">    navigationController.pushViewController(viewController, animated: animated)</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  fileprivate <span class="function"><span class="keyword">func</span> <span class="title">instantiateViewController</span><span class="params">(identifier: String)</span></span> -&gt; <span class="type">UIViewController</span> &#123;</div><div class="line">    <span class="keyword">let</span> storyboard = <span class="type">UIStoryboard</span>(name: <span class="string">"Main"</span>, bundle: <span class="literal">nil</span>)</div><div class="line">    <span class="keyword">return</span> storyboard.instantiateViewController(withIdentifier: identifier)</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// MARK: - StoreSubscriber</span></div><div class="line"><span class="comment">// 3</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">AppRouter</span> :<span class="title">StoreSubscriber</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">newState</span><span class="params">(state: RoutingState)</span></span> &#123;</div><div class="line">    <span class="comment">// 4</span></div><div class="line">    <span class="keyword">let</span> shouldsAnimate = navigationController.topViewController != <span class="literal">nil</span></div><div class="line">    pushViewController(identifier: state.navigationState.rawValue, animated: shouldsAnimate)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这段代码中，我们改了 AppRouter 这个类，然后添加了一个 extension。我们看看具体每一步都做了什么吧！</p>
<ol>
<li><em>AppState</em> 现在订阅了全局的 store， 在闭包里面， selct 表明正在订阅 routingState 的改变。</li>
<li><em>pushViewController</em> 用来初始化，并且 push 这个控制器。通过 identifier 加载的 StoryBoard 中的控制器。</li>
<li>让 <em>AppRouter</em> 响应 StoreSubscriber， 当 routingState 改变的时候，将新的值返回回来。</li>
<li>根控制器是不需要动画的，所以在这个地方判断一下根控制器。</li>
<li>当 state 发生改变，就可以去出 state.navigationState, push 出对应的 controller</li>
</ol>
<p>AppRouter 现在就就初始化 <em>menu</em> 然后将 <em>MenuTableViewController</em> push 出来</p>
<p>编译运行：</p>
<center><br><br><img src="http://ocg4av0wv.bkt.clouddn.com/2017-07-21-024808.jpg" width="200"><br><br></center>

<p>现在 app 中就是 <em>MenuTableViewController</em> 了, 现在当然还是空的。毕竟我们还没有开始学 view。</p>
<h2 id="View"><a href="#View" class="headerlink" title="View"></a>View</h2><center><br><br><img src="http://ocg4av0wv.bkt.clouddn.com/2017-07-21-025205.jpg" alt=""><br><br></center>

<p>任何东西都可能是一个 <em>StoreSubscriber</em>， 但是大多数情况下都是 view 层在响应状态的变化。现在是让 <em>MenuTableViewController</em> 来展示两个不同的 menu 了。</p>
<p>去 <strong>MenuState.swift</strong>， 创建对应的 Reducer</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> ReSwift</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MenuState</span>: <span class="title">StateType</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> menuTitles: [<span class="type">String</span>]</div><div class="line">  </div><div class="line">  <span class="keyword">init</span>() &#123;</div><div class="line">    menuTitles = [<span class="string">"NewGame"</span>, <span class="string">"Choose Category"</span>]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>MenuState</strong> 有一个 *menuTitles， 这个属性就是 tableView 的 title</p>
<p>在 <strong>MenuReducer.swift</strong> 中，创建这个 state 对应的 Reducer:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> ReSwift</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">menuReducer</span><span class="params">(action: Action, state: MenuState?)</span></span> -&gt; <span class="type">MenuState</span> &#123;</div><div class="line">  <span class="keyword">return</span> <span class="type">MenuState</span>()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为 MenuState 是静态的，所以不需要去处理状态的变化。所以这里只需要简单的返回一个新的 MenuState</p>
<p>回到 <strong>AppState.swift</strong> 中, 添加</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> meunState: <span class="type">MenuState</span></div></pre></td></tr></table></figure>
<p>编译又失败了，然后需要到 <strong>AppReducer.swift</strong> 中去修改这个编译错误。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> <span class="type">AppState</span>(routingState: routingReducer(action: action,</div><div class="line">                                  state: state?.routingState),</div><div class="line">      meunState: menuReducer(action: action, state: state?.meunState))</div></pre></td></tr></table></figure>
<p>现在有了 MenuState, 接下来就是要订阅它了。</p>
<p>先在打开 <strong>MenuTableViewController.swift</strong>, 然后将代码改成这样:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> ReSwift</div><div class="line"></div><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MenuTableViewController</span>: <span class="title">UITableViewController</span> </span>&#123;</div><div class="line">  <span class="comment">// 1</span></div><div class="line">  <span class="keyword">var</span> tableDataSource: <span class="type">TableDataSource</span>&lt;<span class="type">UITableViewCell</span>, <span class="type">String</span>&gt;?</div><div class="line">  </div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewWillAppear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123;</div><div class="line">    <span class="keyword">super</span>.viewWillAppear(animated)</div><div class="line">    <span class="comment">// 2</span></div><div class="line">    store.subscribe(<span class="keyword">self</span>) &#123;</div><div class="line">      $<span class="number">0</span>.select &#123;</div><div class="line">        $<span class="number">0</span>.menuState</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewWillDisappear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123;</div><div class="line">    <span class="keyword">super</span>.viewWillDisappear(animated)</div><div class="line">    <span class="comment">// 3</span></div><div class="line">    store.unsubscribe(<span class="keyword">self</span>)</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// MARK: - StoreSubscriber</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">MenuTableViewController</span>: <span class="title">StoreSubscriber</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">newState</span><span class="params">(state: MenuState)</span></span> &#123;</div><div class="line">    <span class="comment">// 4</span></div><div class="line">    tableDataSource = <span class="type">TableDataSource</span>(cellIdentifier: <span class="string">"TitleCell"</span>, models: state.menuTitles) &#123;</div><div class="line">      $<span class="number">0</span>.textLabel?.text = $<span class="number">1</span></div><div class="line">      $<span class="number">0</span>.textLabel?.textAlignment = .center</div><div class="line">      <span class="keyword">return</span> $<span class="number">0</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    tableView.dataSource = tableDataSource</div><div class="line">    tableView.reloadData()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在我们来看看这段代码做了什么？</p>
<ol>
<li>TableDataSource 包含了UITableView data source 相关的东西。</li>
<li>订阅了 menuState</li>
<li>取消订阅</li>
<li>这段代码就是实现 UITableView 的代码，在这儿可以很明确的看到 state 是怎么变成 view 的。</li>
</ol>
<blockquote>
<p>可能已经发现了，ReSwift 使用了很多值类型变量，而不是对象类型。并且推荐使用声明式的 UI 代码。为什么呢？</p>
<p>StoreSubscriber 中定义的 newState 回调了状态的改变。你可能会通过这样的方法去接货这个值</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MenuTableViewController</span>: <span class="title">UITableViewController</span> </span>&#123;</div><div class="line">&gt;   <span class="keyword">var</span> currentMenuTitlesState: [<span class="type">String</span>]</div><div class="line">&gt;   ...</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p>但是写声明式的 UI 代码，可以很明确的知道 state 是怎么转换成 View 的。在这个例子中的问题的 UITableView 并没有这样的API。这就是我写 TableDataSource 来桥接的原因。如果你感兴趣的话可以去看看这个 <strong>TableDataSource.swift</strong></p>
</blockquote>
<p>编译运行，就能够看到了:</p>
<center><br><br><img src="http://ocg4av0wv.bkt.clouddn.com/2017-07-21-032618.jpg" width="200"><br><br></center>

<h2 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h2><center><br><br><img src="http://ocg4av0wv.bkt.clouddn.com/2017-07-21-032930.jpg" alt=""><br><br></center>

<p>做好了 View 接下来就来写 <strong>Action</strong> 了。</p>
<p>Action 是 Store 中数据改变的原因。一个 Action 就是一个有很多变量结构体，这写变量也是这个 Action 的参数。 Reducer 处理一系列的 action， 然后改变 app 的状态。</p>
<p>我们现在先创建一个 Action， 打开 <strong>RoutingAction.swift</strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> ReSwift</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">RoutingAction</span>: <span class="title">Action</span> </span>&#123;</div><div class="line">  <span class="keyword">let</span> destination: <span class="type">RoutingDestination</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em>RoutingAction</em> 改变当前的 routing 终点</p>
<p>现在，当 menu 的 cell 被点击的时候，派发一个 action。</p>
<p>在 <strong>MenuTableViewController.swift</strong> 中添加下面的代码:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, didSelectRowAt indexPath: IndexPath)</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> routeDestination: <span class="type">RoutingDestination</span> = .categories</div><div class="line">    <span class="keyword">switch</span> indexPath.row &#123;</div><div class="line">    <span class="keyword">case</span> <span class="number">0</span>: routeDestination = .game</div><div class="line">    <span class="keyword">case</span> <span class="number">1</span>: routeDestination = .categories</div><div class="line">    <span class="keyword">default</span>:<span class="keyword">break</span></div><div class="line">    &#125;</div><div class="line">    store.dispatch(<span class="type">RoutingAction</span>(destination: routeDestination))</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>这段代码，根据选择的 cell 设置不同的 routeDestination 然后用dispatch 方法派发出去。</p>
<p>这个 action 被派发出去了，但是，还没有被任何的 reducer 给支持。现在去 RoutingReducer.swift 然后做一下对应的修改。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> state = state ?? <span class="type">RoutingState</span>()</div><div class="line"></div><div class="line"><span class="keyword">switch</span> action &#123;</div><div class="line"><span class="keyword">case</span> <span class="keyword">let</span> routingAction <span class="keyword">as</span> <span class="type">RoutingAction</span>:</div><div class="line">  state.navigationState = routingAction.destination</div><div class="line"><span class="keyword">default</span>: <span class="keyword">break</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> state</div></pre></td></tr></table></figure>
<p>switch 语句用来判断是否传入的 action 是 RoutingAction。如果是，就修改 state 为这个 action 的 destination</p>
<p>编译运行，现在点击 item ， 就会对应的 push 出 controller。</p>
<h2 id="Updating-the-State"><a href="#Updating-the-State" class="headerlink" title="Updating the State"></a>Updating the State</h2><p>这样去实现导航可能是由瑕疵的。当你点击 “New Game” 的时候，<code>RoutingState</code> 的 <code>navigationState</code> 就会从<code>menu</code> 变成 <code>game</code>。 但是当你点击 controller 的返回按钮的时候，navigationState 却没有改变。</p>
<p>在 ReSwift 中，让状态跟 UI 同步是很重要的，但是这又是最容易搞忘的东西。特别是向上面那样，由 UIKit 自动控制的东西。</p>
<p>我们可以在 MenutableViewController 出现的时候更新一下这个状态。</p>
<p>在 <strong>MenuTableViewController.swift</strong> 的 <code>viewWillAppear</code>: 方法中，添加:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">store.dispatch(<span class="type">RoutingAction</span>(destination: .menu))</div></pre></td></tr></table></figure>
<p>这样就能够在上面的问题出现的时候解决这个问题。</p>
<p>运行一下呢？呃… 完全乱了。也可能会看到一个崩溃。</p>
<center><br><br><img src="http://ocg4av0wv.bkt.clouddn.com/2017-07-21-live.gif" alt=""><br><br></center>

<p>打开 <strong>AppRouter.swift</strong>， 你会看到每次接收到一个新的 navigationState 的时候，都会调用 <code>pushViewController</code> 方法。也就是说，每次响应就会 push 一个 menu 出来！</p>
<p>所以我们还必须在 push 之前确定这个 controller 是不是正在屏幕中。所以我们修改一下 <code>pushViewController</code>  这个方法:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">fileprivate <span class="function"><span class="keyword">func</span>  <span class="title">pushViewController</span><span class="params">(identifier: String, animated: Bool)</span></span> &#123;</div><div class="line">	<span class="keyword">let</span> viewController = instantiateViewController(identifier: identifier)</div><div class="line">    <span class="keyword">let</span> newViewControllerType = type(of: viewController)</div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> currentVc = navigationController.topViewController &#123;</div><div class="line">      <span class="keyword">let</span> currentViewControllerType = type(of: currentVc)</div><div class="line">      <span class="keyword">if</span> currentViewControllerType == newViewControllerType &#123;</div><div class="line">        <span class="keyword">return</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    navigationController.pushViewController(viewController, animated: animated)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的方法中，通过 <code>type(of:)</code> 方法来避免当前的 topViewController 跟 要推出来的 Controller 进行对比。如果相等，就直接 <code>return</code> 。</p>
<p>编译运行，这时候，又一切正常了。</p>
<p>当 UI 发生变化的时候更新当前的状态是比较复杂的事情。这是写 ReSwift 的时候必须要解决的一件事情。还好他不是那么常见。</p>
<h2 id="Category"><a href="#Category" class="headerlink" title="Category"></a>Category</h2><p>现在，我们继续来实现  <em>CategoriesTableViewController</em> 这一部分跟之前的部分比起来更复杂一些。这个界面需要允许用户来选择音乐的类型，首先，我们在<strong>CategoriesState.swift</strong> 中添加响应的状态。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> ReSwift</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Category</span>: <span class="title">String</span> </span>&#123;</div><div class="line">  <span class="keyword">case</span> pop = <span class="string">"Pop"</span></div><div class="line">  <span class="keyword">case</span> electrinic = <span class="string">"Electronic"</span></div><div class="line">  <span class="keyword">case</span> rock = <span class="string">"Rock"</span></div><div class="line">  <span class="keyword">case</span> metal = <span class="string">"Metal"</span></div><div class="line">  <span class="keyword">case</span> rap = <span class="string">"Rap"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CategoriesState</span>: <span class="title">StateType</span> </span>&#123;</div><div class="line">  <span class="keyword">let</span> categories: [<span class="type">Category</span>]</div><div class="line">  <span class="keyword">var</span> currentCategorySelected: <span class="type">Category</span></div><div class="line">  </div><div class="line">  <span class="keyword">init</span>(currentCategory: <span class="type">Category</span>) &#123;</div><div class="line">    categories = [.pop, .electrinic, .rock, .metal, .rap]</div><div class="line">    currentCategorySelected = currentCategory</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个枚举定义了一些音乐的类型。CategoriesState 包含了一个数组的种类，以及当前选择的种类。</p>
<p>在 <strong>ChangeCategoryAction.swift</strong> 中添加这些代码:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> ReSwift</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ChangeCategoryAction</span>: <span class="title">Action</span> </span>&#123;</div><div class="line">  <span class="keyword">let</span> categoryIndex: <span class="type">Int</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里定义了对应的 action， 使用 categoryIndex 来寻找对应的音乐类型。</p>
<p>现在来实现 Reducer了。 这个 reducer 需要接受 ChangeCategoryAction 然后将新的 state 保存起来。打开 <strong>CategoryReducer.swift</strong>：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> ReSwift</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">struct</span> <span class="title">CategoriesReducerConstants</span> </span>&#123;</div><div class="line">  <span class="keyword">static</span> <span class="keyword">let</span> userDefaultCategoryKey = <span class="string">"currentCategoryKey"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">typealias</span> <span class="type">C</span> = <span class="type">CategoriesReducerConstants</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">categoriesReducer</span><span class="params">(action: Action, state: CategoriesState?)</span></span> -&gt; <span class="type">CategoriesState</span> &#123;</div><div class="line">  <span class="keyword">var</span> currentCategory: <span class="type">Category</span> = .pop</div><div class="line">  <span class="comment">// 1</span></div><div class="line">  <span class="keyword">if</span> <span class="keyword">let</span> loadedCategory = getCurrentCategoryStateFromUserDefaults() &#123;</div><div class="line">    currentCategory = loadedCategory</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> state = state ?? <span class="type">CategoriesState</span>(currentCategory: currentCategory)</div><div class="line">  </div><div class="line">  <span class="keyword">switch</span> action &#123;</div><div class="line">  <span class="keyword">case</span> <span class="keyword">let</span> changeCategoryAction <span class="keyword">as</span> <span class="type">ChangeCategoryAction</span>:</div><div class="line">    <span class="comment">// 2</span></div><div class="line">    <span class="keyword">let</span> newCategory = state.categories[changeCategoryAction.categoryIndex]</div><div class="line">    state.currentCategorySelected = newCategory</div><div class="line">    saveCurrentCategoryStateToUserdefaults(category: newCategory)</div><div class="line">  <span class="keyword">default</span>: <span class="keyword">break</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> state</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 3</span></div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">getCurrentCategoryStateFromUserDefaults</span><span class="params">()</span></span> -&gt; <span class="type">Category</span>?</div><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> userDefaults = <span class="type">UserDefaults</span>.standard</div><div class="line">  <span class="keyword">let</span> rawValue = userDefaults.string(forKey: <span class="type">C</span>.userDefaultCategoryKey)</div><div class="line">  <span class="keyword">if</span> <span class="keyword">let</span> rawValue = rawValue &#123;</div><div class="line">    <span class="keyword">return</span> <span class="type">Category</span>(rawValue: rawValue)</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 4</span></div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">saveCurrentCategoryStateToUserdefaults</span><span class="params">(category: Category)</span></span> &#123;</div><div class="line">  <span class="keyword">let</span> userDefaults = <span class="type">UserDefaults</span>.standard</div><div class="line">  userDefaults.<span class="keyword">set</span>(category.rawValue, forKey: <span class="type">C</span>.userDefaultCategoryKey)</div><div class="line">  userDefaults.synchronize()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>跟其他的 Reducer 一样，这些方法实现了一下比较复杂的状态的改变，并且将选择之后的状态通过 Userdefault 持久化。</p>
<ol>
<li>从 UserDefault 中获取 category， 然后赋值给 CategoriesState</li>
<li>在接收到 ChangeCategoryAction 的时候更新状态，然后保存下来</li>
<li>从 Userdefault 中获取state</li>
<li>将 state 保存在 UserDefault 中</li>
</ol>
<p>3、4 中的两个方法都是功能很单一的方法，而且是全局的。你也可以把他们放在一个类或者结构体中。</p>
<p>接下来很自然的，就会需要在 AppState 中添加新的状态。打开 <strong>AppState.swift</strong> 然后添加对应的状态:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> categoriesState: <span class="type">CategoriesState</span></div></pre></td></tr></table></figure>
<p>然后去 <strong>AppReducer.swift</strong> 中去修改对应的错误</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> <span class="type">AppState</span>(routingState: routingReducer(action: action,</div><div class="line">                                             state: state?.routingState),</div><div class="line">                meunState: menuReducer(action: action, state: state?.meunState),</div><div class="line">      categoriesState: categoriesReducer(action: action, state: state?.categoriesState))</div></pre></td></tr></table></figure>
<p>现在还需要 View 了。现在需要在 CategoriesViewController 中去写这部分的 View</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> ReSwift</div><div class="line"></div><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoriesTableViewController</span>: <span class="title">UITableViewController</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> tableDataSource: <span class="type">TableDataSource</span>&lt;<span class="type">UITableViewCell</span>, <span class="type">Category</span>&gt;?</div><div class="line">  </div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewWillAppear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123;</div><div class="line">    <span class="keyword">super</span>.viewWillAppear(animated)</div><div class="line">    <span class="comment">//1</span></div><div class="line">    store.subscribe(<span class="keyword">self</span>) &#123;</div><div class="line">      $<span class="number">0</span>.select &#123;</div><div class="line">        $<span class="number">0</span>.categoriesState</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewWillDisappear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123;</div><div class="line">    <span class="keyword">super</span>.viewDidDisappear(animated)</div><div class="line">    store.unsubscribe(<span class="keyword">self</span>)</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, didSelectRowAt indexPath: IndexPath)</span></span> &#123;</div><div class="line">    <span class="comment">// 2</span></div><div class="line">    store.dispatch(<span class="type">ChangeCategoryAction</span>(categoryIndex: indexPath.row))</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">CategoriesTableViewController</span>: <span class="title">StoreSubscriber</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">newState</span><span class="params">(state: CategoriesState)</span></span> &#123;</div><div class="line">    tableDataSource = <span class="type">TableDataSource</span>(cellIdentifier: <span class="string">"CategoryCell"</span>, models: state.categories) &#123;</div><div class="line">      $<span class="number">0</span>.textLabel?.text = $<span class="number">1</span>.rawValue</div><div class="line">      <span class="comment">// 3</span></div><div class="line">      $<span class="number">0</span>.accessoryType = (state.currentCategorySelected == $<span class="number">1</span>) ? .checkmark : .<span class="keyword">none</span></div><div class="line">      <span class="keyword">return</span> $<span class="number">0</span></div><div class="line">    &#125;</div><div class="line">    tableView.dataSource = tableDataSource</div><div class="line">    tableView.reloadData()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这部分的代码跟 MenuTableViewController 差不多。注释中标记的内容分别是：</p>
<ol>
<li>在 <code>viewWillAppear</code> 中订阅 categoriesState 的改变，然后在 <code>viewillDisappear</code> 中取消订阅。</li>
<li>将事件派发出去</li>
<li>标记选择的状态</li>
</ol>
<p>所有的东西都写好了，现在试一下！</p>
<center><br><br><img src="http://ocg4av0wv.bkt.clouddn.com/2017-07-21-065609.jpg" width="200"><br><br></center>

<h2 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h2><p>怎么都跑不了这个话题，这在 ReSwift 也很方便。</p>
<p>场景:从 iTunes的 <a href="https://affiliate.itunes.apple.com/resources/documentation/itunes-store-web-service-search-api/?uo=8&amp;at=11ld4k">API</a> 中去获取照片。首先需要创建对应的 state， reducer 以及相关的 action.</p>
<p>打开 <strong>GameState.swift</strong> 添加</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> ReSwift</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">GameState</span>: <span class="title">StateType</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> memoryCards: [<span class="type">MemoryCard</span>]</div><div class="line">  <span class="comment">// 1</span></div><div class="line">  <span class="keyword">var</span> showLoading: <span class="type">Bool</span></div><div class="line">  <span class="comment">// 2</span></div><div class="line">  <span class="keyword">var</span> gameFinishied: <span class="type">Bool</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码定义了 Game 的状态。</p>
<ol>
<li>loading 的 菊花，是否存在</li>
<li>游戏是否结束</li>
</ol>
<p>接下来是Reducer <strong>GameReducer.swift</strong>:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> ReSwift</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">gameReducer</span><span class="params">(action: Action, state: GameState?)</span></span> -&gt; <span class="type">GameState</span> &#123;</div><div class="line">  <span class="keyword">let</span> state = state ?? <span class="type">GameState</span>(memoryCards: [],</div><div class="line">                                 showLoading: <span class="literal">false</span>,</div><div class="line">                                 gameFinishied: <span class="literal">false</span>)</div><div class="line">  <span class="keyword">return</span> state</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码就是简单的创建了一个 <em>GameState</em>, 稍后会再回到这个地方的。</p>
<p>在 <strong>AppState.swift</strong> 中，添加对应的状态</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> gameState: <span class="type">GameState</span></div></pre></td></tr></table></figure>
<p>修改 <strong>AppReducer.swift</strong> 中出现的编译错误</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> <span class="type">AppState</span>(routingState: routingReducer(action: action,</div><div class="line">                                               state: state?.routingState),</div><div class="line">                  meunState: menuReducer(action: action, state: state?.meunState),</div><div class="line">                  categoriesState: categoriesReducer(action: action, state: state?.categoriesState),</div><div class="line">                  gameState: gameReducer(action: action, state: state?.gameState))</div></pre></td></tr></table></figure>
<blockquote>
<p>发现了规律了吧，在每次写完 Action/Reducer/State之后应该做什么都是可见并且很简单的。这种情况，得益于ReSwift 的单向数据特效和严格的代码约束。只有 Reducer 能够改变 app 的 Store，只有 Action 能够触发这种响应。这样做能够让你知道在上面地方找代码，在什么地方做新功能。</p>
</blockquote>
<p>现在开始定义 Action， 这个 action 用来更新卡片。在 <strong>SetCardsAction.swift</strong>：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> ReSwift</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SetCardsAction</span>: <span class="title">Action</span> </span>&#123;</div><div class="line">  <span class="keyword">let</span> cardImageUrls: [<span class="type">String</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个 action 用来设置 GameState 中图片的URL</p>
<p>现在开始准备程序中第一个异步行为吧！在 <strong>FetchTumesAction.swift</strong> 中，添加下面的代码:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> ReSwift</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">fetchTunes</span><span class="params">(state: AppState, store: Store&lt;AppState&gt;)</span></span> -&gt; <span class="type">FetchTunesAction</span> &#123;</div><div class="line">  iTunesAPI.searchFor(category: state.categoriesState.currentCategorySelected.rawValue) &#123;</div><div class="line">    store.dispatch(<span class="type">SetCardsAction</span>(cardImageUrls: $<span class="number">0</span>))</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="type">FetchTunesAction</span>()</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FetchTunesAction</span>: <span class="title">Action</span></span>&#123;&#125;</div></pre></td></tr></table></figure>
<p><code>fetchTunes</code>  通过 <code>itunesAPI</code> 获取了图片。然后在闭包中将结果派发出来。 ReSwift 中的异步任务就是这么简单。</p>
<p><code>fetchTunes</code> 返回一个 <code>FetchTunesAction</code>  这个 action 是用来验证请求的。</p>
<p>打开 <strong>OpenReducer.swift</strong> 然后添加对这两个 action 的支持。把 <code>gameReducer</code> 中的代码改成下面这样：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> state = state ?? <span class="type">GameState</span>(memoryCards: [],</div><div class="line">                                showLoading: <span class="literal">false</span>,</div><div class="line">                                gameFinishied: <span class="literal">false</span>)</div><div class="line"> <span class="keyword">switch</span> action &#123;</div><div class="line"> <span class="comment">// 1</span></div><div class="line"> <span class="keyword">case</span> <span class="number">_</span> <span class="keyword">as</span> <span class="type">FetchTunesAction</span>:</div><div class="line">   state = <span class="type">GameState</span>(memoryCards: [],</div><div class="line">                     showLoading: <span class="literal">true</span>,</div><div class="line">                     gameFinishied: <span class="literal">false</span>)</div><div class="line"> <span class="comment">// 2</span></div><div class="line"> <span class="keyword">case</span> <span class="keyword">let</span> setCardsAction <span class="keyword">as</span> <span class="type">SetCardsAction</span>:</div><div class="line">   state.memoryCards = generateNewCards(with: setCardsAction.cardImageUrls)</div><div class="line">   state.showLoading = <span class="literal">false</span></div><div class="line"> <span class="keyword">default</span>:<span class="keyword">break</span></div><div class="line"> &#125;</div><div class="line"> <span class="keyword">return</span> state</div></pre></td></tr></table></figure>
<p>这段代码，就是根据具体的 action 做不同的事情。</p>
<ol>
<li>FetchTunesAction, 设置 showLoading 为 true</li>
<li>SetCardsAction, 打乱卡片，然后将 showLoading 设置为 false。 generateNewCards 方法可以在 <strong>MemoryGameLogic.swift</strong> 中找到</li>
</ol>
<p>现在开始写 <strong>View</strong></p>
<p>在 <strong>CardCollectionViewCell.swift</strong> 中添加下面的方法:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">configCell</span><span class="params">(with cardState: MemoryCard)</span></span> &#123;</div><div class="line">  <span class="keyword">let</span> url = <span class="type">URL</span>(string: cardState.imageUrl)</div><div class="line">  <span class="comment">// 1</span></div><div class="line">  cardImageView.kf.setImage(with: url)</div><div class="line">  <span class="comment">// 2</span></div><div class="line">  cardImageView.alpha = cardState.isAlreadyGuessed || cardState.isFlipped ? <span class="number">1</span> : <span class="number">0</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>configCell</code> 这个方法做了下面两件事情:</p>
<ol>
<li>使用 Kingfisher 来缓存图片</li>
<li>判断是否展示图片</li>
</ol>
<p>下一步，实现 CollectionView。在 gameViewCotroller.swift 倒入 <code>import ReSwift</code> 然后在 <code>showGameFinishedAlert</code> 上面添加下面的代码:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> collectionDataSource: <span class="type">CollectionDataSource</span>&lt;<span class="type">CardCollectionViewCell</span>, <span class="type">MemoryCard</span>&gt;?</div><div class="line"> <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewWillAppear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123;</div><div class="line">   <span class="keyword">super</span>.viewWillAppear(animated)</div><div class="line">   store.subscribe(<span class="keyword">self</span>) &#123;</div><div class="line">     $<span class="number">0</span>.select &#123;</div><div class="line">       $<span class="number">0</span>.gameState</div><div class="line">     &#125;</div><div class="line">   &#125;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewWillDisappear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123;</div><div class="line">   <span class="keyword">super</span>.viewWillDisappear(animated)</div><div class="line">   store.unsubscribe(<span class="keyword">self</span>)</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">   <span class="comment">// 1</span></div><div class="line">   store.dispatch(fetchTunes)</div><div class="line">   collectionView.delegate = <span class="keyword">self</span></div><div class="line">   loadingIndicator.hidesWhenStopped = <span class="literal">true</span></div><div class="line">   </div><div class="line">   <span class="comment">// 2</span></div><div class="line">   collectionDataSource = <span class="type">CollectionDataSource</span>.<span class="keyword">init</span>(cellIdentifier: <span class="string">"CardCell"</span>, models: []) &#123;</div><div class="line">     $<span class="number">0</span>.configCell(with: $<span class="number">1</span>)</div><div class="line">     <span class="keyword">return</span> $<span class="number">0</span></div><div class="line">   &#125;</div><div class="line">   collectionView.dataSource = collectionDataSource</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>由于没有写 StoreSubscriber ，所以这里会有一点点的编译错误。我们先假设已经写了。这段代码，首先是订阅了取消订阅 gameState 然后:</p>
<ol>
<li>派发 fetchTunes 来获取图片</li>
<li>使用 CollectiondataSource  来配置 cell 相关信息。</li>
</ol>
<p>现在我们来添加 <code>StoreSubscriber</code> :</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">GameViewController</span>: <span class="title">StoreSubscriber</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">newState</span><span class="params">(state: GameState)</span></span> &#123;</div><div class="line">    collectionDataSource?.models = state.memoryCards</div><div class="line">    collectionView.reloadData()</div><div class="line">    <span class="comment">// 1</span></div><div class="line">    state.showLoading ? loadingIndicator.startAnimating() : loadingIndicator.stopAnimating()</div><div class="line">       <span class="comment">// 2</span></div><div class="line">    <span class="keyword">if</span> state.gameFinishied &#123;</div><div class="line">      showGameFinishedAlert()</div><div class="line">      store.dispatch(fetchTunes)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码实现了 state 改变的时候对应的变化。他会更新 dataSource</p>
<ol>
<li>更新 loading indicator 的状态。</li>
<li>当游戏结束时，弹窗</li>
</ol>
<p>现在，运行一下吧！</p>
<center><br><br><img src="http://ocg4av0wv.bkt.clouddn.com/2017-07-21-085643.jpg" width="200"><br><br></center>

<h2 id="Play"><a href="#Play" class="headerlink" title="Play"></a>Play</h2><p>游戏的逻辑是： 让用户翻转两张卡片的时候，如果它们是一眼的，就让他们保持，如果不一样就翻回去。用户的任务是在尽可能少的尝试之后翻转所有的卡片。</p>
<p>现在需要一个翻转的事件。在 <strong>OpenCardAction.swift</strong> 中添加代码:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> ReSwift</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FlipCardAction</span>: <span class="title">Action</span></span>&#123;</div><div class="line">  <span class="keyword">let</span> cardIndexToFlip: <span class="type">Int</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当卡片翻转的时候: FlipCardAction 使用 cardIndexToFlip 来更新 gameState 中的状态。</p>
<p>下一步修改 <code>gamereducer</code>  来支持这个 action。打开 <strong>GameReducer.swift</strong> 添加下面对应的case</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">case</span> <span class="keyword">let</span> flipCardAction <span class="keyword">as</span> <span class="type">FlipCardAction</span>:</div><div class="line">   state.memoryCards = flipCard(index: flipCardAction.cardIndexToFlip,</div><div class="line">                                memoryCards: state.memoryCards)</div><div class="line">state.gameFinishied = hasFinishedGame(cards: state.memoryCards)</div></pre></td></tr></table></figure>
<p>对 FlipCardAction 来说， flipCard 改变卡片的状态。hasFinishedGame 会在游戏结束的时候调用。两个方法都可以在 <strong>MemoryGameLogic.swift</strong> 中找到。</p>
<p>最后一个问题是在点击的时候，把翻转的 action 派发出去。</p>
<p>在 <strong>GameViewController.swift</strong> 中，找到 <code>UICollectionViewDelegate</code>  这个 extension。在 <code>collectionView(_:didSelectItemAt:)</code> 中添加:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">store.dispatch(<span class="type">FlipCardAction</span>(cardIndexToFlip: indexPath.row))</div></pre></td></tr></table></figure>
<p>当卡片被选择的时候，关联的<code>indexPath.row</code> 就会跟着 <code>FlipcardAction</code> 被派发出去.</p>
<p>再运行一下，就会发现！</p>
<center><br><br><img src="http://ocg4av0wv.bkt.clouddn.com/2017-07-21-091810.jpg" width="200"><br><br></center>



<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>模版项目已经完整项目都在 <a href="https://github.com/CepheusSun/Translate/tree/master/demos/ReSwiftAndRedux">GitHub</a> </p>
<p>ReSwift 不仅仅是我们今天提到的内容。他还以很多:</p>
<ul>
<li><strong>Middleware</strong>: 中间件。swift目前还没有很好的办法来做切面。但是 ReSwift 解决了这个问题。可以使用ReSwift 的 [Middleware] 特性来解决这个问题。他能够让你轻松的切面(logging, 统计， 缓存)。</li>
<li><strong>Routing</strong>： 在这个 app 中已经实现了自己的 Routing， 还有个更通用的解决方案<a href="https://github.com/ReSwift/ReSwift-Router">ReSwift-Routing</a> 单这在社区还是一个还没有完全解决的问题。说不定解决它的人就是你！</li>
<li><strong>Testing</strong>: ReSwift 或许是最方便测试的框架了。 Reducer 包含了你需要测试的所有代码。他们都是纯的功能函数。这种函数在接受了同一个input 总是返回同一个值，他们不回依赖于程序当前的状态。</li>
<li><strong>Debugging</strong>： ReSwift 的所有状态都在一个结构体中定义，并且是单向数据流的，debug 会非常的简单，甚至你还可以用 <a href="https://github.com/ReSwift/ReSwift-Recorder">ReSwift-Recorder</a> 来记录下导致 crash 的状态</li>
<li><strong>Persistence</strong>: 因为所有的状态都在一个地方，拓展和坚持都是很容易的事情。缓存离线的数据也是一个比较麻烦的架构问题，但是 ReSwift 解决了这个问题。</li>
<li><strong>others</strong>： Redux 架构并不是一个库，它是一种编程范式，你也可以自己实现一套，还有 <a href="https://github.com/BendingSpoons/katana-swift">Katana</a> 或者 <a href="https://github.com/ReduxKit/ReduxKit">ReduxKit</a> 也可以做这件事</li>
</ul>
<p>如果你想学习更多关于 ReSwift 的东西，可以看 ReSwift 作者 <a href="https://news.realm.io/news/benji-encz-unidirectional-data-flow-swift/">Benjamin Encz</a> 的演讲视频</p>
<p><a href="http://christiantietze.de/posts/2016/01/reswift-level-indirection/">Christian Tietze’s blog</a> 的博客上有很多有趣的例子。</p>
<p><strong>这篇文章翻译自Ray wenderlich <a href="https://www.raywenderlich.com/155815/reswift-tutorial-memory-game-app">ReSwift Tutorial: Memory Game App</a>]</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[面向 Extension 开发 🌞 Share Extension]]></title>
      <url>http://www.CepheusSun.com/ShareExtension.html</url>
      <content type="html"><![CDATA[<p>Share Extension 使用户在使用其他的app 的时候, 更加方便的将其内容分享出去，像是社会化分享还有上传服务器。比如说， 在一个 app 中有个分享按钮， 用户可以选择其中一个 Share Extension 来发表评论或者内容。</p>
<a id="more"></a>
<blockquote>
<p><strong>写在前面的话</strong></p>
<p>最好的 Share Extension 能够让用户能够很轻松的分享网页中的内容。如果你需要用一个扩展来让用户使用这些内容做一些其他的操作, 或者为用户提供他们所关心的内容的更新， Share Extension 可能就不是最好的解决方案了。</p>
</blockquote>
<h3 id="如何理解-Share-Extension"><a href="#如何理解-Share-Extension" class="headerlink" title="如何理解 Share Extension"></a>如何理解 Share Extension</h3><p> Share Extension 有以下几个特点：</p>
<ul>
<li>让用户更容易分享内容。</li>
<li>如果可以的话，能够让用户预览，编辑，标注，并且自定义内容。</li>
<li>在用户发送内容的时候，能够确保内容是合法的。</li>
</ul>
<p>用户能够通过系统提供的 UI 来获得他能够使用的 Share Extension。在 iOS 中， 用户点击分享按钮，然后从系统弹出来的分享区域中选择一个 Share Extension。</p>
<p>当用户选择了你的 Share Extension 之后，你需要展示一个包含了内容的视图，然后发表出去。你可以将你的视图机遇系统提供的 vc， 或者自定义一个。系统提供的那个提供了一些很常见的操作，比如说，预览，合法性判断，同步内容，以及视图的动画，还有设置发布。</p>
<h3 id="创建-Share-Extension"><a href="#创建-Share-Extension" class="headerlink" title="创建 Share Extension"></a>创建 Share Extension</h3><p>创建的过程类似于之前写的 <a href="http://cepheussun.com/TodayExtension.html">面向 Extension 开发 🌞 Today Extension</a></p>
<p>唯一不同的是 Today Extension 有唯一的一个 宿主 app 而 Share Extension 在使用的时候， 可能有很多的宿主 app 所以在运行的时候，需要选择一个宿主 app。 一般都是选择的 Safari 然后，随便打开一个网页，下面的分享按钮就可用了，点击之后，在分享列表里面就能够看到你的 app 咯。</p>
<blockquote>
<p>需要注意的是，这个时候看到的 Share Extension 的名称是你 Share Extension 的名称，这个是可以更app 名称不一样的。只要改 Share Extension 的 info.plist 中的 Bundle display name 为你想要的名称就可以了。</p>
</blockquote>
<h3 id="这篇文章要做什么？"><a href="#这篇文章要做什么？" class="headerlink" title="这篇文章要做什么？"></a>这篇文章要做什么？</h3><p>写到这里, 基本上已经完成了准备工作了。可能还有 创建 app groups 之类的工作，这块将在下面的内容中介绍。花了几天时间断断续续的研究 <code>Share Extension</code>，对比了系统中本来就存在的facebook twitter 以及国内的微博什么的。我将在本文中模仿着做一个类似的效果出来。</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/2017-07-07-live.gif" alt=""></p>
<p>这是最终效果的 gif 图。这只是第一步。好了，我们开始吧。</p>
<h4 id="基本设置"><a href="#基本设置" class="headerlink" title="基本设置"></a>基本设置</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">       <span class="keyword">super</span>.viewDidLoad()</div><div class="line">       placeholder = <span class="string">"分享到微博"</span>  <span class="comment">// 占位文字</span></div><div class="line">       charactersRemaining = <span class="number">140</span>  <span class="comment">// 左下角的文字 展示数字，可以用来倒数，还能输入几个字, 小于等于0的时候变成红色</span></div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>如注释所见，这里设置了placeholder 已经右下角的数字。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 过滤分享的内容</span></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">isContentValid</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    charactersRemaining = <span class="number">140</span> - contentText.characters.<span class="built_in">count</span> <span class="keyword">as</span> <span class="type">NSNumber</span></div><div class="line">    <span class="keyword">return</span> contentText.characters.<span class="built_in">count</span> &gt; <span class="number">2</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码用来验证用户输入的内容是否合法。这里我只是简单的设置了内容的长度不能超过140，并且不能小于2.</p>
<p>系统在<code>SLComposeServiceViewController</code>中提供了<code>open func didSelectPost()</code>、<code>open func didSelectCancel()</code> 两个方法分别是上面两个按钮的事件。</p>
<blockquote>
<p>需要注意的是，重写 cancel 的时候，需要调用 super</p>
</blockquote>
<p>接下来是设置位置，分组这些内容。这写也是在系统的api 中能找到对应的方法。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">configurationItems</span><span class="params">()</span></span> -&gt; [<span class="type">Any</span>]! &#123;</div><div class="line">       <span class="comment">// 定位</span></div><div class="line">       <span class="keyword">let</span> item1 = <span class="type">SLComposeSheetConfigurationItem</span>()</div><div class="line">       item1?.title = <span class="string">"位置"</span></div><div class="line">       item1?.value = <span class="string">"无"</span></div><div class="line">       item1?.valuePending = <span class="literal">false</span></div><div class="line">       item1?.tapHandler = &#123;</div><div class="line">           item1?.valuePending = <span class="literal">true</span></div><div class="line">           <span class="comment">// 在这里做定位的操作</span></div><div class="line">           <span class="comment">// 模拟花了3s时间</span></div><div class="line">           delay(<span class="number">3</span>, task: &#123;</div><div class="line">               item1?.value = <span class="string">""</span></div><div class="line">               item1?.valuePending = <span class="literal">false</span></div><div class="line">               item1?.value = <span class="string">"四川省 成都市"</span></div><div class="line">           &#125;)</div><div class="line">       &#125;</div><div class="line">       </div><div class="line">       <span class="comment">// 跳转</span></div><div class="line">       <span class="keyword">let</span> item2 = <span class="type">SLComposeSheetConfigurationItem</span>()</div><div class="line">       item2?.title = <span class="string">"可见组"</span></div><div class="line">       item2?.value = <span class="string">""</span></div><div class="line">       </div><div class="line">       item2?.tapHandler = &#123;</div><div class="line">           <span class="keyword">let</span> list = <span class="type">ListController</span>()</div><div class="line">           list.callbackClosure = &#123;</div><div class="line">               item2?.value = $<span class="number">0</span></div><div class="line">           &#125;</div><div class="line">           <span class="keyword">self</span>.pushConfigurationViewController(list)</div><div class="line">       &#125;</div><div class="line">       </div><div class="line">       <span class="comment">// 测试预览</span></div><div class="line">       <span class="comment">/*</div><div class="line">       let item3 = SLComposeSheetConfigurationItem()</div><div class="line">       item3?.title = "预览"</div><div class="line">       item3?.tapHandler = &#123;</div><div class="line">           let pre = self.loadPreviewView()// 这个方法实际上是用来获取右边的图片的</div><div class="line">           pre?.frame = self.view.bounds</div><div class="line">           self.view.addSubview(pre!)</div><div class="line">       &#125;</div><div class="line">       */</span></div><div class="line">       <span class="keyword">return</span> [item1!, item2!]</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>这个方法返回了一个数组，就是对应的按钮等内容。每个按钮其实也很简单。只有 <code>title</code>，<code>value</code>， <code>tapHandler</code>， <code>valuePending</code> 四个属性。</p>
<ul>
<li>title: 左边的文字</li>
<li>value: 右边的文字</li>
<li>tapHandler： 处理这个 item 事件的 closure</li>
<li>valuePending： 左边转菊花的indicator，是一个 bool 类型的属性。</li>
</ul>
<p>在上面的代码里，我用 <code>self.pushConfigurationViewController(list)</code> 这行代码push 到了另外的界面，用来让用户选择他们要把消息分享到的具体分组。这个操作是在 Facebook 的 share extension 中看见的。在实际中，我们也可以这样做其他很多的事情。</p>
<blockquote>
<p>需要注意的是，推出来的 Controller 需要设置背景为clear，cell 也要设置背景为 clear 这是为了保证界面跟系统统一（模糊效果）。</p>
</blockquote>
<p>然后就是要把用户选择的内容分享出去了。</p>
<h4 id="通过-Share-Extension-分享内容"><a href="#通过-Share-Extension-分享内容" class="headerlink" title="通过 Share Extension 分享内容"></a>通过 Share Extension 分享内容</h4><p>要将内容分享出去，需要解决几个问题。</p>
<ul>
<li>用户信息</li>
<li>获取分享的内容</li>
</ul>
<p>因为 App Extension 和主 App 是两个不同的 Target， 这就需要我们在这个获取到主 app 中用户的登录信息。至少需要知道我们要把内容分享到哪个用户的数据流中吧。</p>
<p>这个其实也是很简单的事情。在 Today 中我们已经知道了 App Groups 这个东西。也知道了如何共享部分代码。</p>
<p>所以在 Share Extension 中</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">fetchUserInfomation</span><span class="params">()</span></span> -&gt; <span class="type">String</span>? &#123;</div><div class="line">    <span class="keyword">let</span> userdefault = <span class="type">UserDefaults</span>.<span class="keyword">init</span>(suiteName: <span class="string">"group.sunny.com"</span>)</div><div class="line">    <span class="keyword">let</span> info = userdefault?.value(forKey: <span class="string">"userInformation"</span>) <span class="keyword">as</span>? [<span class="type">String</span>: <span class="type">String</span>]</div><div class="line">    <span class="keyword">return</span> info?[<span class="string">"token"</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后在主app 中</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> userdefault = <span class="type">UserDefaults</span>(suiteName: <span class="string">"group.sunny.com"</span>)</div><div class="line">userdefault?.<span class="keyword">set</span>([<span class="string">"token"</span>: <span class="string">"this the user token"</span>], forKey: <span class="string">"userInformation"</span>)</div><div class="line">userdefault?.synchronize()</div></pre></td></tr></table></figure>
<p>就实现了数据之间的交换。到这儿，可能会想到另外一个问题。如果没有登录的话需要跳转到主 app 中进行登录操作。这里也没有什么问题通过 openurl 就可以。</p>
<ol>
<li>设置主app 的url type</li>
<li>跳转</li>
</ol>
<p>所以我在 <code>viewDidload</code> 方法中添加了以下代码</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> fetchUserInfomation() == <span class="literal">nil</span> &#123;</div><div class="line">            </div><div class="line">	<span class="keyword">let</span> alert = <span class="type">UIAlertController</span>(title: <span class="string">"还没有登录"</span>, message: <span class="literal">nil</span>, preferredStyle: .alert)</div><div class="line">	alert.addAction(<span class="type">UIAlertAction</span>(title: <span class="string">"取消"</span>, style: .cancel) &#123;<span class="number">_</span> <span class="keyword">in</span></div><div class="line">		<span class="keyword">self</span>.cancel()</div><div class="line">	&#125;)</div><div class="line">	alert.addAction(<span class="type">UIAlertAction</span>(title: <span class="string">"去登录"</span>, style: .<span class="keyword">default</span>) &#123;<span class="number">_</span> <span class="keyword">in</span></div><div class="line">	<span class="keyword">self</span>.extensionContext?.open(<span class="type">NSURL</span>(string: <span class="string">"sunny://action=login"</span>)! <span class="keyword">as</span> <span class="type">URL</span>, completionHandler: &#123; (success) <span class="keyword">in</span></div><div class="line">		<span class="keyword">self</span>.cancel()</div><div class="line">		<span class="built_in">print</span>(success)</div><div class="line">	&#125;)</div><div class="line">&#125;)</div><div class="line">	present(alert, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>判断登录状态，然后弹窗。取消或者去登录。如果选择去登录的话，就通过 openUrl 去打开主 app。</p>
<p>很完美吧！<strong>but it doesn’t work!!!</strong>， 我在 stackoverflow 上找到了些资料。</p>
<ul>
<li><a href="https://stackoverflow.com/questions/24895093/openurl-doesnt-work-in-share-extension">openURL doesn’t work in Share extension</a></li>
<li><a href="https://stackoverflow.com/questions/24297273/openurl-not-work-in-action-extension">openURL not work in Action Extension</a></li>
</ul>
<blockquote>
<p>苹果爸爸只允许 Today Extension 通过 extensionContext 的 openUrl 打开主app</p>
</blockquote>
<p>但是这个需求总是需要实现的。其实还是有解决方法。</p>
<h5 id="方法一-在-Extension-中实现登录操作"><a href="#方法一-在-Extension-中实现登录操作" class="headerlink" title="方法一:  在 Extension 中实现登录操作"></a>方法一:  在 Extension 中实现登录操作</h5><p>这个确实没什么好说的。也是弹出一个 alert，然后输入用户名，密码，登录。完成所有操作。或者是其他什么方案，都可以。这个就不再详细描述了。Share Extension 来实现登录行为，然后 主 app 也能够共享等了状态。这仿佛也是解决了这种问题。</p>
<p>当然，强迫症笔者，还是想通过打开主 app 的方法来解决这个问题。</p>
<h5 id="方法二-另类的-openUrl"><a href="#方法二-另类的-openUrl" class="headerlink" title="方法二: 另类的 openUrl"></a>方法二: 另类的 openUrl</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// For skip compile error.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">openURL</span><span class="params">(<span class="number">_</span> url: URL)</span></span> &#123;</div><div class="line">    <span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">openContainerApp</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> responder: <span class="type">UIResponder</span>? = <span class="keyword">self</span> <span class="keyword">as</span> <span class="type">UIResponder</span></div><div class="line">    <span class="keyword">let</span> selector = #selector(openURL(<span class="number">_</span>:))</div><div class="line">    <span class="keyword">while</span> responder != <span class="literal">nil</span> &#123;</div><div class="line">        <span class="keyword">if</span> responder!.responds(to: selector) &amp;&amp; responder != <span class="keyword">self</span> &#123;</div><div class="line">            responder!.perform(selector, with: <span class="type">URL</span>(string: <span class="string">"sunny://action=login"</span>)!)</div><div class="line">            <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        responder = responder?.next</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当然，上面的两个链接还有一些其他的方法，就不一一列举了。</p>
<p>解决了最开始的用户信息的问题。接下来就是要获取分享的内容这个问题了。在ShareExtension 中，相信已经看见了。需要两个东西，第一个是用户关于这个内容的评论，以及这个内容本身（url、照片等）。关于用户对内容的评论这点其实很简单。</p>
<h5 id="用户评论"><a href="#用户评论" class="headerlink" title="用户评论"></a>用户评论</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Convenience. This returns the current text from the textView.</span></div><div class="line">open <span class="keyword">var</span> contentText: <span class="type">String</span>! &#123; <span class="keyword">get</span> &#125;</div></pre></td></tr></table></figure>
<p>系统提供的这个 api 就能够解决这个问题。</p>
<h5 id="附件内容"><a href="#附件内容" class="headerlink" title="附件内容"></a>附件内容</h5><p>暂且叫做附件内容吧！我也不知道应该怎么叫。这个东西，我们还是看看 <code>extensionContext</code> 这个东西吧！</p>
<p><code>NSExtensionContext</code> 这个类一共暴露了四个api出来。我们看第一个</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// The list of input NSExtensionItems associated with the context. If the context has no input items, this array will be empty.</span></div><div class="line">open <span class="keyword">var</span> inputItems: [<span class="type">Any</span>] &#123; <span class="keyword">get</span> &#125;</div></pre></td></tr></table></figure>
<p>看样子就是这个了。</p>
<blockquote>
<p>看注释内容，突然感觉，apple 的api 也有设计的不是很好的地方，既然注释都明确说了 NSExtensionItems 数组应该不是 Any 的吧😂</p>
</blockquote>
<p>既然这样, 我们再看看 <code>NSExtensionItem</code> 这个类吧！</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// (optional) title for the item</span></div><div class="line"><span class="meta">@NSCopying</span> open <span class="keyword">var</span> attributedTitle: <span class="type">NSAttributedString</span>?</div><div class="line"><span class="comment">// (optional) content text</span></div><div class="line"><span class="meta">@NSCopying</span> open <span class="keyword">var</span> attributedContentText: <span class="type">NSAttributedString</span>?</div><div class="line"><span class="comment">// (optional) Contains images, videos, URLs, etc. This is not meant to be an array of alternate data formats/types, but instead a collection to include in a social media post for example. These items are always typed NSItemProvider.</span></div><div class="line">open <span class="keyword">var</span> attachments: [<span class="type">Any</span>]?</div><div class="line"><span class="comment">// (optional) dictionary of key-value data. The key/value pairs accepted by the service are expected to be specified in the extension's Info.plist. The values of NSExtensionItem's properties will be reflected into the dictionary.</span></div><div class="line">open <span class="keyword">var</span> userInfo: [<span class="type">AnyHashable</span> : <span class="type">Any</span>]?</div></pre></td></tr></table></figure>
<p>注释太复杂了，整理成一个表格就是这样的:</p>
<table>
<thead>
<tr>
<th style="text-align:center">Properties</th>
<th style="text-align:center">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">attributedTitle</td>
<td style="text-align:center">标题 optional</td>
</tr>
<tr>
<td style="text-align:center">attributedContentText</td>
<td style="text-align:center">内容 optional</td>
</tr>
<tr>
<td style="text-align:center">attachments</td>
<td style="text-align:center">所有的附件<code>NSItemProvider</code>组成一个数组 optional</td>
</tr>
<tr>
<td style="text-align:center">userInfo</td>
<td style="text-align:center">一个key－value结构的数据。NSExtensionItem中的属性都会在这个属性中一一映射。注释中讲到的在 info.plist 中要设置的部分会在后面提到</td>
</tr>
</tbody>
</table>
<p> 下面的表格就是 <code>userInfo</code> 中的 key :</p>
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">NSExtensionItemAttributedTitleKey</td>
<td style="text-align:center">标题 的键名</td>
</tr>
<tr>
<td style="text-align:center">NSExtensionItemAttributedContentTextKey</td>
<td style="text-align:center">内容 的键名</td>
</tr>
<tr>
<td style="text-align:center">NSExtensionItemAttachmentsKey</td>
<td style="text-align:center">附件 的键名</td>
</tr>
</tbody>
</table>
<p>上面又提到了 <code>NSItemProvider</code> 这个东西。这相必须就是我们需要的附件了吧！</p>
<table>
<thead>
<tr>
<th>Api</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td>initWithItem:typeIdentifier：</td>
<td>初始化方法，item为附件的数据，typeIdentifier是附件对应的类型标识,对应UTI的描述。</td>
</tr>
<tr>
<td>initWithContentsOfURL:</td>
<td>根据制定的文件路径来初始化。</td>
</tr>
<tr>
<td>registerItemForTypeIdentifier:loadHandler:</td>
<td>为一种资源类型自定义加载过程。这个方法主要针对自定义资源使用，例如自己定义的类或者文件格式等。当调用loadItemForTypeIdentifier:options:completionHandler:方法时就会触发定义的加载过程。</td>
</tr>
<tr>
<td>hasItemConformingToTypeIdentifier:</td>
<td>用于判断是否有typeIdentifier(UTI)所指定的资源存在。存在则返回YES，否则返回NO。该方法结合loadItemForTypeIdentifier:options:completionHandler:使用。</td>
</tr>
<tr>
<td>loadItemForTypeIdentifier:options:completionHandler:</td>
<td>加载typeIdentifier指定的资源。加载是一个异步过程，加载完成后会触发completionHandler。</td>
</tr>
<tr>
<td>loadPreviewImageWithOptions:completionHandler:</td>
<td>加载资源的预览图片。</td>
</tr>
</tbody>
</table>
<p>这时候看看整体的结构：(<a href="http://www.jianshu.com/p/863ce6729455">这个图是在看到的</a>)</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/2017-07-09-5D4D49E7-5087-4D01-B78A-D3BCF979E979.png" alt=""></p>
<p>到这里，应该已经知道了应该怎么做了吧！</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 点击发表的事件</span></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didSelectPost</span><span class="params">()</span></span> &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">self</span>.extensionContext?.inputItems.forEach(&#123; (item) <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(<span class="string">"//////////////////////////"</span>)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> ext = item <span class="keyword">as</span>! <span class="type">NSExtensionItem</span></div><div class="line">        ext.attachments?.forEach(&#123;</div><div class="line">            <span class="keyword">let</span> atta = $<span class="number">0</span> <span class="keyword">as</span>! <span class="type">NSItemProvider</span></div><div class="line">            <span class="built_in">print</span>(atta)</div><div class="line">            <span class="comment">// 分享的是网页</span></div><div class="line">            <span class="keyword">if</span> atta.hasItemConformingToTypeIdentifier(<span class="string">"public.url"</span>) &#123;</div><div class="line">                atta.loadItem(forTypeIdentifier: <span class="string">"public.url"</span>) &#123; (item, error) <span class="keyword">in</span></div><div class="line">                    <span class="built_in">print</span>(<span class="string">"//////////////////////////"</span>)</div><div class="line">                    <span class="built_in">print</span>(item!)</div><div class="line">                &#125;</div><div class="line">                <span class="built_in">print</span>(<span class="string">"//////////////////////////"</span>)</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 分享的是图片</span></div><div class="line">            <span class="keyword">if</span> atta.hasItemConformingToTypeIdentifier(<span class="string">"public.jpeg"</span>) &#123;</div><div class="line">                atta.loadItem(forTypeIdentifier: <span class="string">"public.jpeg"</span>) &#123; (item, error) <span class="keyword">in</span></div><div class="line">                    <span class="built_in">print</span>(<span class="string">"//////////////////////////"</span>)</div><div class="line">                    <span class="built_in">print</span>(item!)</div><div class="line">                &#125;</div><div class="line">                <span class="built_in">print</span>(<span class="string">"//////////////////////////"</span>)</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        <span class="keyword">self</span>.extensionContext!.completeRequest(returningItems: [], completionHandler: <span class="literal">nil</span>)</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码中分别是分享网页和图片两个东西。这一步解决了找到分享的内容的代码。</p>
<p><strong>具体分享的行为可以有两个办法来解决</strong></p>
<ul>
<li>将需要分享的内容功过 apps group 保存，然后在打开主 app 的时候，在主 app 中取出然后发送给sever。</li>
<li>直接在 Share Extension 中分享。</li>
</ul>
<p>这个过程就不再叙述了。</p>
<h4 id="info-plist"><a href="#info-plist" class="headerlink" title="info.plist"></a>info.plist</h4><p>既然说到了 info.plist 中的设置，就再看看这部分是说的什么吧！都是一些很固定的内容，我随便挑两个说说吧！</p>
<table>
<thead>
<tr>
<th>Key</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>NSExtensionActivationSupportsAttachmentsWithMaxCount</td>
<td>附件最大个数</td>
</tr>
<tr>
<td>NSExtensionActivationSupportsAttachmentsWithMinCount</td>
<td>附件最小个数</td>
</tr>
<tr>
<td>NSExtensionActivationSupportsFileWithMaxCount</td>
<td>附件种类限制</td>
</tr>
<tr>
<td>NSExtensionActivationSupportsMovieWithMaxCount</td>
<td>视频个数限制</td>
</tr>
<tr>
<td>NSExtensionActivationSupportsImageWithMaxCount</td>
<td>图片个数限制</td>
</tr>
<tr>
<td>NSExtensionActivationSupportsText</td>
<td>是否支持文本类型</td>
</tr>
<tr>
<td>NSExtensionActivationSupportsWebURLWithMaxCount</td>
<td>web 链接最多限制</td>
</tr>
<tr>
<td>NSExtensionActivationSupportsWebPageWithMaxCount</td>
<td>web 页面最多限制</td>
</tr>
</tbody>
</table>
<p>如果要设置你的 extension 只支持图片，url 什么的。只需要把个数限制写成 0！</p>
<p>但是设置的时候需要注意是将NSExtensionActivationRule 改成 Dictionary 类型并添加：</p>
<ul>
<li>NSExtensionActivationSupportsAttachmentsWithMaxCount</li>
<li>NSExtensionActivationSupportsAttachmentsWithMinCount</li>
<li>NSExtensionActivationSupportsImageWithMaxCount</li>
<li>NSExtensionActivationSupportsMovieWithMaxCount</li>
<li>NSExtensionActivationSupportsWebPageWithMaxCount</li>
<li>NSExtensionActivationSupportsWebURLWithMaxCount</li>
</ul>
<p>这就基本上完成了，我们要在 系统或者 外部 app 中将内容分享到我们自己的 app 中。这好像还是有很大的限制。毕竟如果我们的产品不是像微博qq这样的社交app 的话，这个东西就没什么作用了。</p>
<p><strong>另外注意这个警告</strong></p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/2017-07-09-133823.jpg" alt=""></p>
<h3 id="在自己的app-中调起-Share-Extension"><a href="#在自己的app-中调起-Share-Extension" class="headerlink" title="在自己的app 中调起 Share Extension"></a>在自己的app 中调起 Share Extension</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> activity = <span class="type">UIActivityViewController</span>(activityItems: [<span class="string">"百度"</span>, <span class="type">URL</span>(string: <span class="string">"http://www.baidu.com"</span>)!], applicationActivities: <span class="literal">nil</span>)</div><div class="line"><span class="comment">// 不分享到 airDrop 和 粘贴板</span></div><div class="line">activity.excludedActivityTypes = [.airDrop, .copyToPasteboard]</div><div class="line">present(activity, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</div></pre></td></tr></table></figure>
<p>当然还有 <code>UIActivityViewControllerCompletionHandler</code> 这个东西，来回调分享的结果。</p>
<p><strong>另外一种方法</strong>可以直接调起某个系统的分享。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 判断是否支持 微博</span></div><div class="line">     </div><div class="line">     <span class="keyword">if</span> !<span class="type">SLComposeViewController</span>.isAvailable(forServiceType: <span class="type">SLServiceTypeSinaWeibo</span>) &#123;</div><div class="line">         <span class="comment">// 应该是没有登录的原因, 所以一直不会返回</span></div><div class="line">         <span class="built_in">print</span>(<span class="string">"不可用"</span>)</div><div class="line">         <span class="keyword">return</span></div><div class="line">     &#125;</div><div class="line">     </div><div class="line">     <span class="keyword">let</span> composeVC = <span class="type">SLComposeViewController</span>(forServiceType: <span class="type">SLServiceTypeSinaWeibo</span>)</div><div class="line">     <span class="comment">//        // 添加要分享的图片</span></div><div class="line">     <span class="comment">//        composeVC?.add(UIImage(named: "Nameless"))</span></div><div class="line">     <span class="comment">//        // 添加要分享的文字</span></div><div class="line">     <span class="comment">//        composeVC?.setInitialText("分享到XXX")</span></div><div class="line">     <span class="comment">//        // 添加要分享的url</span></div><div class="line">     <span class="comment">//        composeVC?.add(URL(string: "http://www.baidu.com"))</span></div><div class="line">     <span class="comment">//        // 弹出分享控制器</span></div><div class="line">     <span class="keyword">self</span>.present(composeVC!, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</div><div class="line">     <span class="comment">//        // 监听用户点击事件</span></div><div class="line">     composeVC?.completionHandler = &#123;</div><div class="line">         <span class="keyword">if</span> $<span class="number">0</span> == .done &#123;</div><div class="line">             <span class="type">NSLog</span>(<span class="string">"点击了发送"</span>);</div><div class="line">         &#125; <span class="keyword">else</span> <span class="keyword">if</span> $<span class="number">0</span> == .cancelled &#123;</div><div class="line">             <span class="type">NSLog</span>(<span class="string">"点击了取消"</span>);</div><div class="line">         &#125;</div><div class="line">     &#125;</div></pre></td></tr></table></figure>
<p>这种方式有一个缺陷，就是，这样的分享只能对系统的分享，微信什么的就不能这么做了。</p>
<h3 id="最后的话"><a href="#最后的话" class="headerlink" title="最后的话"></a>最后的话</h3><p>Share Extension 写到这里就差不多了。初步的入门步骤也已经完成了。最后，我看了一下，微信的 Share Extension 做的事情，感觉用他还能做很多的事情。这个也需要在开发中根据实际需求去拓展了，另外还有自定义 UI 等，也是很简单的事情。只是用自己 UIViewController 就好了。这个就不再详细的说了。到此，我能想到的功能，就基本上完成了。如果有更多需求也可以跟我讨论。</p>
<p><a href="https://github.com/CepheusSun/ShareExtension"><strong>demo地址</strong></a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[面向 Extension 开发 🌞 Today Extension]]></title>
      <url>http://www.CepheusSun.com/TodayExtension.html</url>
      <content type="html"><![CDATA[<p>app extension 让我们在用户正在使用其他 app 的时候, 拓展我们 app 的功能。</p>
<p>Today Extension 也叫做 widget。 它能够让一些重要的消息更快速的到达你的用户。比如说, 用户可以通过它查看天气，或者股票价格, 查看日程表等等。苹果在官方文档中说到， 一个 widget 应该有以下的特点。</p>
<ul>
<li>确保内容是最新的</li>
<li>响应的用户事件</li>
<li>性能好(在iOS上占用大量内存，系统可能会kill掉这个widget)</li>
</ul>
<a id="more"></a>
<h3 id="创建-Today-Extension"><a href="#创建-Today-Extension" class="headerlink" title="创建 Today Extension"></a>创建 Today Extension</h3><p>Xcode -&gt; File -&gt; New -&gt; Target -&gt; TodayExtension</p>
<p>跟创建一个新的项目一样, 设置创建好之后, 项目中会多一个 Target, 修改Scheme 为你刚刚创建的 Extension 再运行, 就能在 通知中心的 Today 里面看到你刚刚创建的 widget 了, 上面写着“Hello world”</p>
<p>另外 Xcode 给你创建了默认的模版文件。</p>
<ul>
<li>TodayViewController.swift(如果是 OC 对应会是 <code>.h</code> 和 <code>.m</code> 文件)</li>
<li>MainInterface.storyboard</li>
<li>Info.plist</li>
</ul>
<p><strong>注意:</strong> 默认是使用这个 storyboard 作为这个 widget 的入口。如果不需要使用storyboard 可以删除掉这个storyboard并且将Info.plist 中的</p>
<ul>
<li><code>NSExtensionMainStoryboard</code> 改成 <code>NSExtensionPrincipalClass</code></li>
<li><code>MainInterface</code> 改成 <code>TodayViewController</code></li>
</ul>
<h3 id="设置界面"><a href="#设置界面" class="headerlink" title="设置界面"></a>设置界面</h3><p>完成了上面的步骤之后, 不论你是选择用 stroyboard 作为你 widget 的入口, 还是选择用代码来做这件事情。都是一样的。</p>
<blockquote>
<p>由于不知道什么原因, 我在网上看到的文章都是使用代码来做的这件事情。所以在这篇文章以及后面的示例代码中都将使用 Xcode 默认的 storyboard 来做这个 widget 的布局。</p>
</blockquote>
<h3 id="我将解决的问题"><a href="#我将解决的问题" class="headerlink" title="我将解决的问题"></a>我将解决的问题</h3><ul>
<li>在 widget 中打开主 app 并传递参数</li>
<li>widget 和 主 app 共享数据</li>
<li>widget 和 主 app 共用资源</li>
<li>widget 的打开和折叠</li>
</ul>
<h3 id="我遇到的坑"><a href="#我遇到的坑" class="headerlink" title="我遇到的坑"></a>我遇到的坑</h3><p>也没什么坑, 毕竟 Today Extension 并不是什么很难的东西。</p>
<ul>
<li>测试的时候, 由于 widget 和 主app 是两个不同的 target, 所以在传递参数的时候, 在 appdelegate 中打印对应的值没有效果。最开始我还以为是因为设置的 scheme 是 widget 所以在 主 app 中的修改是无效的。但是实际是并不是这样。将参数以 alert 的形式表现出来, 这时候能够发现, 其实主 app 是跑起来了的。</li>
</ul>
<h3 id="先说说我做的准备工作吧"><a href="#先说说我做的准备工作吧" class="headerlink" title="先说说我做的准备工作吧"></a>先说说我做的准备工作吧</h3><p>为了不扯那么多没用的东西。先说说我做了那些跟今天主题没什么关系的事情。</p>
<h4 id="写主app"><a href="#写主app" class="headerlink" title="写主app"></a>写主app</h4><p>在主 app 中我写了一个 UITableView, 并使用 Userdefault 将我要持久化的数据保存下来。然后对应给 Todo list 做了，添加，和删除的功能。</p>
<h4 id="widget"><a href="#widget" class="headerlink" title="widget"></a>widget</h4><p>在 widget 中我也下了同样的一个 UITableView 只有查看的功能。</p>
<h4 id="要做的事情"><a href="#要做的事情" class="headerlink" title="要做的事情"></a>要做的事情</h4><h5 id="widget-和-主-app-共用资源"><a href="#widget-和-主-app-共用资源" class="headerlink" title="widget 和 主 app 共用资源"></a>widget 和 主 app 共用资源</h5><p>widget 和 主app 共享代码和资源。作为一个工程师, 我们在任何事情的时候都要想到高类聚低耦合着句不变的真理。所以我们还是要尽可能的让 widget 和 主 app 共享代码。</p>
<p>主要有两个方案:</p>
<ul>
<li>framework</li>
<li>直接共享</li>
</ul>
<p>framework 的话，就拿 cocoapods 来说吧， 由于 widget 是一个新的target, 所以只需要在 podfile 中对应添加代码就能够在 widget 中使用。</p>
<p>另外一个是 直接共享, 这个就很简单了。我在示例中让主app 和 widget 共享了一张图片，一个 TodoCell 类(包括xib 文件)。我做的唯一的一件事情就是在 Xcode 中选中这个文件，然后在 Xcode右边的 TargetMenberShip 中勾选对应的 target.</p>
<h5 id="widget-和-主-app-共享数据"><a href="#widget-和-主-app-共享数据" class="headerlink" title="widget 和 主 app 共享数据"></a>widget 和 主 app 共享数据</h5><p>严格来说 widget 和 app 是不同的两个 app 了, 他们之间要共享数据的话只能使用 <strong>App Groups</strong> 了。</p>
<p>首先在主 app</p>
<p>target -&gt; capabilities -&gt; app groups</p>
<p>打开 app groups 功能, 点击 <code>+</code> , 设置 id 。如果重复了就改一个。</p>
<p>widget app</p>
<p>target -&gt; capabilities -&gt; app groups</p>
<p>这时候的 group 列表就能够看到对应的 group 了。勾选即可。</p>
<p>这时候已经完成了widget 和 主app共享数据的前提条件。</p>
<p>接下来还需要做的事情, 就是将我们准备工作里面Userdefault相关代码进行调整。</p>
<p>将 <code>UserDefaults.standard</code> 改成 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">UserDefaults(suiteName: &quot;your group id&quot;)</div></pre></td></tr></table></figure>
<p>这样就可以在 widget 中 使用</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> userdefault = <span class="type">UserDefaults</span>(suiteName: <span class="string">"group.com.sunny.group"</span>)</div></pre></td></tr></table></figure>
<p>获得在主 app 中持久化的数据了。关于 app groups 其他的用法，可以继续深入研究。</p>
<h5 id="widget-的折叠和展开"><a href="#widget-的折叠和展开" class="headerlink" title="widget 的折叠和展开"></a>widget 的折叠和展开</h5><p>苹果的官方文档里面明确的说了，widget 的界面是不能滑动的。毕竟 widget 和通知中心的滑动不能冲突啊。</p>
<p>所以有时候我们需要将 widget 折叠起来，毕竟太长的 widget 实在是令人讨厌啊。</p>
<p>主要还是说说iOS10 上怎么做的吧，毕竟没有iOS10 以下的设备。</p>
<p>在 TodayViewController 的 didLoad 中添加</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">        <span class="comment">// iOS10 添加折叠按钮</span></div><div class="line">        <span class="keyword">if</span> #available(iOSApplicationExtension <span class="number">10.0</span>, *) &#123;</div><div class="line">            extensionContext?.widgetLargestAvailableDisplayMode = .expanded</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="comment">// iOS8 、iOS9 上需要自己添加折叠按钮</span></div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>然后实现 <code>NCWidgetProviding</code> 协议中的方法</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">widgetActiveDisplayModeDidChange</span><span class="params">(<span class="number">_</span> activeDisplayMode: NCWidgetDisplayMode, withMaximumSize maxSize: CGSize)</span></span> &#123;</div><div class="line"><span class="comment">// 由于 iOS8 、iOS9 上没有这个代理。需要对自己添加的按钮设置 target-action 然后进行修改</span></div><div class="line">        <span class="keyword">switch</span> activeDisplayMode &#123;</div><div class="line">        <span class="keyword">case</span> .compact:</div><div class="line">            preferredContentSize = maxSize</div><div class="line">        <span class="keyword">case</span> .expanded:</div><div class="line">            preferredContentSize = <span class="type">CGSize</span>(width: <span class="number">0.0</span>, height: <span class="number">60</span> * <span class="type">CGFloat</span>(dataSource.<span class="built_in">count</span>))</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>在 iOS8 和 iOS9 中, 由于系统没有这个功能。我们只能自己写一个按钮然后再来做这些事情了。</p>
<h5 id="widget-打开-主app"><a href="#widget-打开-主app" class="headerlink" title="widget 打开 主app"></a>widget 打开 主app</h5><p>widget 打开主 app 还是老思路，openurl 就可以了，然后在url 中添加对应需要的参数。</p>
<p><strong>准备工作</strong> </p>
<p>主app -&gt; target -&gt; info -&gt; UrlTypes </p>
<p>添加一个 URlType 然后设置 URL Scheme 为你自定义的字符串。 比如 “sunny”。</p>
<p>在 widget 中需要跳转的地方写这样的代码</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">self</span>.extensionContext?.open(<span class="type">NSURL</span>(string: <span class="string">"sunny://action=<span class="subst">\(dataSource[indexPath.row])</span>"</span>)</div></pre></td></tr></table></figure>
<p>参数传递也就是按照上文, 在url中拼接了。上文有提到, widget 和 app 可以共享数据。这也可能是一种传递参数的方式。</p>
<p>这个时候打开主要 app 就是直接进入主要界面了。如果我们需要做一些其他的事情应该怎么做呢？</p>
<p>想想以前做微信或者支付宝支付的时候， 都要在 appdelegate 中写一些代码。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(<span class="number">_</span> app: UIApplication, open url: URL, options: [UIApplicationOpenURLOptionsKey : Any] = [:])</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">let</span> <span class="keyword">prefix</span> = <span class="string">"sunny://"</span><span class="comment">// 判断是否是可靠的地方传递过来的</span></div><div class="line">    <span class="keyword">if</span> url.absoluteString.hasPrefix(<span class="keyword">prefix</span>) &#123;</div><div class="line">    <span class="comment">// 参数过来了！ 做对应的事情</span></div><div class="line">        <span class="keyword">let</span> a = <span class="type">UIAlertController</span>(title: url.absoluteString, message: <span class="literal">nil</span>, preferredStyle: .alert)</div><div class="line">        a.addAction(<span class="type">UIAlertAction</span>(title: <span class="string">"取消"</span>, style: .cancel, handler: <span class="literal">nil</span>))</div><div class="line">        <span class="keyword">self</span>.window?.rootViewController?.present(a, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="others"><a href="#others" class="headerlink" title="others"></a>others</h4><h5 id="高度"><a href="#高度" class="headerlink" title="高度"></a>高度</h5><p>widget的默认高度是有限制的。</p>
<p>compact 下:</p>
<ul>
<li>max = 110</li>
<li>mim = 110</li>
</ul>
<p>expanded 下:</p>
<ul>
<li>min = 110</li>
<li>max = 根据不同的机型二不同。</li>
</ul>
<p>无论怎么设置, 都不回超出这个范围</p>
<h5 id="widgetPerformUpdate"><a href="#widgetPerformUpdate" class="headerlink" title="widgetPerformUpdate"></a>widgetPerformUpdate</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">func widgetPerformUpdate(completionHandler: (@escaping (NCUpdateResult) -&gt; Void)) &#123;</div><div class="line">    // Perform any setup necessary in order to update the view.</div><div class="line">    </div><div class="line">    // If an error is encountered, use NCUpdateResult.Failed</div><div class="line">    // If there&apos;s no update required, use NCUpdateResult.NoData</div><div class="line">    // If there&apos;s an update, use NCUpdateResult.NewData</div><div class="line">    </div><div class="line">    completionHandler(NCUpdateResult.newData)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个方法用来选择 widget 再出现的时候会不会重新刷新。</p>
<h5 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h5><p><del>在 <code>NSExtensionContext</code> 中看到的几个通知貌似不是给 TodayExtension 用的。</del></p>
<p><code>NSExtensionContext</code> 中能看到几个通知他们都是监听 host app 的状态的。所以对于widget 来说， host app 就是 Today 这个东西啦。</p>
<h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>抛砖引玉，本文用Today Extension做了一个很简单的功能。 当然, 我们能用他做的事情可不止这些。这就需要我们发动我们的聪明才智了。</p>
<p><a href="https://github.com/CepheusSun/TodayExtension">示例代码下载链接</a>由于使用swift写的, 由于众所周知的原因, 你发现编译不过了。可以联系我, 我将做适配。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Handing non-optional optionals in Swift]]></title>
      <url>http://www.CepheusSun.com/Handing%20non-optional%20optionals%20in%20Swift.html</url>
      <content type="html"><![CDATA[<p><strong>optional</strong>, 可以说是 Swift 中最为重要的特性, 也是它跟 <code>Objective-C</code> 不同的关键特征。在编码的时候强制处理那些可能为空的值, 可以让程序更具有可预测性, 减少错误发生的机会。</p>
<p>然而在开发中我们经常会遇到一些变量, 明明是 <code>optional</code> 的, 但在逻辑又一定是非空的。比如说 <code>controller</code> 中的 <code>view</code></p>
<a id="more"></a>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ViewModel</span></span>&#123;&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TableViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> tableView: <span class="type">UITableView</span>?</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        tableView = <span class="type">UITableView</span>.<span class="keyword">init</span>(frame: view.bounds)</div><div class="line">        view.addSubview(tableView!)</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">viewModelDidUpdate</span><span class="params">(<span class="number">_</span> viewModel: ViewModel)</span></span> &#123;</div><div class="line">        tableView?.reloadData()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如何处理这种情况在 <code>Swift</code> 程序员之间的争议, 就使用 <code>tab</code> 还是 <code>space</code>来缩进一样。</p>
<blockquote>
<p>既然是可选类型, 我们就应该正确的使用它。 使用<code>if let</code> 或者 <code>guard</code></p>
</blockquote>
<p>也有人持有相反的态度: </p>
<blockquote>
<p>既然都知道这个变量非空, 那就强制解包。就算崩溃也不能让程序进入不可控的状态。</p>
</blockquote>
<p>上面的讨论基本上都是围绕着<strong>是否有必要进行防御性编程</strong>展开的。应该让程序从未定义的状态中恢复, 还是应该让程序直接崩溃。</p>
<p>如果非要回答这个问题, 我可能会选择后者。未定义的状态会导致很难追踪的 bug, 可能会执行不必要的代码。而且防御性的代码往往也很难维护。</p>
<p>但是我觉得, 研究一些避免出现这种情况的技巧更实在一些。</p>
<h3 id="Is-it-really-optional"><a href="#Is-it-really-optional" class="headerlink" title="Is it really optional?"></a>Is it really optional?</h3><p>变量和属性是不是可选取决于你代码的逻辑。如果在设计程序的时候, 根本就没有想过这个变量会是 <code>nil</code>。或者说在设计之初, 这个变量就不会出现为空的情况。这个变量就不应该是 <code>optional</code> </p>
<p>即使在和一些系统 API 交互的时候, 可选类型基本上都是无法避免的。但是也有一些办法让我们尽可能的避免使用 <code>optional</code> 类型。</p>
<h3 id="Being-lazy-is-better-than-being-non-optionally-optional"><a href="#Being-lazy-is-better-than-being-non-optionally-optional" class="headerlink" title="Being lazy is better than being non-optionally optional"></a>Being lazy is better than being non-optionally optional</h3><p>对于一个对象来说, 如果它的属性会在这个对象初始化之后赋值。比如说 <code>UIController</code> 上面的 <code>View</code> 应该在 <code>viewDidLoad()</code> 中初始化。就可以使用 <code>lazy</code> 属性。一个懒加载属性是不可空的, 即使他在这个对象的初始化方法中没有被赋值。因为在第一次访问的时候, 它就会被初始化出来。</p>
<p>我们来更新一下刚才的代码。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ViewModel</span></span>&#123;&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TableViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> tableView = <span class="type">UITableView</span>()</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        tableView = <span class="type">UITableView</span>.<span class="keyword">init</span>(frame: view.bounds)</div><div class="line">        view.addSubview(tableView)</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">viewModelDidUpdate</span><span class="params">(<span class="number">_</span> viewModel: ViewModel)</span></span> &#123;</div><div class="line">        tableView.reloadData()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>没有可空类型了。🎉</p>
<h3 id="Proper-dependency-management-is-better-than-non-optional-optionals"><a href="#Proper-dependency-management-is-better-than-non-optional-optionals" class="headerlink" title="Proper dependency management is better than non-optional optionals"></a>Proper dependency management is better than non-optional optionals</h3><p>为了打破循环依赖我们也经常会使用可选类型。比如：在A、B两个类互相依赖的时候: </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comment</span> </span>&#123;</div><div class="line">    <span class="keyword">init</span>(text: <span class="type">String</span>) &#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserManager</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">weak</span> <span class="keyword">var</span> commentManager: <span class="type">CommentManager</span>?</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">userDidpostComment</span><span class="params">(<span class="number">_</span> comment: Comment)</span></span> &#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">logOutCurrentUser</span><span class="params">()</span></span> &#123;</div><div class="line">        commentManager?.clearCache()</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommentManager</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">weak</span> <span class="keyword">var</span> userManager: <span class="type">UserManager</span>?</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">composer</span><span class="params">(<span class="number">_</span> composer: Comment)</span></span> &#123;</div><div class="line">        userManager?.userDidpostComment(composer)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">clearCache</span><span class="params">()</span></span> &#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看上面的代码我们可以发现一个很明显的循环引用 <code>UserManager</code> - <code>CommentManager</code> 任何一个都没有持有另外一个, 但是它们也依赖另外一个来完成自己的业务逻辑。😅</p>
<p>解决这样的问题, 我们可以让 <code>CommentComposer</code> 来做为中间人。 他来通知 <code>UserManger</code> 还有 <code>CommentManager</code> 一条评论消息产生了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommentComposer</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">let</span> commentManager: <span class="type">CommentManager</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">let</span> userManager: <span class="type">UserManager</span></div><div class="line">    <span class="keyword">private</span> <span class="built_in">lazy</span> <span class="keyword">var</span> textView = <span class="type">UITextView</span>()</div><div class="line">    </div><div class="line">    <span class="keyword">init</span>(commentManager: <span class="type">CommentManager</span>,</div><div class="line">         userManager: <span class="type">UserManager</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.commentManager = commentManager</div><div class="line">        <span class="keyword">self</span>.userManager = userManager</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">postComment</span><span class="params">()</span></span>  &#123;</div><div class="line">        <span class="keyword">let</span> comment = <span class="type">Comment</span>(text: textView.text)</div><div class="line">        commentManager.composer(comment)</div><div class="line">        userManager.userDidpostComment(comment)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样的话 <code>UserManager</code> 就可以强引用 <code>CommentManager</code> 了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserManager</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">let</span> commentManager: <span class="type">CommentManager</span></div><div class="line">    </div><div class="line">    <span class="keyword">init</span>(commentManager: <span class="type">CommentManager</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.commentManager = commentManager</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">userDidpostComment</span><span class="params">(<span class="number">_</span> comment: Comment)</span></span> &#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">logOutCurrentUser</span><span class="params">()</span></span> &#123;</div><div class="line">        commentManager.clearCache()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>optional</code> 也消失了🎉</p>
<h3 id="Crashing-gracefully"><a href="#Crashing-gracefully" class="headerlink" title="Crashing gracefully"></a>Crashing gracefully</h3><p>上面的例子中，我们看到了两个通过调整我们的代码, 来控制代码中的不确定性。但是在有些情况下这么做是不可能的。我们来假设一下, 你正在加载一个包含了你程序的配置信息的 JSON 文件。这就天然的存在一些可能会出错的情况。此时需要做的就是尽可能的错误处理。</p>
<p>拿到了错误的配置文件, 如果继续往下执行的话, 程序进入我们没有定义的状态中。这种情况下, 最好的办法是让程序崩溃, 然后 QA 中, 通过日志, 将这个问题解决掉。</p>
<p>那么我们应该怎么来让程序崩溃呢。最简单的办法就是使用 <code>!</code> 操作符。当这个变量为空的时候强制解包, 就会导致程序崩溃。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> configuration = loadConfiguration()!</div></pre></td></tr></table></figure>
<p>虽然这种方法很简单, 但是它也有很大的缺点。如果这个代码 crash。 我们得到的日志是这样的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fatal error: unexpectedly found nil while unwrapping an Optional value</div></pre></td></tr></table></figure>
<p>没有错误原因, 也没有错误发生的地点。这样的错误信息基本上没有什么能够让我们迅速的解决这个 bug 的信息。</p>
<p>更好的方法是在 <code>guard</code> 表达式中使用 <code>preconditionFailure()</code> 函数让程序发生崩溃, 抛出自定义的错误信息。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">guard</span> <span class="keyword">let</span> configuration = loadConfiguration() <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">preconditionFailure</span>(<span class="string">"Configuration couldn't be loaded + verifu that Config.JSON is valid"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样的话, 在程序崩溃的时候我们就能得到有用的信息了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fatal error: <span class="type">Configuration</span> couldn’t be loaded. <span class="type">Verify</span> that <span class="type">Config</span>.<span class="type">JSON</span> <span class="keyword">is</span> valid.: file /<span class="type">Users</span>/<span class="type">John</span>/<span class="type">AmazingApp</span>/<span class="type">Sources</span>/<span class="type">AppDelegate</span>.swift, line <span class="number">17</span></div></pre></td></tr></table></figure>
<h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>处理不可空的可选类型有一下几个方法:</p>
<ol>
<li>用懒加载属性, 替代不可空的可选类型。</li>
<li>适当的依赖管理, 替代不可空的可选类型。</li>
<li>在遇到这种情况的时候, 让程序崩溃, 并抛出异常。</li>
</ol>
<h3 id="That’s-it"><a href="#That’s-it" class="headerlink" title="That’s it!"></a>That’s it!</h3><p><a href="https://medium.com/@johnsundell/handling-non-optional-optionals-in-swift-e5706390f56f">原文地址</a></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>我是一名来自中国的 iOS 程序员, 对技术有着浓厚的兴趣, 在学习的过程中, 发现了很多来自国外的优秀博客。为了更好的学习这些文章, 产生了将这些文章翻译成中文的想法。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Swifty Tips ⚡️]]></title>
      <url>http://www.CepheusSun.com/Swifty%20Tips.html</url>
      <content type="html"><![CDATA[<p>Swift 开发中的一些小的技巧</p>
<p>刚开始的时候, 特别好奇大厂是怎么搞的, 他们的项目长什么样子, 他们用哪些库…想在巨人的肩膀上开发, 免得浪费时间在那些已经有很好解决方案的事情上。</p>
<p>四年前，我和团队中很多很厉害的人讨论过一些编程实践。今天就分享一些东西吧。</p>
<p>欢迎指正！🚀</p>
<a id="more"></a>
<h2 id="滥用引用类型"><a href="#滥用引用类型" class="headerlink" title="滥用引用类型"></a>滥用引用类型</h2><p>只有“动态”对象才使用引用类型。这里的“动态”对象是什么呢？看下面的代码:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Car</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> model: <span class="type">String</span></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CarManager</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span>(<span class="keyword">set</span>) <span class="keyword">var</span> cars: [<span class="type">Car</span>]</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">fetchCars</span><span class="params">()</span></span> &#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">registerCar</span><span class="params">(<span class="number">_</span> car: Car)</span></span> &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>🚗 在这里只是一个值。他代表的就是一些数据。就像 <code>1</code>、<code>2</code>、<code>3</code>。 这种数据是“静态”的数据(死的)。 它不会处理任何东西, 所以它也没有必要是“动态”的, 也就是说, 没必要把它定义成引用类型。</p>
<p><strong>另一方面:</strong></p>
<p><code>CarManager</code> 就需要是一个“动态”的对象。因为这个对象会发起网络请求, 然后将请求结果保存起来。在值类型对象中是不能执行异步任务的, 因为他们是“静态”的数据。我们需要的 <code>CarManager</code> 对象在一定的范围内是应该是动态的, 他会请求数据, 也会注册新的 <code>Car</code>。</p>
<p>这个主题完全可以写一篇文章来深入。推荐看看 <a href="https://news.realm.io/news/andy-matuschak-controlling-complexity/">Andy Matuschak 的文章</a>, 和 <a href="https://developer.apple.com/videos/play/wwdc2015/414/">WWDC</a></p>
<h2 id="隐式解包可选类型"><a href="#隐式解包可选类型" class="headerlink" title="隐式解包可选类型(!)"></a>隐式解包可选类型(<code>!</code>)</h2><p>默认不要隐式解包可选类型。 在大多数场景中你都可能会忘掉这件事情。但是在一些特殊情况下应该这样做来减少编译器的压力。而且我们也需要去理解这件事情背后的逻辑。</p>
<p>基本上, 如果这个属性在初始化的过程中必须为 <code>nil</code> 但是之后就会被赋值,  就可以定义这个属性为 optional。因为你肯定不会在赋值之前访问这个属性, 如果编译器一直警告这个值可能为 <code>nil</code> 真的挺讨厌的。</p>
<p>看看xib中拖出来的属性:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeView</span>: <span class="title">UIView</span> </span>&#123;</div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">let</span> nameLabel: <span class="type">UILabel</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果这样定义的话, 编译器就会让你在初始化方法中给<code>nameLabel</code>赋值。因为这行代码告诉编译器这个 <code>View</code> 无论什么时候都有 <code>nameLabel</code>。 但是, 有病啊！肯定不能这么干啊。因为其实在 <code>initWithCoder</code> 中已经帮我们实现了 <code>xib</code> 中的 <code>label</code> 和这个属性之间的关联。明白了吗？ 这个值永远都不可能为空, 就没有必要判断这个东西是不是存在了。所以也不需要去赋值了啊。</p>
<blockquote>
<p>你:这玩意儿肯定不可能是空, 别瞎几把报错了<br>编译器: 好的!</p>
</blockquote>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeView</span>: <span class="title">UIView</span> </span>&#123;</div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">var</span> nameLabel: <span class="type">UILabel</span>!</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Q:</strong> 在dequeue一个tableviewCell 的时候能不能(<code>!</code>)?<br><strong>A:</strong> 还是不要吧！至少给一个 Crash 啊</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">guard</span> <span class="keyword">let</span> cell = tableView.dequeueCell(...) <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">fatalError</span>(<span class="string">"Cannot dequeue cell with identifier <span class="subst">\(cellID)</span>"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="滥用-AppDelegate"><a href="#滥用-AppDelegate" class="headerlink" title="滥用 AppDelegate"></a>滥用 AppDelegate</h2><p><code>AppDelegate</code> 不是拿来给你做保存全局变量的容器的(全局属性、工具方法、管理类等等。)他只是一个用来实现一些协议的类而已。放过它吧！</p>
<p>在 <code>applicationDidFinishLaunching</code> 方法里肯定都会做一些很重要的事情, 但是当项目不断变大的时候这种情况很容易变的很恐怖。创建新的类(文件)来做这些事情吧！</p>
<p><strong>👎 Don’t:</strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> persistentStoreCoordinator: <span class="type">NSPersistentStoreCoordinator</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">rgb</span><span class="params">(r: CGFloat, g: CGFloat, b: CGFloat)</span></span> -&gt; <span class="type">UIColor</span> &#123; ... &#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">appDidFinishLaunching</span>... </span>&#123;</div><div class="line">    <span class="type">Firebase</span>.setup(<span class="string">"3KDSF-234JDF-234D"</span>)</div><div class="line">    <span class="type">Firebase</span>.logLevel = .verbose</div><div class="line">    <span class="type">AnotherSDK</span>.start()</div><div class="line">    <span class="type">AnotherSDK</span>.enableSomething()</div><div class="line">    <span class="type">AnotherSDK</span>.disableSomething()</div><div class="line">    <span class="type">AnotherSDK</span>.anotherConfiguration()</div><div class="line">    persistentStoreCoordinator = ...</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>👍 Do:</strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">appDidFinishLaunching</span>... </span>&#123;</div><div class="line">    <span class="type">DependencyManager</span>.configure()</div><div class="line">    <span class="type">CoreDataStack</span>.setup()</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h2><p>给一个方法的某些参数设置默认值是非常方便的事情。如果没有这个特性的话, 可能就需要给同一个功能写好几个方法了。像下面一样:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">print</span><span class="params">(<span class="number">_</span> string: String, options: String?)</span></span> &#123; ... &#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">print</span><span class="params">(<span class="number">_</span> string: String)</span></span> &#123;</div><div class="line">  <span class="built_in">print</span>(string, options: <span class="literal">nil</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果有默认参数值, 就可以是这样的:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">print</span><span class="params">(<span class="number">_</span> string: String, options: String? = <span class="literal">nil</span>)</span></span> &#123;...&#125;</div></pre></td></tr></table></figure>
<p>很简单对吧！ 给自定义 UI 组件设置默认颜色、提供默认的参数、给网络请求添加默认的超时时间等等。但是, 使用这个语法糖在遇到依赖注入的时候就要小心了。</p>
<p>看下面的例子:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TicketsViewModel</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> service: <span class="type">TicketService</span></div><div class="line">    <span class="keyword">let</span> database: <span class="type">TicketDatabase</span></div><div class="line">    <span class="keyword">init</span>(service: <span class="type">TicketService</span>,</div><div class="line">       database: <span class="type">TicketDatabase</span>) &#123; ... &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 App target:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> model = <span class="type">TicketsViewModel</span>(</div><div class="line">  service: <span class="type">LiveTicketService</span>()</div><div class="line">  database: <span class="type">LiveTicketDatabase</span>()</div><div class="line">)</div></pre></td></tr></table></figure>
<p>在 Test target:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> model = <span class="type">TicketsViewModel</span>(</div><div class="line">    service: <span class="type">MockTicketService</span>()</div><div class="line">    database: <span class="type">MockTicketDatabase</span>()</div><div class="line">)</div></pre></td></tr></table></figure>
<p>在这里使用协议的原因就是把这些功能从具体的类中抽象出来。这就使得你可以向这个 <code>viewModel</code> 中注入任何你想要的具体实现。 如果这里你把 <code>LiveTicketService</code> 作为默认的参数, 这就使得<code>TicketsViewModel</code> 依赖了 <code>LiveTicketService</code>这么一个具体的类型。这跟最初想要达到的目的有了一些冲突。</p>
<p><strong>现在没那么方便了吧？</strong></p>
<p>想象一下在你 App 还有 Test 两个 target 中。 <code>TicketsViewModel</code> 会被同时添加到两个 target 中, 然后把 <code>LiveTicketService</code> 和 <code>MockTicketService</code> 分别添加。如果 <code>TicketsViewModel</code>添加了对 <code>LiveTicketService</code> 的依赖。 Test target 肯定就编译不过了。</p>
<h2 id="可变参数函数"><a href="#可变参数函数" class="headerlink" title="可变参数函数"></a>可变参数函数</h2><p>这… 就是很爽啊！</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(<span class="number">_</span> numbers: Int...)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">return</span> numbers.<span class="built_in">reduce</span>(<span class="number">0</span>, +)</div><div class="line">&#125;</div><div class="line">sum(<span class="number">1</span>,<span class="number">2</span>)      <span class="comment">// 3</span></div><div class="line">sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)    <span class="comment">// 6</span></div><div class="line">sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)  <span class="comment">// 10</span></div></pre></td></tr></table></figure>
<h2 id="使用类型嵌套"><a href="#使用类型嵌套" class="headerlink" title="使用类型嵌套"></a>使用类型嵌套</h2><p>Swift 支持内部类。所以有用就可以这么做：</p>
<p><strong>👎 Don’t:</strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">PhotoCollectionViewCellStyle</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> <span class="keyword">default</span></div><div class="line">    <span class="keyword">case</span> photoOnly</div><div class="line">    <span class="keyword">case</span> photoAndDescription</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个枚举可能在 <code>PhotoCollectionViewCell</code> 之外就不会再使用到了。没理由把这个枚举声明成全局的。</p>
<p><strong>👍 Do:</strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhotoCollectionViewCell</span> </span>&#123;</div><div class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Style</span> </span>&#123;</div><div class="line">        <span class="keyword">case</span> <span class="keyword">default</span></div><div class="line">        <span class="keyword">case</span> photoOnly</div><div class="line">        <span class="keyword">case</span> photoAndDescription</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">let</span> style: <span class="type">Style</span> = .<span class="keyword">default</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这很容易理解, 毕竟 <code>Style</code> 本来就是用来标记 <code>PhotoCollectionViewCell</code> 的。而且还少了23个字符呢。</p>
<h2 id="使用-final-关键字-🏁"><a href="#使用-final-关键字-🏁" class="headerlink" title="使用 final 关键字 🏁"></a>使用 final 关键字 🏁</h2><p>如果你不需要拓展某些类, 也不希望这些类被拓展, 使用 <code>final</code> 修饰它。不用担心犯错, 比如 <code>PhotoCollectionViewCell</code> 这个类, 你还有可能继承它吗？</p>
<p>而且:<strong>这么做可以节约编译时间。</strong></p>
<h2 id="给常量命名空间"><a href="#给常量命名空间" class="headerlink" title="给常量命名空间"></a>给常量命名空间</h2><p>在 OC 中是通过在全局的常量前面加 <code>PFX</code> 或者 <code>k</code> 来给这些常量命名空间的。但是 Swift 可不这样。</p>
<p><strong>👎 Don’t:</strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> ket kAnimationDuration: <span class="type">TimeInterval</span> = <span class="number">0.3</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">let</span> kLowAlpha = <span class="number">0.2</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">let</span> kAPIKey = <span class="string">"13511-5234-5234-59234"</span></div></pre></td></tr></table></figure>
<p><strong>👍 Do:</strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Constant</span> </span>&#123;</div><div class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">UI</span> </span>&#123;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">let</span> animationDuration: <span class="type">TimeInterval</span> = <span class="number">0.3</span></div><div class="line">        <span class="keyword">static</span> <span class="keyword">let</span> lowAlpha: <span class="type">CGFloat</span> = <span class="number">0.2</span>  </div><div class="line">    &#125;</div><div class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Analytics</span> </span>&#123;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">let</span> apiKey = <span class="string">"13511-5234-5234-59234"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我个人的偏好是使用 <code>C</code> 来代替 <code>Constant</code>, 他已经够清晰了。这个可以看你自己喜欢了。</p>
<p><strong>Before:</strong> <code>kAnimationDuration</code> 或者 <code>kAnalyticsAPIKey</code><br><strong>After:</strong> <code>C.UI.animationDuration</code> 或者 <code>C.Analytics.apiKey</code></p>
<h2 id="的使用"><a href="#的使用" class="headerlink" title="_ 的使用"></a><code>_</code> 的使用</h2><p><code>_</code> 是对没有使用到的变量的占位符。他就是告诉编译器”这个值是什么不重要”。 不然编译器会有警告⚠️。</p>
<p><strong>👎 Don’t</strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> <span class="number">_</span> = name &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Name is not nil."</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>optional</code>就像一个盒子。可以直接看他是不是空的, 没必要每次都把里面的东西拿出来。</p>
<p><strong>👍 Do:</strong></p>
<ul>
<li>判空</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> name != <span class="literal">nil</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Name is not nil."</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>返回值没用</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">_</span> = manager.removeCar(car) <span class="comment">// 成功返回true</span></div></pre></td></tr></table></figure>
<ul>
<li>ConpletionHandler</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">service.fetchItems &#123;data, error , <span class="number">_</span> <span class="keyword">in</span></div><div class="line">    <span class="comment">// 第三个参数我不在乎他是什么</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="方法命名"><a href="#方法命名" class="headerlink" title="方法命名"></a>方法命名</h2><p>这点适用于所有需要人类去阅读的语言。代码总是不那么容易理解的, 不要浪费别人的精力。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">driver.driving()</div></pre></td></tr></table></figure>
<p>这是在干什么？</p>
<ul>
<li>是把 <code>driver</code> 标记成 <code>driving</code> 状态？</li>
<li>还是检查 <code>driver</code> 是不是 <code>driving</code> 状态, 并且返回一个 <code>bool</code> 值？</li>
</ul>
<p><strong>如果要点进去看才知道这方法是干什么的, 这个命名就是失败了。</strong>多人协同开发或者处理遗留项目的时候, 你读别人代码的时间比你写代码的时间都要长。所以在命名的时候想着别让看你代码的人痛苦。</p>
<h2 id="关于-print"><a href="#关于-print" class="headerlink" title="关于 print"></a>关于 print</h2><p>很严肃的说, 不要得到一个 <code>error</code> 或者 <code>response</code> 就在控制台打印出来。你这么做还不如不打印呢！搞得控制台一堆乱七八糟的东西看起来真的很爽吗？</p>
<p><strong>Do:</strong></p>
<ul>
<li>在 <code>framework</code> 中使用 <code>error</code> 级的 <code>log level</code>。</li>
<li>使用一些能够让你有不同输出级别的 log 库。<em>XGGLogger</em>、<em>SwiftyBeaver</em></li>
<li>不要用 log 来 debug 了。Xcode 有很多有用的工具<a href="https://www.objc.io/issues/19-debugging/debugging-case-study/">Debugging: A Case Study</a></li>
</ul>
<h2 id="没用的代码"><a href="#没用的代码" class="headerlink" title="没用的代码"></a>没用的代码</h2><p>经常在一些老项目里面见到被注释掉的代码, 但是出来没有通过把这些代码打开来解决过问题。所以, 既然这些代码都没有什么用了, 就删了它! 还能增加代码的可读性, 看起来整洁的代码总要让人舒服一些。</p>
<p><strong>最后推荐一个好文<a href="https://medium.com/@gokselkoksal/swifty-tips-%EF%B8%8F-8564553ba3ec">Using SwiftLint and Danger for Swift Best Practices</a></strong></p>
<p><strong><a href="https://medium.com/@gokselkoksal/swifty-tips-%EF%B8%8F-8564553ba3ec">原文地址</a></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Swift Syntax Cheat Codes]]></title>
      <url>http://www.CepheusSun.com/Swift%20Syntax%20Cheat%20Codes.html</url>
      <content type="html"><![CDATA[<p>这篇文章主要介绍一些很常见的语法。</p>
<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">() -&gt; <span class="type">Void</span></div></pre></td></tr></table></figure>
<p>也叫做 <code>匿名函数</code>。闭包是自包含的函数代码块，可以在代码中被传递和使用。在 <code>C</code> 和 <code>OC</code> 中有 <code>block</code> 与之对应。</p>
<p>如果你之前就有 iOS 开发经验, 你肯定看到过 UIView 动画的 API</p>
<a id="more"></a>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">animate</span>(<span class="title">withDuration</span> <span class="title">duration</span>: <span class="title">NSTimeInterval</span>,</div><div class="line"> <span class="title">animations</span>: @<span class="title">escaping</span>() -&gt; <span class="title">Void</span>)</span></div></pre></td></tr></table></figure>
<p><code>animations</code>就是动画的参数。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="type">UIView</span>.animate(withDuration: <span class="number">10.0</span>, animations: &#123;</div><div class="line">    button.alpha = <span class="number">0</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p><code>animationWithDuration</code> 方法就会使用这个闭包做一件事情:让button慢慢的消失。</p>
<h3 id="尾随闭包"><a href="#尾随闭包" class="headerlink" title="尾随闭包"></a>尾随闭包</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="type">UIView</span>.animate(withDuration: <span class="number">10.0</span>) &#123; </div><div class="line">    button.alpha = <span class="number">0</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这是 Swift 的特性之一, 这样可以节省一些没什么必要存在的代码。看这段的代码, 跟上面的代码调用的是同一个 API, 只是这段代码使用了更简洁的语法。</p>
<p>因为 <code>animate</code> 这个方法的最后一个参数是一个闭包—<strong>尾随闭包</strong>。尾随闭包允许我们在编码的时候省略掉最后的参数名, 并让他从参数列表那个括号里面移出来。这样会让代码更优雅简洁。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">say</span><span class="params">(<span class="number">_</span> message: String, completion: @escaping <span class="params">()</span></span></span> -&gt; <span class="type">Void</span>) &#123;</div><div class="line">    <span class="built_in">print</span>(message)</div><div class="line">    completion()</div><div class="line">&#125;</div><div class="line"><span class="comment">// 没有使用尾随闭包</span></div><div class="line">say(<span class="string">"Hello"</span>, completion: &#123;</div><div class="line">    <span class="comment">// prints: "Hello" </span></div><div class="line">    <span class="comment">// Do some other stuff</span></div><div class="line">&#125;)</div><div class="line"><span class="comment">// 使用了尾随闭包</span></div><div class="line">say(<span class="string">"Hello"</span>) &#123;</div><div class="line">    <span class="comment">// prints: "Hello"</span></div><div class="line">    <span class="comment">// Do some other stuff</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typealias</span></div></pre></td></tr></table></figure>
<p>类型别名是一个很有用的小工具, 能尽可能少的减少重复代码。看下面的例子:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">dance</span><span class="params">(<span class="keyword">do</span>:<span class="params">(Int, String, Double)</span></span></span> -&gt; (<span class="type">Int</span>, <span class="type">String</span>, <span class="type">Double</span>)) &#123;&#125;</div></pre></td></tr></table></figure>
<p>这段代码的功能其实很简单, 但是如果在其他方法中也需要传递这个闭包的话, 我们就应该记住这个闭包, 并且保证在任何我们使用它的地方都是一致的, 不然编译器可能就不高兴了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">dance</span><span class="params">(<span class="keyword">do</span>: <span class="params">(Int, String, Double)</span></span></span> -&gt; (<span class="type">Int</span>, <span class="type">String</span>, <span class="type">Double</span>)) &#123; &#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">sing</span><span class="params">(<span class="keyword">do</span>: <span class="params">(Int, String, Double)</span></span></span> -&gt; (<span class="type">Int</span>, <span class="type">String</span>, <span class="type">Double</span>)) &#123; &#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">act</span><span class="params">(<span class="keyword">do</span>: <span class="params">(Int, String, Double)</span></span></span> -&gt; (<span class="type">Int</span>, <span class="type">String</span>, <span class="type">Double</span>)) &#123; &#125;</div></pre></td></tr></table></figure>
<p>但是如果某个时刻我们需要修改一下这个闭包。这就尴尬了, 上面三个方法都需要去修改。 这就是使用<strong>类型别名</strong>的场景。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typealias</span> <span class="type">TripleThreat</span> = (<span class="type">Int</span>, <span class="type">String</span>, <span class="type">Double</span>) -&gt; (<span class="type">Int</span>, <span class="type">String</span>, <span class="type">Double</span>)</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">dance</span><span class="params">(dance: TripleThreat)</span></span> &#123; &#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">act</span><span class="params">(act: TripleThreat)</span></span> &#123; &#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">sing</span><span class="params">(sing: TripleThreat)</span></span> &#123; &#125;</div></pre></td></tr></table></figure>
<p>这样写的话, 只要我们需要修改这个闭包的时候, 就只需要修改一个地方了。</p>
<p><strong>喜闻乐见的类型别名</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">typealias Void = ()</div><div class="line">typealias NSTimeInterval = Double</div></pre></td></tr></table></figure>
<h3 id="参数名缩写"><a href="#参数名缩写" class="headerlink" title="参数名缩写"></a>参数名缩写</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$<span class="number">0</span>,$<span class="number">1</span>,$<span class="number">2</span></div></pre></td></tr></table></figure>
<p>一个闭包内有参数的情况下, 你可以在闭包定义中省略参数列表，并且对应参数名称缩写的类型会 通过函数类型进行推断。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">say</span><span class="params">(<span class="number">_</span> message: String, completion: <span class="params">(<span class="number">_</span> goodbye: String)</span></span></span> -&gt; <span class="type">Void</span>) &#123;</div><div class="line">    <span class="built_in">print</span>(message)</div><div class="line">    completion(<span class="string">"Goodbye"</span>)</div><div class="line">&#125;</div><div class="line">...</div><div class="line">say(<span class="string">"Hi"</span>) &#123; (goodbye: <span class="type">String</span>) -&gt; <span class="type">Void</span> <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(goodbye)</div><div class="line">&#125;</div><div class="line"><span class="comment">// prints: "Hi"</span></div><div class="line"><span class="comment">// prints: "Goodbye"</span></div></pre></td></tr></table></figure>
<p>这个例子中，这个尾随闭包有一个 <code>String</code> 类型的 <code>goodbye</code> 参数。Xcode 会自动把它放在一个元组里面。用 <code>in</code> 来表示参数、返回值的结束。并另起一行来实现我们想要的功能。当这个闭包很小的时候，这样写就显得代码非常的冗长了。我们来改造一下段代码。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(goodbye: <span class="type">String</span>) -&gt; <span class="type">Void</span> <span class="keyword">in</span></div></pre></td></tr></table></figure>
<p>这段代码完全没有必要写出来。使用参数名缩写就好了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">say(<span class="string">"Hi"</span>) &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line"><span class="comment">// prints: "Hi"</span></div><div class="line"><span class="comment">// prints: "Goodbye"</span></div></pre></td></tr></table></figure>
<p>你看, 这样写完全省略掉了闭包的参数还有返回值声明的代码。因为在这个场景中，我们完全没有必要使用参数名。每个参数都按照声明的顺序命名好了。这么简单, 直接放在一行代码里就可以了。</p>
<p>如果有不止一个参数的时候应该怎么弄呢？我也不想解释了, 直接看下面的代码: </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(goodbye: <span class="type">String</span>, name: <span class="type">String</span>, age: <span class="type">Int</span>) -&gt; <span class="type">Void</span> <span class="keyword">in</span></div><div class="line"><span class="comment">// $0: goodbye</span></div><div class="line"><span class="comment">// $1: name</span></div><div class="line"><span class="comment">// $2: age</span></div></pre></td></tr></table></figure>
<h3 id="返回-Self"><a href="#返回-Self" class="headerlink" title="返回 Self"></a>返回 Self</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-&gt; <span class="type">Self</span></div></pre></td></tr></table></figure>
<p>Swift2.0 带来的一大堆操作符(map, flatmap), 这些操作符更给力的是让我们能够使用 <code>.</code> 语法链式的调用一系列方法。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[<span class="number">1</span> , <span class="number">2</span>, <span class="number">3</span>, <span class="literal">nil</span>, <span class="number">5</span>]</div><div class="line">    .flatMap &#123;$<span class="number">0</span>&#125;    <span class="comment">// 移除空</span></div><div class="line">    .<span class="built_in">filter</span> &#123;$<span class="number">0</span> &lt; <span class="number">3</span>&#125; <span class="comment">// 过滤大于2的值</span></div><div class="line">    .<span class="built_in">map</span> &#123;$<span class="number">0</span> * <span class="number">100</span>&#125;  <span class="comment">// 每个值放大100倍</span></div><div class="line"><span class="comment">// [100, 200]</span></div></pre></td></tr></table></figure>
<p>这样太优雅了, 既可读又易于理解。</p>
<p>假设我们为<code>String</code>建一个扩展, 在字符串的本身上执行一些操作, 而不使函数返回 <code>Void</code> 而是他自己.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// extension UIView</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">with</span><span class="params">(backgroundColor: UIColor)</span></span> -&gt; <span class="type">Self</span> &#123;</div><div class="line">    backgroundColor = color</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">with</span><span class="params">(cornerRadius: CGFloat)</span></span> -&gt; <span class="type">Self</span> &#123;</div><div class="line">    layer.cornerRadius = <span class="number">3</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> view = <span class="type">UIView</span>(frame: <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="number">10</span>, height: <span class="number">10</span>))</div><div class="line">          .with(backgroundColor: .black)</div><div class="line">          .with(cornerRadius: <span class="number">3</span>)</div></pre></td></tr></table></figure>
<h3 id="That’s-it"><a href="#That’s-it" class="headerlink" title="That’s it!"></a>That’s it!</h3><p><a href="https://medium.com/swift-programming/swift-syntax-cheat-codes-9ce4ab4bc82e">原文地址</a></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>我是一名来自中国的 iOS 程序员, 对技术有着浓厚的兴趣, 在学习的过程中, 发现了很多来自国外的优秀博客。为了更好的学习这些文章, 产生了将这些文章翻译成中文的想法。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Picking the right way of failing in Swift]]></title>
      <url>http://www.CepheusSun.com/Picking%20the%20right%20way%20of%20failing%20in%20Swift.html</url>
      <content type="html"><![CDATA[<p>Swift 的一大特色就是编译安全。这使得我们开发者能够更容易的编写出可预测性的代码, 并且能勾减少运行时错误的发生。但是, 在实际的情况中, 错误发生的原因是千奇百怪的。</p>
<p>我们今天来看一下如果正确的去处理各类错误, 以及我们有什么工具来做这件事情。上一篇文章研究了如何处理 <code>non-optional</code>。 在那篇文章中我使用 <code>guard</code> + <code>preconditionFailure()</code> 代替了强制解包。</p>
<p>之后很多人都在问 <code>preconditionFailure()</code> 和 <code>assert()</code> 有什么区别。 在这篇文章中。我们再仔细的看看这些语言特性。最重要的是在什么情况下使用哪一种？</p>
<a id="more"></a>
<h3 id="Let’s-start-with-a-list"><a href="#Let’s-start-with-a-list" class="headerlink" title="Let’s start with a list"></a>Let’s start with a list</h3><p>我先把我知道的所有异常处理方法列举出来。</p>
<ul>
<li><strong>返回 <code>nil</code> 或者是一个 error 枚举值</strong>, 最简单的异常处理机制就是直接在发生错误的方法中返回 <code>nil</code> 或者是 <code>.error</code>(使用了一个枚举来做为返回值类型的时候)。这中做法在很多的场景中都是有效的, 但是如果任何情况下都这么干的话。可能会导致你代码中的 API 编的非常繁琐。也会带来一些逻辑的错误。</li>
<li><strong>抛出错误信息</strong>, 这要求在处理潜在的错误是使用<code>do</code>、<code>try</code>、<code>catch</code> 语句。另外如果使用 <code>try？</code>错误会被忽略掉。</li>
<li><strong>使用断言 <code>assert()</code> 和 <code>assertionFailure()</code></strong>, 来确定这个表达式是不是成立。默认情况下, 在 Debug 环境下会导致异常的抛出。在 release 下一场会被忽略。所以无法保证这个断言在出发的时候, 程序会立马停止。所以这种模式也可以被理解运行时警告。</li>
<li><strong>使用 <code>precondition()</code> 和 <code>preconditionFailure()</code></strong>来代替断言。跟断义最大的区别就是它们在任何情况下都会发生, 可以确保在发生异常的时候程序会立马停止。</li>
<li><strong>调用 <code>fataError()</code></strong>, 这个函数在 Xcode 自动生成的 <code>init(coder:)</code> 中大概都看到过。只要这个方法被调用就会立马杀掉当前进程。</li>
<li><strong>调用 <code>exit()</code></strong>, 使用这个代码直接结束进程。这在命令行还有脚本中是非常有效的方法。</li>
</ul>
<h3 id="是否可恢复"><a href="#是否可恢复" class="headerlink" title="是否可恢复"></a>是否可恢复</h3><p>这个异常发生之后程序还能否从异常中恢复是选择异常处理方式的重要因素。</p>
<p>比如说。我们向服务器发强请求, 然后得到了错误的请求结果。这种情况无论我们是多么牛逼的程序员, 我们使用了多么强大的服务器基本上肯定都会发生。把这种异常看作是致命异常或者是不可恢复的异常可能就不对了。这种场景中, 我们希望的可能就是给用户展示一些错误信息就可以了。</p>
<p>既然这样, 在这种场景中, 选择什么样的方法来处理异常呢？如果你仔细看了上面的列表, 我们其实可以把这些按照是否可恢复归位两类:</p>
<p><strong>可恢复的</strong></p>
<ul>
<li>返回 <code>nil</code> 或者一个 <code>error</code> 枚举值。</li>
<li>抛出错误信息。</li>
</ul>
<p><strong>不可恢复的</strong></p>
<ul>
<li>assert()</li>
<li>precondition()</li>
<li>fatalError()</li>
<li>exit()</li>
</ul>
<p>既然我们处理的是一个异步的任务, 返回 <code>nil</code> 或者 <code>error</code> 枚举值就是最好的选择了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataLoader</span> </span>&#123;</div><div class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Result</span> </span>&#123;</div><div class="line">        <span class="keyword">case</span> success(<span class="type">Data</span>)</div><div class="line">        <span class="keyword">case</span> failure(<span class="type">Error</span>?)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">loadData</span><span class="params">(from url: URL, completionHandler: @escaping <span class="params">(Result)</span></span></span> -&gt; <span class="type">Void</span>) &#123;</div><div class="line">        <span class="keyword">let</span> task = <span class="type">URLSession</span>.shared.dataTask(with: url) &#123;</div><div class="line">            data, response, error <span class="keyword">in</span></div><div class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> data = data <span class="keyword">else</span> &#123;</div><div class="line">                completionHandler(.failure(error))</div><div class="line">                <span class="keyword">return</span></div><div class="line">            &#125;</div><div class="line">            completionHandler(.success(data))</div><div class="line">        &#125;</div><div class="line">        task.resume()</div><div class="line">    &#125;   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果任务是同步的, 抛出错误应该是最好的方法了。毕竟 API 也是这样设计的。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringFormatter</span> </span>&#123;</div><div class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Error</span>: <span class="title">Swift</span>.<span class="title">Error</span> </span>&#123;</div><div class="line">        <span class="keyword">case</span> emptyString</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">format</span><span class="params">(<span class="number">_</span> string:String)</span></span> <span class="keyword">throws</span> -&gt; <span class="type">String</span> &#123;</div><div class="line">        <span class="keyword">guard</span> !string.isEmpty <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="type">Error</span>.emptyString</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> string.replacingOccurrences(of: <span class="string">"\n"</span>, with: <span class="string">" "</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在有些情况下, 错误是不可恢复的。比如说, 我们需要在程序启动的时候加载配置文件。如果这个配置文件丢失了, 这会把程序带入未定义的状态中。所以这种情况下 crash 可能就要比让程序就运行好得多了。这种情况下, 使用更强的并且不可恢复的方法来让程序崩溃会是更合适的。</p>
<p>在这个例子中, 使用 <code>preconditionFailure()</code> 来停止运行。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">guard</span> <span class="keyword">let</span> config = <span class="type">FileLoader</span>().loadFile(name: <span class="string">"Config.json"</span>) <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">preconditionFailure</span>(<span class="string">"Failed to load config file"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="程序错误和运行错误"><a href="#程序错误和运行错误" class="headerlink" title="程序错误和运行错误"></a>程序错误和运行错误</h3><p>另外一个重要的标准是:异常的发生原因是逻辑还是配置, 或者说这个错误是不是程序流程中合法的部分。基本上判断的标准就是这个错误的原因是因为程序员还是外部因素。</p>
<p>为了减少麻烦, 可能你更愿意使用不可恢复的方法来处理各类错误。这样你就不用写各种代码来处理各种特殊情况了, 并且如果测试做得好的话, 这些错误就能够早的被捕获到了。</p>
<p>比如。 我们在做一个界面, 需要一个 <code>viewModel</code> 在使用之前跟他做好绑定。这个 <code>viewModel</code> 在我们的代码中是一个 <code>optional</code> 类型, 但是我们又不希望每次使用的时候都要强制解包。我们也不希望在这个 <code>viewmodel</code> 莫名其妙消失的时候程序在生产环境中崩溃。使用断言在 <code>debug</code> 下获得错误信息就足够了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DetailView</span>: <span class="title">UIView</span> </span>&#123;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ViewModel</span> </span>&#123;</div><div class="line">        <span class="keyword">var</span> title: <span class="type">String</span></div><div class="line">        <span class="keyword">var</span> subtitle: <span class="type">String</span></div><div class="line">        <span class="keyword">var</span> action: <span class="type">String</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> viewModel: <span class="type">ViewModel</span>?</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> titleLabel = <span class="type">UILabel</span>()</div><div class="line">    <span class="keyword">let</span> subtitleLabel = <span class="type">UILabel</span>()</div><div class="line">    <span class="keyword">let</span> actionButton = <span class="type">UIButton</span>()</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didMoveToSuperview</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didMoveToSuperview()</div><div class="line">        </div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> viewModel = viewModel <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">assertionFailure</span>(<span class="string">"No view model assigned to DetailView."</span>)</div><div class="line">            <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        titleLabel.text = viewModel.title</div><div class="line">        subtitleLabel.text = viewModel.subtitle</div><div class="line">        actionButton.setTitle(viewModel.action, <span class="keyword">for</span>: .normal)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>需要注意的是: 我们必须在上面的 <code>guard</code> 表达式中 <code>return</code>, 不然在 <code>release</code> 条件下 <code>assertFailure()</code> 也没什么作用。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>我希望这篇文章有助于让你理解到各种异常处理方法的区别。我的建议是不要只是专注于技术, 而是要在不同的场景中尝试使用不同的方法。一般情况下, 我更建议大家尽量在程序出错的时候恢复过来, 除非异常是致命的, 都不要影响用户体验。</p>
<p>另外 <code>print(error)</code> 并不是一个异常处理机制。</p>
<p>Thanks for reading! 🚀</p>
<h3 id="That’s-it"><a href="#That’s-it" class="headerlink" title="That’s it!"></a>That’s it!</h3><p><a href="https://medium.com/@johnsundell/picking-the-right-way-of-failing-in-swift-e89125a6b5b5">原文地址</a></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>我是一名来自中国的 iOS 程序员, 对技术有着浓厚的兴趣, 在学习的过程中, 发现了很多来自国外的优秀博客。为了更好的学习这些文章, 产生了将这些文章翻译成中文的想法。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Using lazy properties in Swift]]></title>
      <url>http://www.CepheusSun.com/Using%20lazy%20properties%20in%20Swift.html</url>
      <content type="html"><![CDATA[<p>懒加载属于让你可以在需要的时候才初始化, 而不是在初始化这个对象的时候就必须要。懒加载可以用来避免 optional 的使用, 当某个属性的初始化耗费很多资源的时候会提升性能。当然使用懒加载也能让对象的初始化方法看起来很清爽, 因为某些设置会在这个对象的生命周期中被推迟。</p>
<p>这周我们来学习一下 Swift 中懒加载的定义, 以及使用。</p>
<a id="more"></a>
<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>定义一个懒加载属性最简单的办法就是在 <code>var</code> 前加一个 <code>lazy</code> 关键字, 并且还要给 出默认的值。这个默认值会在这个属性被第一次访问的时候被指定, 也就是说在这个对象的初始化方法中这个就不需要再去初始化这个属性了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileLoader</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="built_in">lazy</span> <span class="keyword">var</span> cahce = <span class="type">Cache</span>&lt;<span class="type">File</span>&gt;()</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">loadFile</span><span class="params">(name name: String)</span></span> <span class="keyword">throws</span> -&gt; <span class="type">File</span> &#123;</div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> cachedFile = cahce[name] &#123;</div><div class="line">            <span class="keyword">return</span> cachedFile</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">let</span> file = <span class="keyword">try</span> loadFileFromDisk(fileName: name)</div><div class="line">        cahce[name] = file</div><div class="line">        <span class="keyword">return</span> file</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用工厂方法"><a href="#使用工厂方法" class="headerlink" title="使用工厂方法"></a>使用工厂方法</h3><p>有些时候我们可能需要在这个属性在懒加载的时候设置一些东西, 只是简单的使用它的初始化方法可能就没有那么方便了。这种情况下, 更方便的方法是把这个属性的初始化代理给一个工厂方法。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Scene</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="built_in">lazy</span> <span class="keyword">var</span> eventManager: <span class="type">EventManager</span> = <span class="keyword">self</span>.makeEventManager()</div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">makeEventManager</span><span class="params">()</span></span> -&gt; <span class="type">EventManager</span>&#123;</div><div class="line">        <span class="keyword">let</span> manager = <span class="type">EventManager</span>()</div><div class="line">        <span class="keyword">return</span> manager</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果你不希望你的类里面全是各种 <code>make..()</code> 这类工厂方法, 你可以把这些方法放在一个专门的 <code>extension</code> 中</p>
<h3 id="使用自执行闭包"><a href="#使用自执行闭包" class="headerlink" title="使用自执行闭包"></a>使用自执行闭包</h3><p>除了使用工厂方法来返回这个属性值以外, 你也可以选择在这个属性声明的地方通过一个自执行的闭包来出初始化这个属性。我们看看上面这个情况, 我们应该怎么做吧！</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="built_in">lazy</span> <span class="keyword">var</span> eventManager: <span class="type">EventManager</span> = &#123;</div><div class="line">   <span class="keyword">let</span> manager = <span class="type">EventManager</span>()</div><div class="line">    <span class="keyword">return</span> manager</div><div class="line">&#125;()</div></pre></td></tr></table></figure>
<p>这要做有一个好处: 让这个属性的在同一个地方声明和设置。当然阅读这些代码可能会比较不爽。特别是在这个属性的设置需要很长的代码的时候。我自己的规则是当这个属性的初始化方法只有两三行代码的时候。就是使用这样的方法来初始化懒加载属性。</p>
<h3 id="使用静态工厂方法"><a href="#使用静态工厂方法" class="headerlink" title="使用静态工厂方法"></a>使用静态工厂方法</h3><p>对于那些设置起来更复杂属性, 把这些代码放到其他的类中, 会是更好的办法。这么做, 可以让这个类更加专注于它自己的职责, 让这个类不至于那么复杂。当然这也可以在不使用子类的条件下, 在多个类中共享代码。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="built_in">lazy</span> <span class="keyword">var</span> actionButton: <span class="type">UIButton</span> = <span class="type">ViewFactory</span>.makeActionButton()</div></pre></td></tr></table></figure>
<p>在这个例子中, <code>ViewFactory</code> 这个类包含了这个 <code>controller</code> 中所有控件的初始化方法。不用引入更多的类, 也不用让继承树变复杂。如果我们希望在另外一个 <code>controller</code> 中使用这个按钮, 也只需要调用同一个 API 就好了 <code>ViewFactory.makeActionButton()</code></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>可能有人会问, 有没有什么大一统的方法来使用懒加载呢？ 个人认为没有. 写代码就是这样, 选择最合适的方法来处理不同的业务需求才是最正确的做法。而且我自己也在日常开发中使用上面所有的方法。</p>
<p>Twitter 又一个问题: 使用不同的方法, 对编译时间有什么影响呢？我做了一些基本的测试, 并没有发现这其中有什么差别。当然这也跟这个懒加载属性有关。</p>
<p>Thanks for reading! 🚀</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Protocol Oriented Programming View in Swift 3]]></title>
      <url>http://www.CepheusSun.com/Protocol%20Oriented%20Programming%20View%20in%20Swift%203.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>学习如何在不创建一大堆类的前提下做按钮、label、图片的动画。</p>
</blockquote>
<p>掌握了足够的知识而不去使用它, 就像你长了满口的牙齿, 但是成天都喝牛奶一样。 掌握了足够的理论知识, 在项目中怎么使用 POP 呢？🤔</p>
<a id="more"></a>
<h3 id="What-I-think-you-will-learn"><a href="#What-I-think-you-will-learn" class="headerlink" title="What I think you will learn"></a>What I think you will learn</h3><p>使用协议让 UI 组件做动画。也会用传统的方法来更 POP 比较。😎</p>
<h4 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h4><p>这个 demo 叫 “Welcome to My House Party”。 我写这个app 来验证你是否被邀请。你得输入你的邀请码。<strong>这个 app 没有逻辑相关的东西，按下这个按钮之后, 上面的控件都会动起来</strong> 界面上有4个组件会动。 <code>passcodeTextField</code>、<code>loginButton</code>、<code>errorMessageLabel</code>、<code>profileImageView</code>.</p>
<p>一共有两种动画类型 </p>
<ol>
<li>Buzzing </li>
<li>Popping</li>
</ol>
<center><br><img src="https://cdn-images-1.medium.com/max/1600/1*uN6sB588ehZIivOmmAsLPg.gif" alt=""><br></center>

<p>不要担心跟不上，只需要跟着节奏往下走就行了。如果你没信心了，滑到最后面，把 Demo 下下来, 直接看代码就行了。</p>
<h4 id="Things-Back-Then"><a href="#Things-Back-Then" class="headerlink" title="Things Back Then"></a>Things Back Then</h4><p>要真正掌握在实际情况中 POP 的魔力，我们先比较一下传统的写法。你可能会创造两个子类然后给她添加一个方法。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuzzableButton</span>: <span class="title">UIButton</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">buzz</span><span class="params">()</span></span> &#123;<span class="comment">// Animation Logic&#125;</span></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuzzableLabel</span>: <span class="title">UILabel</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">buzz</span><span class="params">()</span></span> &#123;<span class="comment">// Animation Logic&#125;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后让他动起来，当你点击这个按钮</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> errorMessageLabel: <span class="type">BuzzableLabel</span>!</div><div class="line"><span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> loginButton: <span class="type">BuzzableButton</span>!</div><div class="line"></div><div class="line"><span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">didtapLoginButton</span><span class="params">(<span class="number">_</span> sender: UIButton)</span></span> &#123;</div><div class="line">    errorMessageLabel.buzz()</div><div class="line">    loginButton.buzz()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>你看到我们重复了几次相同的事情了吗？ 动画的逻辑至少都需要5行代码。既然用 extension 是更好的办法。 UILabel 和 UIButton 都继承了 UIView。 我们可以这样。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIView</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">buzz</span><span class="params">()</span></span> &#123; <span class="comment">// Animation Logic &#125;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在 <code>BuzzableButton</code> 还有 <code>BuzzableLabel</code> 都有 <code>buzz</code> 这个方法了。 现在我们就没有重复了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuzzableButton</span>: <span class="title">UIButton</span> </span>&#123;&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuzzableLabel</span>: <span class="title">UILabel</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> errorMessageLabel: <span class="type">BuzzableLabel</span>!</div><div class="line"><span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> loginButton: <span class="type">BuzzableButton</span>!</div><div class="line"></div><div class="line"><span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">didTapLoginButton</span><span class="params">(<span class="number">_</span> sender: UIButton)</span></span> &#123;</div><div class="line"> errorMessageLabel.buzz()</div><div class="line"> loginButton.buzz() </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Okay-then-why-POP-🤔"><a href="#Okay-then-why-POP-🤔" class="headerlink" title="Okay, then why POP? 🤔"></a>Okay, then why POP? 🤔</h4><p>你应该也看见了那个写着 “Please enter valid code 😂” 的<code>errorMessageLabel</code> 还有另外一个动画。她先是出现然后在消失。所以, 之前的方法是怎么样的呢？</p>
<p>有两个方法来做这件事情。首先你需要再给 <code>UIView</code> 添加一个方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// Extend UIView</div><div class="line">extension UIView &#123;</div><div class="line">    func buzz() &#123; // Animation Logic&#125;</div><div class="line">    func pop() &#123; // UILable Animation Logic &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但是如果我们给 UIView 添加了这个方法。这个方法在其他的组件上也有了。包括他的子类 <code>UILabel</code>。 我们继承了没有必要的方法。这些组件也莫名其妙的变的很臃肿了。</p>
<p>还有一个方法是给 <code>UILabel</code> 添加一个子类，</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Subclass UILabel</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuzzableLabel</span>: <span class="title">UILabel</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pop</span><span class="params">()</span></span> &#123; <span class="comment">// UILabel Animation Logic &#125;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这也能实现。但是可能我们还需要把这个类的名字改一下，然它更直观一点.换成 <code>BuzzablePoppableLabel</code> 吧！</p>
<p>如果你想给这个 Label 添加更多的方法。为了让这个 Label 更直观的表达它的作用，可能名字又得改了 <code>BuzzablePoppableFlashableDopeFancyLovelyLabel</code> 这显然非常的不可持续。</p>
<h3 id="Protocol-Oriented-Programming"><a href="#Protocol-Oriented-Programming" class="headerlink" title="Protocol Oriented Programming"></a>Protocol Oriented Programming</h3><p>用子类来实现就是这样的。选择我们先写一个协议吧！ Buzzing</p>
<p>因为动画的代码都比较长，我没有在这里写出来。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Buzzable</span> </span>&#123;&#125;</div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Buzzable</span> <span class="title">where</span> <span class="title">Self</span>: <span class="title">UIview</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">buzz</span><span class="params">()</span></span> &#123; <span class="comment">// Animation Logic&#125;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>只要遵守了这个协议的 UI 组件就都有 Buzz 这个方法了。与 extension 不同的是，只有遵守的这个协议才会有这个方法。并且我是用了 <code>where Self: UIView</code> 来声明这个协议只能被 UIView 及其子类遵守。</p>
<p>既然这样，我们就先给 <code>loginButton</code>, <code>passcodeTextField</code>, <code>errorMessageLabel</code>、<code>profileImageView</code> 加上这个协议吧。<br>对了，还有 pop</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Poppable</span> </span>&#123;&#125;</div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Poppable</span> <span class="title">where</span> <span class="title">Self</span>: <span class="title">UIView</span> </span>&#123;</div><div class="line"> <span class="function"><span class="keyword">func</span> <span class="title">pop</span><span class="params">()</span></span> &#123; <span class="comment">// Pop Animation Logic &#125;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>好了现在可以开始写了</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuzzableTextField</span>: <span class="title">UITextField</span>, <span class="title">Buzzable</span> </span>&#123;&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuzzableButton</span>: <span class="title">UIButton</span>, <span class="title">Buzzable</span> </span>&#123;&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuzzableImageView</span>: <span class="title">UIImageView</span>, <span class="title">Buzzable</span> </span>&#123;&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuzzablePoppableLabel</span>: <span class="title">UILabel</span>, <span class="title">Buzzable</span>, <span class="title">Poppable</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line">  <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> passcodTextField: <span class="type">BuzzableTextField</span>!</div><div class="line">  <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> loginButton: <span class="type">BuzzableButton</span>!</div><div class="line">  <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> errorMessageLabel: <span class="type">BuzzablePoppableLabel</span>!</div><div class="line">  <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> profileImageView: <span class="type">BuzzableImageView</span>!</div><div class="line">  </div><div class="line">  <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">didTabLoginButton</span><span class="params">(<span class="number">_</span> sender: UIButton)</span></span> &#123;</div><div class="line">    passcodTextField.buzz()</div><div class="line">    loginButton.buzz()</div><div class="line">    errorMessageLabel.buzz()</div><div class="line">    errorMessageLabel.pop()</div><div class="line">    profileImageView.buzz()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最方便的事情是我们都不需要使用子类就可能给任何的 UI 组件添加 pop 这个方法了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">class MyImageView: UIImageVIew, Buzzable, Poppable</div></pre></td></tr></table></figure>
<p>现在，类的名称就可以变的更加的灵活了。因为你已经知道了这些协议的方法，并且这些协议也描述了这些类，所以也不用 <code>MyBuzzablePoppableProfileImage</code> 了。</p>
<ul>
<li>没有子类</li>
<li>类名更灵活</li>
<li>更 Swifty</li>
</ul>
<p><a href="https://github.com/CepheusSun/Translate/tree/master/demos/Protocol%20Oriented%20Programming%20View%20in%20Swift%203">SourceCode</a></p>
<h3 id="That’s-it"><a href="#That’s-it" class="headerlink" title="That’s it!"></a>That’s it!</h3><p><a href="https://blog.bobthedeveloper.io/protocol-oriented-programming-view-in-swift-3-8bcb3305c427">原文地址</a></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>我是一名来自中国的 iOS 程序员, 对技术有着浓厚的兴趣, 在学习的过程中, 发现了很多来自国外的优秀博客。为了更好的学习这些文章, 产生了将这些文章翻译成中文的想法。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Introduction to Protocol Oriented Programming in Swift]]></title>
      <url>http://www.CepheusSun.com/Introduction%20to%20Protocol%20Oriented%20Programming%20in%20Swift.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>OOP is okay, but could’ve been better</p>
</blockquote>
<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>即使你还不知道 Class 和 Struct 基本的区别, 你也可以看这个文章。都知道 Struct 不能继承, 但是, 为什么呢？</p>
<p>如果你还不知道上面这个问题的答案, 花两分钟时间读一下下面这段代码。这些代码是写在 playground 上的</p>
<a id="more"></a>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HumanClass</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> name: <span class="type">String</span></div><div class="line">    <span class="keyword">init</span>(name: <span class="type">String</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.name = name</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> classHuman = <span class="type">HumanClass</span>(name: <span class="string">"Bob"</span>)</div><div class="line"><span class="comment">// "Bob"</span></div><div class="line">classHuman.name</div><div class="line"><span class="comment">// Created a "copied" object</span></div><div class="line"><span class="keyword">var</span> newClassHuman = classHuman</div><div class="line">newClassHuman.name = <span class="string">"Bobby"</span></div><div class="line">classHuman.name <span class="comment">//"Bobby"</span></div></pre></td></tr></table></figure>
<p>等我们改变 <code>newClassHuman</code> 的 <code>name</code> 属性为 <code>“Bobby”</code> 之后, <code>classHuman</code> 的 <code>name</code> 属性也变成 <code>“Bobby”</code> 了。</p>
<p>我们再看看 Struct </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">HumanStruct</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> name: <span class="type">String</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> humanStruct = <span class="type">HumanStruct</span>(name: <span class="string">"Bob"</span>)</div><div class="line"><span class="keyword">var</span> newHumanStruct = humanStruct</div><div class="line">newHumanStruct.name = <span class="string">"Bobby"</span></div><div class="line">humanStruct.name  <span class="comment">// "Bobby"</span></div></pre></td></tr></table></figure>
<p>看出来区别了吗？ 改变复制出来的 <code>newHumanStruct</code> 的 <code>name</code> 属性比呢没有改变原始的 <code>humanStruct</code> 的 <code>name</code> 属性。</p>
<p>对于 Class 来说, 这样的复制出来的对象, 和原来的对象都指向的是内存中的同一个对象。对任何一个对象的改变, 都会改变其他的对象(引用类型)。 对于 Struct 来说, 在传递和赋值的时候会创造一个新的对象(值类型)</p>
<p><a href="https://www.youtube.com/watch?v=MNnfUwzJ4ig">这里有一个介绍这个概念的视频</a></p>
<h3 id="Bye-OOP"><a href="#Bye-OOP" class="headerlink" title="Bye OOP"></a>Bye OOP</h3><p>你可能会比较好奇为什么我讲了半天跟面向协议编程没关系的东西。在我开始将 POP 对比 OOP 的优势之前， 你得理解引用类型和值类型的区别。</p>
<p>这里有一些毋庸置疑的 OOP 的优势, 也是劣势。</p>
<ol>
<li>创建一个子类, 这个子类会继承一些并不需要的属性和方法。这会让这个子类变的臃肿。</li>
<li>当你有很多的继承关系的时候, 找到各个类之间的关系, 就变的比较困难了。</li>
<li>当对象指向的内存中的同一块地址的时候, 如果对其中一个进行了修改, 所有的都会变。</li>
</ol>
<p>顺便看一下 UIKit 中的 OOP 吧</p>
<center><br><img src="https://cdn-images-1.medium.com/max/1600/1*hjEXB3PGUOSbxet0qUJRNA.png" alt=""><br>2015 WWDC_Hideous Structure<br></center>

<p>如果你是刚进苹果的工程师, 你能够搞定这些东西吗？我们在使用它的时候总觉的会比较混乱。</p>
<p>有人说 OOP 是一个让你的代码变的想意大利面那样乱的模块化方案。如果你想要更多吐槽 OOP 的内容. <a href="https://content.pivotal.io/blog/all-evidence-points-to-oop-being-bullshit">这儿</a><a href="https://krakendev.io/blog/subclassing-can-suck-and-heres-why">这儿</a><a href="http://www.smashcompany.com/technology/object-oriented-programming-is-an-expensive-disaster-which-must-end">这儿</a><a href="https://www.leaseweb.com/labs/2015/08/object-oriented-programming-is-exceptionally-bad/">还有这儿</a></p>
<h3 id="Welcome-POP"><a href="#Welcome-POP" class="headerlink" title="Welcome POP"></a>Welcome POP</h3><p>你可能已经猜到了, POP 的基础不是类, 而是值类型变量。没有引用，不像刚刚看到的金字塔结构。 POP 喜欢扁平的, 没那么多嵌套关系的代码。</p>
<p>只是吓你一下啦, 下面我们看看苹果爸爸的官方定义。</p>
<blockquote>
<p>“A protocol defines a blueprint of methods, properties… The protocol can then be adopted by a class, structure, or enumeration” — Apple</p>
<p>协议定义了方法属性的蓝图, 协议可以被类、结构体、还有枚举实现。</p>
</blockquote>
<h3 id="Getting-Real-with-POP"><a href="#Getting-Real-with-POP" class="headerlink" title="Getting Real with POP"></a>Getting Real with POP</h3><p>首先我们设计一下 human 这个东西。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Human</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> name: <span class="type">String</span> &#123;<span class="keyword">get</span> <span class="keyword">set</span>&#125;</div><div class="line">    <span class="keyword">var</span> race: <span class="type">String</span> &#123;<span class="keyword">get</span> <span class="keyword">set</span>&#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">sayHi</span><span class="params">()</span></span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这个协议中, 我没有申明 <code>drinking</code>. 它只是声明一些一定存在的东西。现在先不要纠结 <code>{get set}</code>. 它只是表明你可以给这个属性赋值也可以取值。先不要担心, 除非你要使用计算属性。</p>
<p>我们在定义一个韩国人 🇰🇷 结构体, 来实现这个协议。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Korean</span>: <span class="title">Human</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> name: <span class="type">String</span> = <span class="string">"Bob Lee"</span></div><div class="line">    <span class="keyword">var</span> race: <span class="type">String</span> = <span class="string">"Asian"</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">sayHi</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"Hi, I'm <span class="subst">\(name)</span>"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>只要这个结构体遵守了这个协议，它就必须要实现这个协议中的多有方法和属性。如果没有的话 Xcode 就会报错😡</p>
<p>只要是遵守了这个蓝图。你就可以做其他任何事情了, 盖一座长城也没关系。</p>
<p>我们在来实现一个美国人 🇺🇸</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Korean</span>: <span class="title">Human</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> name: <span class="type">String</span> = <span class="string">"Joe Smith"</span></div><div class="line">    <span class="keyword">var</span> race: <span class="type">String</span> = <span class="string">"White"</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">sayHi</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"Hi, I'm <span class="subst">\(name)</span>"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>很酷吧！ 不需要用那些 <code>init</code> <code>override</code> 关键字。 开始感兴趣了吗？</p>
<p><a href="https://www.youtube.com/watch?v=lyzcERHGH_8&amp;t=2s&amp;list=PL8btZwalbjYm5xDXDURW9u86vCtRKaHML&amp;index=1">Intro to Protocol Lesson</a></p>
<h3 id="Protocol-Inheritance"><a href="#Protocol-Inheritance" class="headerlink" title="Protocol Inheritance"></a>Protocol Inheritance</h3><p>如果你想要一个 <code>superman</code> 的协议。这个协议也需要遵守 <code>Human</code> 这个协议呢？</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">SuperHuman</span>: <span class="title">Human</span> </span>&#123;</div><div class="line"> <span class="keyword">var</span> canFly: <span class="type">Bool</span> &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125; </div><div class="line"> <span class="function"><span class="keyword">func</span> <span class="title">punch</span><span class="params">()</span></span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在如果你有一个遵守了 <code>SuperMan</code> 这个协议的类或者结构体的话，这个类也必须实现 <code>Human</code> 这个协议中的方法。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SuperSaiyan</span>: <span class="title">SuperMan</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> name: <span class="type">String</span> = <span class="string">"Goku"</span></div><div class="line">    <span class="keyword">var</span> race: <span class="type">String</span> = <span class="string">"Asian"</span></div><div class="line">    <span class="keyword">var</span> canFly: <span class="type">Bool</span> = <span class="literal">true</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">sayHi</span><span class="params">()</span></span> &#123; <span class="built_in">print</span>(<span class="string">"Hi, I'm <span class="subst">\(name)</span>"</span>) &#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">punch</span><span class="params">()</span></span> &#123; <span class="built_in">print</span>(<span class="string">"Puuooookkk"</span>) &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当然你也可以遵守多个协议。就可以实现多继承了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Example</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Example</span>: <span class="title">ProtocolOne</span>, <span class="title">ProtocolTwo</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>
<h3 id="Protocol-Extension"><a href="#Protocol-Extension" class="headerlink" title="Protocol Extension"></a>Protocol Extension</h3><p>下面才是协议最强大的特性了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Super Animal speaks English</span></div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">SuperAnimal</span> </span>&#123;</div><div class="line"> <span class="function"><span class="keyword">func</span> <span class="title">speakEnglish</span><span class="params">()</span></span> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>给这个协议加一个 <code>Extension</code></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">SuperAnimal</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">speakEnglish</span><span class="params">()</span></span> &#123; <span class="built_in">print</span>(<span class="string">"I speak English, pretty cool, huh?"</span>)&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在再创建一个遵守这个协议的类</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Donkey</span>: <span class="title">SuperAnimal</span> </span>&#123;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> ramon = <span class="type">Donkey</span>()</div><div class="line">ramon.speakEnglish()</div><div class="line"><span class="comment">//  "I speak English, pretty cool, huh?"</span></div></pre></td></tr></table></figure>
<p>如果你使用了 <code>Extension</code> 就可以给这个协议添加默认的实现和属性值了。这样不爽吗？</p>
<h3 id="Protocol-as-Type-Last"><a href="#Protocol-as-Type-Last" class="headerlink" title="Protocol as Type(Last)"></a>Protocol as Type(Last)</h3><p>如果我跟你说我能在一个数组中同时放一个对象和一个结构体呢？😮</p>
<p>我要用袋鼠打架求偶来写一个 demo 了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Fightable</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">legKick</span><span class="params">()</span></span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">StructKangaroo</span>: <span class="title">Fightable</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">legKick</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"Puuook"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassKangroo</span>: <span class="title">Fightable</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">legKick</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"Pakkkk"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后初始化俩袋鼠出来</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> structKangroo = <span class="type">StructKangaroo</span>()</div><div class="line"><span class="keyword">let</span> classKangroo = <span class="type">ClassKangroo</span>()</div></pre></td></tr></table></figure>
<p>现在就可以把他们放在一个数组中了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> kangaroos: [<span class="type">Fightable</span>] = [structKang, classKang]</div></pre></td></tr></table></figure>
<p>难以置信吧！ 再看看</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> kang <span class="keyword">in</span> kangaroos &#123; </div><div class="line"> kang.legKick() </div><div class="line">&#125;</div><div class="line"><span class="comment">// "Puuook"</span></div><div class="line"><span class="comment">// "Pakkkk"</span></div></pre></td></tr></table></figure>
<p>这很爽吧！ 想象在 OOP 中我们怎么实现这个东西呢？</p>
<h3 id="That’s-it"><a href="#That’s-it" class="headerlink" title="That’s it!"></a>That’s it!</h3><p><a href="https://blog.bobthedeveloper.io/protocol-oriented-programming-view-in-swift-3-8bcb3305c427">原文地址</a></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>我是一名来自中国的 iOS 程序员, 对技术有着浓厚的兴趣, 在学习的过程中, 发现了很多来自国外的优秀博客。为了更好的学习这些文章, 产生了将这些文章翻译成中文的想法。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxSwift MVVM API Manual 📃]]></title>
      <url>http://www.CepheusSun.com/RxSwift%20MVVM%20API%20Manual.html</url>
      <content type="html"><![CDATA[<p>现在我们掌握了所有的工具, 也明确了他存在的风险以及规避的方法。现在是时候想想应该怎么样最大可能的运用它了。以 MVVM 为例。</p>
<p>又很多方法来写 RxSwift 的 API。 我怕的做法是: 利用 RxSwift 很酷的观察者模式和很方便的操作符, 管理异步的任务。可能不是 100% 纯正的 RxSwift。 在将我做过很多的尝试试图将两种编程思维统一起来,但是我都失败了。</p>
<p>下面是一些我使用 RxSwift 的方法。</p>
<a id="more"></a>
<h3 id="Be-Consistent"><a href="#Be-Consistent" class="headerlink" title="Be Consistent"></a>Be Consistent</h3><p>这是在接口设计中最重要的事情, 如果你做出了选择。就坚持下去。</p>
<p>既然如此, 现在就开始吧！<strong>input vs output</strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FilterViewModel</span> </span>&#123;</div><div class="line">    <span class="comment">//Input</span></div><div class="line">    <span class="keyword">let</span> filterButtonEvents: <span class="type">BehaviorSubject</span>&lt;<span class="type">Int</span>&gt;</div><div class="line">    <span class="keyword">let</span> filterSelectionEvent: <span class="type">PublishSubject</span>&lt;<span class="type">Int</span>&gt;</div><div class="line">    </div><div class="line">    <span class="comment">//OutPut</span></div><div class="line">    <span class="keyword">let</span> currentFilter: <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;</div><div class="line">    <span class="keyword">let</span> shouldShowFilter: <span class="type">Observable</span>&lt;<span class="type">Bool</span>&gt;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有好几个可以用来声明 inout 和 output 的组合。这是我最喜欢的一个。</p>
<h4 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h4><p>通过将 <code>input</code> 声明成 <code>subject</code> 类型。我可以很方便的使用 <code>RxSwift</code> 中的各种操作符。我用的最多的应该是 <strong>throttle</strong>。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filterButtonEvents</div><div class="line">    .throttle(<span class="number">0.5</span>, scheduler: <span class="type">MainScheduler</span>.instance)</div><div class="line">    .subscribe(onNext: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] (counter) <span class="keyword">in</span></div><div class="line">    <span class="keyword">self</span>?.makeRequest()</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>当然用 observable 做 input 也是可以的。</p>
<h4 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h4><p>记住 <code>output</code> 应该是 <code>Observable</code>, 甚至是 <code>Subject</code>。 如果不这样的话，一些外部的类可能会错误的把这他当做是 <code>input</code> 这样就打破了封装了。当我想要发出一个变量的时候, 就是强制的释放。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(observable <span class="keyword">as</span>! <span class="type">PublishSubject</span>)</div><div class="line">    .onNext(<span class="string">"Ugly..."</span>)</div></pre></td></tr></table></figure>
<p>如果你知道有更好的方法, 一定要告诉我。我感觉这么干是在是不优雅😱。</p>
<h3 id="Safety"><a href="#Safety" class="headerlink" title="Safety"></a>Safety</h3><p>如果在一个简单的 Demo 中, 你可能记得做所有的细节。但在一个复杂的 app 中, 你几乎不可能记得住所有的实现细节。这里面可能有好几百个订阅者。 <code>Observable</code> 又是一个非常广泛的类型。都还没有说这个信号是热信号还是冷信号, 他是在主线程还是在后台线程中运行。这也是 <code>Driver</code> 被设计出来的原因, 为了让 API 更加明确。我们鼓励自己去创建一些单元。</p>
<p><strong>Driver</strong> 是一个热信号, 而且是运行在主线程当中的。好想忽略掉了冷信号？没关系, 创造一个就是了。我称他作 <strong>Template</strong> 因为冷信号就是是一个模版, 在这个模版中你可以用 <code>subscribe</code> 来运行他。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Template</span>&lt;<span class="title">Element</span>&gt; </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> observable: <span class="type">Observable</span>&lt;<span class="type">Element</span>&gt;</div><div class="line">    </div><div class="line">    <span class="keyword">init</span>(<span class="number">_</span> subscribe: @escaping (<span class="type">AnyObserver</span>&lt;<span class="type">Element</span>&gt;) -&gt; <span class="type">Disposable</span>) &#123;</div><div class="line">        observable = <span class="type">Observable</span>.create(subscribe)</div><div class="line">            .subscribeOn(<span class="type">MainScheduler</span>.instance)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样 <code>Template</code> 就能确保是一个在主线程中执行的冷信号。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">class MyViewModel &#123;</div><div class="line"> //Cold ❄️</div><div class="line"> let createRequest : Template&lt;Int&gt;</div><div class="line"> //Hot 🌶</div><div class="line"> let shouldShowElement : Driver&lt;Bool&gt;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样看, 程序中暴露的接口就很明确了。</p>
<h3 id="MVVM-State-Machine"><a href="#MVVM-State-Machine" class="headerlink" title="MVVM State Machine"></a>MVVM State Machine</h3><p>涉及到状态的管理的时候, <code>ViewController</code> 经常会变得很复杂。如果在 <code>viewModel</code> 中使用状态机, 来告诉 <code>ViewController</code> 在什么时候应该怎么做。<a href="http://curtclifton.net/generic-state-machine-in-swift">这里有一篇不错的文章</a></p>
<ul>
<li>把这些状态放在一个枚举里面, 而不是分散在各个地方。这样做可以极大的减少你的 <code>Observable</code>。</li>
<li>这也会强迫你吧更多的逻辑移到 <code>ViewModel</code> 里面。</li>
<li>让你的代码更加的具有声明性。<br>👋</li>
</ul>
<p><a href="http://swiftpearls.com/mvvm-state-manage.html">原文地址</a></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>我是一名来自中国的 iOS 程序员, 对技术有着浓厚的兴趣, 在学习的过程中, 发现了很多来自国外的优秀博客。为了更好的学习这些文章, 产生了将这些文章翻译成中文的想法。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxSwift Safety Manual 📚]]></title>
      <url>http://www.CepheusSun.com/RxSwift%20Safety%20Manual.html</url>
      <content type="html"><![CDATA[<p>RxSwift 提供了大量非常好用的工具, 让写代码更爽, 但是他也可能给你带来一些头疼的地方, 也可能是bug😱。 用了三个月之后我觉得我应该也可以给出一些建议来避免一些问题。</p>
<a id="more"></a>
<h3 id="Side-Effects"><a href="#Side-Effects" class="headerlink" title="Side Effects"></a>Side Effects</h3><p>在计算机科学中副作用这个词可能没那么容易理解, 因为这是一个非常宽泛的内容。在 <a href="http://softwareengineering.stackexchange.com/questions/40297/what-is-a-side-effect">Stackoverflow</a> 有一些比较好的讨论。</p>
<p>简单点说, 一个函数/闭包/…如果他们改变了 app 的状态, 都有可能带来一些副作用。在下面的例子中：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    <span class="comment">// 这样写没有副作用</span></div><div class="line">    observer.onNext(<span class="number">1</span>)</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> observableWithSideEffect = <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    <span class="comment">// 这里就会有副作用: 这个 closure 改变了 counter 的值</span></div><div class="line">    counter = counter + <span class="number">1</span></div><div class="line">    observer.onNext(counter)</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为什么在 RxSwift 中这个很重要呢? 因为对于冷信号❄️来说。<strong>每次被订阅他都会执行一下里面的任务</strong></p>
<p>我们两次订阅这个 <code>observableWithSideEffect</code>: </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">observableWithSideEffect</div><div class="line">    .subscribe(onNext: &#123; (counter) <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(counter)</div><div class="line">    &#125;).addDisposableTo(disposeBag)</div><div class="line"></div><div class="line">observableWithSideEffect</div><div class="line">    .subscribe(onNext: &#123; (counter) <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(counter)</div><div class="line">    &#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>我们可能希望他输出的是两个2.但是事实上它会输出2，3. 因为每次订阅都会分别执行, 所以在闭包里面的代码会被执行两次。<strong>所以 counter + 1 会执行两次</strong></p>
<p>也就是说, 如果你在这里面房里两个网络请求。<strong>它会发出两次请求</strong></p>
<p>我们怎么来解决这个问题呢？ 把这个冷信号转换成热信号💡。 使用 <strong>publish</strong> connect 还有 refCount 就可以了,这是<a href="http://www.tailec.com/blog/understanding-publish-connect-refcount-share">完整细节</a>。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> counter = <span class="number">1</span></div><div class="line"><span class="keyword">let</span> observableWithSideEffect = <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    counter = counter + <span class="number">1</span></div><div class="line">    observer.onNext(counter)</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;.publish()</div><div class="line"><span class="comment">// publish returns an observable with a shared subscription(hot).</span></div><div class="line"><span class="comment">// It's not active yet</span></div><div class="line"></div><div class="line">observableWithSideEffect</div><div class="line">    .subscribe(onNext: &#123; (counter) <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(counter)</div><div class="line">    &#125;).addDisposableTo(disposeBag)</div><div class="line"></div><div class="line">observableWithSideEffect</div><div class="line">    .connect()</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>这会输出 2，2</p>
<p>大多数情况下这就够了。但是还有一个更高级的 <em>shareReplay</em> 操作符。他使用了 <code>refCont</code> 操作符合 <code>replay</code>. <code>refCount</code> 也是一种 <code>connect</code> 但是它是自动管理的。他会在第一次订阅开始的时候开始。 replay 会把一些元素发送给那些 “迟到了” 的订阅者/</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> counter = <span class="number">1</span></div><div class="line"><span class="keyword">let</span> observableWithSideEffect = <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    counter = counter + <span class="number">1</span></div><div class="line">    observer.onNext(counter)</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">    &#125;.shareReplay(<span class="number">1</span>)</div><div class="line"></div><div class="line">observableWithSideEffect</div><div class="line">    .subscribe(onNext: &#123; (counter) <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(counter)</div><div class="line">    &#125;).addDisposableTo(disposeBag)</div><div class="line"></div><div class="line">observableWithSideEffect</div><div class="line">    .subscribe(onNext: &#123; (counter) <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(counter)</div><div class="line">    &#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<h3 id="Main-Queue"><a href="#Main-Queue" class="headerlink" title="Main Queue"></a>Main Queue</h3><p>当订阅行为是发生在 viewcontroller 上, 然后你不知道订阅行为是在那个线程中进行的。在刷新 UI 的时候确定这是在主线程中进行的。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">observableWithSideEffect</div><div class="line">    .observeOn(<span class="type">MainScheduler</span>.instance)</div><div class="line">    .subscribe(onNext: &#123; (counter) <span class="keyword">in</span></div><div class="line">        <span class="comment">// update UI</span></div><div class="line">    &#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<h3 id="Error-Events"><a href="#Error-Events" class="headerlink" title="Error Events"></a>Error Events</h3><p>如果你把好几个 <code>Observerable</code> 合并在了一起。如果其中有一个发生了错误。所有的 <code>Observerable</code> 都会结束。如果最开始是UI的话, 他就会停止响应。你应该好好的设计你的代码, 考虑好如果发生了 <code>complete</code> 或者 <code>error</code> 会发生什么。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">viewModel.importantText</div><div class="line">    .bindTo(myImportantLabel.rx.text)</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>如果 viewModel.importantText 因为什么原因发送出来一个error事件。这个 <code>bingding</code> 订阅也会结束。</p>
<p>如果你想避免这种情况的发生你可以使用 <strong>catchErrorJustReturn</strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">viewModel.importantText</div><div class="line">    .catchErrorJustReturn(<span class="string">"default text"</span>)</div><div class="line">    .bind(to: lable.rx.text)</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<h3 id="Driver"><a href="#Driver" class="headerlink" title="Driver"></a>Driver</h3><p><strong>Driver</strong> 是一个能够 <code>observeOn</code>、<code>catchErrorJustReturn</code>、<code>shareReplay</code> <strong>Observable</strong>.如果你想在viewModel中暴露一个安全的API。使用 <strong>Driver</strong> 是更好的做法。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">viewModel.importantText</div><div class="line">    .asDriver(onErrorJustReturn: <span class="string">"default text"</span>)</div><div class="line">    .drive(lable.rx.text)</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<h3 id="Reference-Cycles"><a href="#Reference-Cycles" class="headerlink" title="Reference Cycles"></a>Reference Cycles</h3><p>防止内存泄漏需要在话很多心思在避免引用循环上，当我们使用在订阅闭包中使用外部变量的时候。这个变量会被捕获为一个强引用。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">viewModel.priceString</div><div class="line">    .subscribe(onNext: &#123;(text) <span class="keyword">in</span></div><div class="line">        <span class="keyword">self</span>.priceLabel.text = text</div><div class="line">    &#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>这个 vc 强引用了 viewModel。现在这个 viewmodel 又因为在这个闭包中强引用了这个 vc。这就带来了循环引用。 <a href="https://krakendev.io/blog/weak-and-unowned-references-in-swift">“WEAK, STRONG, UNOWNED, OH MY!” - A GUIDE TO REFERENCES IN SWIFT</a></p>
<p>下面是解决办法</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">viewModel.priceString</div><div class="line">    .subscribe(onNext: &#123;[<span class="keyword">unowned</span> <span class="keyword">self</span>] (text) <span class="keyword">in</span></div><div class="line">        <span class="keyword">self</span>.priceLabel.text = text</div><div class="line">    &#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>使用 <strong>[unowned self]</strong> 语句之后就不用去考虑这个问题了🤗。</p>
<p>self 并不是唯一一个你需要担心的东西。你可能需要考虑所有你在在闭包中捕获的变量。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// out side the view controller</span></div><div class="line">        viewModel.priceString</div><div class="line">            .subscribe(onNext: &#123;[<span class="keyword">weak</span> viewController] (text) <span class="keyword">in</span></div><div class="line">                viewController?.priceLabel.text = text</div><div class="line">            &#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>这可能会比较复杂。这也是我<strong>强烈建议你尽量让你的闭包很短</strong>的原因。如果一个闭包超过了3、4行代码的话。可以考虑把这部分逻辑放在一个新的方法里面去。这样的话，这些依赖关系就会变的很明确了。你才能够很好的去考虑强弱应用的问题。</p>
<h3 id="Managing-your-subscriptions"><a href="#Managing-your-subscriptions" class="headerlink" title="Managing your subscriptions"></a>Managing your subscriptions</h3><p>记住要把你不需要订阅的订阅清楚掉。我曾经遇到过一次, 由于我没有及时的清除掉我的订阅, 当 <code>cell</code> 被重用的时候, 就会创建一个新的订阅, 导致了非常壮观的 <strong>bug</strong>。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> reuseBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="comment">// Called each time a cell is reused</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">configCell</span><span class="params">()</span></span> &#123;</div><div class="line">    viewModel</div><div class="line">        .subscribe(onNext: &#123; [<span class="keyword">unowned</span> <span class="keyword">self</span>] (element) <span class="keyword">in</span></div><div class="line">            <span class="keyword">self</span>.sendOpenNewDetailsScreen()</div><div class="line">        &#125;)</div><div class="line">&#125;</div><div class="line"><span class="comment">// Creating a new bag for each cell</span></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">prepareForReuse</span><span class="params">()</span></span> &#123;</div><div class="line">    reuseBag = <span class="type">DisposeBag</span>()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>RxSwift 是非常复杂的东西。但是如果你设定好了自己的一套规则, 然后在编码的时候坚持这个规则。这也没什么好难受的😇。 在使用 RxSwift 做的时候在每一层中考虑清楚你需要把哪些 API 暴露出来。这也能帮助你很快的发现 bug。</p>
<p><a href="http://swiftpearls.com/RxSwift-Safety-Manual.html">原文地址</a></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>我是一名来自中国的 iOS 程序员, 对技术有着浓厚的兴趣, 在学习的过程中, 发现了很多来自国外的优秀博客。为了更好的学习这些文章, 产生了将这些文章翻译成中文的想法。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxSwift For Dummies 🐣 Part3]]></title>
      <url>http://www.CepheusSun.com/RxSwift%20For%20Dummies%20Part3.html</url>
      <content type="html"><![CDATA[<p>好了, 接下来是第三个部分。<strong>Subjects</strong></p>
<p>学了之前内容. 我们可能已经发现了。之前学习的内容都是 <code>Observables</code> 输出事件的部分。我们可以订阅他, 就能知道他输出的事件了。但是我们还不能改变他。</p>
<a id="more"></a>
<p><strong>Subject</strong> 也是一个 <code>Observable</code> 但是他是能够同时输入和输出的。也就是说, 我们可以动态(强制)的在一个序列中发出信号。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> subject = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</div><div class="line"><span class="comment">// 可以直接转换，因为他也是一个 `Observable`</span></div><div class="line"><span class="keyword">let</span> observable: <span class="type">Observable</span>&lt;<span class="type">String</span>&gt; = subject</div><div class="line">observable.subscribe(onNext: &#123; (text) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(text)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div><div class="line"><span class="comment">// 只要你想发出一个新的事件, 就可以用 onNext 方法 </span></div><div class="line">subject.onNext(<span class="string">"Hey!"</span>)</div><div class="line">subject.onNext(<span class="string">"I'm back!"</span>)</div></pre></td></tr></table></figure>
<p><strong>onNext</strong> 是一个输出事件的方法。最后控制台会输出</p>
<blockquote>
<p>“Hey!”<br>“I’m back!”</p>
</blockquote>
<p><code>Subject</code> 到底有什么用呢? 为了很轻松的将 Rxswift 中声明式的世界和我们平常的世界连接起来。让我们在需要写实现式的代码的时候更 Rx </p>
<p>在一个纯正的 Rx 的世界里。当你需要有一个更完美的流的时候, 不用去管这个 <code>Observable</code> 是怎么实现的。这个东西我会另外的解释。反正, 如果你需要， 大胆的用吧。</p>
<p>上面式关于 Subject 最基本的内容。接下来我们学习一下怎么更好的使用 <strong>Subject</strong></p>
<h3 id="Hot🔥-vs-Cold❄️"><a href="#Hot🔥-vs-Cold❄️" class="headerlink" title="Hot🔥 vs Cold❄️"></a>Hot🔥 vs Cold❄️</h3><p>在第一篇文章中就已经提到过了热信号🔥和冷信号❄️。今天我们在深入的了解一点吧，因为 <strong>Subject</strong> 实际上是我们第一次接触到真正的热信号。</p>
<p>我们一定确定了，当我们使用 <strong>create</strong> 创建一个 <strong>Observable</strong> 的时候, 由于没有人订阅他，所以她是不会发送消息的。只有被 <strong>subscribe</strong>(订阅)之后才会开始发送消息出来。这就是我们叫它为冷信号❄️的原因。如果很不幸你忘了这个知识点。你可以回到第一篇文章去看看。热信号🔥 就是那种即使没有被订阅也会发出消息的信号, 这也是 <code>subject</code> 做的事情。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> subject = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</div><div class="line"><span class="keyword">let</span> observable: <span class="type">Observable</span>&lt;<span class="type">String</span>&gt; = subject</div><div class="line"><span class="comment">// 这个信号还没有被订阅, 所以这个值不回被接受到</span></div><div class="line">subject.onNext(<span class="string">"Am I too early for the party?"</span>)</div><div class="line"></div><div class="line">observable</div><div class="line">    .subscribe(onNext: &#123; (text) <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(text)</div><div class="line">    &#125;).addDisposableTo(disposeBag)</div><div class="line"><span class="comment">// 这个值发出来的时候已经有一个订阅者了, 所以这个值会打印出来</span></div><div class="line">subject.onNext(<span class="string">"🎉🎉🎉"</span>)</div></pre></td></tr></table></figure>
<p>很简单直接吧。如果在第一篇中你理解了冷信号的话, 理解热信号也是很自然的事情。</p>
<h3 id="Subject-Types"><a href="#Subject-Types" class="headerlink" title="Subject Types"></a>Subject Types</h3><p>常用的 <code>Subject</code> 有三种。 他们其实都差不多, 唯一的区别就是: 在订阅之前, 它会干什么。</p>
<h4 id="Publish-Subject"><a href="#Publish-Subject" class="headerlink" title="Publish Subject"></a>Publish Subject</h4><p>在上面的例子中已经说到了。 <strong>PublishSubject</strong> 会忽略掉在订阅之前发出来的信号。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> subject = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</div><div class="line"><span class="keyword">let</span> observable: <span class="type">Observable</span>&lt;<span class="type">String</span>&gt; = subject</div><div class="line">subject.onNext(<span class="string">"Ignored..."</span>)</div><div class="line">observable.subscribe(onNext: &#123; (text) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(text)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div><div class="line">subject.onNext(<span class="string">"Printed!"</span>)</div></pre></td></tr></table></figure>
<p>当你只关注你订阅之后发生了什么的时候, 就可以使用 <code>PublishSubject</code></p>
<h4 id="Replay-Subjects"><a href="#Replay-Subjects" class="headerlink" title="Replay Subjects"></a>Replay Subjects</h4><p><strong>ReplaySubject</strong> 会将最后 n 个值发出来, 即使是订阅发生之前的值。 这个 n 个值被被放在一个环从区里面。在这个例子中会缓有 3 个值被保留。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> subject = <span class="type">ReplaySubject</span>&lt;<span class="type">String</span>&gt;.create(bufferSize: <span class="number">3</span>)</div><div class="line"><span class="keyword">let</span> observable: <span class="type">Observable</span>&lt;<span class="type">String</span>&gt; = subject</div><div class="line"></div><div class="line">subject.onNext(<span class="string">"Not printed!"</span>)</div><div class="line">subject.onNext(<span class="string">"Printed"</span>)</div><div class="line">subject.onNext(<span class="string">"Printed!"</span>)</div><div class="line">subject.onNext(<span class="string">"Printed!"</span>)</div><div class="line"></div><div class="line">observable.subscribe(onNext: &#123; (text) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(text)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div><div class="line">subject .onNext(<span class="string">"Printed!"</span>)</div></pre></td></tr></table></figure>
<p>当我们需要知道订阅之前发生了什么的时候, 我们就需要使用 <code>ReplaySubject</code> 了。</p>
<h4 id="Behavior-Subject"><a href="#Behavior-Subject" class="headerlink" title="Behavior Subject"></a>Behavior Subject</h4><p><strong>BehaviorSubject</strong> 只会重复最后一个值。 更其他的 Subject 的同， 他在创建的时候就需要给定一个初始值。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> subject = <span class="type">BehaviorSubject</span>&lt;<span class="type">String</span>&gt;(value: <span class="string">"Initial value"</span>)</div><div class="line"><span class="keyword">let</span> observable: <span class="type">Observable</span>&lt;<span class="type">String</span>&gt; = subject</div><div class="line"></div><div class="line">subject.onNext(<span class="string">"Not printed!"</span>)</div><div class="line">subject.onNext(<span class="string">"Not printed!"</span>)</div><div class="line">subject.onNext(<span class="string">"Printed!"</span>)</div><div class="line"></div><div class="line">observable.subscribe(onNext: &#123; (text) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(text)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div><div class="line">subject.onNext(<span class="string">"Printed!"</span>)</div></pre></td></tr></table></figure>
<p>当你只需要知道最后一个值的时候。就需要使用 <code>BehaviorSubject</code></p>
<h3 id="Binding"><a href="#Binding" class="headerlink" title="Binding"></a>Binding</h3><p>你可以把一个 <code>Observable</code> 和 <code>Subject</code> 绑定到一起。也就是说可以让这个 <code>Observable</code> 将它的序列里的所有值都发送给这个 <code>Subject</code></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> subject = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</div><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.just(<span class="string">"I'm being passed around 😲"</span>)</div><div class="line">subject.subscribe(onNext: &#123; (text) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(text)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div><div class="line"></div><div class="line">observable.subscribe &#123; (event) <span class="keyword">in</span></div><div class="line">    subject.on(event)</div><div class="line">&#125;.addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>有一个语法糖来简化这些代码。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> subject = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</div><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.just(<span class="string">"I'm being passed around 😲"</span>)</div><div class="line">subject.subscribe(onNext: &#123; (text) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(text)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div><div class="line"></div><div class="line">observable.bind(to: subject).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>输出</p>
<blockquote>
<p>I’m being passed around 😲</p>
</blockquote>
<p><strong>Warning</strong></p>
<p>Binding 不仅仅会传递值, 他也会把完成和错误都传递过来。这种情况下这个 <code>Subject</code> 就会被释放。</p>
<h3 id="Quick-Example"><a href="#Quick-Example" class="headerlink" title="Quick Example"></a>Quick Example</h3><p>还是把第一篇文章中的 Demo 稍微修改一下吧。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Foundation</div><div class="line"><span class="keyword">import</span> RxCocoa</div><div class="line"><span class="keyword">import</span> RxSwift</div><div class="line"></div><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">GoogleModel</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> googleString = <span class="type">BehaviorSubject</span>&lt;<span class="type">String</span>&gt;(value: <span class="string">""</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">fetchNetString</span><span class="params">()</span></span>  &#123;</div><div class="line">        <span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">            <span class="keyword">let</span> session = <span class="type">URLSession</span>.shared</div><div class="line">            <span class="keyword">let</span> task = session.dataTask(with: <span class="type">URL</span>(string: <span class="string">"https://www.google.com"</span>)!, completionHandler: &#123; (data, response, error) <span class="keyword">in</span></div><div class="line">                </div><div class="line">                <span class="type">DispatchQueue</span>.main.async &#123;</div><div class="line">                    <span class="keyword">if</span> <span class="keyword">let</span> err = error &#123;</div><div class="line">                        observer.onError(err)</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        <span class="keyword">let</span> googleString = <span class="type">NSString</span>(data: data!, encoding: <span class="number">1</span>) <span class="keyword">as</span> <span class="type">String</span>?</div><div class="line">                        </div><div class="line">                        observer.onNext(googleString!)</div><div class="line">                        observer.onCompleted()</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">            task.resume()</div><div class="line">            <span class="keyword">return</span> <span class="type">Disposables</span>.create&#123;</div><div class="line">                task.cancel()</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">// Bind the observable to the subject</span></div><div class="line">        observable.bind(to: googleString).addDisposableTo(disposeBag)</div><div class="line">    &#125;</div><div class="line">&#125;        </div><div class="line"><span class="comment">// Bind the observable to the subject</span></div><div class="line">observable.bind(to: googleString).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>可以看到，在这个例子中，我们有一个视图模型将 <code>googleString</code> 这个 <code>subject</code> 暴露出来。让 <code>ViewController</code> 能够订阅。我们将这个 <code>observable</code> 绑定到这个 <code>subject</code> 上, 这样我们就可以在网络请求有结果的时候, 立马将请求结果传递到这给 <code>subject</code>。</p>
<h3 id="Bonus-Variable"><a href="#Bonus-Variable" class="headerlink" title="Bonus: Variable"></a>Bonus: Variable</h3><p>距离完完全全的 Rx 还差最后一点了。强行的获取之前发送出来的值。</p>
<p>这就是为什么会有 <strong>Variable</strong> 这个东西了。Variable 是对 BehaviorSubject 的简单包装。<a href="https://github.com/ReactiveX/RxSwift/blob/master/RxSwift/Subjects/Variable.swift">可以看一下</a> 它的实现是非常简单的。但它却非常的方便。</p>
<p>还是用一个小例子来说明这个问题吧。在这个例子中, 我们需要在任何时间都可以得到 “googleString” “当前” 的值。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> googleString = <span class="type">Variable</span>(<span class="string">"currentString"</span>)</div><div class="line"><span class="comment">// get</span></div><div class="line"><span class="built_in">print</span>(googleString.value)</div><div class="line"><span class="comment">// set</span></div><div class="line">googleString.value = <span class="string">"newString"</span></div><div class="line"><span class="comment">// 订阅</span></div><div class="line">googleString.asObservable().subscribe(onNext: &#123; (text) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(text)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>你一定会爱上他的。这基本上就是 <strong>RxSwift</strong> 的简单模式了。</p>
<p>看起来很简单吧，但是别忘了，还是有很多的坑的。还是小心为上。下一篇文章我会讲讲: 怎么写 Rxswift 最保险。</p>
<h3 id="That’s-it"><a href="#That’s-it" class="headerlink" title="That’s it!"></a>That’s it!</h3><p>你知道了太多了。剩下的就是 <code>Subjects</code> 了</p>
<p><a href="http://swiftpearls.com/RxSwift-for-dummies-3-Subjects.html">原文地址</a></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>我是一名来自中国的 iOS 程序员, 对技术有着浓厚的兴趣, 在学习的过程中, 发现了很多来自国外的优秀博客。为了更好的学习这些文章, 产生了将这些文章翻译成中文的想法。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxSwift For Dummies 🐣 Part2]]></title>
      <url>http://www.CepheusSun.com/RxSwift%20For%20Dummies%20Part2.html</url>
      <content type="html"><![CDATA[<p>我们在上一篇文章中介绍了 RxSwift 基础的部分. 现在我们来学习一些操作符, 来学习一下 <strong>FRP</strong> 中的<strong>F</strong>(unctional) 部分</p>
<a id="more"></a>
<h3 id="Schedulers"><a href="#Schedulers" class="headerlink" title="Schedulers"></a>Schedulers</h3><p>我们先学习一下之前就已经提到过的, 但是没有详细介绍的 <strong>Schedulers</strong></p>
<p><strong>Schedulers</strong> 最常见的用法就是告诉 <code>Observables</code> 和订阅者 应该在哪个线程或者队列中发送事件,或者通知。</p>
<p>关于 <code>Schedulers</code> 最常见的操作符是<code>observerOn</code> 和 <code>subscribleOn</code></p>
<p>通常情况下 <code>Observables</code> 会在它被订阅的那个线程发送事件或者通知。</p>
<h4 id="ObserveOn"><a href="#ObserveOn" class="headerlink" title="ObserveOn"></a>ObserveOn</h4><p><strong>ObserveOn</strong> 指定 <code>Observables</code> 发送事件的线程或者队列。它不会改变它执行的线程。</p>
<p>举一个跟 part1 很相似的例子：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    <span class="type">DispatchQueue</span>.global(qos: .<span class="keyword">default</span>).async &#123;</div><div class="line">        <span class="type">Thread</span>.sleep(forTimeInterval: <span class="number">10</span>)</div><div class="line">        <span class="type">DispatchQueue</span>.main.async &#123;</div><div class="line">            observer.onNext(<span class="string">"Hello dummy 🐥"</span>)</div><div class="line">            observer.onCompleted()</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>假设订阅者是一个 UI 层的东西， 比如说是一个 <code>UIViewController</code> 或者 <code>UIView</code></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="type">DispatchQueue</span>.global(qos: .<span class="keyword">default</span>).async</div></pre></td></tr></table></figure>
<p>我们把这个任务放在子线程中去执行， 以免阻塞 UI </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DispatchQueue.main.async&#123; ...</div></pre></td></tr></table></figure>
<p>我们需要在主线程中去更新 UI, 你应该知道 <code>UIKit</code> 要求对 <code>UI</code> 的操作都必须在主线程中进行。所以这些操作对你来说一定是很熟悉的了。</p>
<p>记下来使用 <strong>ObserveOn</strong> 来重构一下这段代码</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create(&#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    <span class="type">DispatchQueue</span>.global(qos: .<span class="keyword">default</span>).async &#123;</div><div class="line">        <span class="type">Thread</span>.sleep(forTimeInterval: <span class="number">10</span>)</div><div class="line">        observer.onNext(<span class="string">"Hello dummy 🐥"</span>)</div><div class="line">        observer.onCompleted()</div><div class="line">    &#125;</div><div class="line">        <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">    &#125;).observeOn(<span class="type">MainScheduler</span>.instance)</div></pre></td></tr></table></figure>
<p>我们删掉了 <code>DispatchQueue.main.async {}</code> 然后添加了 <code>.observeOn(MainScheduler.instance)</code>。 这个就可以让所有的事件都在主线程中被发送出去。就是这么简单。 <code>&quot;Hello dummy 🐥&quot;</code> 这个元素就能够很安全的被发送给 UI 的元素， 因为我们可以很确定他会在主线程中被发送出去。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">observable.subscribe(onNext: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] (element) <span class="keyword">in</span></div><div class="line">    <span class="keyword">self</span>?.label.text = element</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p><strong>ObserveOn</strong> 大概是最常见的线程调度操作符了。你希望 <code>Observables</code> 包含了所有的逻辑, 和线程操作, 让订阅者尽可能的简单。所以我们接下来再了解一下 <code>subscribeOn</code> 这个操作符。</p>
<h4 id="SubscribeOn-Optional"><a href="#SubscribeOn-Optional" class="headerlink" title="SubscribeOn (Optional)"></a>SubscribeOn (Optional)</h4><p>这是一个非常先进的操作符。你可以先跳过这部分, 以后再来研究🐤</p>
<p><code>subscribeOn</code> 跟 <code>ObserveOn</code> 非常的相似。<strong>但是他只能改变 <code>Observable</code> 将要执行的任务所在的线程。</strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    <span class="type">Thread</span>.sleep(forTimeInterval: <span class="number">10</span>)</div><div class="line">    observer.onNext(<span class="string">"Hello dummy 🐥"</span>)</div><div class="line">    observer.onCompleted()</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125; </div><div class="line">observable</div><div class="line">    .subscribeOn(<span class="type">ConcurrentDispatchQueueScheduler</span>(qos: .<span class="keyword">default</span>))</div><div class="line">    .subscribe(onNext: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] (element) <span class="keyword">in</span></div><div class="line">        <span class="keyword">self</span>?.label.text = element</div><div class="line">    &#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>上面的代码中, 我删掉了 <code>Observable</code> 中的 <code>DispatchQueue.global(qos: .default).async {}</code>  是这个订阅者告诉他应该在一个 <code>global queue</code> 中执行下面的操作, 以免阻塞 UI. 很明显这回导致一个异常的抛出, 之前提到过： 这回导致 <code>Observable</code> 在全局队列中执行, <strong>也会在全局队列中发出事件</strong>。只需要添加在 <code>Observable</code> 中添加 <code>.observeOn(MainScheduler.instance)</code>就能避免这个问题。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    <span class="type">Thread</span>.sleep(forTimeInterval: <span class="number">10</span>)</div><div class="line">    observer.onNext(<span class="string">"Hello dummy 🐥"</span>)</div><div class="line">    observer.onCompleted()</div><div class="line">        <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;.observeOn(<span class="type">MainScheduler</span>.instance)      </div><div class="line">observable</div><div class="line">    .subscribeOn(<span class="type">ConcurrentDispatchQueueScheduler</span>(qos: .<span class="keyword">default</span>))</div><div class="line">    .subscribe(onNext: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] (element) <span class="keyword">in</span></div><div class="line">        <span class="keyword">self</span>?.label.text = element</div><div class="line">    &#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>添加之后，就能够发现刚刚说到的问题已经解决掉了。</p>
<p>我们什么时候应该用 <code>observeOn</code> 呢？最常见的场景是:如果在 <code>Observable</code> 不需要在后台执行耗时操作(读取数据, 大的计算任务)的话.我不认为这是非常频繁的事情。但是，come on!  多知道一个你能用的工具 🛠不是件很 cool 的事情吗？</p>
<h4 id="Scheduler-Types"><a href="#Scheduler-Types" class="headerlink" title="Scheduler Types"></a>Scheduler Types</h4><p>做为 RxSwift 菜鸟, 好奇 <code>observeOn</code> 和 <code>MainScheduler.instance</code> 没什么关系。你可以自己创建一个线程或者直接使用已经创建好了的。如果你很好奇的话<a href="https://github.com/ReactiveX/RxSwift/blob/master/Documentation/Schedulers.md">这里有很多</a>。 这也没什么好复杂的， 就是对 GCD 和 NSOperation 的封装而已。</p>
<h3 id="Transforming-Operators"><a href="#Transforming-Operators" class="headerlink" title="Transforming Operators"></a>Transforming Operators</h3><p>现在你已经知道两种操作符了: 创建操作符(<code>create</code>、<code>interval</code>、<code>just</code>)  和 功能操作符(<code>observeOn</code>, <code>subscribeOn</code>)。 现在再学一些转换操作符吧！</p>
<h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><p>这是非常简单，但非常有用的操作符。它也可能是你未来最常用的一个操作符号。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observerable = <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    observer.onNext(<span class="number">1</span>)</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;        </div><div class="line"><span class="keyword">let</span> boolObservable: <span class="type">Observable</span>&lt;<span class="type">Bool</span>&gt; = observerable.<span class="built_in">map</span>&#123;(element) -&gt; <span class="type">Bool</span> <span class="keyword">in</span></div><div class="line">    <span class="keyword">if</span> element == <span class="number">0</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">&#125;</div><div class="line">boolObservable.subscribe(onNext: &#123; (boolElement) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(boolElement)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p><strong>Map</strong> 操作符号，改变了序列中值的类型。他映射了一个 <code>Observable</code> 所以他以你告诉他的新的方式发送事件。在这个例子中, 我们将一个 <code>Int</code> 类型的 <code>Observable</code> 映射成了一个 <code>Bool</code> 类型。 </p>
<p>所以这个例子的结果是</p>
<blockquote>
<p>true</p>
</blockquote>
<h4 id="Scan"><a href="#Scan" class="headerlink" title="Scan"></a>Scan</h4><p><strong>scan</strong> 要复杂一些了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    observer.onNext(<span class="string">"D"</span>)</div><div class="line">    observer.onNext(<span class="string">"U"</span>)</div><div class="line">    observer.onNext(<span class="string">"M"</span>)</div><div class="line">    observer.onNext(<span class="string">"M"</span>)</div><div class="line">    observer.onNext(<span class="string">"Y"</span>)</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;</div><div class="line">observable.scan(<span class="string">""</span>) &#123; (lastValue, currentValue) -&gt; <span class="type">String</span> <span class="keyword">in</span></div><div class="line">    <span class="keyword">return</span> lastValue + currentValue</div><div class="line">&#125;.subscribe(onNext: &#123; (element) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(element)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>在这个例子中会输出</p>
<blockquote>
<p>D<br>DU<br>DUM<br>DUMM<br>DUMMY</p>
</blockquote>
<p><strong>scan</strong>操作符, 让你可以通过上一个值来改变这一个值。他也被称作元素堆积。上面代码中的 <code>“”</code>是扫描参数传递的起始值。还是想着能干什么呢？</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    observer.onNext(<span class="number">1</span>)</div><div class="line">    observer.onNext(<span class="number">2</span>)</div><div class="line">    observer.onNext(<span class="number">3</span>)</div><div class="line">    observer.onNext(<span class="number">4</span>)</div><div class="line">    observer.onNext(<span class="number">5</span>)</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;</div><div class="line">observable.scan(<span class="number">1</span>) &#123; (lastValue, currentValue) -&gt; <span class="type">Int</span> <span class="keyword">in</span></div><div class="line">    <span class="keyword">return</span> lastValue + currentValue</div><div class="line">&#125;.subscribe(onNext: &#123; (element) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(element)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>这是通过 <strong>scan</strong> 操作符计算 5 的阶层。 算出来的答案是: 120</p>
<p><a href="http://rx-marin.com/post/rxswift-state-with-scan/">Marin 给了一个更有用的例子</a> 关于按钮的 selected 状态</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> button = <span class="type">UIButton</span>()</div><div class="line">button.rx.tap.scan(<span class="literal">false</span>) &#123; last, new <span class="keyword">in</span></div><div class="line">    <span class="keyword">return</span> !last</div><div class="line">&#125;.subscribe(onNext: &#123; (element) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(<span class="string">"tap: <span class="subst">\(element)</span>"</span>)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>现在你知道他能干什么了吧？ 当然还有很多其他的转换操作符。</p>
<h3 id="Filtering-Operators"><a href="#Filtering-Operators" class="headerlink" title="Filtering Operators"></a>Filtering Operators</h3><p>发出事件是很重要的事情, 但是很多情况下我们还需要过滤掉一些没用的事件。这就是 filter 操作符所做的事什么。</p>
<h4 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h4><p>决定那些事件是要响应的那些是要过滤掉的。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observerable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    observer.onNext(<span class="string">"🎁"</span>)</div><div class="line">    observer.onNext(<span class="string">"💩"</span>)</div><div class="line">    observer.onNext(<span class="string">"💩"</span>)</div><div class="line">    observer.onNext(<span class="string">"💩"</span>)</div><div class="line">    observer.onNext(<span class="string">"🎁"</span>)</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;</div><div class="line">observerable.<span class="built_in">filter</span> &#123; (element) -&gt; <span class="type">Bool</span> <span class="keyword">in</span></div><div class="line">    <span class="keyword">return</span> element == <span class="string">"🎁"</span></div><div class="line">&#125;.subscribe(onNext: &#123; (element) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(element)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>输出</p>
<blockquote>
<p>🎁<br>🎁</p>
</blockquote>
<h4 id="Debounce"><a href="#Debounce" class="headerlink" title="Debounce"></a>Debounce</h4><p>简单且有用</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">observerable</div><div class="line">    .debounce(<span class="number">2</span>, scheduler: <span class="type">MainScheduler</span>.instance)</div><div class="line">    .subscribe(onNext: &#123; (element) <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(element)</div><div class="line">    &#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p><strong>debounce</strong> 会过滤掉2秒以内的所有事件, 如果事件a在上一次事件之后的0.5秒被发送出来。那么他就会被过滤掉。如果他在上次事件的2.5秒被发送出来。那么他就会被接受到。需要注意的是, 如果就算当前时间之后没有其他的事件，他也要在2秒之后被发送出来。</p>
<blockquote>
<p>译者: 需要注意的 <code>debounce</code> 和 <code>throttle</code> 的区别。还有 Obj-C 中的 <code>ReactiveCocoa</code> 中的 throttle 的区别。</p>
</blockquote>
<h3 id="Combining-Operator"><a href="#Combining-Operator" class="headerlink" title="Combining Operator"></a>Combining Operator</h3><p>联合操作符让你可以把多个 <code>Observable</code> 转换成一个。</p>
<h4 id="Merge"><a href="#Merge" class="headerlink" title="Merge"></a>Merge</h4><p>合并只是将多个 <code>Observable</code> 发送的事件合并到一个 <code>Observable</code> 中。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    observer.onNext(<span class="string">"🎁"</span>)</div><div class="line">    observer.onNext(<span class="string">"🎁"</span>)</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> observable2 = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    observer.onNext(<span class="string">"💩"</span>)</div><div class="line">    observer.onNext(<span class="string">"💩"</span>)</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;</div><div class="line"><span class="type">Observable</span>.of(observable, observable2).merge().subscribe(onNext: &#123; (element) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(element)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<blockquote>
<p>🎁<br>🎁<br>💩<br>💩</p>
</blockquote>
<h4 id="Zip"><a href="#Zip" class="headerlink" title="Zip"></a>Zip</h4><p><strong>Zip</strong> 将每个 <code>Observable</code> 发出来的值合并成一个值。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    observer.onNext(<span class="string">"🎁"</span>)</div><div class="line">    observer.onNext(<span class="string">"🎁"</span>)</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> observable2 = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    observer.onNext(<span class="string">"💩"</span>)</div><div class="line">    observer.onNext(<span class="string">"💩"</span>)</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;</div><div class="line"><span class="type">Observable</span>.<span class="built_in">zip</span>(observable ,observable2).subscribe(onNext: &#123; (element) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(element)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<blockquote>
<p>🎁💩<br>🎁💩</p>
</blockquote>
<p>这是一个很有用的操作符。还是举一个例子吧！ 假如你有两个网络请求, 你需要等到他们都结束之后再进行下一步操作。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    <span class="type">DispatchQueue</span>.main.async &#123;</div><div class="line">        <span class="type">Thread</span>.sleep(forTimeInterval: <span class="number">3</span>)</div><div class="line">        observer.onNext(<span class="string">"fetched from sever 1"</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> observable2 = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    <span class="type">DispatchQueue</span>.main.async &#123;</div><div class="line">        <span class="type">Thread</span>.sleep(forTimeInterval: <span class="number">2</span>)</div><div class="line">        observer.onNext(<span class="string">"fetched from sever 2"</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;</div><div class="line"><span class="type">Observable</span>.<span class="built_in">zip</span>(observable, observable2)</div><div class="line">    .subscribe(onNext: &#123; (element) <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(element)</div><div class="line">    &#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p><strong>Zip</strong> 会等到两个 <code>Observable</code> 都结束之后将两个请求的结果合并成一个值发送出来。</p>
<h3 id="Other-Operators"><a href="#Other-Operators" class="headerlink" title="Other Operators"></a>Other Operators</h3><p>还有很多有趣的操作符, 比如 <code>reduce</code>、 <code>takeUntil</code> 等等。我认为如果你什么时候有了一些想法, 你也会很容易的找到他们。他们非常的强大, 能让你快速简单的操作事件序列。</p>
<h3 id="Mixing-Operators"><a href="#Mixing-Operators" class="headerlink" title="Mixing Operators"></a>Mixing Operators</h3><p>这个教程不需要具体的实例项目, 但是能快的将各种操作符搭配使用。我们来做一个实验吧：工具根据事件改变视图的颜色。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="type">Observable</span>&lt;<span class="type">NSDate</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">    <span class="type">DispatchQueue</span>.global(qos: .<span class="keyword">default</span>).async &#123;</div><div class="line">        <span class="keyword">while</span> <span class="literal">true</span> &#123;</div><div class="line">            <span class="type">Thread</span>.sleep(forTimeInterval: <span class="number">0.01</span>)</div><div class="line">            observer.onNext(<span class="type">NSDate</span>())</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">    &#125;<span class="comment">// 需要在主线程中刷新 UI</span></div><div class="line">    .observeOn(<span class="type">MainScheduler</span>.instance)</div><div class="line">    <span class="comment">// 我们只需要能够被2整除的事件</span></div><div class="line">    .<span class="built_in">filter</span> &#123; (date) -&gt; <span class="type">Bool</span> <span class="keyword">in</span></div><div class="line">        <span class="keyword">return</span> <span class="type">Int</span>(date.timeIntervalSince1970) % <span class="number">2</span> == <span class="number">0</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 将数据转换成颜色</span></div><div class="line">    .<span class="built_in">map</span> &#123; (date) -&gt; <span class="type">UIColor</span> <span class="keyword">in</span></div><div class="line">        <span class="keyword">let</span> interval: <span class="type">Int</span> = <span class="type">Int</span>(date.timeIntervalSince1970)</div><div class="line">        <span class="keyword">let</span> color1 = <span class="type">CGFloat</span>( <span class="type">Double</span>(((interval * <span class="number">1</span>) % <span class="number">255</span>)) / <span class="number">255.0</span>)</div><div class="line">        <span class="keyword">let</span> color2 = <span class="type">CGFloat</span>( <span class="type">Double</span>(((interval * <span class="number">2</span>) % <span class="number">255</span>)) / <span class="number">255.0</span>)</div><div class="line">        <span class="keyword">let</span> color3 = <span class="type">CGFloat</span>( <span class="type">Double</span>(((interval * <span class="number">3</span>) % <span class="number">255</span>)) / <span class="number">255.0</span>)</div><div class="line">        <span class="keyword">return</span> <span class="type">UIColor</span>(red: color1, green: color2, blue: color3, alpha: <span class="number">1</span>)</div><div class="line">    &#125;</div><div class="line">    .subscribe(onNext: &#123;[<span class="keyword">weak</span> <span class="keyword">self</span>] (color) <span class="keyword">in</span></div><div class="line">        <span class="keyword">self</span>?.demoView.backgroundColor = color</div><div class="line">    &#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>You can find more examples in the <a href="https://github.com/ReactiveX/RxSwift/blob/master/Rx.playground/Pages/Combining_Operators.xcplaygroundpage/Contents.swift">RxSwfit playgrounds</a></p>
<h3 id="That’s-it"><a href="#That’s-it" class="headerlink" title="That’s it!"></a>That’s it!</h3><p>你知道了太多了。剩下的就是 <code>Subjects</code> 了</p>
<p><a href="http://swiftpearls.com/RxSwift-for-dummies-2-Operators.html">原文地址</a></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>我是一名来自中国的 iOS 程序员, 对技术有着浓厚的兴趣, 在学习的过程中, 发现了很多来自国外的优秀博客。为了更好的学习这些文章, 产生了将这些文章翻译成中文的想法。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxSwift For Dummies 🐣 Part1]]></title>
      <url>http://www.CepheusSun.com/RxSwift%20For%20Dummies%20Part1.html</url>
      <content type="html"><![CDATA[<p><strong>RxSwift</strong> 真的是一个非常值得学习的东西。非常遗憾的是我没有研究所有的架构模式MVVM VIPER Routing。</p>
<p>要非常好的讲出来RxSwift到底是个什么东西，我也说不好。毕竟他能做太多的事情了。普遍认为，他是函数响应式编程中非常重要的观察者模式。在最初的定义中,他并不就是函数响应式编程。他最初的设计灵感就是来自于函数响应式(<strong>FRP</strong>), 所以也可以说它包含了函数响应式的特性。</p>
<p>如果你不知道什么是 <strong>FRP</strong> 的话, 不用担心, 在这个教程中你会自然而然的理解什么是 <strong>FRP</strong>。</p>
<p>通过对 RXSwift 的深入研究, 我得到了很多的启发, 同时也被很多的问题困扰。相信你也会这样。</p>
<p>需要花很多个小时的时间来适应新的思维模式，唯一能确定的是，一旦你适应了，你就再也不想回到从前了。</p>
<p>在这个教程中，我会尽可能的节约你的时间，并且解释的尽可能的详细。想教幼儿园的小朋友一样。</p>
<p>开始学习之前, 请确定你已经掌握了 Swift 和 UIkit 的基础知识. </p>
<a id="more"></a>
<h3 id="The-Why"><a href="#The-Why" class="headerlink" title="The Why?"></a>The Why?</h3><p>写 UI 的时候经常会处理一些异步的操作。我们很早就知道要使用观察者模式来实现这个东西。我相信你现在已经非常熟悉代理模式了。代理模式是一种很酷的设计模式。但是写起来真的很烦😡。</p>
<center><br><img src="http://swiftpearls.com/images/cry.jpg" alt=""><br></center>

<ul>
<li>代理模式需要些很多的模版代码: 创建一个协议, 声明一个 <code>delegate</code> 变量, 遵守协议, 设置代理…</li>
<li>写完这么多模版代码,可能你不小心就忘了其中的某个步骤。 比如说 <code>object.delegete = self</code></li>
<li>管理起来非常麻烦。他需要在好几个文件中跳跃。</li>
</ul>
<p>RxSwift 解决了这个问题。他能够让你通过声明的方式使用观察者模式。减少了管理的负担, 当然，也不用写那么多模版代码。</p>
<p>我刚刚开始了一个项目，在这个项目中，至今还没有写一个 <code>delegate</code></p>
<h3 id="Basic-Example"><a href="#Basic-Example" class="headerlink" title="Basic Example"></a>Basic Example</h3><p>talk is cheap, show you the code.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleClass</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">runExample</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="comment">// OBSERVABLE //</span></div><div class="line">        <span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span></div><div class="line">            <span class="type">DispatchQueue</span>.global(qos: .<span class="keyword">default</span>).async &#123;</div><div class="line">                <span class="type">Thread</span>.sleep(forTimeInterval: <span class="number">10</span>)</div><div class="line">                observer.onNext(<span class="string">"Hello dummy 🐣"</span>)</div><div class="line">                observer.onCompleted()</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// OBSERVER //</span></div><div class="line">        </div><div class="line">        observable.subscribe(onNext:&#123; (element) <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(element)</div><div class="line">        &#125;).addDisposableTo(disposeBag)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这就是最基本的例子, 在这个示例中, 我们声明了一个 runExample 方法。在这个方法中执行的是一些 RxSwift 中的事情。想一下在这个例子中发生了什么吧。</p>
<h3 id="Observable-📡"><a href="#Observable-📡" class="headerlink" title="Observable 📡"></a>Observable 📡</h3><p>我们还是从 RxSwift 中最基本的构建单元开始吧。 <code>Observable</code>。 它其实非常的简单。 <code>Observable</code> 执行某些动作, 然后观察者能够对此作出一些反应。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create &#123; (observer) -&gt; <span class="type">Disposable</span></div><div class="line">    <span class="type">DispatchQueue</span>.global(qos: .<span class="keyword">default</span>).async &#123;</div><div class="line">        <span class="comment">// Simulate some work</span></div><div class="line">        <span class="type">Thread</span>.sleep(forTimeInterval: <span class="number">10</span>)</div><div class="line">        observer.onNext(<span class="string">"Hello dummy 🐣"</span>)</div><div class="line">        observer.onCompleted()</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">&#125;</div><div class="line">                </div><div class="line">observable.subscribe(onNext:&#123; (element) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(element)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>现在我们有了一个 <code>Observable</code> 信号了。这种信号只有在被订阅之后才会执行它也被叫做:冷信号❄️。相反热信号🔥是那种既是没有被订阅也会执行的信号。</p>
<p>在下一步们我们会具体的讲解二者的区别。现在你只需要理解的是: 因为你初始化出来的是一个冷❄️信号<code>Hello dummy 🐣</code>这个值是不会被发送出来的。冷信号❄️只有在有东西订阅之后才会发送消息。</p>
<p>我们一步一步的来分析一下这究竟是什么意思。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="type">DispatchQueue</span>.global(qos: .<span class="keyword">default</span>).async &#123;...&#125;</div></pre></td></tr></table></figure>
<p>这行代码保证这个 <code>Observable</code> 信号在主线程中发送消息。其实 RxSwift 是有一个调度机制, 但是我现在还不想那么早告诉你, 不然你该记不值了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">observer.onNext(<span class="string">"Hello dummy 🐣"</span>)</div></pre></td></tr></table></figure>
<p>一个 <code>Observable</code> 信号发出的消息从时间上来看, 可以被看作是一个 <strong>序列</strong>。在这个序列中可能有无限多的值。我们可以通过 <code>onNext</code> 方法类将这些值发送出来。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">observer.onCompleted()</div></pre></td></tr></table></figure>
<p>当这个序列已经发送完了所有的值之后，它可以发送一个 <code>Completed</code> 或者 <code>Error</code>出来。之后这个信号就不能在产生更多的值了, 然后就会随着一个闭包被释放掉。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> <span class="type">Disposables</span>.create()</div></pre></td></tr></table></figure>
<p>每一个  <code>Observable</code> 信号都要返回一个 <code>Disposable</code>.</p>
<p>使用 <code>Disposables.create()</code> 如果你不想在信号被释放的时候处理其他事情。你可以看看<a href="https://github.com/ReactiveX/RxSwift/blob/master/RxSwift/Disposables/NopDisposable.swift">NopDisposable</a>的实现，你会发现，他什么事情都没有做，只是一些空方法。</p>
<h3 id="Disposable"><a href="#Disposable" class="headerlink" title="Disposable"></a>Disposable</h3><p><code>Disposable</code> 对象必须要在 <code>Observable</code> 中返回, 它是用来在<code>Observable</code>不能再正常的完成的时候清除掉这些信号的。比如说你可以使用 <strong>AnonymousDisposable</strong>:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> <span class="type">Disposables</span>.create(with: &#123;</div><div class="line">    connection.close()</div><div class="line">    database.closeImportantSomething()</div><div class="line">    cache.clear()</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>只有当信号被提前释放或者程序手动调用了 <code>dispose()</code> 方法, <code>Disposable</code> 才会被调用。但是在多数情况下, <code>dispose()</code> 方法都是通过 <strong>Dispose Bags</strong> 自动调用的。别着急，你可以在一些更具体的例子中自己实现这个东西。</p>
<h3 id="Observer-🕵"><a href="#Observer-🕵" class="headerlink" title="Observer 🕵"></a>Observer 🕵</h3><p>我们创建的 <code>Observable</code> 是冷信号❄️。 除非我们订阅了它，不然它是不会发送信号的。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">observable.subscribe(onNext: &#123;(element) <span class="keyword">in</span></div><div class="line">  <span class="built_in">print</span>(element)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p>这就是订阅信号的方法。在 <code>subscribeNext</code> 方法中一个订阅就发生了。这个方法也会返回一个 <code>Disposable</code>.这个 <code>Disposable</code> 就是对这个订阅的记录</p>
<p>这个 <code>Observable</code> 就开始工作了, 10秒之后, 你就会在控制台看见</p>
<blockquote>
<p>Hello dummy 🐣</p>
</blockquote>
<p><code>subscribe(onNext:)</code> 只会在Next事件发送出来的时候响应。也可以使用 <code>subscribe(onCompleted:)</code> 和 <code>subscribe(onError:)</code> 响应对应的事件。</p>
<h3 id="Dispose-Bag-🗑"><a href="#Dispose-Bag-🗑" class="headerlink" title="Dispose Bag 🗑"></a>Dispose Bag 🗑</h3><p>唯一一个还有点神秘的东西就是 <code>addDisposableTo</code> 这个方法了。</p>
<blockquote>
<p>Dispose bags are used to return ARC like behavior to RX. When a DisposeBag is deallocated, it will call dispose on each of the added disposables.</p>
<p>Dispose bags 就像是一个垃圾筐。就像是 AutoreleasePool 一样，当这个垃圾筐被释放的时候, 里面的所有东西都会被释放掉。</p>
</blockquote>
<p>当你订阅一个信号的时候, 你就需要把你创建出来的 <code>Disposable</code> 添加到这个框里面。当这的框被释放的时候(ExampleClass 对象 dealloc 的时候)。这些没有执行完的<code>Disposable</code>就会被释放掉。</p>
<p>它被用作释放在闭包中引用的值, 以及没用的资源, 比如说, 一个 HTTP 网络连接, 数据库连接, 或者是缓存的对象。</p>
<p>如果你还是不懂, 一会儿再举一个例子。</p>
<h3 id="Observable-operators"><a href="#Observable-operators" class="headerlink" title="Observable operators"></a>Observable operators</h3><p><code>create</code> 只是信号诸多操作方法中的一个而已，它被用来创建一个新的信号。可以看一下 ReactiveX<br>的<a href="http://reactivex.io/documentation/operators.html">官方文档</a>。哪里有所有的操作方法。我只是举一些常见的例子。</p>
<h4 id="Just"><a href="#Just" class="headerlink" title="Just"></a>Just</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.just(<span class="string">"Hello again dummy 🐥"</span>);</div><div class="line">observable.subscribe(onNext: &#123; (element) <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(element)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div><div class="line">        </div><div class="line">observable.subscribe(onCompleted: &#123; </div><div class="line">    <span class="built_in">print</span>(<span class="string">"I'm done"</span>)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<blockquote>
<p>Hello again dummy 🐥<br>I’m done</p>
</blockquote>
<p><strong>Just</strong> just 创建了一个智能释放一个值的信号。所以在这个信号序列中的事件，是这样的:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.Next(&quot;Hello&quot;) -&gt;  .Completed</div></pre></td></tr></table></figure>
<h4 id="Interval"><a href="#Interval" class="headerlink" title="Interval"></a>Interval</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.interval(<span class="number">0.3</span>, scheduler: <span class="type">MainScheduler</span>.instance)</div><div class="line">observable.subscribe(onNext: &#123; (element) <span class="keyword">in</span></div><div class="line">   <span class="built_in">print</span>(element)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<blockquote>
<p>0<br>1<br>2<br>3<br>…</p>
</blockquote>
<p><strong>Interval</strong> 是一个非常具体的操作符号。在这个例子中, 它从 0 每0.3秒递增, <code>scheduler</code> 是用来定义异步行为的。</p>
<h4 id="Repeat"><a href="#Repeat" class="headerlink" title="Repeat"></a>Repeat</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observable = <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.repeatElement(<span class="string">"This is fun 🙄"</span>)</div><div class="line">observable.subscribe(onNext: &#123; (element) <span class="keyword">in</span></div><div class="line">   <span class="built_in">print</span>(element)</div><div class="line">&#125;).addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<blockquote>
<p>This is fun 🙄<br>This is fun 🙄<br>This is fun 🙄<br>This is fun 🙄<br>…</p>
</blockquote>
<p><strong>repeat</strong> 会无限的重复我们给定的值。你可以通过定义 <code>scheduler</code> 类型的方法来控制线程的行为。</p>
<p>目前为止, 可能都不是非常的给力。但是知道其他的操作是必要的。另外一件很重要的事情涘，这是 RxSwift 最有用的一部分。</p>
<h3 id="Real-life-example"><a href="#Real-life-example" class="headerlink" title="Real life example"></a>Real life example</h3><p>现在我们开始快速的通过一个例子巩固一下这些知识。我们对 RxSwift 的了解目前为止是非常有限的。所有我们先使用一个简单的 MVC 的例子。我们先创建一个模型， 它可以从 google 上获取数据。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Foundation</div><div class="line"><span class="keyword">import</span> RxCocoa</div><div class="line"><span class="keyword">import</span> RxSwift</div><div class="line"></div><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">GoogleModel</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">createGoogleDataObservable</span><span class="params">()</span></span> -&gt; <span class="type">Observable</span>&lt;<span class="type">String</span>&gt; &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create(&#123; (observer) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">            </div><div class="line">            <span class="keyword">let</span> session = <span class="type">URLSession</span>.shared</div><div class="line">            <span class="keyword">let</span> task = session.dataTask(with: <span class="type">URL</span>(string: <span class="string">"https://www.google.com"</span>)!) &#123; (data, response, error) <span class="keyword">in</span></div><div class="line">                </div><div class="line">                <span class="comment">// 我们需要在主线程中更新</span></div><div class="line">                <span class="type">DispatchQueue</span>.main.async &#123;</div><div class="line">                    <span class="keyword">if</span> <span class="keyword">let</span> err = error &#123;</div><div class="line">                        <span class="comment">// 如果请求失败, 直接发处失败的事件</span></div><div class="line">                        observer.onError(err)</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        <span class="comment">// 解析数据</span></div><div class="line">                        <span class="keyword">if</span> <span class="keyword">let</span> googleString = <span class="type">String</span>(data: data!, encoding: .ascii) &#123;</div><div class="line">                            <span class="comment">// 将数据发送出去</span></div><div class="line">                            observer.onNext(googleString)</div><div class="line">                        &#125; <span class="keyword">else</span> &#123;</div><div class="line">                            <span class="comment">// 如果解析失败发送失败的事件</span></div><div class="line">                            observer.onNext(<span class="string">"Error! Unable to parse the response data from google!"</span>)</div><div class="line">                        &#125;</div><div class="line">                        <span class="comment">// 结束这个序列</span></div><div class="line">                        observer.onCompleted()</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            task.resume()</div><div class="line">            </div><div class="line">            <span class="comment">// 返回一个 AnonymousDisposable</span></div><div class="line">            <span class="keyword">return</span> <span class="type">Disposables</span>.create(with: &#123;</div><div class="line">                <span class="comment">// 取消请求</span></div><div class="line">                task.cancel()</div><div class="line">            &#125;)</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这是非常简单的。 <code>createGoogleDataObservable</code>中我们创建了一个可以被订阅的信号。这个信号创建了一个从 google 获取数据的任务。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="type">DispatchQueue</span>.main.async &#123;...&#125;</div></pre></td></tr></table></figure>
<p>URLSession 的任务是在后台线程中进行的, 所以我们需要在 UI 线程中更新。记住还有一个 <code>schedulers</code> 这会在更高级的阶段介绍出来。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> <span class="type">Disposables</span>.create(with: &#123;</div><div class="line"> task.cancel()</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p><code>Disposable</code> 是一个给长给力的机制： 如果订阅者停止订阅这个信号了。这个任务就会被取消。</p>
<p>接下来是订阅者这部分的内容了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"><span class="keyword">import</span> RxCocoa</div><div class="line"><span class="keyword">import</span> RxSwift</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// 通常就是这样创建 DisposeBag 的</span></div><div class="line">    <span class="comment">// 当这个 controller 被释放掉的时候，disposebag</span></div><div class="line">    <span class="comment">// 也会释放掉, 并且所有 bag 中的元素都会调用 dispose() 方法</span></div><div class="line">    <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">    <span class="keyword">let</span> model = <span class="type">GoogleModel</span>()</div><div class="line">    </div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> googleText: <span class="type">UITextView</span>!</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        </div><div class="line">        <span class="comment">// 记住使用 [weak self] 或者 [unowned self] 来避免循环引用</span></div><div class="line">        model.createGoogleDataObservable()</div><div class="line">            .subscribe(onNext: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] (element) <span class="keyword">in</span></div><div class="line">                <span class="keyword">self</span>?.googleText.text = element</div><div class="line">            &#125;).addDisposableTo(disposeBag)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>神奇吗？没有协议, 没有代理。只是声明了一下在一个事情发生的时候应该做什么。</p>
<p>在闭包中记得使用 <code>[weak self]</code> 或者 <code>[unowned self]</code> 来避免循环引用</p>
<p>还有一种更响应式的方法来为 <code>UITextView</code> 绑定文本, 绑定。但那是更高级的内容。</p>
<h3 id="Dispose-Bag-Example"><a href="#Dispose-Bag-Example" class="headerlink" title="Dispose Bag Example"></a>Dispose Bag Example</h3><p>你可能已经发现了 <code>disposeBag</code> 是 <code>ViewController</code> 的一个成员变量。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div></pre></td></tr></table></figure>
<p>当这个控制器被释放的时候，它也会释放掉这个 <code>disposeBag</code> .</p>
<p>如果这个 <code>disposeBag</code> 被释放掉之后, 它我们添加到这个 bag 里面所有的信号都会被释放掉。而这个网络请求任务如果还没有结束的话也会被取消。<br>希望我讲清楚了 <code>DisposeBag</code> 的机制。</p>
<h3 id="That‘s-it！"><a href="#That‘s-it！" class="headerlink" title="That‘s it！"></a>That‘s it！</h3><p>Demo 我已经放在 <a href="https://github.com/CepheusTeam/Translate">GitHub</a> 上了。</p>
<p>到现在, 我们已经学到了如何创建一个 Observable 和 订阅者。以及 disposing 机制是怎么回事。希望你能够理解到这样做比平常的观察者模式有什么优势。</p>
<p>下一篇是关于 RxSwift 操作符的。</p>
<p><a href="http://swiftpearls.com/RxSwift-for-dummies-1-Observables.html#basic-example">原文地址</a></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>我是一名来自中国的 iOS 程序员, 对技术有着浓厚的兴趣, 在学习的过程中, 发现了很多来自国外的优秀博客。为了更好的学习这些文章, 产生了将这些文章翻译成中文的想法。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MVVM design pattern and RxSwift]]></title>
      <url>http://www.CepheusSun.com/MVVM%20design%20pattern%20and%20RxSwift.html</url>
      <content type="html"><![CDATA[<p>本文翻译自(<a href="http://lukagabric.com/mvvm-design-pattern-and-rxswift/">http://lukagabric.com/mvvm-design-pattern-and-rxswift/</a>)</p>
<h3 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h3><p>MVVM 是一种设计模式。他是程序的代码分离成三个部分: <code>Model</code>、<code>View</code>、<code>ViewModel</code>。 <code>Model</code> 代表数据的表现, <code>View</code> 代表用户看到的界面，<code>ViewModel</code> 代表着模型层和视图层的主要关联关系。</p>
<a id="more"></a>
<h4 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h4><p><code>Model</code> 就是数据层。他包括一定范围内的模型，和业务逻辑。 <code>Model</code> 并不只是你程序中的那些模型结构体或者数据库, 他也包含了一些 Service 或者组件, 比如说 <code>Alamofire</code>和一些 SDK 等等。</p>
<p><code>Model</code> 层执行所有跟数据有关的操作。比如常见的增删改查等等。这些操作由 <code>ViewModel</code> 发起。当 <code>Model</code>操作完了数据之后它再告诉 <code>ViewModel</code> 结果。</p>
<p><code>Model</code> 被 ViewModel 持有。他也并不知道视图层和 <code>ViewModel</code> 层的事情。因为他是和这两个东西完全隔离开的。</p>
<h4 id="View"><a href="#View" class="headerlink" title="View"></a>View</h4><p><code>View</code> 是程序中数据的可视化展示。它没有逻辑相关的东西。他主要有接受用户交互事件，和将数据展示在界面上两个人物。它将用户交互的事件转发到 <code>ViewModel</code> 中进行处理。<code>View</code> 观察 <code>ViewModel</code> 中数据的变化, 并且将这些变化展现出来。</p>
<p><code>View</code> 和 <code>Model</code> 之间没有任何直接的关联。 他们通过 <code>View</code> 持有的 <code>ViewModel</code> 产生关联。</p>
<p>界面信息在 <code>xib</code> 或者 <code>StoryBoard</code> 中通过 <code>UIKit</code> 中的组件被定义。<code>ViewController</code> 是直接跟 <code>xib</code> 或者 <code>StoryBoard</code> 关联的。它包含了 <code>Xib</code> 或者 <code>StoryBoard</code> 中的 <code>outlets</code> 和一些定义 UI 的额外配置。他也负责管理 <code>View</code> 的生命周期。 在 MVVM 中他和 <code>View</code> 的关联是非常紧密的, 他其实就是 <code>View</code> 层的一部分。</p>
<h4 id="ViewModel"><a href="#ViewModel" class="headerlink" title="ViewModel"></a>ViewModel</h4><p><code>ViewModel</code> 是程序的逻辑层。他处理用户交互行为。然后更新数据。然后在通知 <code>View</code> 新的数据和显示的方式。举一个很平常的例子。一个 ViewModel 从Model层中请求到了一些包含 <code>Date</code> 的模型。 这个 Date 值并不会被告诉给 View, ViewModel 告诉 View 的应该是被格式化之后的字符串。视图不会操作数据本身，他只负责将 ViewModel 准备好的数据展示出来。</p>
<h4 id="Similar-to-MVC"><a href="#Similar-to-MVC" class="headerlink" title="Similar to MVC"></a>Similar to MVC</h4><p>在 MVC 设计模式中, <code>ViewController</code> 是 <code>Model</code> 和 <code>View</code> 之间的桥梁。他只有视图, 管理视图的结构，管理用户的交互。他还负责管理视图的生命周期,加载、显示、消失等。他具有的另外一个指责是更新模型数据, 这就包括了显示数据的相关逻辑(也就是数据的处理,如上文提到的讲 <code>Date</code> 转化成 <code>String</code> 的逻辑)。因为他具有这么多的职责，所以很多情况下 <code>Viewcontroller</code> 就会变的非常大。所以也有人称MVC 为 Massive View Controller</p>
<p>出现复杂的 <code>viewController</code> 主要有两个原因。由于 <code>Controller</code> 有很多的职责。代码就会变的非常的复杂。这很明显就违背了单一职责这个原则。这也让测试 <code>Controller</code> 中的逻辑变成一件很麻烦的事情。<code>Controller</code> 和 <code>View</code> 的高度耦合。<code>view</code> 的生命周期使得逻辑的分离变的不那么容易。我们就需要花很大的精力来处理视图的生命周期。</p>
<p>MVVM 和 MVC 非常相似。 正如前文所说。 MVC 中的 <code>Controller</code> 同时包含了视图和程序的逻辑。将逻辑相关的代码从 <code>Controller</code> 中分离出来, 放到他自己抽象出来的类里面去。这时候的 <code>Controller</code>就只关注视图相关的事情。刚刚分离出来的这个类处理相关的逻辑。这个类就是 ViewModel。他和 <code>Controller</code> 具有一一对应关系。所以说 MVVM 就是将逻辑代码从 <code>controller</code>中分离到 <code>ViewModel</code> 中的 MVC</p>
<h4 id="Binding-data-from-ViewModel-to-View"><a href="#Binding-data-from-ViewModel-to-View" class="headerlink" title="Binding data from ViewModel to View"></a>Binding data from ViewModel to View</h4><p>有很多将数据绑定的机制, 比如 Swift 中的属性观察。视图可以对外提供一个 Closure 来进行视图的更新。这个 Closure 用来通知 View 他关联的属性的更新。除了熟悉观察。我们的程序还经常需要处理各种异步操作，比如网络请求，和通知或者事件的流信息。函数响应式编程(FRP)框架简直就是为了处理这类事件而生的。现在也有很多FRP 框架，对 iOS 开发来说，最出名的应该是 <code>RxSwift</code> 和 <code>ReactiveCocoa</code>了。之前在一篇对比文章中有提到过, 不管怎样，我更喜欢 <code>RxSwift</code> </p>
<h3 id="RxSwift"><a href="#RxSwift" class="headerlink" title="RxSwift"></a>RxSwift</h3><p>指令式编程是基于一步一步明确的指令来执行的。他详细的描述了程序的运行过程。值做为状态而存在。由于程序是一步一步的执行的,所以如果其中一个值在之后发生了改变，这一改变也不会被传到下一步。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 指令式编程</span></div><div class="line">a = <span class="number">1</span></div><div class="line">b = <span class="number">2</span></div><div class="line"><span class="built_in">c</span> = a + b  <span class="comment">// c = 3</span></div><div class="line">a = <span class="number">5</span>   <span class="comment">// c = 3</span></div></pre></td></tr></table></figure>
<p>响应式编程,跟指令式相反。他是基于变化的。他基于声明式编程，这就意味着他关注的是程序应该完成什么，而不是程序是怎么运行的。它是通过数学运算和其他像是 <code>filter</code> <code>map</code> <code>reduce</code> 之类的运算操作的运用来实现的。如何准确的运行被交给底层的程序语言或者框架来考虑了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 响应式编程</span></div><div class="line">a = <span class="number">1</span></div><div class="line">b = <span class="number">2</span></div><div class="line"><span class="built_in">c</span> = a + b <span class="comment">// c = 3</span></div><div class="line">a = <span class="number">5</span>     <span class="comment">// c = 7</span></div></pre></td></tr></table></figure>
<p>RxSwift 让你能用通过函数响应式编程来编写你的代码。使用 RxSwift 可以很轻松的创建事件或者数据流。这些事件或者数据流可以互相组合、转换。并且最终被观察到，基于值来进行一些操作。</p>
<p>正如前文所说，在 MVVM 中 View 观察 ViewModel 中模型的数据。RxSwift 提供了一个非常简单并且干净的方法来观察这些值，并绑定到对应的 View 上。</p>
<h4 id="Observable"><a href="#Observable" class="headerlink" title="Observable"></a>Observable</h4><p>Observable 是 RxSwift 的主要构成部分。他是一个可以异步的接受元素的序列。这个序列可以有0个或者很多个的元素。有三种事件能够基于它发生。下一步(Next)、完成(Completed)、错误(Error)</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Event</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> next(<span class="type">Element</span>)   <span class="comment">// 这个序列的下一个元素</span></div><div class="line">    <span class="keyword">case</span> error(<span class="type">Swift</span>.<span class="type">Error</span>)<span class="comment">// 这个序列发生了错误</span></div><div class="line">    <span class="keyword">case</span> completed      <span class="comment">// 这个序列成功的完成的所有人任务</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以使用 <code>Observable</code> 的 <code>subscribe</code> 方法来订阅这些事件。 用这种方法可以分别处理这个事件的各种情况。</p>
<ul>
<li>OnNext: 可以使用被订阅的元素值。</li>
<li>OnCompleted: 当这个序列成功的发送完所有元素之后会被调用。</li>
<li>OnError: 当这个序列不能完成的时候被调用。</li>
</ul>
<p>只要 <code>Complete</code> 或者 <code>Error</code> 被观察到了, 这个序列就不能产生任何新的元素了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">observable.subscribe(</div><div class="line">    onNext: &#123; element <span class="keyword">in</span> ... &#125;, </div><div class="line">    onError: &#123; error <span class="keyword">in</span> ... &#125;,</div><div class="line">    onCompleted: &#123; ... &#125;</div><div class="line">)</div></pre></td></tr></table></figure>
<h4 id="Hot-and-cold-observables"><a href="#Hot-and-cold-observables" class="headerlink" title="Hot and cold observables"></a>Hot and cold observables</h4><p>即使没有被观察也会发送消息的信号被称作热信号。想象一下 <code>NotificationCenter</code> 技术没有其他对象接受通知, 也也然会发送出来。如果你在某个时候订阅了这个信号, 之前发出来的消息你就会错过。</p>
<p>那些只有被订阅之后才开始发送消息的信号被称作冷信号。这些资源会被分配给每个订阅对象。(比如说，你每次订阅的网络请求就会被释放)但是这些资源可以被多个对象共享(只有一个网络请求被释放了,但可能这被很多个观察者订阅)</p>
<h4 id="Driver"><a href="#Driver" class="headerlink" title="Driver"></a>Driver</h4><p>Driver 是 RxCocoa 框架中的一个值类型。它是对一个可订阅的序列的封装，如果要把一个简单的值绑定到View上, 它会是一个更简单的方法。如果 <code>Observables</code> 发生了错误, 你需要很方便的将一些东西展示出来。每个信号都可以很容易的被转换成 <code>Driver</code>。 当你提供了这个信号发生错误的返回什么的时候，只需要使用 <code>asDriver</code> 方法就可以了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.asDriver(onErrorJustReturn: <span class="string">"No items to display."</span>)</div></pre></td></tr></table></figure>
<p>想象一下异步操作的场景。比如说网络请求。我们需要在界面上展示返回值的个数。在这个场景中，我们需要将返回值的个数映射成一个字符串。可能这个字符串的格式可能是 <code>&quot;X item(s)&quot;</code> <code>Driver</code> 还能够确保我们需要修改 UI 的这个订阅是发生在主线程当中的。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> results: <span class="type">Observable</span>&lt;[<span class="type">SomeItem</span>]&gt; = ...</div><div class="line"><span class="keyword">let</span> resultsCountDriver = results</div><div class="line">    .<span class="built_in">map</span> &#123; <span class="string">"<span class="subst">\($<span class="number">0</span>.<span class="built_in">count</span>)</span> item(s)"</span> &#125;</div><div class="line">    .asDriver(onErrorJustReturn: <span class="string">"No items to display."</span>)</div></pre></td></tr></table></figure>
<p>把这个数据绑定到 Label 中就很简单了</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">resultsCountDriver.drive(resultCountLabel.rx.text).disposed(by: disposeBag)</div></pre></td></tr></table></figure>
<h4 id="DisposeBag"><a href="#DisposeBag" class="headerlink" title="DisposeBag"></a>DisposeBag</h4><p>如果一个序列停止了, 但是它并没有被释放掉。在他就会造成资源的浪费和内存的泄漏。知道他完成了或者处错了。如果一个序列没有停止，也没有出错，这个资源就会被永久的占用。这就是为什么我们要在需要订阅的对象中生命一个 <code>DisposeBag</code> 的成员变量的原因了。这样的话，只要这个对象呗释放掉了，所有相关的资源都会被释放并且被系统回收。</p>
<h4 id="Variable"><a href="#Variable" class="headerlink" title="Variable"></a>Variable</h4><p><code>Variable</code>表示可以被订阅的状态。它是信号和功能范式之间的桥梁。<code>Variable</code> 总是包含了提供给构造函数的初始值当你订阅当前的值的时候，这个初始值会立马被发送到过来。(只有最新和当前值会被发出，旧的值不会)。也可以直接获取或者设置 <code>Variable</code> 的值。他内部的信号可以通过 <code>asObservable</code> 方法获取到。另外, <code>Variable</code> 永远都不会出错。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> variable = <span class="type">Variable</span>(<span class="string">"My Variable"</span>)</div><div class="line">variable.value = <span class="string">"Some value"</span></div><div class="line"><span class="keyword">let</span> variableObservable = variable.asObservable()</div><div class="line">variableObservable.subscribe(onNext: &#123; value <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(value) <span class="comment">//prints "Some value"</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>最后， 我写了一个 Demo 来演示 MVVM + RxSwift. 这是一个简单的程序获取并且显示天气的数据。这个app有三种状态， 加载中，显示中，错误。有两种对错误的处理，一是，我们只显示错误。另一个是显示之前的数据。如果没有，就显示错误。这两种处理方式都是通过响应式编程和指令式编程实现的。</p>
<p>在这些例子中，只有 ViewMoel 会发生改变。你可以看到给功能增加复杂性(显示错误或者旧的数据)。如果使用指令式编程，可能会对代码带来很多的变动。而使用响应式编程，只需要增加额外的状态而已。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxSwift and the awesome things you can do with Reactive Programming — Part I]]></title>
      <url>http://www.CepheusSun.com/RxSwift%20and%20the%20awesome%20things%20you%20can%20do%20with%20Reactive%20Programming%E2%80%8A%E2%80%94%E2%80%8APart%20I.html</url>
      <content type="html"><![CDATA[<p>本文翻译自国外的美女工程师 <a href="https://medium.com/@kenzai">Kenza Iraki</a> 的文章 <a href="https://medium.com/@kenzai/rxswift-and-the-awesome-things-you-can-do-with-reactive-programming-part-i-3921137d251">RxSwift and the awesome things you can do with Reactive Programming — Part I</a></p>
<p>第一次听见响应式编程，我的表情是这样的</p>
<center><br><img src="https://cdn-images-1.medium.com/max/1600/1*28RdzpfQBHklPcgLGsg0jw.png"><br></center>

<p>接下来的几次几次接触, 也并没有什么改变。整整两个星期之后,即使我在项目中写了一些响应式代码。我依然是这种感觉。</p>
<p>现在我才知道有很多的人在第一次遇见响应式编程的时候跟我有一样的感觉。我也知道很多人看过响应式的代码之后再也不想再见到它了，因为她的学习曲线太过陡峭了。但是我能告诉你一个事实, 我还没听说过一个人， 在最终理解了他是怎么回事之后,后悔学习响应式编程。</p>
<p>我知道网上有很多关于响应式编程理论和思想还有 RxSwift 的的资源, 也有很多教你用Rx来做各种事情的教程(文末我会给出一些链接)。这篇文章不是是一个教程, 也不会解释 <code>stream</code> 和 <code>observables</code> 是怎么回事。 我要做的是提供一个直接、明确并且尽量少的理论总结来告诉你 RxSwift 能做什么, 并且告诉你为什么你会喜欢上它。由于 Rx 的世界深似海, 所以我打算写三篇文章来讨论这件事情, 这是第一篇。</p>
<h2 id="Part1-Data-Binding-control-events-and-gesture-recognizers"><a href="#Part1-Data-Binding-control-events-and-gesture-recognizers" class="headerlink" title="Part1: Data Binding, control events and gesture recognizers"></a>Part1: Data Binding, control events and gesture recognizers</h2><h3 id="Data-Binding"><a href="#Data-Binding" class="headerlink" title="Data Binding"></a>Data Binding</h3><p>数据绑定看起来像是一个高端的词语, 但是它却是一件非常简单的事情。假如你有一个 App 需要用户在 <code>UITextField</code> 中输入它们的名字。当他们在打字的时候, 用 “你好 + 用户输入的文字” 展示在界面上。这样一个很基本的场景。如果在不是响应式的程序中, 我们需要遵守 <code>UITextFieldDelegate</code> 这个协议, 然后在 <code>ViewController</code> 中实现 <code>textFieldDidEndEditing</code> 这个方法, 来监听用户用户的行为，然后给 <code>Label</code> 赋值。</p>
<p>虽然很简单，但是假如有很多的 <code>UITextField</code> 我们还要在代理方法中判断, 又或者, 我们需要用户在输入的过程中时时的刷新 <code>Label</code>。这种场景, 我们的代码，看起来就会很糟糕。至少不会很优雅吧。</p>
<p>在响应式中, 这种情况就可以用数据绑定来实现。说白了,就是将用户在 <code>UITextField</code> 中输入的文字绑定到 <code>UILabel</code> 上。在 <code>RxSwift</code> 的世界里,  没有什么比处理数据绑定更简单的了。刚才描述的需求, 我们只需要通过以下代码就可以实现了。</p>
<a id="more"></a>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> namefield = <span class="type">UITextField</span>()</div><div class="line"><span class="keyword">var</span> helloLabel = <span class="type">UILabel</span>()</div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    nameField.rx.text.<span class="built_in">map</span> &#123; <span class="string">"Hello <span class="subst">\($<span class="number">0</span>)</span>"</span> &#125;</div><div class="line">                     .bindTo(helloLabel.rx.text)</div></pre></td></tr></table></figure>
<p>上面的代码， 我们首先是获取到了 <code>UITextField</code> 的文字。 然后我们将这段文字映射成想要的格式，然后赋值给 <code>UILabel</code>。 在这里，我们之间见到的在文字前面加了一个 <code>&#39;hello&#39;</code>， 因为 map 是一个闭包, 可以简单的被看作一个匿名函数, 它的参数:<code>$0</code>(第一个参数)、<code>$1</code>(第二个参数)以此类推。然后将映射后的文字绑定到 <code>UILabel</code> 的 <code>text</code> 属性上。就这么简单，这个需求就完成了。没有使用代理，也没有用各种 if 语句, 就简单明了的几行代码。</p>
<p>你先在肯定在想,”是，这是很神奇, 但是真的有很多 app 在这样做吗” 我可以告诉你，是的。不要仅仅是限制在这简单的几个例子中。能够将数据绑定到视图是非常强大的事情。你想想看，如果我们有一个视图的背景颜色需要根据天气用户的地理位置而改变。基于可能变化的数据和一些简单的逻辑, 不需要太过深入的研究它背后的东西。这就是数据绑定最主要的思想。</p>
<h3 id="Control-Events-and-Gesture-Recognizers"><a href="#Control-Events-and-Gesture-Recognizers" class="headerlink" title="Control Events and Gesture Recognizers"></a>Control Events and Gesture Recognizers</h3><p>简单的说一下什么是事件吧！事件基本上是用户能在你的 app 上操作的所有行为，点击、滑动、拖拽等等。当用户按下一个按钮的时候，你的程序会监听到一个 <code>UIControlEvent</code> 的事件类型 <code>.touchUpInSide</code>。 如果你用的是 <code>StoryBoary</code> ，你可能在创建 <code>IBAction</code> 的时候，没有想过这个按钮的行为。我已经写了一篇<a href="">why I never use storyboards</a> 。如果你跟我一样,这段代码你肯定会很熟悉了</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> button = <span class="type">UIButton</span>()</div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    button.addTarget(#selector(<span class="type">ViewController</span>.loginUser), target: <span class="keyword">self</span>, event: .touchUpInside</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">loginUser</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="comment">// Implementation here</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我真的很讨厌 Selector, 这些代码太不明确了，让代码看起来很乱，也让我们更容易犯错。但是用 Rx 这样就可以了：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> button = <span class="type">UIButton</span>()</div><div class="line"><span class="keyword">var</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    button.rx.tap.subscribe &#123; onNext <span class="number">_</span> <span class="keyword">in</span></div><div class="line">        <span class="comment">// Implementation here</span></div><div class="line">    &#125;.addDisposableTo(disposeBag)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不要太过纠结 <code>disposeBag</code> 和 <code>subscribe</code> 这些东西。你只要知道这些是一些必须的动作就可以了。(下面会有介绍)</p>
<p>当你需要给不具有 control event 的控件添加一些逻辑事件, 比如给 <code>UILabel</code> 或者 <code>UIImageView</code> 添加点击事件的时候。我们只能给他添加手势。(这是我做讨厌的 UIKit 特点之一)。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> label = <span class="type">UILabel</span>()</div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="comment">// Show example of gesture recognizers</span></div><div class="line">    <span class="keyword">let</span> gestureRecognizer = <span class="type">UITapGestureRecognizer</span>(target: <span class="keyword">self</span>, action: “handleTap:”)</div><div class="line">    label.addGestureRecognizer(gestureRecognizer)</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleTap</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="comment">// Your logic here</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其他的手势，如果你需要响应的话。你就需要给这个控件添加多个 <code>gesture recognizer</code> ,你要创建多个手势，然后挨个添加到这个控件上。这不仅是很多样板代码这么简单，这也可能带来一些难以想象的混乱和潜在的错误。</p>
<p>你可以已经想到了。Rx 让这个东西变的异常的简单：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> label = <span class="type">UILabel</span>()</div><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    label.rx.gesture(.tap).subscribe &#123;onNext (gesture) <span class="keyword">in</span></div><div class="line">        <span class="comment">// Your logic here</span></div><div class="line">    &#125;.addDisposableTo(disposeBag)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>假如你需要添加多个手势的话:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> label = <span class="type">UILabel</span>()</div><div class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    label.rx.gesture(.tap, .pan, .swipeUp).subscribe &#123; onNext (gesture) <span class="keyword">in</span></div><div class="line">        <span class="keyword">switch</span> gesture &#123;</div><div class="line">        <span class="keyword">case</span> .tap: <span class="comment">// Do something</span></div><div class="line">        <span class="keyword">case</span> .pan: <span class="comment">// Do something</span></div><div class="line">        <span class="keyword">case</span> .swipeUp: <span class="comment">// Do something </span></div><div class="line">        <span class="keyword">default</span>: <span class="keyword">break</span>       </div><div class="line">        &#125;        </div><div class="line">    &#125;.addDisposableTo(disposeBag)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这些都是一个叫 <a href="https://github.com/RxSwiftCommunity/RxGesture">RxGesture</a> 的 RxSwift 库提供的。</p>
<p><strong>参考资料</strong></p>
<p><a href="https://github.com/ReactiveX/RxSwift">ReactiveX/RxSwift</a></p>
<p><a href="https://realm.io/news/altconf-ash-furrow-functional-reactive-swift/">Functional Reactive Awesomeness With Swift</a></p>
<p><a href="https://medium.com/swift-programming/reactive-swift-3b6050375534">My journey with reactive programming in Swift — and the iOS app that came out of it.</a></p>
<p><a href="https://github.com/DTVD/The-introduction-to-RxSwift-you-have-been-missing">DTVD/The-introduction-to-RxSwift-you-have-been-missing</a></p>
<p><a href="https://www.thedroidsonroids.com/blog/ios/rxswift-by-examples-1-the-basics/">RxSwift by Examples #1 – The basics.</a></p>
<p><a href="https://news.realm.io/news/tryswift-Marin-Todorov-I-create-iOS-apps-is-RxSwift-for-me/">I create iOS apps - is RxSwift for me?</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RAC 最基本的东西-- RACSignal]]></title>
      <url>http://www.CepheusSun.com/RAC%20%E6%9C%80%E5%9F%BA%E6%9C%AC%E7%9A%84%E4%B8%9C%E8%A5%BF--%20RACSignal.html</url>
      <content type="html"><![CDATA[<h3 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h3><ul>
<li>创建信号</li>
<li>订阅信号</li>
<li>发送信号</li>
</ul>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1.创建信号(cold)</span></div><div class="line">RACSignal *signal = [RACSignal createSignal:^RACDisposable * _Nullable(<span class="keyword">id</span>&lt;RACSubscriber&gt;  _Nonnull subscriber) &#123;</div><div class="line">    <span class="comment">// 3.发送信号</span></div><div class="line">    [subscriber sendNext:<span class="string">@"hello, RAC."</span>];</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 2.订阅信号(hot)</span></div><div class="line">[signal subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, x);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>在创建 RACSignal 的时候, </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">+ (RACSignal&lt;ValueType&gt; *)createSignal:(RACDisposable * _Nullable (^)(id&lt;RACSubscriber&gt; subscriber))didSubscribe;</div></pre></td></tr></table></figure>
<p>方法传入的 block 会返回一个 <code>RACDisposable</code> 对象。</p>
<p>将以上代码中的 <code>return nil；</code> 替换成如下代码</p>
<a id="more"></a>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> [RACDisposable disposableWithBlock:^&#123;</div><div class="line"><span class="comment">// 订阅者释放时会自动取消订阅信号, 但是只要订阅者没有释放, 就不会取消订阅信号.</span></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"信号被取消订阅了!"</span>);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>这个时候在 <code>[subscriber sendComplete]</code> 的时候会执行创建 <code>RACDisposable</code> 传入的 <code>block</code> </p>
<p><strong>如何主动取消订阅</strong></p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">_disposable = [signal subscribeNext:^(<span class="keyword">id</span> x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, x);</div><div class="line">&#125;];<span class="comment">// 可以看出来，这里的 subscribeNext 返回的就是取消订阅这个 signal 的 RACDisoisable</span></div><div class="line"><span class="comment">// 不管 在创建 signal 的时候 return 的是 nil 还是 RACDisposable 对象</span></div><div class="line">[_disposable dispose]</div></pre></td></tr></table></figure>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;ReactiveObjC.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) RACDisposable *disposable;    </div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    RACSignal *signal = [RACSignal createSignal:^RACDisposable *(<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber ) &#123;       </div><div class="line">        [subscriber sendNext:<span class="string">@"hello, RAC."</span>];</div><div class="line">        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">            [subscriber sendNext:<span class="string">@"2"</span>];</div><div class="line">            dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">                [subscriber sendNext:<span class="string">@"2"</span>];</div><div class="line">                dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">                    [subscriber sendNext:<span class="string">@"2"</span>];</div><div class="line">                    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">                        [subscriber sendNext:<span class="string">@"2"</span>];</div><div class="line">                        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">                            [subscriber sendNext:<span class="string">@"2"</span>];</div><div class="line">                            dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">                                [subscriber sendNext:<span class="string">@"2"</span>];</div><div class="line">                                dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">                                    [subscriber sendNext:<span class="string">@"2"</span>];</div><div class="line">                                    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">                                        [subscriber sendNext:<span class="string">@"2"</span>];</div><div class="line">                                        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">                                            [subscriber sendNext:<span class="string">@"2"</span>];</div><div class="line">                                        &#125;);</div><div class="line">                                    &#125;);</div><div class="line">                                &#125;);</div><div class="line">                            &#125;);</div><div class="line">                        &#125;);</div><div class="line">                    &#125;);</div><div class="line">                &#125;);</div><div class="line">            &#125;);</div><div class="line">        &#125;);</div><div class="line">        <span class="comment">// 如果信号不再发送数据, 最好调用信号的发送完成方法, 该方法会调用 [RACDisposable disposable] 取消订阅信号.</span></div><div class="line">        <span class="comment">//[subscriber sendCompleted];</span></div><div class="line">        </div><div class="line">        <span class="keyword">return</span> [RACDisposable disposableWithBlock:^&#123;</div><div class="line">            <span class="comment">// 订阅者释放时会自动取消订阅信号, 但是只要订阅者没有释放, 就不会取消订阅信号.</span></div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"信号被取消订阅了!"</span>);</div><div class="line">        &#125;];</div><div class="line">        <span class="comment">//如果取消订阅的时候不需要做什么事情, return nil 也没有关系</span></div><div class="line">        <span class="comment">//return nil;</span></div><div class="line">    &#125;];</div><div class="line">    _disposable = [signal subscribeNext:^(<span class="keyword">id</span> x) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, x);</div><div class="line">    &#125;];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</div><div class="line">    <span class="comment">// 主动取消订阅信号</span></div><div class="line">    [_disposable dispose];</div><div class="line">&#125;  </div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h3 id="timer"><a href="#timer" class="headerlink" title="timer"></a>timer</h3><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[[RACSignal interval:<span class="number">2.0</span> onScheduler:[RACScheduler currentScheduler]] subscribeNext:^(<span class="keyword">id</span> x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, x);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h3 id="delay"><a href="#delay" class="headerlink" title="delay"></a>delay</h3><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"first"</span>);</div><div class="line">[[[RACSignal createSignal:^RACDisposable *(<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</div><div class="line">    [subscriber sendNext:<span class="string">@"send，signal"</span>];</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;] </div><div class="line">delay:<span class="number">2.0</span>] <span class="comment">// 信号延迟两秒</span></div><div class="line">subscribeNext:^(<span class="keyword">id</span> x) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h3 id="timeout"><a href="#timeout" class="headerlink" title="timeout"></a>timeout</h3><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">RACSignal *signal = [[RACSignal createSignal:^RACDisposable *(<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</div><div class="line">    [subscriber sendNext:<span class="string">@"send，signal"</span>];</div><div class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">3</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">        [subscriber sendNext:<span class="string">@"send，signal2"</span>];</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;] timeout:<span class="number">2.0</span> onScheduler:[RACScheduler currentScheduler]];</div><div class="line"><span class="comment">// 2s 后发送错误信号。2s 之后的信号被忽略</span></div><div class="line"></div><div class="line">[signal subscribeNext:^(<span class="keyword">id</span> x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125; error:^(<span class="built_in">NSError</span> *error) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,error);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h3 id="retry"><a href="#retry" class="headerlink" title="retry"></a>retry</h3><p>重试, 遇到 error 就会重新执行创建信号中的block,直到成功. 也可以传入 retry 的次数，如果超过这个次数还是 error 则返回 error</p>
<h2 id="对-RACSignal-的操作"><a href="#对-RACSignal-的操作" class="headerlink" title="对 RACSignal 的操作"></a>对 RACSignal 的操作</h2><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">RACSignal *signal = [RACSignal createSignal:^RACDisposable * _Nullable(<span class="keyword">id</span>&lt;RACSubscriber&gt;  _Nonnull subscriber) &#123;</div><div class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">5</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">        [subscriber sendNext:<span class="string">@"1"</span>];</div><div class="line">        [subscriber sendNext:<span class="string">@"2"</span>];</div><div class="line">        [subscriber sendNext:<span class="string">@"3"</span>];</div><div class="line">        [subscriber sendNext:<span class="string">@"3"</span>];</div><div class="line">        [subscriber sendNext:<span class="string">@"5"</span>];</div><div class="line">        [subscriber sendNext:<span class="string">@"3"</span>];</div><div class="line">        [subscriber sendNext:<span class="string">@"6"</span>];</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h3 id="map-映射"><a href="#map-映射" class="headerlink" title="map 映射"></a>map 映射</h3><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</div><div class="line">Map使用步骤:</div><div class="line">1.传入一个block,类型是返回对象，参数是value</div><div class="line">2.value就是源信号的内容，直接拿到源信号的内容做处理</div><div class="line">3.把处理好的内容，直接返回就好了，不用包装成信号，返回的值，就是映射的值。</div><div class="line">*/</span></div><div class="line">[[signal map:^<span class="keyword">id</span> _Nullable(<span class="keyword">id</span>  _Nullable value) &#123;</div><div class="line">    <span class="keyword">return</span> @([value integerValue] * <span class="number">10</span>);</div><div class="line">&#125;] subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 10,20,30,50,30,60</span></div></pre></td></tr></table></figure>
<h4 id="flattenMap"><a href="#flattenMap" class="headerlink" title="flattenMap"></a>flattenMap</h4><p>把源信号的内容映射成一个新的信号，信号可以是任意类型。</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</div><div class="line">flattenMap使用步骤:</div><div class="line">1.传入一个block，block类型是返回值RACStream，参数value</div><div class="line">2.参数value就是源信号的内容，拿到源信号的内容做处理</div><div class="line">3.包装成RACReturnSignal信号，返回出去。</div><div class="line">*/</span></div><div class="line">[[signal flattenMap:^__kindof RACSignal * _Nullable(<span class="keyword">id</span>  _Nullable value) &#123;</div><div class="line">    <span class="keyword">return</span> [RACReturnSignal <span class="keyword">return</span>:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@%@"</span>,value,value]];</div><div class="line">&#125;]</div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h4 id="flattenmap-和-map-的区别"><a href="#flattenmap-和-map-的区别" class="headerlink" title="flattenmap 和 map 的区别"></a>flattenmap 和 map 的区别</h4><ol>
<li>FlatternMap中的Block返回信号。</li>
<li>Map中的Block返回对象。</li>
<li>开发中，如果信号发出的值不是信号，映射一般使用Map</li>
<li>开发中，如果信号发出的值是信号，映射一般使用flatternMap。</li>
</ol>
<h4 id="mapReplace"><a href="#mapReplace" class="headerlink" title="mapReplace"></a>mapReplace</h4><p>传入一个值 x , 将每个信号的值都改为 x</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[[signal mapReplace:<span class="string">@"4"</span>]</div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line">    <span class="comment">// 4,4,4,4,4,4,4</span></div></pre></td></tr></table></figure>
<h3 id="filter-过滤"><a href="#filter-过滤" class="headerlink" title="filter 过滤"></a>filter 过滤</h3><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><p>传入一个 block , 当这个 block 返回 YES 的时候才能响应</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">RACSignal *signal = [RACSignal createSignal:^RACDisposable * _Nullable(<span class="keyword">id</span>&lt;RACSubscriber&gt;  _Nonnull subscriber) &#123;</div><div class="line">    [subscriber sendNext:<span class="string">@"1"</span>];</div><div class="line">    [subscriber sendNext:<span class="string">@"2"</span>];</div><div class="line">    [subscriber sendNext:<span class="string">@"3"</span>];</div><div class="line">    [subscriber sendNext:<span class="string">@"3"</span>];</div><div class="line">    [subscriber sendNext:<span class="string">@"5"</span>];</div><div class="line">    [subscriber sendNext:<span class="string">@"3"</span>];</div><div class="line">    [subscriber sendNext:<span class="string">@"6"</span>];</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;];</div><div class="line">[[signal filter:^<span class="built_in">BOOL</span>(<span class="keyword">id</span>  _Nullable value) &#123;</div><div class="line"><span class="comment">// 只有 value 为 @“3” 的时候才进入下一步</span></div><div class="line">    <span class="keyword">return</span> [value isEqualToString:<span class="string">@"3"</span>];</div><div class="line">&#125;]</div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h4 id="ignore"><a href="#ignore" class="headerlink" title="ignore"></a>ignore</h4><p>传入一个参数 x 忽略 value == x 的信号</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[[signal ignore:<span class="string">@"3"</span>]</div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 1,2,5,6</span></div></pre></td></tr></table></figure>
<h4 id="distinctUntilChanged"><a href="#distinctUntilChanged" class="headerlink" title="distinctUntilChanged"></a>distinctUntilChanged</h4><blockquote>
<p>如果这次受到的信号 <code>value</code> 跟上次的信号 <code>value</code> 相同, 这次信号被忽略。</p>
</blockquote>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[[signal distinctUntilChanged] </div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 1,2,3,5,3,6</span></div></pre></td></tr></table></figure>
<h4 id="startWith"><a href="#startWith" class="headerlink" title="startWith"></a>startWith</h4><p>传入一个参数 x , 订阅的时候首先收到 value = x 的信号。 类似于在创建 RACSignal 的第一行 <code>[subscriber sendNext:x];</code></p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[[signal startWith:<span class="string">@"1"</span>]</div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 1,1,2,3,3,5,3,6</span></div></pre></td></tr></table></figure>
<h4 id="take"><a href="#take" class="headerlink" title="take"></a>take</h4><p>传入一个数组 n， 表明只响应前 n 个信号</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[[signal take:<span class="number">3</span>]</div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 1,2,3</span></div></pre></td></tr></table></figure>
<h4 id="takeLast"><a href="#takeLast" class="headerlink" title="takeLast"></a>takeLast</h4><p>传入一个数值 n, 取最后 n 个信号</p>
<p>只有收到了complete才知道结果。</p>
<h4 id="takeUntilBlock"><a href="#takeUntilBlock" class="headerlink" title="takeUntilBlock"></a>takeUntilBlock</h4><p>一直响应，直到传入的 block 第一次返回 YES</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[[signal takeUntilBlock:^<span class="built_in">BOOL</span>(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="keyword">return</span> [x isEqualToString:<span class="string">@"5"</span>];</div><div class="line">&#125;]</div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 1,2,3,3</span></div></pre></td></tr></table></figure>
<h4 id="takeWhileBlock"><a href="#takeWhileBlock" class="headerlink" title="takeWhileBlock"></a>takeWhileBlock</h4><p>一直响应，直到传入的 block 第一次返回 NO</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[[signal takeWhileBlock:^<span class="built_in">BOOL</span>(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="keyword">return</span> [x integerValue] &lt; <span class="number">5</span>;</div><div class="line">&#125;]</div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 1,2,3,3</span></div></pre></td></tr></table></figure>
<h4 id="skip"><a href="#skip" class="headerlink" title="skip"></a>skip</h4><p>传入一个数字 n 表明忽略前面第 n 个信号, 第 n + 1 个信号开始响应。</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[[signal skip:<span class="number">3</span>]</div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 3,5,3,6</span></div></pre></td></tr></table></figure>
<h4 id="skipUntilBlock"><a href="#skipUntilBlock" class="headerlink" title="skipUntilBlock"></a>skipUntilBlock</h4><p>一直忽略信号, 直到传入的 block 第一次返回 YES</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[[signal skipUntilBlock:^<span class="built_in">BOOL</span>(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="keyword">return</span> ![x isEqualToString:<span class="string">@"1"</span>];</div><div class="line">&#125;]</div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 2，3，3，5，3，6</span></div></pre></td></tr></table></figure>
<h4 id="skipWhileBlock"><a href="#skipWhileBlock" class="headerlink" title="skipWhileBlock"></a>skipWhileBlock</h4><p>一直忽略信号, 直到传入的 block 第一次返回 NO</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[[signal skipWhileBlock:^<span class="built_in">BOOL</span>(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="keyword">return</span> [x isEqualToString:<span class="string">@"1"</span>];</div><div class="line">&#125;]</div><div class="line">subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 2，3，3，5，3，6</span></div></pre></td></tr></table></figure>
<h4 id="scanWithStart-reduce"><a href="#scanWithStart-reduce" class="headerlink" title="scanWithStart:reduce"></a>scanWithStart:reduce</h4><p>解决类似数组求和的问题</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">RACSequence *number = @[@<span class="number">1</span>,@<span class="number">2</span>,@<span class="number">3</span>,@<span class="number">4</span>].rac_sequence;</div><div class="line">RACSequence *sums =[number scanWithStart:@<span class="number">2</span> reduce:^<span class="keyword">id</span> _Nullable(<span class="built_in">NSNumber</span> *running, <span class="built_in">NSNumber</span> *next) &#123;</div><div class="line">    <span class="keyword">return</span> @(running.integerValue + next.integerValue);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 第一个参数是起点值, 第二个是便利的block block 中第一个是上一次便利的结果， 第二个是当前位置的值</span></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, sums.array);</div><div class="line"><span class="comment">//3,5,8,12</span></div></pre></td></tr></table></figure>
<h3 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h3><h4 id="contact"><a href="#contact" class="headerlink" title="contact"></a>contact</h4><p>把signalA拼接到signalB后，signalA发送完成，signalB才会被激活。</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">RACSignal *signal = [RACSignal createSignal:^RACDisposable * _Nullable(<span class="keyword">id</span>&lt;RACSubscriber&gt;  _Nonnull subscriber) &#123;  dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">2</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">        [subscriber sendNext:<span class="string">@"1"</span>];</div><div class="line">        [subscriber sendCompleted];<span class="comment">// 必须conpleted 才会到第二个 signal</span></div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;];</div><div class="line">RACSignal *singnal2 = [RACSignal createSignal:^RACDisposable * _Nullable(<span class="keyword">id</span>&lt;RACSubscriber&gt;  _Nonnull subscriber) &#123;</div><div class="line">    [subscriber sendNext:<span class="string">@"11"</span>];</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;];</div><div class="line">RACSignal *contact = [signal concat:singnal2];</div><div class="line">[contact subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 1,11</span></div></pre></td></tr></table></figure>
<h4 id="then"><a href="#then" class="headerlink" title="then"></a>then</h4><p>类似 contact 将两个 signal 链接</p>
<ol>
<li>只有等第一个 signal 介绍之后才会激活第二个 signal。 </li>
<li>在第一个 signal 结束之前 signal2 的信号会被忽略。  </li>
<li>第一个 signal 只关注 <code>complete</code> sendNext 被忽略</li>
</ol>
<p><strong>区别: contact signal1 的 sendNext 会响应, 而 then 的不会。</strong></p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// signal complete 发出之后 signal 的信号才会响应.</span></div><div class="line">RACSignal *then = [signal then:^RACSignal * _Nonnull&#123;</div><div class="line">    <span class="keyword">return</span> singnal2;</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h4 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h4><p>将两个 signal 合并为一个 signal 原先的信号发出 都会响应, 没有前后顺序。</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">RACSignal *merge = [signal merge:singnal2];    </div><div class="line">[merge subscribeNext:^(<span class="keyword">id</span>  _Nullable x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h4 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h4><p>将两个signal 合并之后的 next 合并为一个 tuple 返回回来。 一一对应关系，一个信号的 next 等到第二个信号有 next 之后 包装成 signal 返回。<br>返回的 zip 第一个值就是第一个信号的next。</p>
<h4 id="combineLatest"><a href="#combineLatest" class="headerlink" title="combineLatest"></a>combineLatest</h4><p>将多个信号合并起来，并且拿到各个信号的最新的值,必须每个合并的signal至少都有过一次sendNext，才会触发合并的信号。</p>
<p><strong>zip 和 combineLatest 的区别</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">signal1-----1----2-----3------4-------5-------6--------7-----</div><div class="line"></div><div class="line">signal2----------------5----------------------7--------------</div><div class="line"></div><div class="line"></div><div class="line">combine 返回 (3，5)  （6，7）</div><div class="line">zip 返回     (1,5)    (2,7)</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[突然想聊聊 throttle]]></title>
      <url>http://www.CepheusSun.com/%E7%AA%81%E7%84%B6%E6%83%B3%E8%81%8A%E8%81%8A%20throttle.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>如果我们将水龙头拧紧知道水是以水滴的形式流出, 不难发现, 每隔一段时间, 就会有一滴水流出来。</p>
</blockquote>
<p>如果我们预先设置一个执行周期, 当第一次调用动作(滴水)和第二次调用动作之间的间隔大于执行周期, 则执行这个动作。反正, 不执行。</p>
<p>直接翻译 <code>throttle</code> 这个单词。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">throttle</div><div class="line"></div><div class="line">n.	节流阀; 喉咙，气管; [机] 风门;</div><div class="line">vt.	扼杀，压制; 勒死，使窒息; 使节流; （用节汽阀等） 调节;</div><div class="line">vi.	节流，减速; 窒息;</div></pre></td></tr></table></figure>
<p>不难理解, throttle 其实就是一种控制数据或者流量大小的机制。</p>
<p>MrPeak 曾经写的文章中介绍过 <code>I/O Throttle</code> 在 <code>DISPATCH_QUEUE_PRIORITY_BACKGROUND</code> queue 的使用场景。在没有非常严苛的实时性要求的情况下, 对于重度依赖磁盘的后台任务, 使用 <code>DISPATCH_QUEUE_PRIORITY_BACKGROUND</code> 的 queue 会更加友好。文中也引用了官方文档的一段话 </p>
<blockquote>
<p>Items dispatched to the queue run at background priority; the queue is scheduled for execution after all high priority queues have been scheduled and the system runs items on a thread whose priority is set for background status. Such a thread has the lowest priority and any disk I/O is throttled to minimize the impact on the system.</p>
</blockquote>
<p>意思是说, 这种 Global Queue 会在其他所有的 queue 结束之后才会在后台执行。 这是最低优先级的。并且一些磁盘 I/O 操作会因为最小化对系统的影响而被节流。</p>
<a id="more"></a>
<p>文中也介绍了 ASI 和 AFN 中也出现了的 throttle。</p>
<blockquote>
<p>我们通过HTTP请求发送数据的时候，实际上数据是以Packet的形式存在于一个Send Buffer中的，应用层平时感知不到这个Buffer的存在。TCP提供可靠的传输，在弱网环境下，一个Packet一次传输失败的概率会升高，即使一次失败，TCP并不会马上认为请求失败了，而是会继续重试一段时间，同时TCP还保证Packet的有序传输，意味着前面的Packet如果不被ack，后面的Packet就会继续等待，如果我们一次往Send Buffer中写入大量的数据，那么在弱网环境下，排在后面的Packet失败的概率会变高，也就意味着我们HTTP请求失败的几率会变大。</p>
</blockquote>
<p>所以在弱网环境下, 使用 <code>Network Throttle</code> 机制 延迟发起一些请求或者减少往 Send Buffer 中的数据量。 也会大大的提高请求成功率。</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</div><div class="line"> Throttles request bandwidth by limiting the packet size and adding a delay for each chunk read from the upload stream.</div><div class="line"></div><div class="line"> When uploading over a 3G or EDGE connection, requests may fail with "request body stream exhausted". Setting a maximum packet size and delay according to the recommended values (`kAFUploadStream3GSuggestedPacketSize` and `kAFUploadStream3GSuggestedDelay`) lowers the risk of the input stream exceeding its allocated bandwidth. Unfortunately, there is no definite way to distinguish between a 3G, EDGE, or LTE connection over `NSURLConnection`. As such, it is not recommended that you throttle bandwidth based solely on network reachability. Instead, you should consider checking for the "request body stream exhausted" in a failure block, and then retrying the request with throttled bandwidth.</div><div class="line"></div><div class="line"> @param numberOfBytes Maximum packet size, in number of bytes. The default packet size for an input stream is 16kb.</div><div class="line"> @param delay Duration of delay each time a packet is read. By default, no delay is set.</div><div class="line"> */</span></div><div class="line"><span class="comment">// AFN 中的方法</span></div><div class="line">- (<span class="keyword">void</span>)throttleBandwidthWithPacketSize:(<span class="built_in">NSUInteger</span>)numberOfBytes</div><div class="line">                                  delay:(<span class="built_in">NSTimeInterval</span>)delay;</div></pre></td></tr></table></figure>
<h2 id="RAC-中的-throttle"><a href="#RAC-中的-throttle" class="headerlink" title="RAC 中的 throttle"></a>RAC 中的 throttle</h2><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[[[<span class="keyword">self</span>.button rac_signalForControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>] throttle:<span class="number">2</span>] subscribeNext:^(<span class="keyword">id</span> x) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"throttle"</span>);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>RAC 中的 <code>throttle</code> 接受一个时间间隔 <code>interval</code> 作为参数, 如果 <code>RACSignal</code> 发出的 <code>next</code> 事件之后的 interval 时间内不再发出 next 那么, 他返回的 RACSignal 会将这个事件发出。也就是说，这个方法会将发送比较频繁的 <code>next</code> 事件舍弃,只保留着一段时间之前的 next 事件。</p>
<p>使用场景:</p>
<p><strong>1、处理用户输入框的信号</strong></p>
<p>在处理搜索这样的需求的时候,有时候可能会在用户在输入框输入之后自动跟服务器交互。然后在下面列表中展示处理结果。如果用户打字很快,这个时候可能几秒钟之内连续发去好几个请求，其实没有什么意义。 这个时候使用 throttle 可以将保留用户输入的少数几个结果, 然后返回一个信号, 将最后的文字作为 next 发出。</p>
<p><strong>2、监听按钮点击</strong></p>
<p>界面上又一个按钮, 然后点击这个按钮, 发起网络请求, 跟上面的例子类似。如果用户快速的点击这个按钮也比较蛋疼。按照以前的写法, 我们可能会设置一个 <code>flag</code> 在点击的时候将这个 <code>flag</code> 设置为 no, 然后在 <code>button</code> 的 <code>action</code> 中判断是否发起请求,然后在请求结果回来之后, 把这个 <code>flag</code> 改回来。 想想都比较蛋疼。这时候使用 <code>throttle</code> 将按钮的点击事件节流一下, 就好了。</p>
<p>这个直接搬用 MrPeak <a href="http://mp.weixin.qq.com/s/MsPEZ9GUwCSZN1kngBkJxw">iOS编程中throttle那些事</a>中的swift代码。 毕竟 OC 的已经在上面了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">button.rx_tap</div><div class="line">   .throttle(<span class="number">0.5</span>, <span class="type">MainScheduler</span>.instance)</div><div class="line">   .subscribeNext &#123; <span class="number">_</span> <span class="keyword">in</span> </div><div class="line">      <span class="built_in">print</span>(<span class="string">"Hello World"</span>)</div><div class="line">   &#125;</div><div class="line">   .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure>
<p><strong>在 OC 的 demo 中(ReactiveCocoa 2.5.0) 我也发现了一个问题。第一次的点击也会在这个间隔之后响应。之后又使用了 ReactiveObjc(3.0) 中也发现了这个问题,而在 RxSwift 的 demo 中并没有这种情况。</strong></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实 throttle 是一种通过减少实际逻辑处理过程的执行来提高事件处理函数运行性能的手段, 它并没有减少事件的触发次数。写到最后, 发现文章有点变成学习心得了😂😂😂😂</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[我用RAC干了些什么(一)]]></title>
      <url>http://www.CepheusSun.com/%E6%88%91%E7%94%A8RAC%E5%B9%B2%E4%BA%86%E4%BA%9B%E4%BB%80%E4%B9%88(%E4%B8%80).html</url>
      <content type="html"><![CDATA[<p>对象间的交互, 主要有 <code>target-action</code>、<code>Notification</code>、<code>KVO</code>、<code>Delegate</code></p>
<h3 id="target-action"><a href="#target-action" class="headerlink" title="target-action"></a>target-action</h3><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[[<span class="keyword">self</span>.loginBtn rac_signalForControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>] subscribeNext:^(<span class="built_in">UIButton</span> *btn) &#123;</div><div class="line"> <span class="comment">// btn, 即 self.loginBtn</span></div><div class="line"> <span class="comment">// 这里执行点击之后的操作</span></div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>可以用 BlocksKit 替代</p>
<h3 id="KVO"><a href="#KVO" class="headerlink" title="KVO"></a>KVO</h3><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[RACObserve(<span class="keyword">self</span>, name) subscribeNext:^(<span class="built_in">NSString</span> *name) &#123;</div><div class="line">  <span class="comment">// name 即 self.name</span></div><div class="line">  <span class="comment">// 一旦 name 属性改变就立即进入到这个 block</span></div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// self.myLab.text 随着 self.myTF.text 的改变而改变</span></div><div class="line">RAC(<span class="keyword">self</span>.myLab, text) = <span class="keyword">self</span>.myTF.rac_textSignal;</div></pre></td></tr></table></figure>
<h3 id="Notificaiton"><a href="#Notificaiton" class="headerlink" title="Notificaiton"></a>Notificaiton</h3><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[[[[<span class="built_in">NSNotificationCenter</span> defaultCenter] </div><div class="line">rac_addObserverForName:<span class="built_in">UIKeyboardWillChangeFrameNotification</span> object:<span class="literal">nil</span>] </div><div class="line">  <span class="comment">// 这句不可少，表示 当 self 将要 dealloc 的时候，就要释放 通知</span></div><div class="line">  takeUntil:<span class="keyword">self</span>.rac_willDeallocSignal] </div><div class="line">  subscribeNext:^(<span class="built_in">NSNotification</span> *notification) &#123;</div><div class="line">      <span class="built_in">NSLog</span>(<span class="string">@"-----%@"</span>, notification.description);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>不要忘了还是原来的方法发送通知。</p>
<p><strong>通知已经通过 RAC 内部得到了释放，所以不需要额外在 - dealloc 添加移除的代码</strong></p>
<h3 id="RACCommand"><a href="#RACCommand" class="headerlink" title="RACCommand"></a>RACCommand</h3><blockquote>
<p>A command, represented by the RACCommand class, creates and subscribes to a signal in response to some action. This makes it easy to perform side-effecting work as the user interacts with the app.</p>
</blockquote>
<p>简单的使用RACCommand 实现一个 viewModel 的网络请求。</p>
<a id="more"></a>
<h4 id="每个viewModel都有不同的事件"><a href="#每个viewModel都有不同的事件" class="headerlink" title="每个viewModel都有不同的事件"></a>每个viewModel都有不同的事件</h4><p><code>ViewModel</code> 持有一个 <code>RACCommand</code> 的属性 <code>sourceCommand</code></p>
<h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 直接构建</span></div><div class="line">- (<span class="keyword">id</span>)initWithSignalBlock:(RACSignal * (^)(<span class="keyword">id</span> input))signalBlock;</div><div class="line"></div><div class="line"><span class="comment">// 只有当enabledSignal为true时, command才执行</span></div><div class="line">- (<span class="keyword">id</span>)initWithEnabled:(RACSignal *)enabledSignal signalBlock:(RACSignal * (^)(<span class="keyword">id</span> input))signalBlock;</div><div class="line"></div><div class="line"></div><div class="line">_sourceCommand = [[RACCommand alloc] initWithSignalBlock:^RACSignal *(<span class="keyword">id</span> input) &#123;</div><div class="line">    <span class="keyword">return</span> [[SYHTTPManager shared] request:[[SFAPI_Find_SectionList alloc] init]];</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h4 id="订阅"><a href="#订阅" class="headerlink" title="订阅"></a>订阅</h4><p>失败和成功不能像订阅其他<code>signal</code>一样直接<code>Next</code>、<code>onError</code>就可以。RACCommand 的失败消息, 都被分发到了 <code>errors</code> 这个属性。所以需要在这个地方订阅失败的消息.</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 订阅成功</span></div><div class="line">[_sourceCommand.executionSignals.switchToLatest subscribeNext:^(<span class="keyword">id</span> x) &#123;</div><div class="line">    PSLog(<span class="string">@"---%@"</span>,x);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 订阅失败</span></div><div class="line">[_sourceCommand.errors subscribeNext:^(<span class="keyword">id</span> x) &#123;</div><div class="line">    PSLog(<span class="string">@"xxx%@"</span>,x);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h4 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h4><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[command execute:someParameters];</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用Gitlab和Cocoapods创建私有pod]]></title>
      <url>http://www.CepheusSun.com/%E4%BD%BF%E7%94%A8Gitlab%E5%92%8CCocoapods%E5%88%9B%E5%BB%BA%E7%A7%81%E6%9C%89pod.html</url>
      <content type="html"><![CDATA[<p>每个稍微有点开发经验的 iOS 工程师都很容易的发现一下几点: </p>
<ol>
<li>几乎每个 iOS 的项目都适用了 <code>Cocoapods</code> </li>
<li>几乎每个 ObjC 的 iOS 项目是使用 <code>AFNetworking</code> 、 <code>SDWebImage</code>等三方框架。</li>
<li>几乎每个 Swift 的 iOS 项目都是用了 <code>Alamofire</code>、 <code>Kingfisher</code>等三方框架</li>
<li>每一次这些框架更新之后, 无数个工程师只需要在终端执行一下’pod update’ 或 <code>pod install</code>就能对应的更新自己项目中的代码</li>
</ol>
<p>这几乎都是每个 iOS 工程师经常都会遇到的事情。目前几乎所有优秀的 iOS 开源框架都支持了 CocoaPods。 几乎所有的 iOS 项目都集成了 CocoaPods</p>
<p>但是我们在日常的开发中也常会遇到这样的问题:</p>
<ol>
<li>很多公司都有好 App 同时在进行开发。</li>
<li>这些 App 或多或少在业务或者 UI 都很很多的重合。</li>
</ol>
<p>着就意味着有很多的代码在这些 App 中都是可以复用的。由于各种各样的原因,同个公司的不同 App 可能更新不同步。 app A 可能已经升级到新版本 app B 可能还在老版本。每个 App 分别管理势必会出现混乱的局面。一起管理又存在新旧交替的问题。如果每个 App 又不同的工程师负责, 即使可能有交叉 review 的机制, 但也很难保证公司代码的统一。很多逻辑都存在多段代码。</p>
<p>如何管理公司的公共代码库就成了一个比较麻烦的问题。</p>
<p>集成 IJKMediaPlayer 的时候,想到了使用git来区别版本,然后使用 framework 来管理共有代码。然而在出现了你的代码需要使用到其他的 Framework 的时候, 或者好几个 Framework 都需要使用同一个第三方框架的时候, 这么做确实也是件恼火的事情。</p>
<a id="more"></a>
<p>去年写了三了小组件 <code>SYNetwork</code> <code>EmptyDataKit</code> <code>SYPhotoBrowser</code>。前两个已经支持了 <code>Cocoapods</code> 之后网上不断的开始有一些利用 <code>cocoapods</code>进行组件化的文章。前些天在 去直播看了 casa 的两个关于组建化的直播之后。也一直蠢蠢欲动想自己也来做一下这件事情。</p>
<p>做开源的 repo 的时候，还是比较顺利的做到了这件事情。但是当时想用 <code>OSChina</code> 来做了几次都没有成功。就一直搁置了。</p>
<p>春节之后换了个工作, 适应了公司的环境, 简单的学习了一下 Swift 之后, 公司还是决定对现有的项目进行一次梳理,然后做一次重构。 所以很自然的还是想到了使用 <code>CocoaPods</code> 将公司原有的项目进行组件化。</p>
<p>结果了半天时间的尝试,报错create gitlab账号等等。终于达到了最初的想法。 所以将这个过程记录下来。</p>
<h2 id="为什么使用-GitLab"><a href="#为什么使用-GitLab" class="headerlink" title="为什么使用 GitLab"></a>为什么使用 GitLab</h2><p>其实上面已经说到了,为什么要使用 CocoaPods 来做这件事情。也说到了为什么要做这件事情。为什么使用 gitlab 呢？ 原因很简单。 毕竟 GitHub 的私有repo 是收费的。原谅我穷, 也可以说是公司扣门儿。只能把开源的东西放在, GitHub 把不能开源的东西放在其他地方。</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>其实没什么好准备的。 但是首先你得有个 Gitlab 账号吧！ 如果没有注册之后添加 SSH 就好了。</p>
<p>然后在 Gitlab 上创建一个空的仓库:XXX 然后记住这个项目的 地址: git@gitlab.com:XXX/XXX.git </p>
<h2 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h2><p>这些可以看我去年年底写开源 Cocoapods 的时候写的东西。<a href="http://cepheussun.com/2016/12/02/%E4%BD%BF%E7%94%A8Cocoapods%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84%E9%A1%B9%E7%9B%AE/">使用 Cocoapods 管理你的项目</a></p>
<p>基本上简化一下就是以下</p>
<h3 id="创建工程-1"><a href="#创建工程-1" class="headerlink" title="创建工程"></a>创建工程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pod lib create XXX</div></pre></td></tr></table></figure>
<p>回答问题</p>
<h3 id="添加私有库到本地-pod-库-多人开发其他人也应该有这个操作"><a href="#添加私有库到本地-pod-库-多人开发其他人也应该有这个操作" class="headerlink" title="添加私有库到本地 pod 库(多人开发其他人也应该有这个操作)"></a>添加私有库到本地 pod 库(多人开发其他人也应该有这个操作)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pod repo add XXX git@gitlab.com:XXX/XXX.git</div></pre></td></tr></table></figure>
<blockquote>
<p>可以检查一下: ~./cocoapods/repos 目录下又了 XXX 文件夹</p>
</blockquote>
<h3 id="将代码放进去"><a href="#将代码放进去" class="headerlink" title="将代码放进去"></a>将代码放进去</h3><blockquote>
<p>这一步上篇文章中有。 <a href="http://cepheussun.com/2016/12/02/%E4%BD%BF%E7%94%A8Cocoapods%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84%E9%A1%B9%E7%9B%AE/">使用 Cocoapods 管理你的项目</a></p>
</blockquote>
<h4 id="修改-podspec"><a href="#修改-podspec" class="headerlink" title="修改 .podspec"></a>修改 .podspec</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">Pod::Spec.new <span class="keyword">do</span> <span class="params">|s|</span></div><div class="line">  s.name             = <span class="string">'XXX'</span></div><div class="line">  s.version          = <span class="string">'0.0.1'</span></div><div class="line">  s.summary          = <span class="string">'这是项目的基础框架,所有项目都需要集成.'</span></div><div class="line"></div><div class="line">  s.homepage         = <span class="string">'https://gitlab.com/XXX/XXX'</span></div><div class="line">  s.license          = &#123; <span class="symbol">:type</span> =&gt; <span class="string">'MIT'</span>, <span class="symbol">:file</span> =&gt; <span class="string">'LICENSE'</span> &#125;</div><div class="line">  s.author           = &#123; <span class="string">'XXX'</span> =&gt; <span class="string">'cd_sunyang@163.com'</span> &#125;</div><div class="line">  s.source           = &#123; <span class="symbol">:git</span> =&gt; <span class="string">'git@gitlab.com:XXX/XXX.git'</span>, <span class="symbol">:tag</span> =&gt; s.version &#125;</div><div class="line"></div><div class="line">  s.ios.deployment_target = <span class="string">'8.0'</span></div><div class="line"></div><div class="line">  s.source_files = <span class="string">'XXX/Classes/**/*'</span></div><div class="line">  s.frameworks = <span class="string">'UIKit'</span></div><div class="line">  s.dependency <span class="string">'AFNetworking'</span></div><div class="line">  s.dependency <span class="string">'MBProgressHUD'</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>我这个Demo引用了两个公有的repo</p>
<h4 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git add .</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git commit -m &quot;commit comments&quot;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin master</div></pre></td></tr></table></figure>
<h4 id="检查一下"><a href="#检查一下" class="headerlink" title="检查一下"></a>检查一下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ pod lib lint</div><div class="line"></div><div class="line">#或者 pod lib lint --allow-warnings 忽略警告</div></pre></td></tr></table></figure>
<p>然后也可以在项目中的 <code>podfile</code>文件中添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">pod &apos;XXX&apos;, :path =&gt; &apos;/Users/xxx/Desktop/XXX&apos;</div><div class="line"></div><div class="line">## 最后路径以实际情况为准, 有可能不在桌面</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod install</div></pre></td></tr></table></figure>
<p>成功后我们的库会出现在<code>Development Pods</code>文件夹里面。可以检查一下有没有问题。</p>
<h4 id="提交私有库"><a href="#提交私有库" class="headerlink" title="提交私有库"></a>提交私有库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git tag 0.0.1</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push --tags</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod repo push XXX XXX.podspec</div></pre></td></tr></table></figure>
<h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><h4 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h4><p>在执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pod lib lint</div></pre></td></tr></table></figure></p>
<p>的时候,如果在你的文件中引入了一些三方库, 并且在<code>.podspec</code>文件中也添加了对用的<code>.dependency</code> 依然出现</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- ERROR | xcodebuild: /Users/xinhuikeji/Library/Developer/Xcode/DerivedData/App-cpgccqdjhyrbqwcpjanyefntolkf/Build/Products/Release-iphonesimulator/wLib/wLib.framework/Headers/BaseModel.h:13:9: error: include of non-modular header inside framework module &apos;wLib.BaseModel&apos; [-Werror,-Wnon-modular-include-in-framework-module]</div></pre></td></tr></table></figure>
<p>这样的错误。</p>
<p>在命令后面添加参数 <code>--use-libraries</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ pod lib lint xxx.podspec --use-libraries</div><div class="line">$ pod repo push XXX XXX.podspec --use-libraries</div></pre></td></tr></table></figure>
<p>在<a href="https://segmentfault.com/q/1010000006885674">segmentfault</a>中看到的答案。</p>
<h4 id="pod-search-找不到"><a href="#pod-search-找不到" class="headerlink" title="pod search 找不到"></a>pod search 找不到</h4><p>最后完成之后在新建的工程中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pod init</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vim podfile</div></pre></td></tr></table></figure>
<p>添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod &quot;SYBase&quot;, :git =&gt; &apos;git@gitlab.com:CepheusSun/SYBase.git&apos;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod install</div></pre></td></tr></table></figure>
<p>然后莫名其妙发现引入的 repo 是<code>0.1.0</code>或者什么巴拉巴拉版本的。这个时候更新一下pod</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod update</div></pre></td></tr></table></figure>
<p>再<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod install</div></pre></td></tr></table></figure></p>
<h4 id="强迫症"><a href="#强迫症" class="headerlink" title="强迫症"></a>强迫症</h4><p>如果遇到强迫症想要用 1.1.1 这样的三级版本的话。</p>
<p><code>XXX.podspec</code> 文件中的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">s.source = &#123; :git =&gt; &apos;git@gitlab.com:XXX/XXX.git&apos;, :tag =&gt; s.version &#125;</div></pre></td></tr></table></figure></p>
<p>必须用 s.version</p>
<p>我也不知道为什么。</p>
<h3 id="结束篇"><a href="#结束篇" class="headerlink" title="结束篇"></a>结束篇</h3><p>好久没写文章了。终于还是继续写了下去。这段时间自己学了学Swift 学了学 函数响应式编程, 七牛云直播的认证也下来的。接下来可能要研究一下推流相关的东西。2017 的前半段老实说学到了很多的东西。一直很感恩也很珍惜这样的情况。</p>
<p><strong>参考文档</strong></p>
<p><a href="http://www.th7.cn/program/ios/201702/1119967.shtml">组件化开发之CocoaPods私有库制作</a><br><a href="http://mt.sohu.com/20160824/n465823814.shtml">使用cocoapods管理私有库</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python 爬虫之一 "Requests 库学习"]]></title>
      <url>http://www.CepheusSun.com/Requests%20%E5%BA%93.html</url>
      <content type="html"><![CDATA[<p>这个系列的文章是用来记录我学习 python 爬虫的。这是第一篇。</p>
<a id="more"></a>
<h2 id="安装-requests-库"><a href="#安装-requests-库" class="headerlink" title="安装 requests 库"></a>安装 requests 库</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo pip install requests</div></pre></td></tr></table></figure>
<h2 id="验证安装是否成功"><a href="#验证安装是否成功" class="headerlink" title="验证安装是否成功"></a>验证安装是否成功</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ python</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment">#import requests</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(<span class="string">"http://www.baidu.com"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r.status_code</div><div class="line"><span class="number">200</span></div><div class="line">&gt;&gt;&gt;r.encoding = <span class="string">'utf-8'</span></div><div class="line">&gt;&gt;&gt;r.text</div></pre></td></tr></table></figure>
<h3 id="Requests-库的主要方法"><a href="#Requests-库的主要方法" class="headerlink" title="Requests 库的主要方法"></a>Requests 库的主要方法</h3><ul>
<li>requests.request()<blockquote>
<p>构造一个请求,支撑一下各方法的基础方法</p>
</blockquote>
</li>
<li>requests.get()<blockquote>
<p>获取HTML网页的主要方法,对应HTTP的GET</p>
</blockquote>
</li>
<li>requests.head()<blockquote>
<p>获取HTML网页头信息的方法,对应HTTP的HEAD</p>
</blockquote>
</li>
<li>requests.post()<blockquote>
<p>向HTML网页提交POST请求的方法,对应HTTP的POST</p>
</blockquote>
</li>
<li>requests.put()<blockquote>
<p>向HTML网页提交PUT请求的方法,对应HTTP的PUT</p>
</blockquote>
</li>
<li>requests.patch()<blockquote>
<p>向HTML网页提交局部修改请求,对应HTTP的POST</p>
</blockquote>
</li>
<li>requests.delete()<blockquote>
<p>向HTML网页提交删除请求,对应HTTP的POST</p>
</blockquote>
</li>
</ul>
<h3 id="Reuqest-最重要的两个对象"><a href="#Reuqest-最重要的两个对象" class="headerlink" title="Reuqest 最重要的两个对象"></a>Reuqest 最重要的两个对象</h3><h4 id="Request-对象"><a href="#Request-对象" class="headerlink" title="Request 对象"></a>Request 对象</h4><blockquote>
</blockquote>
<h4 id="Response-对象"><a href="#Response-对象" class="headerlink" title="Response 对象"></a>Response 对象</h4><blockquote>
<p>包含了爬虫返回的全部内容</p>
</blockquote>
<ul>
<li>r.status_code; 状态码,200表示成功,404表示失败</li>
<li>r.text; HTTP响应内容的字符串形式,即, URL 对应的页面内容</li>
<li><p>r.encoding; 从 HTTP header 中猜测的响应内容编码方式</p>
<blockquote>
<p>如果 header 中不存在 charset, 则认为编码是,ISO-8859-1</p>
</blockquote>
</li>
<li>r.apparent_encoding;从内容中分析出的响应内容编码方式(备选编码方式)</li>
<li>r.content; HTTP 响应内容的二进制形式</li>
</ul>
<h3 id="爬取网页的通用代码框架"><a href="#爬取网页的通用代码框架" class="headerlink" title="爬取网页的通用代码框架"></a>爬取网页的通用代码框架</h3><h4 id="Request-的异常"><a href="#Request-的异常" class="headerlink" title="Request 的异常"></a>Request 的异常</h4><ul>
<li>request.ConnectionError; 网络连接错误异常，如DNS查询失败，拒绝连接定</li>
<li>request.HTTPError; HTTP错误异常</li>
<li>request.URLRequired; URL 缺失异常</li>
<li>request.TooManyRedirects; 超过最大重定向次数,长生重定向异常</li>
<li>request.ConnectTimeout;链接远程服务器超时异常</li>
<li>requests.Timeout;请求URL超时，产生超时异常</li>
</ul>
<p>r.raise_for_status(); 如果不是200,产生已成requests.HTTPError</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -- coding: UTF-8 --</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span><span class="params">(url)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        r = requests.get(url, timeout=<span class="number">30</span>)</div><div class="line">        r.raise_for_status()</div><div class="line">        <span class="comment"># 如果状态不是200， 引发HTTPError异常</span></div><div class="line">        r.encoding = r.apparent_encoding</div><div class="line">        <span class="keyword">return</span> r.text</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">"产生异常"</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    url = <span class="string">"http://CepheusSun.com"</span></div><div class="line">    print(getHTMLText(url))</div></pre></td></tr></table></figure>
<center>通用代码框架</center>

<h4 id="HTTP-协议"><a href="#HTTP-协议" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h4><p>HTTP, Hypertext Transfer Protocol, 超文本传输协议。</p>
<p>HTTP 是一个基于”请求与响应”模式的、无状态的应用层协议。</p>
<p>HTTP 协议采用 URL 作为定位网络资源的标识。</p>
<p>URL格式: <a href="http://host[:port][path">http://host[:port][path</a>]</p>
<ul>
<li>host:合法的 Internet 主机域名或者 IP 地址</li>
<li>port:端口号,缺省端口为80</li>
<li>path:请求资源的路径</li>
</ul>
<p>URL 是通过 HTTP 协议存取资源的 Internet 路径, 一个 URL 对应一个数据资源。</p>
<p>HTTP 协议对资源的操作</p>
<p><strong>GET</strong>， 获取资源<br><strong>HEAD</strong>，获取资源头部信息<br><strong>POST</strong>，向URL位置的资源后附加新的数据<br><strong>PUT</strong>，储存一个资源，覆盖原来URL的资源<br><strong>PATCH</strong>，对原来的资源，进行局部更新<br><strong>DELETE</strong>，删除</p>
<h4 id="requests-request-method-url-kwargs"><a href="#requests-request-method-url-kwargs" class="headerlink" title="requests.request(method, url, **kwargs)"></a>requests.request(<code>method</code>, <code>url</code>, <code>**kwargs</code>)</h4><p>method: 请求方式,对应get/put/post等7种<br>url: 请求地址<br><code>**warrgs</code> 控制访问的参数，一共13个</p>
<ul>
<li><code>params</code>: 字典或字节序列，作为参数增加到url中</li>
<li><code>data</code>: 字典、字节序列或者文件对象，作为 Request 的内容</li>
<li><code>json</code>: JSON 格式的数据,作为 Request 的内容</li>
<li><code>headers</code>: 字典,HTTP定制头</li>
<li><code>cookies</code>:字典或CookieeJar, request中的cookie</li>
<li><code>auth</code>: 元组,支持HTTP认证功能</li>
<li><code>files</code>: 字典类型,传输文件</li>
<li><code>timeout</code>: 设定的超时时间，单位秒</li>
<li><p><code>proxies</code>: 字典类型,设定访问代理服务器,可以增加登录认证 </p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pxs = &#123;<span class="string">'http'</span>:<span class="string">'http//balabala'</span>,</div><div class="line"><span class="string">'https'</span>:<span class="string">'https"//balabala'</span></div><div class="line">&#125;</div><div class="line">r= requests.request(<span class="string">'GET'</span>,<span class="string">'http://www.baidu.com'</span>,proxies=pxs)</div></pre></td></tr></table></figure>
</li>
<li><p><code>allow_redirects</code>: True/False,默认True,重定向开关</p>
</li>
<li><code>stream</code>:True/False,默认True,获取内容立即下载开关</li>
<li><code>verify</code>:True/False,默认True,，认证 SSL 证书开关</li>
<li><code>cert</code>:本地SSL证书路径</li>
</ul>
<h3 id="网络爬虫的类型"><a href="#网络爬虫的类型" class="headerlink" title="网络爬虫的类型"></a>网络爬虫的类型</h3><p>按照尺寸区别</p>
<p>爬取网页，玩转网页。小规模,数据量小，爬取速度不敏感 requests 。</p>
<p>爬取网站，爬取系列网站. 中规模，数据规模较大，爬取速度敏感 Scrapy 库</p>
<p>爬取全网。大规模,搜索引擎，爬取速度关键,只能定制开发</p>
<h3 id="反爬虫"><a href="#反爬虫" class="headerlink" title="反爬虫"></a>反爬虫</h3><h4 id="来源审查-判断-User-Agent-进行限制"><a href="#来源审查-判断-User-Agent-进行限制" class="headerlink" title="来源审查: 判断 User-Agent 进行限制"></a>来源审查: 判断 User-Agent 进行限制</h4><blockquote>
<p>检查来访 HTTP 协议头的 User-Agent 域，只响应浏览器或者友好爬虫的访问。</p>
</blockquote>
<h4 id="发布公告-Robots-协议"><a href="#发布公告-Robots-协议" class="headerlink" title="发布公告 Robots 协议"></a>发布公告 Robots 协议</h4><blockquote>
<p>告知所有爬虫网站的爬取策略,要求爬虫遵守</p>
</blockquote>
<h3 id="Robots-协议"><a href="#Robots-协议" class="headerlink" title="Robots 协议"></a>Robots 协议</h3><p>Robots Exclusion Standard 网络爬虫排除标准</p>
<p>作用: 网站告知网络爬虫哪些页面可以抓取,哪些不行。<br>形式: 在网站根目录下的 robots.txt 文件<br>使用:</p>
<ul>
<li>网络爬虫：自动或者人工识别robots.txt， 再进行内容爬取</li>
<li>约束性: Robots 协议是建议但非约束性,网络爬虫可以不遵守，但是存在法律风险</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS面试集锦]]></title>
      <url>http://www.CepheusSun.com/interview.html</url>
      <content type="html"><![CDATA[<ol>
<li>写出中序遍历二叉树的算法(不限编程语言，已知 TreeRoot 为二叉树的根)</li>
<li>快速排序，归并排序的时间复杂度分别是什么？</li>
<li>UITableViewCell 可重用机制是什么?有什么要注意的地方?</li>
<li>OC 中的 @property 和 @synthesize 有什么用？</li>
<li>OC有没有重载(overload)和重写(overwrite)？有的话请举个例子。</li>
<li>列举出 iOS 开发中三种最常出现的循环引用的场景。</li>
<li>MVC 模式具体指什么？iOS现在流行的 MVVM 是什么？</li>
<li>iOS 中设计金钱计算和比较时，用数值应该用哪个类型来处理？</li>
<li>iOS 上触摸事件的视图检测和事件传递过程是怎样的？  </li>
<li>写一个折半查找或者快速排序</li>
</ol>
<hr>
<ol>
<li>对内存管理的理解。</li>
<li>类别的作用</li>
<li>点击屏幕上的按钮，系统做了什么？</li>
</ol>
<hr>
<ol>
<li><code>id</code> 和 <code>instancetype</code> 的区别?</li>
<li>有方法查看当前系统内存使用的情况吗？</li>
<li>为什么 NotificationCenter 要 removeObserver? 如何实现自动 remove？</li>
<li>iOS的沙盒目录结构是怎样的？ App Bundle 里面都有什么？</li>
<li>简单描述一下客户端的缓存机制？</li>
</ol>
<hr>
<ol>
<li>按钮或者 View 在进行 frame 动画的时候，为什么点击 frame 动画的重点位置才能触发事件？如何在动画过程中响应事件？<a id="more"></a>
</li>
</ol>
<p>#####1.写出中序遍历二叉树的算法(不限编程语言，已知 TreeRoot 为二叉树的根)。  </p>
<p>最近在学 Python 所以整理了一个 Python 版的</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -- coding: UTF-8 --</span></div><div class="line"><span class="comment"># @Date    : 2017-02-21</span></div><div class="line"><span class="comment"># @Author  : CepheusSun</span></div><div class="line"><span class="comment"># @Version : python 2.7</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tree</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data, left, right)</span>:</span></div><div class="line">        self.data = data</div><div class="line">        self.left = left</div><div class="line">        self.right = right</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">in_visit</span><span class="params">(tree)</span>:</span></div><div class="line">    <span class="string">"""递归中序遍历"""</span></div><div class="line">    <span class="keyword">if</span> tree:</div><div class="line">        in_visit(tree.left)</div><div class="line">        <span class="keyword">print</span> (tree.data)</div><div class="line">        in_visit(tree.right)</div><div class="line">        </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">in_stack</span><span class="params">(tree)</span>:</span></div><div class="line">    <span class="string">"""堆栈中序遍历"""</span></div><div class="line">    <span class="keyword">if</span> tree:</div><div class="line">        my_stack = []</div><div class="line">        node = tree</div><div class="line">        <span class="keyword">while</span> node <span class="keyword">or</span> my_stack:</div><div class="line">            <span class="keyword">while</span> node:</div><div class="line">                my_stack.append(node)</div><div class="line">                node = node.left</div><div class="line">            node = my_stack.pop()</div><div class="line">            print(node.data)</div><div class="line">            node = node.right</div><div class="line"></div><div class="line">            <span class="keyword">print</span> my_stack2.pop().data</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    node1 = Tree(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>)</div><div class="line">    node2 = Tree(<span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>)</div><div class="line">    node3 = Tree(<span class="number">3</span>, node1, node2)</div><div class="line">    node4 = Tree(<span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>)</div><div class="line">    node5 = Tree(<span class="number">5</span>, node4, node3)</div><div class="line">    print(<span class="string">"the post_visit is ..."</span>)</div><div class="line">    post_visit(node5)</div><div class="line">    post_stack(node5)</div><div class="line">    print(<span class="string">"the pre_visit is ..."</span>)</div><div class="line">    pre_visit(node5)</div><div class="line">    pre_stack(node5)</div><div class="line">    print(<span class="string">"the in_visit is ..."</span>)</div><div class="line">    in_visit(node5)</div><div class="line">    in_stack(node5)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure>
<h5 id="2-快速排序，归并排序的时间复杂度分别是什么？"><a href="#2-快速排序，归并排序的时间复杂度分别是什么？" class="headerlink" title="2.快速排序，归并排序的时间复杂度分别是什么？"></a>2.快速排序，归并排序的时间复杂度分别是什么？</h5><ul>
<li>归并排序：稳定，时间复杂度 O(nlog n)</li>
<li>快速排序：不稳定，时间复杂度 最理想 O(nlogn) 最差时间O(n^2)</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -- coding: UTF-8 --</span></div><div class="line"><span class="comment"># @Date    : 2017-02-21</span></div><div class="line"><span class="comment"># @Author  : CepheusSun</span></div><div class="line"><span class="comment"># @Version : python 2.7</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(array, first_index, last_index)</span>:</span></div><div class="line">    <span class="string">"""快速排序"""</span></div><div class="line">    <span class="keyword">if</span> first_index &lt; last_index:</div><div class="line">        div_index = partition(array, first_index, last_index)</div><div class="line">        quick_sort(array, first_index, div_index)</div><div class="line">        quick_sort(array, div_index + <span class="number">1</span>, last_index)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(array, first_index, last_index)</span>:</span></div><div class="line">    i = first_index - <span class="number">1</span></div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(first_index, last_index):</div><div class="line">        <span class="keyword">if</span> array[j] &lt;= array[last_index]:</div><div class="line">            i += <span class="number">1</span></div><div class="line">            array[i], array[j] = array[j], array[i]</div><div class="line">    array[i + <span class="number">1</span>], array[last_index] = array[last_index], array[i + <span class="number">1</span>]</div><div class="line">    <span class="keyword">return</span> i</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(left, right)</span>:</span></div><div class="line">    i, j = <span class="number">0</span>, <span class="number">0</span></div><div class="line">    res = []</div><div class="line">    <span class="keyword">while</span> i &lt; len(left) <span class="keyword">and</span> j &lt; len(right):</div><div class="line">        <span class="keyword">if</span> left[i] &lt;= right[j]:</div><div class="line">            res.append(left[i])</div><div class="line">            i += <span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            res.append(right[j])</div><div class="line">            j += <span class="number">1</span></div><div class="line">    res += left[i:]</div><div class="line">    res += right[j:]</div><div class="line">    <span class="keyword">return</span> res</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span><span class="params">(array)</span>:</span></div><div class="line">    <span class="string">"""并归排序"""</span></div><div class="line">    <span class="keyword">if</span> len(array) &lt;= <span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> array</div><div class="line">    num = len(array) / <span class="number">2</span></div><div class="line">    left = merge_sort(array[:num])</div><div class="line">    right = merge_sort(array[num:])</div><div class="line">    <span class="keyword">return</span> merge(left, right)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    array = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">76</span>, <span class="number">5</span>, <span class="number">567</span>, <span class="number">54</span>, <span class="number">6</span>, <span class="number">54</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">0</span>]</div><div class="line">    print(<span class="string">"initial array : \n"</span>, array)</div><div class="line">    print(<span class="string">"merge sort result: \n"</span>, merge_sort(array))</div><div class="line">    quick_sort(array, <span class="number">0</span>, len(array) - <span class="number">1</span>)</div><div class="line">    print(<span class="string">"result array :\n"</span>, array)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div><div class="line"></div><div class="line">``` </div><div class="line">    </div><div class="line"><span class="comment">##### 3.UITableViewCell 可重用机制是什么?有什么要注意的地方?</span></div><div class="line"></div><div class="line">UITableView 通过重用单元格来达到节省内存的目的：通过为每个单元格指定一个重用标识符，即指定来单元格的种类，以及当单元格滚出屏幕时，允许恢复单元格以便重用。对于不同种类的单元格使用不同的ID，对于简单的表格，一个标识符就够了。</div><div class="line"></div><div class="line">需要注意的地方：</div><div class="line">    取出来的cell是有可能已经捆绑过数据或者加过子视图的，如果有必要，要清除需要用与显示的数据和remove掉add过的子视图。不然会造成错乱的情况</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">##### 4.OC 中的 @property 和 @synthesize 有什么用？</span></div><div class="line"></div><div class="line">答：</div><div class="line">iOS2<span class="number">.0</span> Apple引入 `@property` `@synthesize` 概念，两者组合使用可以自动生成 `seter` `geter`方法，iOS4<span class="number">.0</span>以后只需要 `@property` 即可实现 自动生成 `seter` `geter`方法。</div></pre></td></tr></table></figure>
<p>//setter</p>
<ul>
<li>(void)setObjStr:(NSString *)objStr {<br>   if (_ objStr != objStr) {<pre><code>[_objStr release];
 _objStr = [objStr copy];
</code></pre>   }<br>}<br>//getter</li>
<li>(NSString *)objStr {<br>   return _objStr;<br>}<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">以上代码等价于</div></pre></td></tr></table></figure>
</li>
</ul>
<p>//iOS2.0-iOS4.0<br>@interface Obj : NSObject<br>@property (nonatomic, copy) NSString *objStr;<br>@end</p>
<p>@implementation Object<br>@synthesize objStr = _ objStr;<br>@end<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iOS4.0及以后</div></pre></td></tr></table></figure></p>
<p>@interface Obj : NSObject<br>@property (nonatomic, copy) NSString *objStr;<br>@end<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">##### 5.OC有没有重载(overload)和重写(overwrite)？有的话请举个例子。</div><div class="line"></div><div class="line">答：</div><div class="line">OC 语言不支持重载</div><div class="line"></div><div class="line">```oc</div><div class="line">-(void)doSth:(NSInteger)integer;</div><div class="line">-(void)doSth:(NSString *)str; </div><div class="line">//对Objective-C而言是一样的，都叫方法doSth: 同时定义实现这两个方法是无法编译通过的。 若要达到类似重载的效果，可以这样跟不同参数：</div><div class="line">-(void)doSthWithInt:(NSInteger)integer;</div><div class="line">-(void)doSthWithStr:(NSString *)str</div></pre></td></tr></table></figure></p>
<p>OC 支持重写</p>
<pre><code>子类重写父类方法
</code></pre><h5 id="6-列举出-iOS-开发中三种最常出现的循环引用的场景。"><a href="#6-列举出-iOS-开发中三种最常出现的循环引用的场景。" class="headerlink" title="6.列举出 iOS 开发中三种最常出现的循环引用的场景。"></a>6.列举出 iOS 开发中三种最常出现的循环引用的场景。</h5><p>答：</p>
<ul>
<li>delegate 被强引用了，代理应该使用 weak (拓展 weak 干了啥使自己可以防止循环的出现)  </li>
<li>使用 block 的时候，注意是否出现互相持有。  </li>
<li>使用 NSTimer 的时候，我们可能会使<code>+scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:</code> 这个方法在建立的时候需要指定 target ，会被 timer retain 一份。因为 timer 还在一直执行，就会导致无法运行 dealloc的方法。正确的做法是在 viewDidDisappear: 的时候停止timer </li>
</ul>
<h5 id="7-MVC-模式具体指什么？iOS现在流行的-MVVM-是什么？"><a href="#7-MVC-模式具体指什么？iOS现在流行的-MVVM-是什么？" class="headerlink" title="7.MVC 模式具体指什么？iOS现在流行的 MVVM 是什么？"></a>7.MVC 模式具体指什么？iOS现在流行的 MVVM 是什么？</h5><p>MVC：</p>
<pre><code>MVC模式考虑三种对象：模型对象、视图对象和控制器对象。 模型对象负责应用程序的数据和定义操作数据的逻辑； 视图对象知道如何显示应用程序的模型数据； 控制器对象是M与V之间的协调者。
</code></pre><p>MVVM：</p>
<pre><code>MVVM 把 View Controller 作为 View
View 和 Model 之间没有紧耦合
MVVM 是在 View 和 ViewModel 之间进行绑定。
什么是 ViewModel 呢？基本上来说，它是 View 和 View 状态的独立于     UIKit 外的一个呈现，ViewModel 调用 Model 中的的变化，根据 Model 的变化进行调整，并且通过 View 和 ViewModel 的绑定，同步调整 View。
</code></pre><h5 id="8-iOS-中设计金钱计算和比较时，用数值应该用哪个类型来处理？"><a href="#8-iOS-中设计金钱计算和比较时，用数值应该用哪个类型来处理？" class="headerlink" title="8.iOS 中设计金钱计算和比较时，用数值应该用哪个类型来处理？"></a>8.iOS 中设计金钱计算和比较时，用数值应该用哪个类型来处理？</h5><ul>
<li><code>NSDecimalNumber</code> 继承于 <code>NSNumber</code>   </li>
<li><p><code>NSDecimalNumber</code> 包含  加减乘除，幂运算，指数运算，四舍五入，比较运算。  </p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line">	/** 示例 比较运算</div><div class="line">	NSOrderedAscending 升序</div><div class="line">	NSOrderedSame 相等</div><div class="line">	NSOrderedDescending 降序</div><div class="line">	- (NSComparisonResult)compare:(NSNumber *)decimalNumber;</div><div class="line">	*/</div><div class="line">	NSDecimalNumber *discount1 = [NSDecimalNumber decimalNumberWithString:@&quot;1.2&quot;];</div><div class="line">	NSDecimalNumber *discount2 = [NSDecimalNumber decimalNumberWithString:@&quot;1.3&quot;];</div><div class="line">	NSComparisonResult result = [discount1 compare:discount2];</div><div class="line">	if (result == NSOrderedAscending) &#123;</div><div class="line">	    NSLog(@&quot;1.2 &lt; 1.3&quot;);</div><div class="line">	&#125; else if (result == NSOrderedSame) &#123;</div><div class="line">	    NSLog(@&quot;1.2 == 1.3&quot;);</div><div class="line">	&#125; else if (result == NSOrderedDescending) &#123;</div><div class="line">	    NSLog(@&quot;1.2 &gt; 1.3&quot;);</div><div class="line">	&#125;</div><div class="line">	输出结果 1.2 &lt; 1.3</div><div class="line">	``` </div><div class="line"></div><div class="line">##### 9.iOS 上触摸事件的视图检测和事件传递过程是怎样的？  </div><div class="line"></div><div class="line">* 发生触摸事件后，系统会将该事件加入到一个由UIApplication管理的事件队列中。(为什么是队列而不是栈？因为队列的特定是先进先出，先产生的事件先处理才符合常理，所以把事件添加到队列。)</div><div class="line"></div><div class="line">* UIApplication会从事件队列中取出最前面的事件，并将事件分发下去以便处理，通常，先发送事件给应用程序的主窗口（keyWindow）。</div><div class="line"></div><div class="line">* 主窗口会在视图层次结构中找到一个最合适的视图来处理触摸事件，这也是整个事件处理过程的第一步。</div><div class="line">找到合适的视图控件后，就会调用视图控件的touches方法来作具体的事件处理。</div><div class="line"></div><div class="line">##### 10.写一个折半查找或者快速排序</div><div class="line"></div><div class="line">    用 Python写了一个二分查找</div><div class="line">    </div><div class="line">```python</div><div class="line"># -- coding: UTF-8 --</div><div class="line"># @Date    : 2017-02-21</div><div class="line"># @Author  : CepheusSun</div><div class="line"># @Version : python 2.7</div><div class="line"></div><div class="line"></div><div class="line">def in_bisect(word_list, word):</div><div class="line">    &quot;&quot;&quot;check weather a word is in a list using bisection search.</div><div class="line">    Precondition: the words in the list are sorted</div><div class="line"></div><div class="line">    :param word_list: list of strings</div><div class="line">    :param word: string</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    if len(word_list) == 0:</div><div class="line">        return False</div><div class="line"></div><div class="line">    # 结果四舍五入</div><div class="line">    i = len(word_list) // 2</div><div class="line">    if word_list[i] == word:</div><div class="line">        return True</div><div class="line"></div><div class="line">    if word_list[i] &gt; word:</div><div class="line">        # search the first half</div><div class="line">        return in_bisect(word_list[:i], word)</div><div class="line">    else:</div><div class="line">        # search the second half</div><div class="line">        return in_bisect(word_list[i + 1:], word)</div><div class="line"></div><div class="line"></div><div class="line">def main():</div><div class="line">    array = [&apos;1&apos;, &apos;asf&apos;, &apos;sf2&apos;, &apos;df1&apos;, &apos;2das&apos;, &apos;5asdfd&apos;, &apos;0sadf&apos;,</div><div class="line">            &apos;2ge&apos;, &apos;efc2&apos;, &apos;1eds&apos;, &apos;2ef&apos;, &apos;2apple&apos;, &apos;apple&apos;, &apos;orange&apos;]</div><div class="line">    print(in_bisect(array, &apos;1&apos;))</div><div class="line">    print(in_bisect(array, &apos;111&apos;))</div><div class="line"></div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    main()</div></pre></td></tr></table></figure>
</li>
</ul>
<p>Question 1.内存管理理解不正确的是<br>A 程序A里有一段内存被成功申请完成之后，内存计数器就从0变为1 (这个过程是alloc);<br>B 程序B里要使用已存在内存，那么内存计数器从1变为2 (这个过程是retain或者copy);<br>C 紧接着程序A不需要这个内存了，那么程序A就把这个内存计数器减1 (这个过程是release);<br>D 当系统发现这个内存计数器变为小于等于0，那么就调用垃圾回收程序把这段内存回收(这个过程是dealloc)；</p>
<p>Question 2.类别的作用不正确的是<br>A 将类的实现分散到多个不同文件或多个不同框架中。<br>B 创建对私有方法的前向引用。<br>C 向对象添加非正式协议。 继承可以增加，修改或者删除方法。<br>D 不能添加属性  </p>
<p>Question 3.点击屏幕上的按钮，系统做了什么？  </p>
<h2 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h2><p>Answer 1. B  使用并不会增加引用技术，持有才会。<br>Answer 2. D  </p>
<pre><code>class-continuation分类是唯一能给添加属性的分类。而所谓的关联对象，我在52个方法中找到了这样一句话：
    * “定义关联对象时可以指定内存管理语义，用以模仿定义属性时所采用的“拥有”和“非拥有关系””
可见，关连对象跟属性是两个不同的概念，不能混为一谈。

类别的三个作用：
    * 可以将类的实现分散到多个不同文件或多个不同框架中，方便代码管理。
    * 创建对私有方法的前向引用。比如在别人的类或者框架中有一个方法的是没有说明的，这时候通过类别声明这个方法，就可以在不破坏原来框架的情况下，使用到这个方法。
    * 向对象添加非正式协议。
</code></pre><p>Answer 3.   </p>
<ul>
<li>触摸事件的传递是从父空间传递到子控件，如果父空间不能接收触摸事件，那么子控件就不能接收触摸事件  </li>
<li>发生触摸事件后，系统会将该事件加入到一个由UIApplication管理的事件队列中。(为什么是队列而不是栈？因为队列的特定是先进先出，先产生的事件先处理才符合常理，所以把事件添加到队列。)  </li>
<li>UIApplication会从事件队列中取出最前面的事件，并将事件分发下去以便处理，通常，先发送事件给应用程序的主窗口（keyWindow）。  </li>
<li>主窗口会在视图层次结构中找到一个最合适的视图来处理触摸事件，这也是整个事件处理过程的第一步。<br>找到合适的视图控件后，就会调用视图控件的touches方法来作具体的事件处理。  </li>
</ul>
<hr>
<p>#####1. <code>id</code> 和 <code>instancetype</code> 的区别?</p>
<ol>
<li><p>在 ARC(Auto Reference Count)环境下:</p>
<pre><code>instancetype 用来在编译期确定实例的类型,而使用 id 的话,编译器不检查类型, 运行时检查类型.
</code></pre><p>在 MRC(Manual Reference Count)环境下:</p>
<pre><code>instancetype 和 id 一样,不做具体类型检查
</code></pre></li>
<li><p>id 可以作为方法的参数,但 instancetype 不可以<br>instancetype 只适用于初始化方法和便利构造器的返回值类型</p>
</li>
</ol>
<p>#####2. 有方法查看当前系统内存使用的情况吗？<br>一般我上手新的项目,检查内存问题三部曲;</p>
<ol>
<li>静态分析, 初步了解代码不规范的地方,或者是一些内存泄漏问题。</li>
<li>instrument, 初略的定位我们在什么地方发生了内存泄漏。</li>
<li>代码测试内存泄漏, 观察对象的生成和销毁是否配对。使用MLeaksFinder来配合检查</li>
</ol>
<ul>
<li>两个对象互相持有，主要是 delegate 使用 weak 属性, 在 iOS8 上系统 delegate 使用的是 assign 这会带来一些问题,踩过坑的老司机可以提一下。</li>
<li>有时候需要使用 removeFromSuperView 来释放, a 持有了 b ， b 被 add 到了 c 上, 而在程序设计中b 的生命周期应该和 a 相同, 这个时候使用 self.b = nil 并不会吧 b 释放, 我们应该在之前加上 <code>[b removeFromSuperView]</code></li>
</ul>
<p>#####3. 为什么 NotificationCenter 要 removeObserver? 如何实现自动 remove？</p>
<ul>
<li>如果不移除，万一注册通知的类被销毁之后又发送了通知, 程序会 crash。 因为野指针。</li>
<li>实现自动 remove;通过自动释放机制, 通过动态属性将 remove 转移给第三者,解除耦合,达到自动实现 remove 。</li>
</ul>
<p>#####4. iOS的沙盒目录结构是怎样的？ App Bundle 里面都有什么？</p>
<ol>
<li>沙盒结构<ul>
<li>Application: 存放程序源文件, 上架前经过数字签名,上架后不可修改</li>
<li>Documents: 常用目录, iCloud 备份目录,存放数据,这里不能缓存文件,否则上架不被通过</li>
<li>Library<ul>
<li>Caches: 存放体积大又不需要备份的数据, SDWebImage 就是这个</li>
<li>Preference: 设置目录, iCloud会备份设置信息。</li>
<li>tmp: 存放临时文件,不会被备份,而且这个文件下的数据有可能随时被清除</li>
</ul>
</li>
</ul>
</li>
<li>App Bundle<ul>
<li>Info.plist: 文件的配置信息,系统依赖次文件获取应用程序的相关信息。</li>
<li>可执行文件: 此文件包含应用程序的入口和通过静态链接到应用程序 target 的代码。</li>
<li>资源文件: 图片声音</li>
<li>其他: 可以潜入定制的数据资源。</li>
</ul>
</li>
</ol>
<h5 id="5-简单描述一下客户端的缓存机制？"><a href="#5-简单描述一下客户端的缓存机制？" class="headerlink" title="5.简单描述一下客户端的缓存机制？"></a>5.简单描述一下客户端的缓存机制？</h5><ul>
<li>缓存可以分为:<ul>
<li>内存数据缓存</li>
<li>数据库缓存</li>
<li>文件缓存</li>
</ul>
</li>
<li>每次想获取数据的时候<ol>
<li>检查内存中有无缓存</li>
<li>检查本地有无缓存(数据库\文件)</li>
<li>发起请求</li>
<li>将服务器返回的数据进行缓存(内存数据库文件)</li>
</ol>
</li>
</ul>
<hr>
<h5 id="1-按钮或者-View-在进行-frame-动画的时候，为什么点击-frame-动画的重点位置才能触发事件？如何在动画过程中响应事件？"><a href="#1-按钮或者-View-在进行-frame-动画的时候，为什么点击-frame-动画的重点位置才能触发事件？如何在动画过程中响应事件？" class="headerlink" title="1.按钮或者 View 在进行 frame 动画的时候，为什么点击 frame 动画的重点位置才能触发事件？如何在动画过程中响应事件？"></a>1.按钮或者 View 在进行 frame 动画的时候，为什么点击 frame 动画的重点位置才能触发事件？如何在动画过程中响应事件？</h5><p>答：<br>① <del>动画开始后有两个图层：</del><br>（修改原因：不是动画开始后,而是 view 出现了的时候。只要 view 出现在试图上,他都具有这两个图层。）<br><strong>iOS 中对于 UIView 具有一个 CALayer 类的属性 layer 我们姑且叫他 rootLayer。而每一个 CALayer 都有两个属性：</strong><br><del>一个 <code>view.layer.presentationLayer</code> 用来显示动画（属性随动画过程慢慢改变)</del><br>（修改原因:感觉显示动画这个用法不大准确,我语文也不好😂）<br><strong>一个<code>resentationLayer</code> 指呈现图层,是模型图层的复制，他的属性值代表了在任何指定时刻当前的显示。所以在 UIView 没有出现的时候这个 view 的属性值为 nil， 出现之后无论 view 是否动画，这个值的内存地址每次打印都不一样。</strong></p>
<p><del>一个 <code>view.layer</code> 用来处理用户交互（动画一开始属性值立即改变到动画结束时的状态和位置)</del><br>(修改原因: CALayer 是不处理交互的,这一点可以从UIView有<code>userInteractionEnabled</code>这个属性，而CALayer没有可以看出,并且看 iOS-CoreAnimation这本书,这样使用 modelLayer 来描述更 MVC 一些)<br><strong>一个<code>modelLayer</code> 指模型层,在 view 显示出来的时候<code>view.layer</code> = <code>view.layer.presentationLayer.modelLayer</code> = <code>view.layer.view.layer.modelLayer</code>。 三者内存地址是一样的,保存实际的属性值。</strong></p>
<p><strong>最后总结：当一个图层的属性改变的时候，我们设置的属性并没有直接调用图层的外观，只是定义了图层动画结束之后将要变化的外观。</strong>具体关系见下图：</p>
<center><img src="http://ocg4av0wv.bkt.clouddn.com/layer%E7%9F%A5%E8%AF%86.png" alt=""><br>from《iOS-CoreAnimation》<br></center>

<p>② 要在移动动画的过程中处理 触摸可以重写 <code>UIView的hitTest</code> 方法<br>(总的来说，通过<code>view.layer.presentationLayer</code>的相关属性，就可以实现响应需求了，通过<code>touchbegan</code>判断用户点击的位置是否在<code>view.layer.presentationLayer.frame</code>之内，是《iOS—CoreAnimation》中另外一个实现方式)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">- (id)hitTest:(CGPoint)point withEvent:(UIEvent *)event &#123;</div><div class="line">    NSArray *subViews = self.subviews;</div><div class="line">    for (UIView *subView in subViews) &#123;</div><div class="line">        if([subView isKindOfClass:[FoamImageView class]])&#123; //是要找的图片</div><div class="line">            CALayer *layer = subView.layer.presentationLayer; //图片的显示层            </div><div class="line">            if(CGRectContainsPoint(layer.frame, point))&#123; //触摸点在显示层中，返回当前图片</div><div class="line">                return subView;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return [super hitTest:point withEvent:event];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event &#123;</div><div class="line">    CGPoint point = [[touches anyObject] locationInView:self.view];</div><div class="line">    </div><div class="line">    if (CGRectContainsPoint(button_.layer.presentationLayer.frame, point)) &#123;</div><div class="line">        NSLog(@&quot;youxiangying&quot;);</div><div class="line">        [self buttonEvent:button_];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>参考资料</strong><br><a href="http://blog.sina.com.cn/s/blog_771849d301010ta0.html">资料1</a></p>
<p><a href="https://my.oschina.net/iamzkt/blog/126503">Objective-C 之 @property和@synthesize</a>  </p>
<p><a href="https://www.pupboss.com/property-and-synthesize/">回炉篇之（一）– @property和@synthesize</a>  </p>
<p><a href="http://arthurchen.blog.51cto.com/2483760/761426">iOS开发：Objective-C精确的货币计算</a> </p>
<p><a href="http://www.jianshu.com/p/4703d704c953">‘NSDecimalNumber–十进制数’使用方法(带例子)</a></p>
<p><a href="https://yq.aliyun.com/wenzhang/show_41715">objective c-OC中有方法重载吗？具体是怎么样？</a></p>
<p><a href="http://www.cnblogs.com/LiLihongqiang/p/5645907.html">http://www.cnblogs.com/LiLihongqiang/p/5645907.html</a><br><a href="http://www.infocool.net/kb/IOS/201610/200104.html">http://www.infocool.net/kb/IOS/201610/200104.html</a><br><a href="http://www.cocoachina.com/ios/20160113/14896.html">http://www.cocoachina.com/ios/20160113/14896.html</a><br><a href="http://www.jianshu.com/p/2e074db792ba">http://www.jianshu.com/p/2e074db792ba</a>  </p>
<p>think python</p>
<p><a href="http://www.voidcn.com/blog/lixuemei45/article/p-5021040.html">www.voidcn.com</a><br><a href="https://www.amazon.com/iOS-Core-Animation-Advanced-Techniques-ebook/dp/B00EHJCORC/ref=sr_1_1?ie=UTF8&amp;qid=1423192842&amp;sr=8-1&amp;keywords=Core+Animation+Advanced+Techniques">iOS-CoreAnimation</a></p>
<hr>
<h5 id="写在后面的话"><a href="#写在后面的话" class="headerlink" title="写在后面的话"></a>写在后面的话</h5><p>这个系列所有的文章都是在一个QQ群里面跟小伙伴们讨论出来的,每个 topic 都已经放在了 GitHub 的一个仓库中 <a href="https://github.com/GetOfferSoldier/Objective-C"><strong>这是地址</strong></a>。 所有内容的更新的将在这个仓库中进行,在博客中将不再进行更新。有任何问题，都可以在这个仓库中给我们提 issue 或者 pull request.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python 中 str 和 list 互相转换]]></title>
      <url>http://www.CepheusSun.com/python%20%E4%B8%AD%20str%20%E5%92%8C%20list%20%E4%BA%92%E7%9B%B8%E8%BD%AC%E6%8D%A2.html</url>
      <content type="html"><![CDATA[<p>一些相关方法、函数、运算符的整理</p>
<a id="more"></a>
<h3 id="str-gt-list"><a href="#str-gt-list" class="headerlink" title="str -&gt; list"></a>str -&gt; list</h3><h4 id="将字符串按照字符分割成字符list"><a href="#将字符串按照字符分割成字符list" class="headerlink" title="将字符串按照字符分割成字符list"></a>将字符串按照字符分割成字符list</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">s = <span class="string">'spam'</span></div><div class="line">t = list(s)</div><div class="line"><span class="keyword">print</span> t</div><div class="line"></div><div class="line"><span class="comment">#结果：['s', 'p', 'a', 'm']</span></div></pre></td></tr></table></figure>
<h4 id="将字符串按照分隔符，分割成字符-串-list"><a href="#将字符串按照分隔符，分割成字符-串-list" class="headerlink" title="将字符串按照分隔符，分割成字符(串)list"></a>将字符串按照分隔符，分割成字符(串)list</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">s = <span class="string">'spam-spam-spsm'</span></div><div class="line">delimiter = <span class="string">'-'</span></div><div class="line">s.split(delimiter)</div><div class="line"><span class="keyword">print</span> s.split(delimiter)</div><div class="line"></div><div class="line"><span class="comment">#结果：['spam', 'spam', 'spsm']</span></div></pre></td></tr></table></figure>
<h4 id="使用-split-方法将字符串分成单词"><a href="#使用-split-方法将字符串分成单词" class="headerlink" title="使用 split 方法将字符串分成单词"></a>使用 split 方法将字符串分成单词</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">s = <span class="string">'pinging for the fjords'</span></div><div class="line">t = s.split()</div><div class="line"><span class="keyword">print</span> t</div><div class="line"></div><div class="line"><span class="comment">#结果：['pinging', 'for', 'the', 'fjords']</span></div></pre></td></tr></table></figure>
<h3 id="list-gt-str"><a href="#list-gt-str" class="headerlink" title="list -&gt; str"></a>list -&gt; str</h3><h4 id="使用字符-串-将-list-串联成字符串"><a href="#使用字符-串-将-list-串联成字符串" class="headerlink" title="使用字符(串)将 list 串联成字符串"></a>使用字符(串)将 list 串联成字符串</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">t = [<span class="string">'pinging'</span>, <span class="string">'for'</span>, <span class="string">'the'</span>, <span class="string">'fjords'</span>]</div><div class="line">delimiter = <span class="string">' '</span></div><div class="line"><span class="keyword">print</span> delimiter.join(t)</div><div class="line"></div><div class="line"><span class="comment">#结果：pinging for the fjords</span></div><div class="line"><span class="comment"># 如果不需要分隔符，第二行中delimiter复制为''空字符串即可</span></div></pre></td></tr></table></figure>
<h3 id="数组-增-删-改"><a href="#数组-增-删-改" class="headerlink" title="数组 增 删 改"></a>数组 增 删 改</h3><h4 id="增"><a href="#增" class="headerlink" title="增"></a>增</h4><p><strong>直接在后面添加一个元素</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">t = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</div><div class="line">t.append(<span class="string">'d'</span>)</div><div class="line"><span class="keyword">print</span> t</div><div class="line"></div><div class="line"><span class="comment">#结果：['a', 'b', 'c', 'd']</span></div></pre></td></tr></table></figure>
<p><strong>将一个数组遍历添加在后面</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">t = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</div><div class="line">t2 = [<span class="string">'e'</span> ,<span class="string">'f'</span>]</div><div class="line">t.extend(t2)</div><div class="line"><span class="keyword">print</span> t</div><div class="line"></div><div class="line"><span class="comment">#结果：['a', 'b', 'c', 'e', 'f']</span></div></pre></td></tr></table></figure>
<h4 id="删"><a href="#删" class="headerlink" title="删"></a>删</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 以下方法运算符都可以使用切片</span></div><div class="line"></div><div class="line">t = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</div><div class="line"><span class="comment"># del 运算符 如果不需要被删除的值，使用这个</span></div><div class="line"><span class="keyword">del</span> t[<span class="number">1</span>]</div><div class="line"></div><div class="line"><span class="comment"># pop 方法 改变列表并返回被删除的元素。如果不提供索引，删除并返回最后一个元素。</span></div><div class="line"><span class="keyword">print</span> t.pop(<span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="comment"># remove 方法 删除不知道索引的元素, 只删除第一个</span></div><div class="line">t.remove(<span class="string">'a'</span>)</div><div class="line"><span class="keyword">print</span> t</div></pre></td></tr></table></figure>
<h4 id="改"><a href="#改" class="headerlink" title="改"></a>改</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">t = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</div><div class="line">t[<span class="number">0</span>] = <span class="string">'c'</span></div><div class="line"><span class="keyword">print</span> t</div><div class="line"></div><div class="line"><span class="comment">#结果：['c', 'b', 'c']</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python SyntaxError Non-ASCII character \xe9 in file xxx]]></title>
      <url>http://www.CepheusSun.com/python%20SyntaxError%20Non-ASCII%20character%20xe9%20in%20file%20xxx.html</url>
      <content type="html"><![CDATA[<p>错误类型:SyntaxError: Non-ASCII character <code>\xe9</code> in file xxx</p>
<a id="more"></a>
<p>最近写 python 代码的时候，简单的一下代码，确出现错误。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">points = int(raw_input(<span class="string">"领先的分数："</span>))</div><div class="line">is_in_control = raw_input(<span class="string">"是否领先队控球(Y／N：)"</span>)</div><div class="line">last_seconds = int(raw_input(<span class="string">"比赛剩余秒数："</span>))</div><div class="line"></div><div class="line">points -= <span class="number">3</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> is_in_control == <span class="string">'Y'</span>:</div><div class="line">    points += <span class="number">0.5</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    points -= <span class="number">0.5</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> points &lt; <span class="number">0</span>:</div><div class="line">    points = <span class="number">0</span></div><div class="line"></div><div class="line"></div><div class="line">points = points ** <span class="number">2</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> points &gt; last_seconds:</div><div class="line">    <span class="keyword">print</span> <span class="string">"safe"</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span>  <span class="string">"unsafe"</span></div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SyntaxError: Non-ASCII character &apos;\xe9&apos; in file /Users/programersunny/PycharmProjects/pythonDemo/hello on line 58, but no encoding declared; see http://www.python.org/peps/pep-0263.html for details</div></pre></td></tr></table></figure>
<p>打开 URL 阅读了一下，找到原因：</p>
<blockquote>
<p>Python will default to ASCII as standard encoding if no other encoding hints are given.</p>
</blockquote>
<p>Python的默认编码文件是用的ASCII码，你将文件存成了UTF-8也没用。</p>
<p>解决办法很简单：</p>
<p>只要在文件开头加入<code># -*- coding: UTF-8 —</code>或者<code>#coding=utf-8</code> 就行了。</p>
<p>注意，这两行代码必须添加在<code>.py</code>文件的第一行或者第二行。如果在第三行以及以上，都没有效果，这个在这个网址上也有描述</p>
<blockquote>
<p>To define a source code encoding, a magic comment must be placed into the source files either as first or second line in the file</p>
</blockquote>
<p>翻译一下：</p>
<blockquote>
<p>为了定义源码的编码格式，一个神奇的注释需要被添加到源文件的第一行或者第二行中。</p>
</blockquote>
<p>神奇的注释已经在上文提到了。</p>
<p><a href="https://www.python.org/dev/peps/pep-0263/">上文提到的URL地址</a></p>
<p>纪念一下自己在 python 中遇到的第一个小坑。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS小知识集锦-NSString常用方法汇总]]></title>
      <url>http://www.CepheusSun.com/iOS%E5%B0%8F%E7%9F%A5%E8%AF%86%E9%9B%86%E9%94%A6-NSString%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB.html</url>
      <content type="html"><![CDATA[<p>NSString 几乎是 iOS 开发中最常用的类了。几乎所有的地方都会用到各种各样的字符串。NSString 也有很多的方法。这篇文章记录我在使用 NSString 类的时候，会用到的知识点。也是 <code>iOS小知识集锦</code>的第一篇文章吧。</p>
<a id="more"></a>
<h3 id="创建字符串"><a href="#创建字符串" class="headerlink" title="创建字符串"></a>创建字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 直接创建字符串</div><div class="line">NSString *str1 = @&quot;this is Cepheus Sun&quot;;</div><div class="line"></div><div class="line">// 用一个字符串创建另一个字符串</div><div class="line">NSString *str2 =[[NSString alloc] initWithString:str1];</div><div class="line"></div><div class="line">// 用c的字符串创建oc的字符串</div><div class="line">NSString *str4 = [[NSString alloc] initWithUTF8String:&quot;我是程序猿&quot;];</div><div class="line"></div><div class="line">// 用格式符拼接字符串</div><div class="line">NSString *str3 = [[NSString alloc] initWithFormat:@&quot;%@%@&quot;,str1,str4];</div></pre></td></tr></table></figure>
<h3 id="读取文件来初始化字符串"><a href="#读取文件来初始化字符串" class="headerlink" title="读取文件来初始化字符串"></a>读取文件来初始化字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 先创建一个error对象，用来保存错误信息</div><div class="line">NSError *error = nil;</div><div class="line">//@&quot;/Users/xxx/Desktop/123.txt&quot;为文件路径</div><div class="line">NSString *str01 = [NSString stringWithContentsOfFile:@&quot;/Users/xxx/Desktop/123.txt&quot; encoding:NSUTF8StringEncoding error:&amp;error];</div><div class="line">        </div><div class="line">// 创建if语句判断输出</div><div class="line">if (error) &#123; // 一旦为真，说明读取文件出错了</div><div class="line">	NSLog(@&quot;读取文件出错 %@&quot;, error);</div><div class="line">&#125; else &#123;</div><div class="line">	NSLog(@&quot;读取成功:%@&quot;, str01);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="通过-URL-读取文件，初始化字符串"><a href="#通过-URL-读取文件，初始化字符串" class="headerlink" title="通过 URL 读取文件，初始化字符串"></a>通过 URL 读取文件，初始化字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">// http://www.baidu.com/image/xxxx.png</div><div class="line">// url = 协议头://主机地址/在主机里面的路径</div><div class="line"></div><div class="line">// ftp协议，传输比较大的文件</div><div class="line">// file协议，读取比较大的文件</div><div class="line"></div><div class="line">// file协议，读取文本文件</div><div class="line">NSURL *url = [NSURL URLWithString:@&quot;file://192.168.1.1/user/apple/desktop/test.txt&quot;]</div><div class="line">  </div><div class="line">// 如果不写 IP 地址，就会默认访问本机</div><div class="line">NSURL *url = [NSURL URLWithString:@&quot;file:///user/CepheusSun/desktop/123.txt&quot;]</div><div class="line">  </div><div class="line">// 将本地文件路径创建为 URL 对象(路径可以是中文)</div><div class="line"> NSURL *url = [NSURL fileURLWithPath:@&quot;/Users/CepheusSun/Desktop/123.txt&quot;];</div><div class="line"></div><div class="line">// 将对应对网络资源文件路径创建为URL对象(路径必须是英文字母)</div><div class="line">// SURL *url = [NSURL URLWithString:@&quot;file:///Users/CepheusSun/Desktop/123.txt&quot;];</div><div class="line"> </div><div class="line">// 先创建一个 error 对象，用来保存错误信息</div><div class="line">NSError *error1 = nil;</div><div class="line">// 调用URL地址的文件</div><div class="line">NSString *str03 = [NSString stringWithContentsOfURL:url encoding:NSUTF8StringEncoding error:&amp;error1];</div><div class="line">        </div><div class="line">if (error1) &#123; // 一旦为真，说明读取文件出错了</div><div class="line">	NSLog(@&quot;读取文件出错 %@&quot;, error1);</div><div class="line">&#125; else&#123;</div><div class="line">	NSLog(@&quot;读取成功:%@&quot;, str03);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="通过-url-或-file-将字符串信息写入文件"><a href="#通过-url-或-file-将字符串信息写入文件" class="headerlink" title="通过 url 或 file 将字符串信息写入文件"></a>通过 url 或 file 将字符串信息写入文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"> NSString *s001 = @&quot;dfa短发方法法德俄额度 短发舒服&quot;;</div><div class="line">        </div><div class="line">// NSURL *myurl = [NSURL fileURLWithPath:@&quot;/Users/progamersunny/Desktop/123.txt&quot;];</div><div class="line">        </div><div class="line">NSURL *myurl = [NSURL URLWithString:@&quot;file:///Users/progamersunny/Desktop/123.txt&quot;];</div><div class="line"></div><div class="line">// 调用将字符串写入URL地址文件的方法</div><div class="line">[s001 writeToURL:myurl atomically:YES encoding:NSUTF8StringEncoding error:nil];</div><div class="line">        </div><div class="line">// 调用将字符串写入本机文件的方法</div><div class="line">// [s001 writeToFile:@&quot;/Users/xlzhang/Desktop/OC基础知识点汇总/OC中NSString常用方法汇总/text1.txt1&quot; atomically:YES encoding:NSUTF8StringEncoding error:nil];</div><div class="line">        </div><div class="line">// 提取文件内容</div><div class="line">NSString *str04 = [NSString stringWithContentsOfFile:@&quot;/Users/xlzhang/Desktop/text/text/123.txt&quot; encoding:NSUTF8StringEncoding error:nil];</div></pre></td></tr></table></figure>
<h3 id="创建临时字符串"><a href="#创建临时字符串" class="headerlink" title="创建临时字符串"></a>创建临时字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 用一个字符串创建另一个临时字符串</div><div class="line">NSString *str5 = [NSString stringWithString:str2];</div><div class="line"></div><div class="line">// 用c的字符串创建oc的临时字符串</div><div class="line">NSString *str6 = [NSString stringWithUTF8String:&quot;我是程序猿&quot;];</div><div class="line">        </div><div class="line">// 用格式符拼接字符串</div><div class="line">NSString *str7 = [NSString stringWithFormat:@&quot;%@%@&quot;,str5,str3];</div></pre></td></tr></table></figure>
<h3 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">// 比较两个字符串是否相等，返回BOOL值YES或NO</div><div class="line">BOOL ret = [str6 isEqualToString: str7];</div><div class="line"></div><div class="line">// 比较并返回谁大谁小(返回值是个枚举类型: 比较的结果 ＝ －1，0，1)</div><div class="line">// typedef NS_ENUM(NSInteger, NSComparisonResult) &#123;NSOrderedAscending = -1L, NSOrderedSame, NSOrderedDescending&#125;;</div><div class="line">// 如果左边str1小于右边str4就返回－1，相等就返回0，大于就返回1</div><div class="line"></div><div class="line">NSComparisonResult ret1 = [str1 compare: str4];</div><div class="line"></div><div class="line">// 忽略大小写进行比较</div><div class="line">NSComparisonResult ret01 = [str1 caseInsensitiveCompare:str4];</div><div class="line"></div><div class="line"> // 有条件的比较谁大谁小(options的参数为限制条件)</div><div class="line"> // options: 指定比较的条件</div><div class="line"> // NSCaseInsensitiveSearch  忽略大小写</div><div class="line"> // NSBackwardsSearch  从后往前比较</div><div class="line"> // NSNumericSearch  首先比较字符串里面的字符的个数，个数一样再比较大小</div><div class="line"></div><div class="line">NSComparisonResult ret02 = [str1 compare:str4 options:NSCaseInsensitiveSearch]; // 忽略大小写进行比较</div></pre></td></tr></table></figure>
<h3 id="从一个字符串中查找子字符串"><a href="#从一个字符串中查找子字符串" class="headerlink" title="从一个字符串中查找子字符串"></a>从一个字符串中查找子字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">NSString *s1 = @&quot;I am such a poor programer.&quot;;</div><div class="line">NSString *s2 = @&quot;am&quot;;</div><div class="line"></div><div class="line">// 返回值类型是一个枚举类型NSRange,包含两个lu整型变量location(位置)和length(长度)</div><div class="line">NSRange range = [s1 rangeOfString:s2];// 查找并返回位置</div><div class="line"></div><div class="line">        </div><div class="line">// 有条件的查找,options后面为： NSCaseInsensitiveSearch 表示忽略大小写</div><div class="line">NSRange range01 = [s1 rangeOfString:s2 options:NSLiteralSearch]; // options表示查找方式</div><div class="line"></div><div class="line">BOOL b1 = [s1 containsString:s2]; // 返回值类型是一个BOOL值，YES表示s1包含有s2，NO表示没有包含</div><div class="line"></div><div class="line">// 如果查找的字符串不存在，返回的值：range.length = 0;range.location = NSNotFound (NSNotFound = -1)</div></pre></td></tr></table></figure>
<h3 id="单独提取某一个字符"><a href="#单独提取某一个字符" class="headerlink" title="单独提取某一个字符"></a>单独提取某一个字符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 创建一个可变字符串对象</div><div class="line">NSMutableString *str02 = [[NSMutableString alloc] init];</div><div class="line">// 循环获取字符中的每一个字符</div><div class="line">for (int i = 0;i &lt; [str1 length]; i++)&#123;</div><div class="line">    // 此处提取的字符是两个字节，因此可以提取汉字</div><div class="line">	unichar c = [str1 characterAtIndex:i]; </div><div class="line">	// 将获取对字符合并到可变字符串中</div><div class="line">	[str02 appendFormat:@&quot;%C&quot;,c];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="从字符串中提取某个范围点字符生成新字符串－－-从第一个字符开始到某个位置结束，从某个位置开始到字符串尾，某点开始某点结束"><a href="#从字符串中提取某个范围点字符生成新字符串－－-从第一个字符开始到某个位置结束，从某个位置开始到字符串尾，某点开始某点结束" class="headerlink" title="从字符串中提取某个范围点字符生成新字符串－－(从第一个字符开始到某个位置结束，从某个位置开始到字符串尾，某点开始某点结束)"></a>从字符串中提取某个范围点字符生成新字符串－－(从第一个字符开始到某个位置结束，从某个位置开始到字符串尾，某点开始某点结束)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">NSString *s3 = @&quot;0123456789&quot;;</div><div class="line">NSString *s4 = [s3 substringToIndex: 6 ]; </div><div class="line">// 从s3中提取从头至第6个字符(不包括第6个),生产新字符串,返回这个新字符串的地址</div><div class="line">// s4的结果为: &quot;012345&quot;</div><div class="line">        </div><div class="line">NSString *s5 = [s3 substringFromIndex: 6 ]; </div><div class="line">// 从s3中提取从第6个字符(包括第6个)到最后一个字符,生产新字符串,返回这个新字符串的地址</div><div class="line">// s5到结果为: &quot;6789&quot;</div><div class="line">        </div><div class="line">NSRange range1 = &#123;3,4&#125;; </div><div class="line">// 3表示起始位置，4表示长度，表示从第3个字符(包含第3个)开始提取连续的4个字符,生产新字符串,返回这个新字符串的地址</div><div class="line">NSString *s6 = [s3 substringWithRange:range1]; </div><div class="line">// 先定义一个range值</div><div class="line">// s6的结果为: &quot;3456&quot;</div><div class="line">        </div><div class="line">        </div><div class="line">// 也可以合并一起写</div><div class="line">NSString *s7 = [s3 substringWithRange:NSMakeRange(3, 4)]; // NSMakeRange 是一个c函数</div></pre></td></tr></table></figure>
<h3 id="字符串与其他类型的转换"><a href="#字符串与其他类型的转换" class="headerlink" title="字符串与其他类型的转换"></a>字符串与其他类型的转换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">NSString *intStr = @&quot;1234&quot;;</div><div class="line">NSString *floatStr = @&quot;5.14&quot;;</div><div class="line"></div><div class="line">int a = [intStr intValue];</div><div class="line">float f = [floatS floatValue];</div></pre></td></tr></table></figure>
<h3 id="字符串首位-前缀后缀的对比"><a href="#字符串首位-前缀后缀的对比" class="headerlink" title="字符串首位(前缀后缀的对比)"></a>字符串首位(前缀后缀的对比)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">NSString *url1 = @&quot;https://www.baidu.com/rader/p.png&quot;;</div><div class="line">BOOL b001 = [url1 hasPrefix:@&quot;https://&quot;]; // 判断字符串首位是否与输入的字符串相同</div><div class="line">BOOL b002 = [url1 hasSuffix:@&quot;p.png&quot;];   // 判断字符串尾部是否与输入的字符串相同</div></pre></td></tr></table></figure>
<h3 id="字符串中某些字符的替换"><a href="#字符串中某些字符的替换" class="headerlink" title="字符串中某些字符的替换"></a>字符串中某些字符的替换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">NSString *url2 = @&quot;http://www.baidu.com/rader/p.gdp&quot;;</div><div class="line">// 将withString:字符串内容替换掉url1中 OfString:字符串内容 后生成一个新的字符串url2</div><div class="line">NSString *url3 = [url2 stringByReplacingOccurrencesOfString:@&quot;/&quot; withString:@&quot;*&quot;];</div></pre></td></tr></table></figure>
<h3 id="去掉字符串首尾的某些连续的字符"><a href="#去掉字符串首尾的某些连续的字符" class="headerlink" title="去掉字符串首尾的某些连续的字符"></a>去掉字符串首尾的某些连续的字符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> NSString *url4 = @&quot;    http://www.baidu.com     &quot;;</div><div class="line">        </div><div class="line">NSCharacterSet *set = [NSCharacterSet whitespaceCharacterSet]; //  去除空格</div><div class="line">// lowercaseLetterCharacterSet  去除小写字母</div><div class="line">// uppercaseLetterCharacterSet  去除大写字母</div><div class="line">        </div><div class="line">NSCharacterSet *set1 = [NSCharacterSet characterSetWithCharactersInString:@&quot;指定的字符串&quot;]; // 去除指定的字符串</div><div class="line">        </div><div class="line">        </div><div class="line">// 去除字符串首尾的某些相同字符,有多少个就去掉多少个</div><div class="line">NSString *url5 = [url4 stringByTrimmingCharactersInSet:set];</div></pre></td></tr></table></figure>
<h3 id="可变字符串-以上字符串方法都可以用于可变字符串"><a href="#可变字符串-以上字符串方法都可以用于可变字符串" class="headerlink" title="可变字符串:(以上字符串方法都可以用于可变字符串)"></a>可变字符串:(以上字符串方法都可以用于可变字符串)</h3><blockquote>
<p>可变字符串是字符串的子类，所以可以使用所有NSString的所有方法，其比起字符串增加的功能主要有：增,删,改,擦</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">// 创建一个可变字符串</div><div class="line"></div><div class="line">NSMutableString *string1 = [[NSMutableString alloc] init];</div><div class="line">[string1 setString:@&quot;1234&quot;]; // 对可变字符串进行赋值</div><div class="line">        </div><div class="line">[string1 setString:@&quot;abcd&quot;]; // 已赋值的可变字符串可以重新赋值（改）</div><div class="line">[string1 appendString:@&quot;123&quot;]; // 可以增加字符串，增加后结果为:&quot;abcd123&quot;</div><div class="line">[string1 appendFormat:@&quot;%c&quot;,&apos;D&apos;]; // 可以用格式符增加相应的字符或字符串，结果为:&quot;abcd123D&quot;</div><div class="line">[string1 insertString:@&quot;xxxx&quot; atIndex:4]; // 可以把&quot;xxxx&quot;字符串插入到第4个字符开始的地方,原第四个开始的后面字符依次后移</div><div class="line">// 插入后的结果为: &quot;abcdxxxx123D&quot;</div><div class="line">        </div><div class="line">// 也可以把字符串改为另一个字符串的地址，因为它们传递的都是地址</div><div class="line">NSString *ss1 = [NSString stringWithFormat:@&quot;%d&quot;,-88];</div><div class="line">        </div><div class="line">[string1 insertString:ss1 atIndex:6]; // 结果为: string1 = &quot;abcdxx-88xx123D&quot;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">NSRange range2 = &#123;3,4&#125;; </div><div class="line">// 3表示起始位置，4表示长度，表示从第3个字符(包含第3个)开始删除连续的4个字符,后面字符依次前移</div><div class="line">[string1 deleteCharactersInRange:range2]; </div><div class="line">// 结果为: string1 = &quot;abc88xx123D&quot;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[string1 replaceCharactersInRange:NSMakeRange(3, 2) withString:@&quot;RRRRRRRRRR&quot;];</div><div class="line">// 3表示起始位置，2表示长度，表示从第3个字符(包含第3个)开始将后面的2个字符换成字符串&quot;RRRRRRRRRR&quot;,后面字符依次后移</div><div class="line">// 结果为: string1 = &quot;abcRRRRRRRRRRxx123D&quot;</div><div class="line">NSLog(@&quot;\nstring1 = %@&quot;,string1);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 擦除原有字符串内容重新设置字符串的内容</div><div class="line">[string1 setString:@&quot;---&quot;];</div><div class="line">// 等同于</div><div class="line">// string1.string = @&quot;---&quot;;</div><div class="line">        </div><div class="line">NSLog(@&quot;string1 = %@&quot;, string1);</div><div class="line">// 结果为: string1 = &quot;---&quot;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python 中的逻辑运算符]]></title>
      <url>http://www.CepheusSun.com/python%20%E4%B8%AD%E7%9A%84%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6.html</url>
      <content type="html"><![CDATA[<p>从现在开始，开始了对 pyhton 这门语言的学习。</p>
<a id="more"></a>
<p>逻辑运算符其实没什么好说的，只是最近学习 python 这门语言的时候，才研究发现的一个小知识点。</p>
<h2 id="逻辑运算符有什么？"><a href="#逻辑运算符有什么？" class="headerlink" title="逻辑运算符有什么？"></a>逻辑运算符有什么？</h2><table>
<thead>
<tr>
<th style="text-align:center">关系运算符</th>
<th style="text-align:center">含义</th>
<th style="text-align:center">举例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">and</td>
<td style="text-align:center">与(全真才真)</td>
<td style="text-align:center">True and False == False</td>
</tr>
<tr>
<td style="text-align:center">or</td>
<td style="text-align:center">或(全假才假)</td>
<td style="text-align:center">True or False == True</td>
</tr>
<tr>
<td style="text-align:center">not</td>
<td style="text-align:center">非(真变假、假变真)</td>
<td style="text-align:center">not True == False</td>
</tr>
</tbody>
</table>
<h2 id="为什么123-and-456结果是456而123-or-456结果是123？"><a href="#为什么123-and-456结果是456而123-or-456结果是123？" class="headerlink" title="为什么123 and 456结果是456而123 or 456结果是123？"></a>为什么<code>123 and 456</code>结果是<code>456</code>而<code>123 or 456</code>结果是<code>123</code>？</h2><p><strong>and </strong>:</p>
<p>​    对于 and 首先计算第一个表达式，</p>
<p>​    如果第一个表达式为真，结果为第二个表达式的结果。</p>
<p>​    如果第一个表达式为假，返回假。</p>
<p><strong>or </strong>：</p>
<p>​    对于 or 首先计算第一个表达式，</p>
<p>​    如果第一个表达式为真，则返回真。</p>
<p>​    如果第一个表达式为假，则返回第二个表达式的结果    </p>
<p>所以，对于</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">123</span> <span class="keyword">and</span> <span class="number">456</span></div></pre></td></tr></table></figure>
<p>这行代码， 遵循非零为真的原则，第一个表达式为真。那么看第二个表达式，第二个表达式也大于零，所以结果为第二个表达式的结果。所以返回</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">456</span></div></pre></td></tr></table></figure>
<p>对于</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">123</span> <span class="keyword">or</span> <span class="number">456</span></div></pre></td></tr></table></figure>
<p>这行代码，第一个表达式非零，结果为第一个表达式的结果。</p>
<blockquote>
<p>Strictly speaking, the operands of the logical operators should be boolean expressions, but</p>
<p>Python is not very strict. Any nonzero number is interpreted as “true.”严格来讲，布尔运算符的运算数应该是布尔表达式， 但是Python并不严格。任何非0的数字都被解释成“真”。</p>
</blockquote>
<p>另外，因为 <code>123</code> 或者 <code>456</code> 这两个表达式，都不是逻辑运算，表达式的值就是他本身的值。所以最后得出这样的结果。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>and: </strong>从左到右计算表达式，若所有值为真，返回最后一个值。若存在假，返回第一个假值。</p>
<p><strong>or：</strong> 从左到右计算表达式，返回第一个为真的值。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CocoaPods小知识集锦]]></title>
      <url>http://www.CepheusSun.com/CocoaPods%E5%B0%8F%E7%9F%A5%E8%AF%86%E9%9B%86%E9%94%A6.html</url>
      <content type="html"><![CDATA[<p>在使用CocoaPods 的过程中遇到的问题。整理性的一遍文章，没有多少价值。</p>
<a id="more"></a>
<h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">✘ sunyang@sunny-mbp  ~<span class="regexp">/desktop/ios</span>  pod install</div><div class="line">[!] No <span class="string">`Podfile' found in the project directory.</span></div></pre></td></tr></table></figure>
<p>解决方案</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">✘ sunyang@sunny-mbp  ~<span class="regexp">/desktop/ios</span>   pod repo remove master</div><div class="line">Removing spec repo <span class="string">`master`</span></div><div class="line"></div><div class="line">✘ sunyang@sunny-mbp  ~<span class="regexp">/desktop/ios</span>  pod setup</div><div class="line">Setting up CocoaPods master repo</div><div class="line"></div><div class="line">✘ sunyang@sunny-mbp  ~<span class="regexp">/desktop/ios</span>  pod install</div><div class="line">Pod installation complete! There are <span class="number">3</span> dependencies from the Podfile <span class="keyword">and</span> <span class="number">4</span> total pods installed.</div></pre></td></tr></table></figure>
<p>原因</p>
<p>这是因为 CocoaPods 基于 GitHub 的网页编辑器的 <code>libgit2</code>的一个 bug。 正式这个 bug 导致了 git 仓库错误。</p>
<p>唯一的解决办法就是像上面一样。 </p>
<p><a href="http://blog.cocoapods.org/Repairing-Our-Broken-Specs-Repository/">相关链接</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Swift 和 OC 混合编程]]></title>
      <url>http://www.CepheusSun.com/Swift%E5%92%8COC%E6%B7%B7%E5%90%88%E7%BC%96%E7%A8%8B.html</url>
      <content type="html"><![CDATA[<p>自己学了一段时间的 Swift ，从最开始看 Swift 2.3 的《写给大忙人看的Swift》,在 Xcode8 下很多示例代码都不能好好玩下去，然后看到了 SwiftGG 翻译组针对 Swift 官方文档的中文译本。算是正式开始了对 Swift 的学习。对 Swift 的喜爱不仅仅是因为他是新的语言，是 iOS 开发未来的趋势。而且还有一个很重要的一点单单就是因为 Swift 代码看起来就是非常漂亮啊。</p>
<a id="more"></a>
<h2 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h2><p>对于Swift的学习根本还是一种还没有正式入门的感觉。所以没有办法像 OC 那样驾轻就熟，很多语法都还没有完全掌握，因为时间原因，也因为最近确实发生了一些事情。导致最近学习的热情比较的低，而且年关在即，很多工作上生活上的事情都需要认真梳理一遍。减少了在学习上的努力，是在是罪大恶极。技术圈在这个时候也发生了一些大事情。微信开源的组件 <a href="https://github.com/Tencent/mars#mars_cn">Mars</a>  滴滴和手Q相继 po 出了自己的动态化解决方案。下一年应该会是动态化更广泛应用的一年吧，很多 app 动态化将成为标准配置。但是唯一比较遗憾的是，这些解决方案还是基于 OC 的。但是这也并不妨碍我学习 Swift 的激情，毕竟一切 app 的生杀大权都掌握在苹果手中的，而且，苹果还有一个并不开放的动态库。</p>
<p>简单的学了一些 Swift 的相关东西，就开始手痒想要实践一下了。本来打算使用 Swift 重新写一个项目，但是苦于需求一直源源不断，重写压力也是非常的大。还有一个最大的原因，对 Swift 的掌握还没有真正算是一个 Swift 开发者。实在没有能力将原有项目中的组件转化为 Swift ，所以还是决定在原来的代码中，尝试将一些类用 Swift 来表达。</p>
<blockquote>
<p>这也解决了在 Swift 项目中，优秀的第三方库确实没有 OC 丰富，而作为现在非常热门的开发语言，很多比较好的效果什么的也只有 Swift 版本这样的问题。</p>
</blockquote>
<p>其实无论如何，其实都是 OC 和 Swift 之间的交互。</p>
<h2 id="在-Swift-中使用-OC-类"><a href="#在-Swift-中使用-OC-类" class="headerlink" title="在 Swift 中使用 OC 类"></a>在 Swift 中使用 OC 类</h2><p>如果在Swift类中使用OC的代码，那么就需要使用桥接文件了。</p>
<p>这是我们在平常的OC项目中创建一个新的类</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/34DF1870-F7E8-4522-B715-F1ACAA35DFEA.png" /></p>
<p>点击按钮 <code>Create Bridging Header</code> 。</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/CC24943D-0A36-4095-9EFF-64DBF9D96193.png" /></p>
<p>就会生成一个<code>项目名-Bridging-Header.h</code>文件，这其实貌似就是一个很平常的<code>.h</code>文件。</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/7132C9EA-C1A4-4AE9-BC83-F200006A95B1.png"></p>
<p>然后就只需要像 Import 一个普通类一样把你需要在 Swift 中使用的所有 OC 类在这个<code>.h</code> 文件中添加进来，然后就能够在 Swift 代码中正常的使用 OC 的方法了。</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/B4E7A1D8-F202-4BE8-8CDF-1A3221F42571.png"></p>
<p>这里的<code>MUserInfo</code>其实就是我项目中的一个单例类了。这里要注意的是，虽然使用的是 OC 的类，但是使用的时候依然是使用 Swift 的语法。这个也没什么需要注意的。</p>
<blockquote>
<p>需要注意的是：在 Swift 类中使用的 OC 的方法，还是需要使用 Swift 的语法。</p>
</blockquote>
<p>刚刚说的导入，就是直接在刚刚说的桥接文件中写入如下代码。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#import &quot;MUserInfo.h&quot;</div></pre></td></tr></table></figure>
<h2 id="在-OC-中使用-Swift-类"><a href="#在-OC-中使用-Swift-类" class="headerlink" title="在 OC 中使用 Swift 类"></a>在 OC 中使用 Swift 类</h2><p>这个也是非常的简单，</p>
<p>在<code>TARGETS</code>- <code>Build Settings</code>中选择<code>Swift Complier-General</code></p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/0BA5113B-03E2-40EC-81D0-A55903005F19.png" /></p>
<p>然后分别将<code>Install Objective-C Compatibility Header</code> 和 <code>Objective-C Generated Interface Header Name</code> 选项 改为 <code>YES</code> 和 <code>项目名-Swift.h</code></p>
<p>然后在使用Swift类的时候，只需要在使用的时候像导入头文件一样倒入 <code>项目名-Swift.h</code>这个文件。然后就可以愉快的使用了。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>没有解语，期待下次分享！</p>
<p>## </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2016写在年关的话]]></title>
      <url>http://www.CepheusSun.com/2016%E5%86%99%E5%9C%A8%E5%B9%B4%E5%85%B3%E7%9A%84%E8%AF%9D.html</url>
      <content type="html"><![CDATA[<p>距离下一个年头也只有几张日历纸了，还是抱着一个比较好的态度来回忆一些这即将过去的2016. 从大学开始，每一年都有着一个这样的习惯，总要在每学期结束，每一年结束的时候，给自己写下点什么。开通了新的blog， 总还是要在这里留下心的印记。</p>
<a id="more"></a>
<p>写了那么多年，着实还是没有训练出来对文字驾轻就熟的能力，写出来的东西也往往还是一坨狗屎。让自己也不忍心重新回头再来看下去。每一年也就是这么简单的这么写着。</p>
<p>这一年总结下来，在技术上还是有了一些沉淀，虽然没有什么十足的进步。但，终于能够有这么一段比较长的时间，纯粹的去研究一些这些东西。五月份以来的这么一段时间里，我还是心怀感激的，有了这么个不紧不慢，也有足够多时间了足够多的空间来折腾各种好玩的东西。也开始努力的在质量上控制整个项目。也有那么几个同事愿意花时间了精力去折腾新鲜的东西。确实也是件不错的事情。</p>
<p>这么长的时间以来，感觉在技术生活上还是蛮有趣的，先是在微博上加入了一些技术比较活跃的群，然后又转到趣直播这样的平台下，跟大牛们更近距离的接触，体会到了技术世界的无边无际。再后来因为bang用上了微信读书，不多不少还是读过了一些书，更技术无关。到最后应该能凑够个50多个小时阅读时长吧。阅读总是能让人安静下来的。</p>
<p>之前学过一篇文章来记录这一年看过的书，到最后，应该还是能再加上那么一本两本。每天能够抽出那么一个把小时来阅读，也是一件值得坚持的事情。程序员还是应该花一些时间再代码以外的事情上。</p>
<p>然后不知道什么契机，下载了一个英语流利说。还是认为这是一个非常优秀的 app ，确实在我身上还是达到了他们的口号：“让你忍不住，开口说英语”, 花了100块钱参加他们的课程，每天花一些时间来学习英语，每天哇啦哇啦的说着并不流利的英语，也能切切实实的感受到自己的成长。学习英语这件事情，想来也是值得坚持的事情，多么希望一年以后再次写这样的文字的时候，能够很开心的说，这件事情，我坚持了整整一年。</p>
<p>除了这两件事情，年初或者年初的时候，还是读过一些作为程序员，应该读的一些书的。这一年开始了，并不太深入的对 iOS 底层的探索。因为最初对动态化近乎痴迷的兴趣，在看到 JSPatch 的时候，立马就开始撸Demo开干，在线上出了 bug 之后，瞬间把 bug 解决掉的之后，JSPatch 很快的被集成在了公司所有的 iOS app 中，在公司测试力度不足的情况下，也能够放心的进行开发。</p>
<p>再后来因为对 Javascript 知识的刚需，简单的学了一些 HTML 和 CSS 之类的东西，因为集成成本高，不能立马在公司项目中使用等原因，放弃了对 React Native 的探索，知道最近阿里又开源了 Weex ， 对动态化的兴趣，驱使着我在接下来的时间里，或多或少的都会花点时间去研究这些东西。对 Weex 的兴趣应该还是大于 RN 的， 比较起来，还是愿意使用国人研发的 Vue ，前端的世界果然是深似海。在海边散步，也确实折腾了我很多的精力。但是看着新出来的名词 PWA 还是希望对这一块有一些了解。对了，还有微信的小程序。</p>
<p>对技术的追求在这一年还是让我非常的应接不暇。作为客户端开发，在今年初期的时候便对动态化、组件化产生了比较大的兴趣，以至于在博客刚刚建立的时候，就写下来了对动态化和组件化时分着迷这样的文字(后来还是改了)， 相比起来，动态化算是简单的能实现了吧，一直就通过各种渠道能够猜出来 sunny 孙源在滴滴正在进行的项目也是更动态化相关的内容，在 DynamicCocoa 被公布出来的时候，还是被这样的大神折服了，sunny 对底层，对编译器的研究确实是让人难以望其项背的。到后来知道手Q很久以前就有一套类似的框架的事情，最后还是认识到了一个残酷的现实</p>
<blockquote>
<p>大厂对于小公司的碾压不仅仅是运营能力上的，他们对于小厂在技术上的碾压，对于我们来说才是更可怕的。不管你有多么好的 idea 等你实现下来并且能够完美运行的时候，你觉得十分牛逼的事情，确实人家玩剩下的。</p>
</blockquote>
<p>对新的东西的追求还是让我在这一年收集到了各种书，也驱使着我我去学习英语。也驱使着我去学习了可能已经无限趋近稳定的 Swift 3.0 ，开始看了一些现在估计也完全没有入门的前端三件套，balabala….</p>
<p>接着再说一下组件化吧，这一年确实在这一块只做了很少的工作，简单的吧一些组件网络库什么的拆分出来，使用  CocoaPods 来进行管理，看了一些相关的文章，跟一些搞过这个朋友交流过，算是积累了一些知识储备，但是在这样的时间，面对年底还是比较多的需求，实践这件事情，可能还是需要往后推一下了。</p>
<p>然后这一年从纯代码，转到了Xib ，研究了一下 iconfont 然后貌似也记不清楚再搞过什么了。只是读了写文章，看了点源码，重构了下项目，做了些需求，改了些bug，如是而已…</p>
<p>这一年，绕了一大圈，有因为一些原因跑到重庆了，再次回到这个城市生活，确实没有感受到太多的让我心里有什么波动的东西，跟往常一样，跟去到曾经到过的任何一个城市一样…只是喜欢上了这个季节的这里随处可见的黄叶。</p>
<p>外婆离开也到了第三个年头了，是不是还是会思念那个胖胖的可爱的人。生活还是继续向前走着的，毕业也三年了，还是不知道接下来应该怎样。或许，就是这样吧。</p>
<p>车也把坐垫全部换成皮的了，也算修正了买车时犯下的错误。</p>
<p>做了一丢丢有关技术管理的工作，做的不好。只能继续努力了。</p>
<p>好奇心还是那么重，看到什么都想去尝试一下，所以入门了很多东西，了解很多东西，却没能深入，算是今年最大的遗憾吧。</p>
<p>关于年初做的不好的一些事情，等真正再长大一些了再来梳理吧，确实对一些事情还是没那么精通，而且那些也算是去年的事情了吧…</p>
<p>很多想做，却没能做的事情，只能在下一个年头继续了，努力做一个可爱的人吧…</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[一叶知秋]]></title>
      <url>http://www.CepheusSun.com/%E4%B8%80%E5%A4%9C%E7%9F%A5%E7%A7%8B.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>任何一种环境或个人，初次见面就预感到离别的隐痛时，你必定爱上他了。</p>
</blockquote>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/IMG_0124.JPG?imageView2/4/w/600"/></p>
<p>​    不知道从什么时候开始，重庆已经到处都是黄黄的银杏叶子了。也不知道从什么时候开始，重庆的每个角落都能看到银杏树。正好跟家乡的名字相同，在银杏身上倒多添加了一些情感。</p>
<p>​    早些时候，就一直想要看一看秋天的银杏，金黄色的叶子洒满整条街。想象着这样的意境，脚踩在这样的树叶上，发出吱吱的声音，仿佛大自然叫呼唤。</p>
<p>​    时隔两年，再回到重庆的时候，却发现原来熟悉的一切都已经不在了，记得重庆留给我的印象，除了一片一片的香樟树，就是路边的竹子。再逢重庆，看到的又是一排排的梧桐，一棵棵的银杏。更美了吧！更四季分明了。</p>
<a id="more"></a>
<p>​    过去的两年，念念不忘的总是樟树林里面的味道，和每年运动场上一大片的蓝花楹花瓣。也许某天再次离开重庆的时候，让我怀念的不会再是香樟的味道和浪漫的蓝花楹，而是爱憎分明的梧桐和银杏。    </p>
<p>​    时光总是悄无声息的流淌着，秋的意境也总是被冠以一种 <code>春花秋月何时了</code> 或者 <code>红藕香残玉簟秋</code> 这样的想象。只是今日这样的景象中我还是产生了 <code>自古逢秋悲寂寥，我言秋日胜春朝</code> 这样的情感。</p>
<p>​    这么多年来，对一个城市的印象总是从学校或者公园开始。趁这这样一个艳阳天，还是爬起来，花了那么长时间到了大学城，故意绕过母校，只是怕误了认识这座城市的另外一次机会。</p>
<p>​    确实，重新认识了一下这座城市，虽然曾经走过这些地方。只是当时的脚步还是太过于匆忙了。也许，是应该放慢一下自己的脚步了，在这个浮躁的社会里，在这个浮躁的行业了里，放慢一下脚步是一件多么宝贵的事情啊，给自己一点时间，给生活一点时间，好好的认识这个世界。我想才是活着更大的意义吧。</p>
<p>​    在现在这个年纪思考这样的问题，着实是一件让别人看起来可笑的事情。也不好说自己经历过了什么，其实也并没有经历过什么。只是觉得走的太快，应该停下来休息一下了，走了那么多地方，仔细想起来，却仿佛什么地方都没有去过，没有仔细的体会过这个城市谈什么到过。只是过客而已。</p>
<p>​    一直不要脸的说重庆是我的第二故乡，相比于成都，却少了太多太多的熟悉。除了成都，待过的最长时间的城市了，还是那么陌生。</p>
<p>​    实在怪自己太懒。</p>
<p>​    不知道未来的时光我会在哪里，这两年也辗转了一些城市，我想，我是应该拿着相机，记下些什么。虽然我什么都带不走，虽然我也可能会忘记曾经拍下的一张张照片，虽然这座城市终究会把我遗忘。但我还是希望一些东西能够被我多记住一会儿，依靠着这么点照片，依靠着这么写文字。多少年以后，也许还会再打开这篇博客，在看到这么些图或者是文字，我还能想起来此时的心境，如此，便已足够。</p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0075.JPG?imageView2/4/w/600"/></p>
<p>​    </p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0115.JPG?imageView2/4/w/600"/></p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0010.JPG?imageView2/4/w/600"/></p>
<p>​    </p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0177.JPG?imageView2/4/w/600"/></p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0333.JPG?imageView2/4/w/600"/></p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0334.JPG?imageView2/4/w/600"/></p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0271.JPG?imageView2/4/w/600"/></p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0179.JPG?imageView2/4/w/600"/></p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0225.JPG?imageView2/4/w/600"/></p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0301.JPG?imageView2/4/w/600"/></p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0275.JPG?imageView2/4/w/600"/></p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0235.JPG?imageView2/4/w/600"/></p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0148.JPG?imageView2/4/w/600"/></p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0113.JPG?imageView2/4/w/600" /></p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0101.JPG?imageView2/4/w/600"/></p>
<p><img src="http://oho19hshq.bkt.clouddn.com/IMG_0117.JPG?imageView2/4/w/600"/></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用 Cocoapods 管理你的项目]]></title>
      <url>http://www.CepheusSun.com/%E4%BD%BF%E7%94%A8Cocoapods%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84%E9%A1%B9%E7%9B%AE.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>本文是一个教你使用CocoaPods管理开源模块的文章。</p>
</blockquote>
<p>作为一个 iOS 开发者，几乎所有人都使用过 CocoaPods 。作为 iOS 开发中最常用最有名的类库管理工具，给开发者带来了很大的便利。而且现在很多的第三方类库都支持 Pod . 如果一名开发者想要将自己的代码开源给更多的人使用，支持 CocoaPods 肯定是更好的办法。</p>
<p>最近一直在考虑将公司的项目使用 CocoaPods 来模块管理，所以将前段时间重新写的 <code>SYNetwork</code> 进行了对其他类的解耦，在这个过程中学到了很多组织代码的经验， 加上最近正在读的 《设计模式之禅》 逐渐意识到之前自己组织代码的能力还是有所欠缺，很多模块之间也进行了一些完全没有必要的耦合，这其实是很烂的编码形式。</p>
<p>由于公司并没有构建自己的 git 服务器, 而是将代码托管在了 oschina ,所以索性将这个模块开源并放在了github上。然后尝试使用 CocoaPods 来管理这个模块，并在公司其他几个项目中进行推广。</p>
<a id="more"></a>
<p><strong>这只是我模块化项目的第一步。</strong> </p>
<p>好了， 扯淡部分完成。</p>
<h2 id="在-GitHub-创建代码仓库"><a href="#在-GitHub-创建代码仓库" class="headerlink" title="在 GitHub 创建代码仓库"></a>在 GitHub 创建代码仓库</h2><p>因为 CocoaPods 始终还是要将代码放在 GitHub 上的，所以我们还是创建一个代码仓库来保存这些代码吧！</p>
<p>这一步完成之后需要记住两个内容</p>
<ul>
<li>项目的 ssh地址 <code>git@github.com:CepheusSun/SYNetwork.git</code></li>
<li>项目的名称 <code>SYNetwork</code></li>
</ul>
<h2 id="在本地创建-podspec-文件"><a href="#在本地创建-podspec-文件" class="headerlink" title="在本地创建 podspec 文件"></a>在本地创建 podspec 文件</h2><p>在终端中执行命令</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod lib create SYNetwork</div></pre></td></tr></table></figure>
<p>终端会提示</p>
<blockquote>
<p>Cloning <code>https://github.com/CocoaPods/pod-template.git</code> into <code>pod</code>.</p>
</blockquote>
<p>克隆完成之后会连续的回答几个问题，根据实际情况来选择吧！</p>
<p>回答问题之后，在桌面上会有一个<code>SYNetwork</code>文件夹。在这个文件夹中又有一个文件夹<code>SYNetwork</code>里面有两个文件</p>
<ul>
<li>Classes</li>
<li>Assets</li>
</ul>
<p>其中Classes 存放的你的源代码，Assets 应该好似一些图片资源什么的,我这个仓库里面并没有用到。</p>
<blockquote>
<p>还是重新整理一下Clone下来的SYNetwork吧</p>
<ul>
<li>在 Example 文件中是自动创建的 demo 项目， 回答问题之后会自动打开这个项目，不用管它，果断的关掉它，然后 cd 到这个文件夹中 <code>pod install</code>一下。</li>
<li>将我们写的代码放进 <code>SYNetwork/SYNetwork/Classes/</code>文件夹中。</li>
<li>重新 cd 到 example 文件夹，执行 <code>pod update</code></li>
</ul>
<p>完成上面三步之后，可以在你的 demo 项目中尝试使用一些你的库，不过我没有，偷了一个懒😊</p>
</blockquote>
<h3 id="在podspec文件中编码"><a href="#在podspec文件中编码" class="headerlink" title="在podspec文件中编码"></a>在podspec文件中编码</h3><p>我使用的是Sublime Text </p>
<p>打开第一个<code>SYNetwork</code>文件夹中的<code>SYNetwork.podspec</code>文件。这个文件就是配置 CoaoaPods 基本信息的文件</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Pod::Spec.new <span class="keyword">do</span> <span class="params">|s|</span></div><div class="line">  <span class="comment"># pod 库名</span></div><div class="line">  s.name             = <span class="string">'SYNetwork'</span></div><div class="line">  <span class="comment"># pod 版本</span></div><div class="line">  s.version          = <span class="string">'3.0'</span></div><div class="line">  <span class="comment"># pod 概述 </span></div><div class="line">  s.summary          = <span class="string">'A grest network frameworks.'</span></div><div class="line">  <span class="comment"># pod的详细描述</span></div><div class="line">  s.description      = &lt;&lt;-DESC</div><div class="line">    ’this is A great network frameworks<span class="string">'</div><div class="line">                       DESC</div><div class="line">  # pod 的主页</div><div class="line">  s.homepage         = '</span><span class="symbol">https:</span>/<span class="regexp">/github.com/</span>CepheusSun/SYNetwork<span class="string">'</div><div class="line">  # 许可证书</div><div class="line">  s.license          = &#123; :type =&gt; '</span>MIT<span class="string">', :file =&gt; '</span>LICENSE<span class="string">' &#125;</div><div class="line">  # 作者信息</div><div class="line">  s.author           = &#123; '</span>CepheusSun<span class="string">' =&gt; '</span>cd_sunyang@163.com<span class="string">' &#125;</div><div class="line">  # pod 源码在 GitHub 的仓库地址,以及 pod 版本</div><div class="line">  s.source           = &#123; :git =&gt; '</span><span class="symbol">https:</span>/<span class="regexp">/github.com/</span>CepheusSun/SYNetwork.git<span class="string">', :tag =&gt; 3.0 &#125;</div><div class="line">  # pod 支持 iOS 系统</div><div class="line">  s.ios.deployment_target = '</span><span class="number">8.0</span><span class="string">'</div><div class="line"></div><div class="line">  s.source_files = '</span>SYNetwork/Classes/*<span class="string">'</div><div class="line"></div><div class="line">  # s.public_header_files = '</span>SYNetwork/Classes/SYNetwork.h<span class="string">'</div><div class="line">  # s.frameworks = '</span>UIKit<span class="string">', '</span>MapKit<span class="string">'</div><div class="line">  s.dependency '</span>AFNetworking<span class="string">', '</span>~&gt; <span class="number">3.0</span><span class="string">'</div><div class="line">end</span></div></pre></td></tr></table></figure>
<p><strong>需要注意的是</strong></p>
<p><strong>1.</strong></p>
<p><code>s.source_files</code></p>
<p><code>s.public_header_files</code>  中设置的文件路径一定应该是正确的。不然后面会出问题。</p>
<p><strong>2.</strong></p>
<p><code>s.version</code></p>
<p><code>s.source</code>中设置的版本应该要对上吧，我不知道对不上会有什么问题。这个地方也会有很多的坑。还有就是至今没明白为什么我如果用 <code>0.1.0</code> 这样会报错，所以我就用了 <code>1.0</code></p>
<h3 id="验证一下"><a href="#验证一下" class="headerlink" title="验证一下"></a>验证一下</h3><p>在终端中执行</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod lib lint</div></pre></td></tr></table></figure>
<p>如果出现</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-&gt; SYNetwork (<span class="number">3.0</span>)</div><div class="line">SYNetwork passed validation.</div></pre></td></tr></table></figure>
<p>就是验证通过</p>
<p>不然就需要去改各种问题了</p>
<h3 id="注册CocoaPods"><a href="#注册CocoaPods" class="headerlink" title="注册CocoaPods"></a>注册CocoaPods</h3><p>要上传你的代码到 CocoaPods 肯定也需要注册自己的身份。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod trunk register your_email_address <span class="string">'your_name'</span></div></pre></td></tr></table></figure>
<p>成功之后 CocoaPods 会发送一验证邮件到上面的邮箱，确认一下就OK</p>
<p><strong>这里的<code>your_name</code>非常建议你使用 GitHub 的用户名 邮箱也是</strong></p>
<h3 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git tag -m<span class="string">"first release"</span> <span class="string">"3.0"</span></div><div class="line">git push --tags</div><div class="line">pod trunk push iOS_Category.podspec</div></pre></td></tr></table></figure>
<p>这了的 3.0 就是<code>SYNetwork.podspec</code>中的 3.0 </p>
<p>最后搜索一下吧</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod search SYNetwork</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>一些坑吧！</p>
<h4 id="路径不对"><a href="#路径不对" class="headerlink" title="路径不对"></a>路径不对</h4><blockquote>
<p>Unable to interpret the specified path as a podspec</p>
</blockquote>
<p> 看你的 tag 标记和 podSpec 文件的 version 字段是否一致</p>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p>[<em><a href="http://blog.csdn.net/skylin19840101/article/details/50426822">在CocoaPods上创建自己iOS程序的依赖管理</a></em></p>
<p><a href="http://tips.producter.io/shi-yong-cocoapods-jin-xing-tuan-dui-xie-zuo/">使用 CocoaPods 进行团队协作</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[怎样在iOS中使用icon-font？]]></title>
      <url>http://www.CepheusSun.com/%E6%80%8E%E6%A0%B7%E5%9C%A8iOS%E4%B8%AD%E4%BD%BF%E7%94%A8icon-font%EF%BC%9F.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>这是一篇写给 iOS 开发的文章(教程)。</p>
</blockquote>
<p>icon 和 font 拆开来看应该所有人都认识它是什么意思，iconfont就是这两者的结合。严格的说，我们平时使用的字体，并不是我们传统认知中的文字，而是一个一个的图标。是由在坐标系中各种点，连起来组成的。babala….. 这也是我们平时使用的字体无论放到多大，都不会出现在图片上面出现的因为拉伸而出现的失真的情况。</p>
<p>iconfont 实际上就是吧我们在项目中要使用的各类 icon 按照相同的原理制作成一个字体库，然后用使用 font 的方式来使用。</p>
<p>说的挺乱，反正大概就是这么个意思吧。</p>
<a id="more"></a>
<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p>测试的时候随便截了一个图<br><img src="http://ocg4av0wv.bkt.clouddn.com/9760173C-7692-43C5-A5CC-FEED1611B3B5.png" /></p>
<h2 id="icon-font-解决了什么问题"><a href="#icon-font-解决了什么问题" class="headerlink" title="icon-font 解决了什么问题"></a>icon-font 解决了什么问题</h2><blockquote>
<ul>
<li>解决一个图标要同时适配PC 移动端 和 retina 的问题</li>
</ul>
</blockquote>
<p>在现在扁平化设计大行其道的大环境下，拟物化设计推崇的写实以及高光纹理之类的元素也基本上都被现在的设计师们舍弃掉了，这也为 icon-font 的应用提供了基础。</p>
<blockquote>
<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul>
<li>减少应用体积，字体文件比图片要小</li>
<li>图标保真缩放，解决2x／3x的问题</li>
<li>方便更改图标颜色大小，阴影，图片复用</li>
<li>一套图标资源可以在不同平台使用(安卓、iOS、web)</li>
<li>资源维护方便</li>
</ul>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>需要自定义svg图片，并将其转换为ttf文件，图标制作成本比较高</li>
<li>添加图标是需要重新制作ttf文件</li>
<li>只能支持单色(不支持渐变色图标)</li>
</ul>
<p>(以上内容来自 没故事的卓同学 在趣直播的分享)</p>
</blockquote>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>这个很简单，就是利用 svg 矢量图制作字体库</p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul>
<li>阿里的iconfont.cn</li>
<li>svg 文件，svg 的制作其实是由设计师完成的，我们只需要让设计师提供合适的 svg 而不是2x3x图片。就可以了。</li>
</ul>
<h3 id="step-1"><a href="#step-1" class="headerlink" title="step 1"></a>step 1</h3><p><strong>在<a href="ICONFONT.CN">iconfont.cn</a>注册并登录</strong>。</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/CB315E67-08BF-46E0-A087-F658EC1B49FC.png"/></p>
<p>注册完成后点击图标管理，我的图标，然后上传准备好的 svg 文件。</p>
<p><strong>然后切换到我的项目</strong></p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/6064C73F-8BEF-40B9-99EB-3C5BF3BFDBCB.png" /></p>
<p>点击右边的添加，创建字体库。</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/1DF9A210-D6A1-490B-B816-2D813E51F643.png"/></p>
<p>红圈内的内容就是接下来要用到的<code>fontName</code></p>
<p><strong>接下来</strong></p>
<p>还记得我们第一步上传的图标名字吧！</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/64E77B1D-6153-42FA-8FBE-D8C715725C21.png" /></p>
<p>在右上角搜索哪个名字，然后就出来了刚刚上传的图标</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/820BD3A3-DF5B-4837-BA09-40AD93BEFE3C.png"/></p>
<p>加入购物车之后</p>
<p>右上角购物车上应该出现了 badge吧。</p>
<p><strong>点击这个图标</strong></p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/B8A3AE3A-7758-4435-82E9-6E12DDDA4C47.png"/></p>
<p>因为我已经添加了 <code>ps_shop_icon</code>所以我就随便选了一个。</p>
<p><strong>回到我的项目</strong></p>
<p>点击下载至本地</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/C4838064-2EEC-44F8-A8DE-AC5C56A4673E.png"/></p>
<p>下载之后你会看到一个 .ttf 文件。</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/B9737F6A-0140-430F-8298-4DD575AD9C7A.png"/></p>
<p><strong>将这个文件拉到项目中</strong></p>
<p>接下来就是要在项目中操作的事情了。</p>
<h4 id="step-2"><a href="#step-2" class="headerlink" title="step 2"></a>step 2</h4><p><img src="http://ocg4av0wv.bkt.clouddn.com/AF58494E-C3F6-4CEB-BDAD-8F798246F771.png"/></p>
<p>在info.plist 文件中添加如上内容。</p>
<p><strong>然后</strong></p>
<p>在 <code>Build Phases</code>中检查一下</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/954BABBC-3644-4189-9016-B692D18E5CCB.png"/></p>
<p>如果没有就删掉重新拉进项目吧！</p>
<p>或者点击最下面手动添加。</p>
<h4 id="step-3"><a href="#step-3" class="headerlink" title="step 3"></a>step 3</h4><p>在代码中找一个label</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">label.font = [UIFont fontWithName:@&quot;dph_fonticon&quot; size:20];</div><div class="line">label.textColor = [UIColor redColor];</div><div class="line">label.text = @&quot;\U0000e601&quot;;</div></pre></td></tr></table></figure>
<p>代码中的<code>dph_fonticon</code> 就是在iconfont.cn的项目中设置的<code>font-family</code>名字</p>
<p><code>\U0000e601</code>是在iconfont.cn 中对应</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/9B7F5726-260D-4CCA-859B-F5453307387E.png"/></p>
<p>图片中的<code>&amp;#xe610</code> 这个是给前端用的，在iOS上对应的将<code>&amp;#x</code>更换成<code>\U</code> 然后补0 保证unicode 为8位就是了。 </p>
<p>现在运行一下代码，就能看到对应的值已经改变了。</p>
<h3 id="Xib"><a href="#Xib" class="headerlink" title="Xib"></a>Xib</h3><p><img src="http://ocg4av0wv.bkt.clouddn.com/3831121F-8386-4F51-B578-B425888571C6.png" /></p>
<p>如上图。</p>
<p>那个问号需要将下载下来的<code>.ttf</code>文件导入本体的一个叫做<code>footbook的app中</code>（直接拖进去就ok）</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/10B329BA-57B9-4C54-B447-90EEBDDC138D.png"/></p>
<p> 然后就可以复制粘贴了。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>iconfont 这种技术好几年前就已经出现了，现在也已经出现在了阿里的大部分产品中，可见iconfont的技术也是十分成熟的，为了给安装包瘦身，开发者们也做了很多的努力，作为占用资源非常多的图片文件，使用 iconfont 确实能够给 app 减肥。这对于像淘宝、支付宝之类的巨无霸 app 来说就显得尤为重要了。</p>
<p>后期在公司 UI 的帮助下，准备在公司几个项目中小范围的实验一下这个方法。检验一下 iconfont 能在项目中带来多大的便利。</p>
<h3 id="TODO："><a href="#TODO：" class="headerlink" title="TODO："></a>TODO：</h3><p>使用 iconfont 生成<code>UIImage</code> 在<code>UIButton</code>和<code>UIImageView</code> 中使用。</p>
<p>这个在github 上搜一下<code>iconfont</code> 就有很多代码可以使用了。另外 swift 版本 卓同学也写了一份。</p>
<h3 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h3><p>感谢<a href="http://www.jianshu.com/users/88a056103c02/latest_articles">没故事的卓同学</a>在<a href="www.quzhiboapp.com">趣直播</a>的分享</p>
<p>感谢公司 UI 小哥帮我做了几个 svg 图</p>
<p>感谢公司前端小哥的帮忙</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://github.com/PrideChung/FontAwesomeKit">swift</a></p>
<p><a href="https://github.com/JohnWong/IconFont">objC</a></p>
<p><a href="http://johnwong.github.io/mobile/2015/04/03/using-icon-font-in-ios.html">文章</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SYPhotoBrowser]]></title>
      <url>http://www.CepheusSun.com/SYPhotoBrowser.html</url>
      <content type="html"><![CDATA[<p>图片浏览器，使用方法类似UITableView的图片浏览器。基于YYWebImage.</p>
<a id="more"></a>
<h3 id="GIF"><a href="#GIF" class="headerlink" title="GIF"></a>GIF</h3><p><img src="http://ocg4av0wv.bkt.clouddn.com/SYPhotoBrowser.gif" width=500/></p>
<h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SYPhotoBrowser *browser = [[SYPhotoBrowser alloc] init];</div><div class="line">   [browser setDataSource:self];</div><div class="line">   NSInteger idx = 0;</div><div class="line">   [browser showFromView:ges.view photoCount:self.imageUrls.count currentPhotoIndex:idx];</div></pre></td></tr></table></figure>
<h4 id="Datasource"><a href="#Datasource" class="headerlink" title="Datasource"></a>Datasource</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (UIView *)photoView:(SYPhotoBrowser *)photeBrowser viewForIndex:(NSInteger)index;</div><div class="line">- (CGSize)photoView:(SYPhotoBrowser *)photeBrowser imageSizeForIndex:(NSInteger)index;</div><div class="line">- (UIImage *)photoView:(SYPhotoBrowser *)photoBrowser defaultImageForIndex:(NSInteger)index;</div><div class="line">- (NSString *)photoView:(SYPhotoBrowser *)photoBrowser highQualityUrlStringForIndex:(NSInteger)index;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/CepheusSun/SYPhotoBrowser"><em>GitHub地址</em></a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[让人恐惧的属性关键字]]></title>
      <url>http://www.CepheusSun.com/%E8%AE%A9%E4%BA%BA%E6%81%90%E6%83%A7%E7%9A%84%E5%B1%9E%E6%80%A7%E5%85%B3%E9%94%AE%E5%AD%97.html</url>
      <content type="html"><![CDATA[<p>一半的 App 都会有一个个人这个模块来对个人信息，设置等功能进行管理，最近搞公司的项目，在项目结束的时候就想到了应该给我的这个界面加上 “headerimage scale” 这样的效果。然后项目已经结束，也并不想大刀阔斧的去修改原来的代码，想到之前在微博看到一个这样的库。时间还是比较紧急的，毕竟周末，然后就把代码下下来，简单的跑了一下，没有发现什么问题之后就直接在项目中用了。</p>
<p>由于公司一直缺乏很系统的兼容测试，只是对功能有比较严格的要求，所以接下来到上线这个过程都很愉快。 UI、产品都比较满意这样搞。</p>
<p>上线之后，就发生了一些悲剧的事情了….</p>
<a id="more"></a>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/CE310A65-63EE-4D64-B031-864A19556924.png",width = 500 /></p>
<h4 id="UIScrollView-headerImageScale-实现原理"><a href="#UIScrollView-headerImageScale-实现原理" class="headerlink" title="UIScrollView + headerImageScale 实现原理"></a>UIScrollView + headerImageScale 实现原理</h4><p>不得不说，这个category也是一个非常好的东西，帮助我们轻松的集成tableview上面的头部缩放图片，且无侵入性。</p>
<p>实现原理其实看起来也比较见到，使用到了method swizzling来拦截到tableview的头部试图，然后通过KVO来监听scrollview的偏移量。然后修改imageView的frame实现头部试图的缩放。</p>
<p>当然既然使用到了KVO很自然的就要想到在dealloc方法里面需要去移除observer我也很愉快的在源码里面找到了这个方法。<strong>这就是坑所在</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- (void)dealloc</div><div class="line">&#123;</div><div class="line">    if (self.yz_isInitial) &#123; // 初始化过，就表示有监听contentOffset属性，才需要移除</div><div class="line">        </div><div class="line">        [self removeObserver:self forKeyPath:YZKeyPath(self, contentOffset)];</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可能说的不好，但是大概实现思路，也跟我之前自己写的差不多，就是在原来的header位置上面放一个UIimageView，通过监听scrollview的偏移量来改变UIimageView的frame.</p>
<p>然后我们接着讲，由于公司缺乏系统的兼容性测试，在上线前使用模拟器跟UI对应调整了一下试图，以及针对小屏幕手机做了相应了屏幕适配之后。项目也很顺利的上线了，虽然从我点发布，到我在app store上面搜到这期间相差了6七个小时，感觉这个周期比往常慢了很多。</p>
<p>原以为提前了半个月完成了项目，然后经过了十分充分的测试，自己也针对极端网络条件下做了很多测试。这个版本应该不会收集到太多的线上crash。</p>
<p>然后很不幸的是我在线上日志收集日志中看到了很怪异的问题，线上crash一直都非常高。</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/8C289058-1F79-42EE-8F0B-34FA0FC27A43.png" width= 500 /></p>
<p>这是我通过bugly收集到的相关日志， 仔细一看，所有crash都发生在iOS8上面。一共三条日志，全部发生在iOS8 上面。</p>
<p>这让我意识到这个问题一定是这次更新导致了严重的不兼容iOS8的问题。</p>
<h4 id="DEBUG过程"><a href="#DEBUG过程" class="headerlink" title="DEBUG过程"></a>DEBUG过程</h4><p>可能也注意到了，上面有一条ipad的日志，虽然app并没有兼容apad，但是我也用家里的ipad试了一下，进入app，到登录界面然后就crash，在打了全局断点的情况下，crash到了maim.m这个文件里面，bad_access野指针。然后我想了半天也没有找到什么情况下能这么快的出现crash。然后我把目标放在了JPush 极光推送上面。经历了一段时间之后，我仔细检查了极光推送所有的地方，并且尝试将所有代码注释的方法，crash依旧。</p>
<p>后来我开始依赖于google，最终在唐巧巧大的博客里找到了解决方法。</p>
<p>在appdelegate中定义一个方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">void uncaughtExceptionHandler(NSException *exception) &#123;</div><div class="line">    NSLog(@&quot;CRASH: %@&quot;, exception);</div><div class="line">    NSLog(@&quot;Stack Trace: %@&quot;, [exception callStackSymbols]);</div><div class="line">    // Internal error reporting</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在应用启动的时候，将这个方法作为异常的回调</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions</div><div class="line">&#123;   </div><div class="line">    NSSetUncaughtExceptionHandler(&amp;uncaughtExceptionHandler);</div><div class="line">    // Normal launch stuff</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后终于能看到日志了。</p>
<p>在另外一次crash中我看到了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[UIScrollView _systemGestureStateChanged:]: message sent to deallocated instance</div></pre></td></tr></table></figure>
<p>这样的句子，才明白，crash并不是JPush造成的。UIScrollView，此时我并没有想到什么东西，因为在这个使用到了ScrollView的场景实在不多，然后我通过修改代码，绕开使用了<code>UIScrollView</code>的<code>WelcomeViewController</code>之后发现登录界面正常，不绕开，无法进入登录界面。然后登录界面登录进去之后依然crash</p>
<p>因为我的登录界面</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/E28FB77D-C390-47D4-A6B3-6FED899295EF.png" width=200/></p>
<p>这个控件使用了Scrollview。</p>
<p>然后在登录成功最后，几乎无法使用，log全是差不多的情况，这个时候我才开始吧注意力放在相关的类别里面。</p>
<p>然后我又打开了<a href="http://www.jianshu.com/p/859e3ef76b05"><em>作者的简书</em></a></p>
<p>在评论中看到这样一句</p>
<blockquote>
<p>1.发现app中任何的uitableview被释放之后，再点击屏幕就会crash，报<br>[UITableView _systemGestureStateChanged:]: message sent to deallocated instance 0x17385200<br>2.后来发现任何的collectionview被释放之后，点击屏幕也会crash，报<br>[UICollectionView _systemGestureStateChanged:]: message sent to deallocated instance 0x17385200<br>3.把目光放在UIScrollView上，查找UIScrollView的分类，是否有问题<br>4.找到 UIScrollView+HeaderScaleImage.h 注释了其中一部分代码,并把所有的引用都注释掉，依然有这个问题。<br>5.开始将目光放在_systemGestureStateChanged上，还有僵尸对象上，用instrument调试，依然无解。<br>6.六个小时过去了。<br>7.睡了一觉，然后又把目光放在UIScrollView上，将UIScrollView+HeaderScaleImage.h 中的代码全部注释掉了。<br>8.正常。感觉世界都亮了。<br>9.一步一步注释，排除，最后发现这个里面重写了uiscrollview的dealloc方法，导致scrollview在释放的时候无法清除自己的观察者身份，导致系统发通知的时候仍然能发到它身上。ios 9 没问题，ios8上就会直接crash。<br>10.将最后那个dealloc中的代码另外立出来，在controller的dealloc中主动调用这个方法，整个app没几个页面用这个，所以也并没有增加太多的工作量。</p>
</blockquote>
<p>照着上面的方法修改之后，果然，问题得到解决。</p>
<h4 id="分析原因"><a href="#分析原因" class="headerlink" title="分析原因"></a>分析原因</h4><p>如果还记得本文的标题，大概也能想到了，在iOS9以前的系统上delegate的属性关键字是assign,这一点不用查看什么文档，只需要在百度里面搜索一下 <code>delegate assign 2014</code> 就可以得到验证。</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/FF79579D-6E61-4795-A19F-5806CF7.png" width=500 /></p>
<p>在那个时代的delegate都是使用的assign作为delegate的属性关键字。</p>
<p>我们再看看<strong>52个方法</strong>中对几个属性关键字的描述</p>
<blockquote>
<ol>
<li>assign “设置方法” 只会执行针对“纯量关系”的简单负值操作。</li>
<li>strong 此特质表明该属性定义了一种“拥有关系”，为这种属性设置新值时，设置方法会<strong>先保留新值，并释放旧值</strong>然后讲新值设置上去。</li>
<li>weak 此特质表明该属性定义了一种“非拥有关系”，为这种属性设置新值时，设置方法<strong>既不保留新值，也不释放旧值</strong>，此特征同assign类似，然而在属性所指的对象遭到摧毁时，属性指也会清空（nil out）</li>
<li>unsafe_unretained 此特质的语义和assign相同，但是它适用于“对象类型”，该特质表达一种“非拥有关系”，当目标对象遭到摧毁时，属性值不会自动清空。</li>
<li>copy 此特质与strong类似，然而设置方法并不保留新值而是将其拷贝一份。</li>
</ol>
</blockquote>
<p>这时候我们看到无论是使用assign 还是weak 甚至是unsafe_unretained都不会造成循环引用的问题。</p>
<p>assign实际上是指针覆值，不对引用计数操作，使用之后如果没有置为nil，可能就会产生野指针；而weak一旦不进行使用后，会有一个置nil的操作。</p>
<h4 id="猜测"><a href="#猜测" class="headerlink" title="猜测"></a>猜测</h4><p>这就说明在iOS8下虽然系统在代理中都使用的assign属性关键字，但是在dealloc方法中使用了如<code>self.delegate = nil</code>这样的代码，将对象置为nil.</p>
<p>然后我我们在UISCrollView的分类中重写了他的dealloc方法，导致这一过程消失。所以造成野指针。</p>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>由于app已经上线，所以最初的思路还是使用hotfix来解决这个问题，但是经过一番努力之后，发现即使是使用了JSPatch也没有办法来解决这个问题，因为UIScrollview的子类涉及的太多了。我们也没有办法，通过patch的方法，还原系统的dealloc方法。所以我也只能先注释掉category中的dealloc方法，然后在使用了这个类别的我的界面中，手动的移除observer。</p>
<h4 id="证明猜测"><a href="#证明猜测" class="headerlink" title="证明猜测"></a>证明猜测</h4><p>既然结论都是猜测出来了，我也简单的写一个小demo来验证一下刚才的猜测吧！</p>
<p> 首先定义了一个Dog类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line">@class Cat;</div><div class="line">@protocol DogDelegate &lt;NSObject&gt;</div><div class="line"></div><div class="line">- (void)fuck;</div><div class="line"></div><div class="line">@end</div><div class="line">@interface Dog : NSObject</div><div class="line"></div><div class="line">@property (nonatomic ,assign) Cat &lt;DogDelegate&gt; *delegate;</div><div class="line"></div><div class="line">-(void)run;</div><div class="line">@end</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#import &quot;Dog.h&quot;</div><div class="line">#import &quot;Cat.h&quot;</div><div class="line"></div><div class="line">@implementation Dog</div><div class="line"></div><div class="line">- (void)setDelegate:(Cat&lt;DogDelegate&gt; *)delegate &#123;</div><div class="line">    _delegate = delegate;</div><div class="line">    [delegate addObserver:self forKeyPath:@&quot;name&quot; options:NSKeyValueObservingOptionNew context:nil];</div><div class="line">&#125;</div><div class="line"></div><div class="line">//- (void)dealloc &#123;</div><div class="line">//    [self.delegate removeObserver:self forKeyPath:@&quot;name&quot;];</div><div class="line">//&#125;</div><div class="line"></div><div class="line">- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary&lt;NSKeyValueChangeKey,id&gt; *)change context:(void *)context &#123;</div><div class="line">    </div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>然后定义个一个Cat类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line"></div><div class="line">@interface Cat : NSObject</div><div class="line">@property (nonatomic ,strong) NSString *name;</div><div class="line">@end</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#import &quot;Cat.h&quot;</div><div class="line">#import &quot;Dog.h&quot;</div><div class="line"></div><div class="line">@interface Cat ()&lt;DogDelegate&gt;</div><div class="line">@end</div><div class="line">@implementation Cat</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>最后调用一下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Dog *dog = [[Dog alloc] init];</div><div class="line">Cat *cat = [[Cat alloc] init];</div><div class="line">dog.delegate = cat;</div><div class="line">cat.name =  @&quot;nacy&quot;;    </div><div class="line">dog = nil;</div><div class="line">cat.name = @&quot;lily&quot;;</div></pre></td></tr></table></figure>
<p>果然如果注释掉Dog的dealloc方法，就会造成<code>EXC_BAD_ACCESS</code>crash。</p>
<h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><ol>
<li>千万不要在 category 中覆盖掉原来类中的方法。不然不知道有多少坑等着你。</li>
<li>在 iOS8 下 delegate使用的是 assign 属性关键字，这是MRC时代的问题。</li>
<li>这个问题确实是由于覆盖了dealloc方法，导致原来dealloc中清理掉原来对象中的delegate相关代码无法执行。这时候再有observer就会造成野指针。</li>
<li>在使用各种属性关键字的时候，一定要想好。</li>
<li>不要以为新的东西出来了就忘掉了以前的东西吧。</li>
</ol>
<h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>大神都是一步一个坑踩过来的。虽然这个问题导致原本很愉快的版本（线上没有crash）变成了现在这个样子，甚至还只能紧急发版来解决。但还是值得的。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如何优雅的使用xib进行开发]]></title>
      <url>http://www.CepheusSun.com/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E4%BD%BF%E7%94%A8xib%E8%BF%9B%E8%A1%8C%E5%BC%80%E5%8F%91.html</url>
      <content type="html"><![CDATA[<p>IB 和纯代码布局在 iOS 界一直都存在着不小的争论，唐巧也曾专门撰文来对比二者。网上也能找打一大堆关于 IB 或者纯代码好的或者不好的文章。即使是大神对这个也有着不一样的看法。 Sunny 力挺 IB 开发，据说Ibireme YY大神是纯代码的拥簇，虽然两位大神现在也不会再写 UI 了…</p>
<p>最近实在是比较忙，先是公司从成都搬到了重庆，纠结了半天还是决定留在现在的团队，再继续往前走下去。再是到重庆没有完整的办公场地的情况下，启动了2.0计划。好在坚持了一段时间之后，2.0版本已经完成了95%的开发等着接下来的优化了。停止可这么长时间的博客，终于也想起来了要打理打理。</p>
<p>在项目中一直都坚持着使用xib来进行界面布局,除了一些界面需要使用静态单元格用了StoryBoard其他的view层全部使用了xib进行。即使这样,刚刚看了一下也有了16w＋行代码,这篇文章就算是一些心得吧。</p>
<a id="more"></a>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="xib的构成"><a href="#xib的构成" class="headerlink" title="xib的构成"></a>xib的构成</h3><p>随便拿了一个xib文件,我们总是能看到这样的内容:</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/EF967121-9470-40EE-97CB-B457F80C0A88.png" width="300" /></p>
<ul>
<li>File’s Owner</li>
<li>First Responder</li>
<li>View (虽然我们看到的是FooCell)</li>
</ul>
<p>其实这就是xib就是由这三部分构成的。</p>
<h4 id="File’s-Owner"><a href="#File’s-Owner" class="headerlink" title="File’s Owner"></a>File’s Owner</h4><p>首先我们先聊聊<code>File&#39;s Owner</code>。我们使用xib定义的所有都是对应MVC架构中的View层(使用<code>StoryBoard</code>定义的controller实际上定义的也是这个controller的<code>self.view</code>)。这就很显然了,这里的<code>File&#39;s Owner</code>其实就是连接View 和ViewController的桥梁。其实File’s Owner就是Custom Class类型的对象，而xib中的其他元素都是该对象的成员变量，但是需要手动来关联Custom Class中的成员变量与xib中对象之间的关系。举一个简单的例子,我们在创建vc的时候勾选了also create XIB file,这时候创建的xib他的<code>File&#39;s Owner</code>就能看到class就是这个VC的class,这时候对应的tableview textfiled等控件的delegate 和datasource都可以通过连线到<code>File&#39;s Owner</code>中实现。</p>
<h4 id="First-Responder"><a href="#First-Responder" class="headerlink" title="First Responder"></a>First Responder</h4><p>再来说说<code>First Responder</code>。首先请想象一下，我们在使用textfield的时候是不是经常会用到<code>becomeFirstResponder</code> 和 <code>resignFirstResponder</code>两个方法,所以,很容易理解<code>First Responder</code>就是在这个xib中正在与用户交互的那个控件。</p>
<h4 id="View"><a href="#View" class="headerlink" title="View"></a>View</h4><p>最后一个就更简单了。以至于我都不知道怎么样来更仔细的介绍了。反正我们这个xib我们看到的部分就是view 我们放的控件也全部都是放在这个view中的。</p>
<h3 id="在xib中定于圆角等layer的属性"><a href="#在xib中定于圆角等layer的属性" class="headerlink" title="在xib中定于圆角等layer的属性"></a>在xib中定于圆角等layer的属性</h3><p>相信很多人都知道怎么样给xib上的属性定义圆角,也就是在右边工具栏选中第三个的<code>User Defined RunTime Attributes</code>中设置layer.borderRadius。 然是如果我们要设置颜色呢？这这个地方我们需要的<code>CGColor</code>但是这里只有一个<code>UIColor</code>对象。</p>
<p>在这里我使用到了一个category,并在实现文件中写下了这个方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- (void)setBorderColorWithUIColor:(UIColor *)color &#123;</div><div class="line">    self.borderColor = color.CGColor;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样在设置bordercolor的时候就可以设置keypath为<code>borderColorWithUIColor</code>并且使用UIColor来赋值了。很简单的tip 由于我比较懒,如果能够通过xib绝对不愿意在代码中写，所以这个对我来说还是很有用的。</p>
<h3 id="IBInspectable"><a href="#IBInspectable" class="headerlink" title="IBInspectable"></a>IBInspectable</h3><p>这个是方便我们在xib文件中通过右边的工具栏给view添加一些属性的,比如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@interface FooView ()</div><div class="line">@property (assign, nonatomic) IBInspectable CGFloat borderWidth;</div><div class="line">@property (strong, nonatomic) IBInspectable UIColor *borderColor;</div><div class="line">@property (assign, nonatomic) IBInspectable CGFloat cornerRadius;</div><div class="line">@end</div></pre></td></tr></table></figure></p>
<p>这个时候在xib的右边工具栏中就会出现这样的东西</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/6913AB39-AF52-427F-9AAB-F30689F9D398.png" /></p>
<p>这时候只需要给对应的属性写上对应的setter方法就ok了。</p>
<h3 id="IB-DESIGNABLE"><a href="#IB-DESIGNABLE" class="headerlink" title="IB_DESIGNABLE"></a>IB_DESIGNABLE</h3><p>这个就比较牛逼了，因为我们平常要是自定义了一个View的话，如果把这个View放在其他的xib中，这时候他其实是看不到她的效果的。这个可能会让我们感觉到很痛苦，这样的话就完全不符合XIB的核心思想<code>所见即所得</code>。</p>
<p>不说闲话了直接进入主题<code>IB_DESIGNABLE</code></p>
<p>我们在自定义View的<code>@implementation</code>前面写上<code>IB_DESIGNABLE</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">IB_DESIGNABLE</div><div class="line">@implementation FooView</div></pre></td></tr></table></figure>
<p>然后在这个view的<code>drawrect</code>方法里面写下一些代码。然后把这个view拖到其他的xib中，就会看到一些神奇的东西。</p>
<blockquote>
<p>需要注意的是，这个情况下代码只是在drawrect方法中有效。</p>
</blockquote>
<p>但是如果我们把<code>IBInspectable</code>和<code>IB_DESIGNABLE</code>结合起来呢?</p>
<h3 id="IBInspectable-amp-amp-IB-DESIGNABLE"><a href="#IBInspectable-amp-amp-IB-DESIGNABLE" class="headerlink" title="IBInspectable &amp;&amp; IB_DESIGNABLE"></a>IBInspectable &amp;&amp; IB_DESIGNABLE</h3><p>在<code>INInspectable</code>那一节的代码中在<code>FooView.m</code>中的@interface的前面写上IB_DESIGNABLE然后我们再在看看xib</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">IB_DESIGNABLE</div><div class="line">@interface FooView ()</div><div class="line">@property (assign, nonatomic) IBInspectable CGFloat borderWidth;</div><div class="line">@property (strong, nonatomic) IBInspectable UIColor *borderColor;</div><div class="line">@property (assign, nonatomic) IBInspectable CGFloat cornerRadius;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>就出现了神器的效果</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/FD65E8DF-FA63-450E-9F44-33121842B5EE.png" /></p>
<p><strong>所见即所得!!!</strong></p>
<h3 id="IBOutletCollection-ClassName"><a href="#IBOutletCollection-ClassName" class="headerlink" title="IBOutletCollection(ClassName):"></a>IBOutletCollection(ClassName):</h3><p>这个关键字支持创建一个IBOutlet控件的数组,</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/F02CCFDC-7707-423D-8FAA-1A60DF64450E.png" /></p>
<p>就是这样,顺序的话测试下来应该是按照脱线顺序来的。针对这个特性，确实不知道应该怎么使用。目前为止也还没有找到合适的应用场景。</p>
<h3 id="小tip"><a href="#小tip" class="headerlink" title="小tip"></a>小tip</h3><h4 id="tip1"><a href="#tip1" class="headerlink" title="tip1"></a>tip1</h4><p>其实在使用xib的时候还没踩到过什么大的坑，就只是遇到过一次由于没有理解到<code>File‘s Owner</code>的涵义。</p>
<p>在使用xib自定义一个view的时候每次使用到这个view总是会crash,并且报错，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos;NSUnknownKeyException&apos;, reason: … this class is not key value coding-compliant for the key X</div></pre></td></tr></table></figure>
<p>多次删掉所有的连线然后重新拉线，多次clean，也无法解决，后来才发现File‘s Owner 错了，改成NSObject之后就好了。</p>
<blockquote>
<p>最尴尬的事情是，笔者在写这篇文章的时候，修改回去又是正常的了。所以如果出现这种问题，首先检查是不是拉线冲突，如果无法解决的话，就试试修改<code>File&#39;s Owner</code>吧!</p>
</blockquote>
<h4 id="tip2"><a href="#tip2" class="headerlink" title="tip2"></a>tip2</h4><p>使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[NSBundle mainBundle] loadNibNamed:@&quot;TestView&quot; owner:self options:nil][0];</div></pre></td></tr></table></figure>
<p>来创建由xib定义的view。如果直接alloc init创建出来的view 如果有block等其他的回调的话,是很麻烦的事情。这个真的可以去试试。</p>
<h3 id="结束的话"><a href="#结束的话" class="headerlink" title="结束的话"></a>结束的话</h3><p>关于AutoLayout什么的实在没什么说的，感觉已经用烂了，无论是用代码布局的时候使用Masonry还是现在使用了xib，实在想不到有什么好介绍的。</p>
<p>非常遗憾的是IBInspectable并不能修饰UIKit下的控件，所以，我还是没有找到一个很好的方法让拖出来的控件能够实时的展示。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JPUSH 两个问题]]></title>
      <url>http://www.CepheusSun.com/JPUSH%20%E4%B8%A4%E4%B8%AA%E9%97%AE%E9%A2%98.html</url>
      <content type="html"><![CDATA[<p>最近在调试公司项目的推送的时候遇到了点小问题,死活收不到推送消息。</p>
<a id="more"></a>
<p>由于接受公司项目的时候极光推送是已经集成上去了的,虽然说本地调试的时候会经常看见失败这种情况,一直也知道极光推送可能会出现一些收不到消息的问题,所以并没有在意。</p>
<p>后来公司需要通过tag给不同组别的用户推送消息,所以也要开始看一下以前的代码。果然还是被我发现了问题。</p>
<h4 id="Q1"><a href="#Q1" class="headerlink" title="Q1"></a>Q1</h4><blockquote>
<p>在登陆的时候设置了别名，但是在Appdelegate中并没有设置。</p>
</blockquote>
<p>这中情况会造成app在保存密码之后进入app不会在走道登录界面，所以并不会设置别名什么的。这个时候的推送应该是收不到的。</p>
<p>这个我没有测试过,看了之前的代码之后直接的添加了相关代码,运行后并没有什么问题。</p>
<h4 id="Q2"><a href="#Q2" class="headerlink" title="Q2"></a>Q2</h4><blockquote>
<p>报错APNs is not available, please check your provisioning profile and certification</p>
</blockquote>
<p>这个可能就全是我自身造成的了,为了尝鲜Swift3.0 下了Xcode8.0beta 来玩玩,然后本来是Xcode7.0打开的项目文件,默认8.0了,然后不小心运行到了公司的项目。很悲剧的是，Xcode8.0 是默认关闭Push Notifications的,Xcode中手动打开就ok了。然后其它添加证书什么的, 真的没什么好说的, 极光在文档中也已经描述的非常清楚了。</p>
<p><strong>设置步骤:</strong> taget -&gt; Capabilities -&gt; PushNotification -&gt; ON</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/BD4D54BC-82B6-40F6-83E8-ECE15A8FA8D2.png" /></p>
<h4 id="Q3"><a href="#Q3" class="headerlink" title="Q3"></a>Q3</h4><blockquote>
<p>设置别名悲剧 : app not registed, give up set tag: alias:</p>
</blockquote>
<p>这是由于记住密码的情况下,设置别名什么的和注册极光等都是在很短的时间内,这个时候掉用的话，可能极光推送还不可用,所以就悲剧了.</p>
<p><strong>解决方案:</strong>延迟调用设置别名的方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</div><div class="line">    [JPUSHService setTags:[NSSet setWithObject:_MUserInfo.partnerId]</div><div class="line">                    alias:_MUserInfo.userId</div><div class="line">    fetchCompletionHandle:^(int iResCode, NSSet *iTags, NSString *iAlias) &#123;</div><div class="line">        PSLog(@&quot;-----%@&quot;, iAlias);</div><div class="line">    &#125;];</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="ending"><a href="#ending" class="headerlink" title="ending"></a>ending</h4><p>在集成的时候还是要注意一下方法的调用顺序, 别在注册JPush之前去设置什么东西吧! 猜想:这肯定是有问题的。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[EmptyDataKit -- 一行代码集成列表视图无数据展示]]></title>
      <url>http://www.CepheusSun.com/EmptyDataKit.html</url>
      <content type="html"><![CDATA[<p>抽空写了一个小东西<a href="https://github.com/CepheusSun/EmptyDataKit"><strong>EmptyDataKit</strong></a>，一行代码可以集成UITableView 和 UICollectionView 在数据源没有数据的时候展示一个默认占位图片。</p>
<a id="more"></a>
<h2 id="gif"><a href="#gif" class="headerlink" title="gif"></a>gif</h2><p><img src="http://ocg4av0wv.bkt.clouddn.com/ProgramerSunnyDemo.gif" width= "400" /></p>
<p>另外这个工具也被我添加进了我来一个叫做<code>SBAnimation</code>的仓库中,而且<code>SBAnimation</code>中的demo代码更干净和间接，而且完整的示范了这个工具的使用方法。由于精力有限，暂时还没有动力将这里的demo代码替换。所以我也将<code>SBAnimation</code>中的截图放到这里来。如果需要的话可以过去看看。<a href="https://github.com/SolarBee/SBAnimation">地址</a></p>
<p><img src="http://ojno1pj4x.bkt.clouddn.com/EmptyDataKit.gif"></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><strong>0、</strong>框架依赖与<code>BlocksKit</code>请在<code>podfile</code>中添加<code>pod &#39;BlocksKit&#39;</code>并且在终端执行<code>pod install --no-repo-update</code>。如果直接拖进你的工程记得添加 pod BlocksKit</p>
<p><strong>1、</strong>首先 <code>pod &#39;EmptyDataKit&#39;</code></p>
<p><strong>2、</strong>导入头文件<code>#import &lt;EmptyDataKit/EmptyDataKit.h&gt;</code></p>
<p><strong>3、</strong>在dataSource的<code>numberOfSectionsInTableView</code>方法中调用<code>EmptyDataKit</code>中的唯一方法.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    __weak typeof(self) weakSelf = self;</div><div class="line">    EmptyDataKit *kit = [[EmptyDataKit alloc] initWithEdk_Image:[UIImage imageNamed:@&quot;common_pic_loadFail&quot;] edk_Message:@&quot;aaa&quot; edk_reloadHandler:^&#123;</div><div class="line">        [weakSelf getData];</div><div class="line">    &#125;];</div><div class="line">    kit.edk_error_image = [UIImage imageNamed: @&quot;&quot;];</div><div class="line">    kit.edk_error_message = @&quot;网络错误&quot;;</div><div class="line">    self.tableView.emptyKit = kit;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至此，EmptyDataKit集成成功!   <code>UIcollectionView</code>使用方法同理</p>
<p>另外<code>EmptyDataKit</code>有如下枚举</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">typedef NS_ENUM(NSUInteger ,EmptyDataType) &#123;</div><div class="line">    EDK_Loading,     // if there is a LoadingView, use this ,and also this is a default status.</div><div class="line">    EDK_None,        // if there is some data, use this.</div><div class="line">    EDK_Empty,       // if there is no data, use this.</div><div class="line">    EDK_Error        // if there is some error such as network, use this.</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这样在<code>reloadData</code>之前给<code>self.tableView.emptyKit.edk_type</code>赋值即可区分在不同状态下的不同展示情况。</p>
<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>思路方面，我给<code>UITableView</code>和<code>UIColectionView</code>分别添加了两个Category, 并且通过runtime给两个类都关联了两个属性<code>data</code> 、 <code>touchBlock</code> 和<code>emptyKit</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@property (nonatomic, assign) BOOL data;</div><div class="line">@property (nonatomic, copy) TouchBlock touchBlock;</div><div class="line">@property (nonatomic, strong) EmptyDataKit *emptyKit;</div></pre></td></tr></table></figure>
<p>分别表示是否有数据和一个空数据的时候点击空白部分回调刷新的部分。</p>
<p>考虑到我想同时兼容UITableView 和 UICollectionView 所以我提取了一个object <code>EmptyDataKit</code>。</p>
<p>之前的调用方式是在<code>numberOfSectionsInTableView</code>方法中调用EmptyDataKit，并且是一个类方法，在新的框架下，EmptyDataKit 作为 TableView 的属性在设置的时候更加自主。</p>
<p>并且通过<code>MethodSwizzling</code>在 <code>tableView</code> 的 <code>reloadData</code> 方法中激发 <code>EmptyDataKit</code>,减少了很多调用次数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">+ (void)load &#123;</div><div class="line">    static dispatch_once_t onceToken;</div><div class="line">    dispatch_once(&amp;onceToken, ^&#123;</div><div class="line">        [self methodSwizzlingWithOriginalSelector:@selector(reloadData)</div><div class="line">                               bySwizzledSelector:@selector(sure_reloadData)];</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)sure_reloadData &#123;</div><div class="line">    [self.emptyKit edk_display:self];</div><div class="line">//    id &lt;UITableViewDataSource&gt; dataSource = self.dataSource;</div><div class="line">    [self sure_reloadData];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="TODO："><a href="#TODO：" class="headerlink" title="TODO："></a>TODO：</h2><ol>
<li>进一步规范文档。</li>
<li>移除对BlocksKit的依赖。</li>
</ol>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>工具已经开源在github中,欢迎提issue。</p>
<a href="!--[**开源地址**](https://github.com/CepheusSun/EmptyDataKit)--">!--[**开源地址**](https://github.com/CepheusSun/EmptyDataKit)--</a>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[为Category添加属性]]></title>
      <url>http://www.CepheusSun.com/%E4%B8%BACategory%E6%B7%BB%E5%8A%A0%E5%B1%9E%E6%80%A7.html</url>
      <content type="html"><![CDATA[<p>使用Runtime给Category添加属性。</p>
<a id="more"></a>
<h2 id="Category-与-property"><a href="#Category-与-property" class="headerlink" title="Category 与 property"></a>Category 与 property</h2><p>我为类<code>ViewController</code>添加了一个<code>Category</code>,然后我想给他添加一个属性，<code>vcName</code></p>
<p>于是我在<code>ViewController+Category</code>中声明了一个属性</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@property (nonatomic ,copy) NSString *vcName;</div></pre></td></tr></table></figure>
<p>我们知道在类目的接口中是可以声明属性的。但是在他的实现部分是不允许包含<code>@synthesize</code>的。 下面安利一下两个关键字<code>@synthesize</code>、<code>@dynamic</code></p>
<ul>
<li><p><code>@synthesize</code>的语义是如果我们没有手动的实现<code>property</code>的<code>setter</code>和<code>getter</code>方法，编译器会自动的添加上这两个方法。</p>
</li>
<li><p><code>@dynamic</code>告诉编译器,属性的<code>setter</code>与<code>getter</code>方法由用户自己实现，不自动生成。</p>
<p>在平常我们都习惯了不写这两个关键词，这个时候其实默认是<code>@synthesize var = _var</code></p>
</li>
</ul>
<p>回到刚才的地方,如果我手动加上<code>@synthesize vcName = _vcName;</code>是无法通过编译的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@synthesize not allowed in a category&apos;s implementation//这是编译器报的错误消息</div></pre></td></tr></table></figure>
<p>如果我不写的话编译器会有警告让你加上<code>@dynamic</code>语句。这个当然也是不行的。因为这个时候我自己写setter和getter.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- (NSString *)vcName&#123;</div><div class="line">    return _vcName;</div><div class="line">&#125;</div><div class="line">- (void)setVcName:(NSString *)vcName &#123;</div><div class="line">    _vcName = vcName;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这时候编译器会报错 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">use of undeclared identifier &apos;_vcName&apos;</div></pre></td></tr></table></figure>
<p><strong>结论</strong></p>
<blockquote>
<p>Categoryde 的接口中可以包含属性声明，但是实现部分不能包含<code>@synthesis</code></p>
</blockquote>
<h2 id="给Category-添加-Property"><a href="#给Category-添加-Property" class="headerlink" title="给Category 添加 Property"></a>给Category 添加 Property</h2><p>已经有了上面的结论了，但是我们在具体开发过程中确实会遇到很多需要在类别中添加使用<code>Property</code>的情况。这个时候应该怎么办呢？我们知道Obj-c是一门动态语言，强大的运行时(Runtime)机制能够为类关联引用，然后通过这种方法来实现给类别添加属性。</p>
<blockquote>
<p>关联引用指的是借助运行时功能，为已存在的对象增加实例变量。</p>
</blockquote>
<p>通过关联引用就算时同一个类的不同对象也可能添加关联或者添加不同种类和数量的关联。另外添加了的关联也是可以被删除的。</p>
<h3 id="添加和检索关联"><a href="#添加和检索关联" class="headerlink" title="添加和检索关联"></a>添加和检索关联</h3><p>既然说到了需要使用runtime,那我们首先需要导入Runtime相关的头文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#import &lt;objc/runtime.h&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//这个方法时为对象object添加key指定的地址作为关键字，以value为值关联引用，第四个参数pilicy指的是关联引用的存储策略。</div><div class="line">//通过将value设置为nil 可以删除key的关联</div><div class="line">OBJC_EXPORT void objc_setAssociatedObject(id object, const void *key, id value, objc_AssociationPolicy policy)</div><div class="line">    __OSX_AVAILABLE_STARTING(__MAC_10_6, __IPHONE_3_1);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//返回object以key为关键字关联的对象，如果没有，则反火nil</div><div class="line">OBJC_EXPORT id objc_getAssociatedObject(id object, const void *key)</div><div class="line">    __OSX_AVAILABLE_STARTING(__MAC_10_6, __IPHONE_3_1);</div></pre></td></tr></table></figure>
<p>这一个的原理还是比较简单的。</p>
<p>首先，我们需要为一个类别专家多个关联引用，所以我们需要用不同的key值来区别。</p>
<p>其次，键值必须要使用一个确定且不可变的地址。所以选择定义在实现文件的static静态局部变量的地址。</p>
<p>policy策略就跟定义property的时候才用的存储关键字相似了。</p>
<h3 id="存储关键字"><a href="#存储关键字" class="headerlink" title="存储关键字"></a>存储关键字</h3><p>第四个参数<code>objc_AssociationPolicy policy</code>其实是一个枚举，点看之后我们可以看到</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">typedef OBJC_ENUM(uintptr_t, objc_AssociationPolicy) &#123;</div><div class="line">    OBJC_ASSOCIATION_ASSIGN = 0,           /**&lt; Specifies a weak reference to the associated object. */</div><div class="line">    OBJC_ASSOCIATION_RETAIN_NONATOMIC = 1, /**&lt; Specifies a strong reference to the associated object. </div><div class="line">                                            *   The association is not made atomically. */</div><div class="line">    OBJC_ASSOCIATION_COPY_NONATOMIC = 3,   /**&lt; Specifies that the associated object is copied. </div><div class="line">                                            *   The association is not made atomically. */</div><div class="line">    OBJC_ASSOCIATION_RETAIN = 01401,       /**&lt; Specifies a strong reference to the associated object.</div><div class="line">                                            *   The association is made atomically. */</div><div class="line">    OBJC_ASSOCIATION_COPY = 01403          /**&lt; Specifies that the associated object is copied.</div><div class="line">                                            *   The association is made atomically. */</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>有这5个值</p>
<p>下面就分别的介绍一下几种。看注释也知道:</p>
<p><strong>OBJC_ASSOCIATION_ASSIGN</strong> <code>weak</code></p>
<p>不给关联对象发送<code>retain</code>消息，引用计数不会增加。</p>
<p><strong>OBJC_ASSOCIATION_RETAIN_NONATOMIC</strong> <code>strong</code></p>
<p>发送<code>retain</code>消息，引用计数加1.  如果给同样的key关联到了其他对象，那么会给其他对象发送一个<code>release</code>消息。释放关联对象的所有者的时候，会给所有关联的对象发送<code>release</code>消息。</p>
<p><strong>OBJC_ASSOCIATION_COPY_NONATOMIC</strong> <code>copy</code></p>
<p>会将该对象复制一份，并且用新复制的对象进行关联操作。</p>
<p><strong>OBJC_ASSOCIATION_RETAIN</strong> <code>strong</code>、<code>atomic</code></p>
<p><strong>OBJC_ASSOCIATION_COPY</strong> <code>copy</code>、<code>atomic</code></p>
<h2 id="断开关联"><a href="#断开关联" class="headerlink" title="断开关联"></a>断开关联</h2><p>runtime 也贴心的提供了断开关联的函数。但是可惜，我并不经常用，因为使用上面的方法并且传入nil来断开关联，会更佳安全，毕竟，我不敢保证是不是有其他地方会使用到已经关联的对象。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">OBJC_EXPORT void objc_removeAssociatedObjects(id object)</div><div class="line">    __OSX_AVAILABLE_STARTING(__MAC_10_6, __IPHONE_3_1);</div></pre></td></tr></table></figure>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>扯了这么多有的没得，还是talk is cheap， show me the code 比较好一点。</p>
<p><em>第一步</em>  导入头文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#import &lt;objc/runtime.h&gt;</div></pre></td></tr></table></figure>
<p><em>第二步</em>  定义用作键值的静态变量。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">```</div><div class="line">// static char *vcNameKey;  </div><div class="line"></div><div class="line">/*</div><div class="line">IMPORTANT!!!</div><div class="line">这样写可能会有bug， 笔者已经踩坑。直接下面那样写！！！</div><div class="line">*/</div><div class="line">```</div><div class="line"></div><div class="line">~~或者</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">static const char *vcNameKey = &quot;vcNameKey&quot;;</div></pre></td></tr></table></figure>
<p><em>第三步</em> 定义存取方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- (NSString *)vcName&#123;</div><div class="line">    return objc_getAssociatedObject(self, vcNameKey);</div><div class="line">&#125;</div><div class="line">- (void)setVcName:(NSString *)vcName &#123;</div><div class="line">    objc_setAssociatedObject(self, vcNameKey, vcName, OBJC_ASSOCIATION_COPY_NONATOMIC);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="试一下断开关联"><a href="#试一下断开关联" class="headerlink" title="试一下断开关联"></a>试一下断开关联</h2><p>首先在category中定义两个关联属性</p>
<p>在vievcontroller中给两个属性赋值，并且给<code>self.title</code>赋值</p>
<p>然后用<code>objc_removeAssociatedObjects(self);</code>断开关联</p>
<p>然后输出结果,category中关联的属性两个都输出<code>null</code>而本身的属性title正常输出</p>
<p><strong>结论</strong></p>
<p>很好说了,<code>objc_removeAssociatedObjects(self);</code>的作用是断开所有关联。 </p>
<p>而且也更简单的验证了,使用runtime给对象关联的属性跟本身的属性本质是是不一样的。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[怎么使用Hexo发博客]]></title>
      <url>http://www.CepheusSun.com/%E6%80%8E%E4%B9%88%E4%BD%BF%E7%94%A8Hexo%E5%8F%91%E5%8D%9A%E5%AE%A2.html</url>
      <content type="html"><![CDATA[<p>怎么样使用Hexo发博客,以及博客的使用技巧。</p>
<a id="more"></a>
<blockquote>
<p>第二次帮一个朋友搭建博客,快多了，只花了2个多小时就把博客简单的弄好了<a href="https://maojianxiang.github.io/archives/"><em>传送门</em></a>。然后现在简单的写一个使用说明。我也来帮Hexo站站台。</p>
</blockquote>
<p>这篇文章主要包括我平时是怎么使用Hexo的,以及markdown简单的一些基本语法。和最新搭建这个博客又遇到的坑。</p>
<h2 id="踩坑篇"><a href="#踩坑篇" class="headerlink" title="踩坑篇"></a>踩坑篇</h2><h3 id="环境配置篇"><a href="#环境配置篇" class="headerlink" title="环境配置篇"></a>环境配置篇</h3><p>在最开始搭建这个博客的时候，我还是非常的自信的，不就是在终端使用各种命令嘛。所以我叫他自己下载了markdown写作工具Mou, 一个Sublime Text3 一个teamviewer。然后叫他自己去申请了一个github账号。</p>
<p>首先我是用teamviewer开始操作他的电脑。</p>
<p>然后快速的关掉所有没用的软件。</p>
<p>打开终端，cd到根目录</p>
<p>朋友也是iOS所以肯定是有Xcode的，git肯定也是有。试一下有没有node.js的环境</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div></pre></td></tr></table></figure>
<p>很不幸，什么都没有，结果没有超出我的预料<code>npm command not find</code></p>
<p>然后我开始装Node.js</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh</div></pre></td></tr></table></figure>
<p>半天没反应,进度条不懂，两秒后结束，然后再</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div></pre></td></tr></table></figure>
<p>依然<code>npm command not find</code></p>
<p>我以为是除了什么问题，换个方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget conmmand not find</div></pre></td></tr></table></figure>
<p>然后我在node的<a href="https://github.com/creationix/nvm"><em>github</em></a>上面看到</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.6/install.sh | bash</div></pre></td></tr></table></figure>
<p>依然没反应。然后我就惆怅了。多次尝试之后发现，依然没有反应。这期间多次尝试各种帖子的文档，homebrew 重装了两次。</p>
<p>在经历了绝望之后，我决定再试一下，所以我打开了node的<a href="https://nodejs.org/en/"><em>下载地址</em></a>直接下载，安装之后，惊讶的发现一切都解决了。</p>
<blockquote>
<p>如果采用上面的命令发现一切都没有什么乱用,别多想了，直接下载安装吧。</p>
</blockquote>
<p>这个应该更容易一点，虽然感觉没那么Geek，但是能解决问题，才是最好的吧。</p>
<h3 id="部署篇"><a href="#部署篇" class="headerlink" title="部署篇"></a>部署篇</h3><p>这个没什么好说的了，<a href="https://CepheusSun.github.io/2016/07/15/hello-world/"><em>上篇文章</em></a>也有写到,在<strong>第一次部署</strong>的时候会出现一些问题，所以在</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo d</div></pre></td></tr></table></figure>
<p>之前先</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git –save</div></pre></td></tr></table></figure>
<p>一下。</p>
<p>其次就是我比较粗心的问题了,比如写github地址的时候，直接手打的，然后一直报错，所以最好还是去github复制地址比较好。</p>
<blockquote>
<p>github的username 是要登陆的邮箱或者其他什么的 </p>
</blockquote>
<h2 id="使用篇"><a href="#使用篇" class="headerlink" title="使用篇"></a>使用篇</h2><h3 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h3><h4 id="1、同过命令"><a href="#1、同过命令" class="headerlink" title="1、同过命令"></a>1、同过命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new &quot;title&quot;</div></pre></td></tr></table></figure>
<p>然后到博客目录下<code>resource</code>的<code>_post</code>文件下下面找到你刚刚创建的<code>.md</code>文件,然后开始写作</p>
<h4 id="2、直接创建"><a href="#2、直接创建" class="headerlink" title="2、直接创建"></a>2、直接创建</h4><p>直接创建一个<code>.md</code>文件,写完后拖到上面的文件夹中。</p>
<h2 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: 怎么使用Hexo发博客</div><div class="line">date: 2016-8-31</div><div class="line">tags: Hexo</div><div class="line">categories: Hexo</div><div class="line">---</div></pre></td></tr></table></figure>
<p>我的文章是这样开始的，上面的内容分别代表什么不用我说了吧。给这篇文章设置tag 和分类什么的都是这样的。如果你想在两个tag 或者分类中看到这篇文    <code>tags: [hexo , ios]</code>即可。</p>
<h3 id="markdown语法"><a href="#markdown语法" class="headerlink" title="markdown语法"></a>markdown语法</h3><p>markdown 也有自己的语法，hexo会自己解析然后出现在你的博客里面，这是一个很好用的工具，让我们更专注于写作本身而不是费尽心思的去弄格式。</p>
<p>之前学习html css的时候发现markdown也支持html标签  比如我想对一个词语“CepheusSun加粗，我可以使用markdown语法 <code>**CepheusSun**</code>  也可以使用html标签 <code>&lt;strong&gt;CepheusSun&lt;/strong&gt;</code> 这样的效果是一样的；</p>
<ul>
<li>markdown: <strong>CepheusSun</strong></li>
<li>html: <strong>CepheusSun</strong></li>
</ul>
<p>这里我还是单纯的讲一下markdown我要用的内容吧。 </p>
<blockquote>
<p>在Mou里直接CMD + R 可以看到相关内容，但是貌似是英文的。</p>
</blockquote>
<h4 id="加粗强调"><a href="#加粗强调" class="headerlink" title="加粗强调"></a>加粗强调</h4><p><code>__ss__  _ss_  *aa*  **aa**</code>  表现为： <strong>ss</strong>  <em>ss</em>  <em>aa</em>  <strong>aa</strong></p>
<h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><p><code>[*CepheusSun*](https://CepheusSun.github.io/)</code> 表现为：  <a href="https://CepheusSun.github.io/"><em>CepheusSun</em></a></p>
<h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><p>我弄图片我习惯设置宽度大小什么的，所以我用的html标签</p>
<p><code>&lt;img src=&quot;图片地址&quot; width=&quot;100&quot; height=&quot;100&quot;&gt;</code></p>
<p><img src="图片地址" width="100" height="100"></p>
<h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><p>以及标题到六级标题 分别是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 一级标题</div><div class="line">## 二级标题</div><div class="line">### 三级标题</div><div class="line">#### 四级标题</div><div class="line">##### 五级标题</div><div class="line">###### 六级标题</div></pre></td></tr></table></figure>
<h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1. 1</div><div class="line">2. 2</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">* 1</div><div class="line">	* 1.1</div><div class="line">	* 1.2</div><div class="line">* 2</div></pre></td></tr></table></figure>
<h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; 引用的内容</div></pre></td></tr></table></figure>
<blockquote>
<p>引用的内容</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`小标签`</div></pre></td></tr></table></figure>
<p><code>小标签</code></p>
<p>代码块使用 ： </p>
<p>其他的都用得少就不多说了，这些内容百度能很容易的找到。</p>
<h2 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h2><p>刚过说到图片的问题，可能就不知道怎么弄了，这里推荐使用七牛的图床，然后直接那图片的url出来就可以了，而且不占用空间。具体使用方法，去七牛看吧，我正在尝试着能不能吧这个东西写个什么出来，自动化上传。<a href="https://portal.qiniu.com/signin"><em>七牛地址</em></a></p>
<h2 id="使用Hexo"><a href="#使用Hexo" class="headerlink" title="使用Hexo"></a>使用Hexo</h2><p>实在没什么好说的,配置好各种东西之后就没有什么麻烦的内容了，主要就还是几个。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo clean</div></pre></td></tr></table></figure>
<p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo g</div></pre></td></tr></table></figure>
<p>生产静态文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo d</div></pre></td></tr></table></figure>
<p>部署网站。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo s</div></pre></td></tr></table></figure>
<p>启动服务器。默认情况下访问地址是<code>http://localhost:4000/</code>就能本地看一下改动效果了。</p>
<p>每次 g + d 就ok了</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[复杂业务下的架构设计和研发效率提升(笔记)]]></title>
      <url>http://www.CepheusSun.com/%E5%A4%8D%E6%9D%82%E4%B8%9A%E5%8A%A1%E4%B8%8B%E7%9A%84%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E7%A0%94%E5%8F%91%E6%95%88%E7%8E%87%E6%8F%90%E5%8D%87(%E7%AC%94%E8%AE%B0).html</url>
      <content type="html"><![CDATA[<p>抽空重新看了一下今年的<a href="http://gmtc.geekbang.org/"><em>GMTC</em></a>,读到链家郭晓铭的PPT:<a href="http://ppt.geekbang.org/slide/show/210"><em>链家网移动端敏捷之术</em></a>的时候忍不住写了这个笔记,大多数内容都是ppt上的原文。</p>
<a id="more"></a>
<h2 id="大多数app存在的现象"><a href="#大多数app存在的现象" class="headerlink" title="大多数app存在的现象"></a>大多数app存在的现象</h2><ol>
<li>业务简单<ul>
<li>业务覆盖城市范围小</li>
<li>产品用户角色单一</li>
<li>业务单一、未形成线上线下的闭环</li>
</ul>
</li>
<li>团队工作方式传统<ul>
<li>团队规模小(人员密切配合，不存在业务线的分工)</li>
<li>瀑布式开发(版本需求比较稳定，在开发过程中很少调整)</li>
<li>手工打包上线(产品投放渠道少，发版节奏平缓，测试盒上线均靠手工打包)</li>
</ul>
</li>
<li>架构简单 MVC架构<ul>
<li>通用设计，学习和维护成本低。</li>
<li>对复杂业务不适应。业务逻辑变得复杂的时候，Controller将变得越来越大</li>
</ul>
</li>
</ol>
<h2 id="第一阶段"><a href="#第一阶段" class="headerlink" title="第一阶段"></a>第一阶段</h2><ol>
<li>地域业务差异</li>
<li>业务增多，内容型业务的形态多变</li>
<li>人员增多，人均产出下降，代码质量堪忧</li>
</ol>
<h3 id="基于短链的配置化"><a href="#基于短链的配置化" class="headerlink" title="基于短链的配置化"></a>基于短链的配置化</h3><p><strong>方法:</strong></p>
<ol>
<li>Sever端下发城市配置(包含icon、标题、跳转短链、功能开关等)</li>
<li>跳转短链注册表(保存短链pattern与页面的类别、类参数名、短链参数名、默认参数值、跳转方式等的对应信息)</li>
<li>短链解析和页面跳转(使用注册表中的短链pattern做正则匹配，根据匹配到的消息创建页面并用对应的跳转方式打开)</li>
</ol>
<p><strong>优点:</strong></p>
<ol>
<li>更统一(各个业务的解析和跳转逻辑由跳转同意引擎同意处理)</li>
<li>更灵活(城市配置由路由端下发，城市业务范围的调整不依赖发版)</li>
<li>扩展性强(快速支持新增城市，且对新业务的支持不影响旧的功能)</li>
</ol>
<h3 id="业务快速上线和调整"><a href="#业务快速上线和调整" class="headerlink" title="业务快速上线和调整"></a>业务快速上线和调整</h3><p>使用Native + H5 的方式实现。</p>
<p>Native作为重点业务体验的保证。 H5负责内容型业务和运营活动</p>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/6008BDF9-E1DD-4BFA-9076-CD85EFDAA252.png" width="600"/></p>
<ol>
<li>小巧清晰，不依赖第三方解决方案</li>
<li>消息传递安全，通过bridge注入参数信息，不是url</li>
<li>两端方案统一</li>
</ol>
<h3 id="项目质量缺乏保障"><a href="#项目质量缺乏保障" class="headerlink" title="项目质量缺乏保障"></a>项目质量缺乏保障</h3><ol>
<li>开发流程优化<ul>
<li>代码规范形成(代码风格一致,提高可读性;统一的入口参数校验，异常处理等，提高健壮性)</li>
<li>CodeReview(同步开发人员对代码和设计的理解；提前发现问题)</li>
<li>敏捷开发模式(随时交付，提早反馈)</li>
</ul>
</li>
</ol>
<h2 id="第二阶段"><a href="#第二阶段" class="headerlink" title="第二阶段"></a>第二阶段</h2><ol>
<li>多个业务团队并行开发</li>
<li>多个新产品需要快速上线(需要能够复制已有功能，快速上线)</li>
<li>对接后端团队越来越多(沟通成本高，发版风险大;不同团队接口数据格式差异大，客户端数据解析和校验逻辑复杂)</li>
</ol>
<h3 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h3><p><img src="http://ocg4av0wv.bkt.clouddn.com/A311CAD4-C6F0-4428-8662-0E7DA0EFB066.png" width="600" /></p>
<h4 id="组建间的调用方案"><a href="#组建间的调用方案" class="headerlink" title="组建间的调用方案"></a>组建间的调用方案</h4><p>组建: 各个组件之间相互独立，不直接调用，而是通过中介者Component Mediator相互调用</p>
<p>CM:按组建拆分，每部分为该组建支持的调用方式</p>
<p>组建接口: 各组件针对组件间调用做相应接口类。CM通过反射机制调用该接口类的相应方法。</p>
<h4 id="组件化过程中的风险控制"><a href="#组件化过程中的风险控制" class="headerlink" title="组件化过程中的风险控制"></a>组件化过程中的风险控制</h4><ol>
<li>代码仓库分离<ul>
<li>主工程代码、公共模块代码、以及各业务组件代码仓库分离</li>
</ul>
</li>
<li>权限控制<ul>
<li>为单个业务团队配置公共模块代码，以及其他业务代码的只读权限</li>
</ul>
</li>
<li>建立接口类的命名规范<ul>
<li>对组件接口类名以及接口接口方法的命名统一规范，降低开发成本</li>
</ul>
</li>
<li>接口类的CodeReview<ul>
<li>接口类出错的影响范围相对较大，需要业务负责任对接口类做重点review</li>
</ul>
</li>
<li>热修复<ul>
<li>紧急修复组件化过程中造成的线上问题；每个补丁不允许超过1个版本</li>
</ul>
</li>
</ol>
<h4 id="API团队引入"><a href="#API团队引入" class="headerlink" title="API团队引入"></a>API团队引入</h4><p>引入API团队可以减少客户端和多个Sever端交互。</p>
<ul>
<li>沟通成本降低</li>
<li>发版风险降低</li>
<li>业务逻辑简化</li>
</ul>
<p><strong>移动端与后端配合开发流程</strong><br><img src="http://ocg4av0wv.bkt.clouddn.com/80A8B375-36DC-496F-B4CD-C9C26A538986.png" width = 600 title="移动端与后端配合开发流程"/> </p>
<h2 id="第三阶段"><a href="#第三阶段" class="headerlink" title="第三阶段"></a>第三阶段</h2><ol>
<li>插件化(用户对产品功能做个性化定制，减少安装包体积，降低发版成本)</li>
<li>跨平台技术(最小的成本覆盖到两个平台，避免重复开发)</li>
<li>安全性(更多交易内容线上化)</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CSS学习笔记 -- 1]]></title>
      <url>http://www.CepheusSun.com/css%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0--1.html</url>
      <content type="html"><![CDATA[<p>抽空学习了一下html、css、JavaScript。</p>
<a id="more"></a>
<blockquote>
<p>这部分内容是我抽空学习的时候整理的笔记,这部分是看的前端的内容。<a href="http://www.imooc.com/learn/9"><em>学习地址</em></a>。</p>
</blockquote>
<h2 id="什么是CSS"><a href="#什么是CSS" class="headerlink" title="什么是CSS"></a>什么是CSS</h2><blockquote>
<p>CSS 全称为”层叠样式表Cascading Style Sheets”,他主要是用于定义HTML内容在浏览器中的样式,如文字大小，颜色，字体加粗等。</p>
<p>使用CSS样式的一个好处是通过定义某个样式，可以让不同网页位置的文字有着统一的字体、字号或者颜色等。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">p&#123;</div><div class="line">	font-size:12px;</div><div class="line">	color:red;</div><div class="line">	font-weight:bold;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="CSS的语法"><a href="#CSS的语法" class="headerlink" title="CSS的语法"></a>CSS的语法</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p>css样式由<strong>选择符</strong>和<strong>声明</strong>组成，而<strong>声明</strong>又由<strong>属性</strong>和<strong>值</strong>组成。</p>
<p>如上文示例中<code>p</code>为选择符 <code>{...}</code>花括号内为声明，<code>color</code>为属性 ,<code>red</code>为值。</p>
<p><strong>选择符</strong>:又称为选择器，指明网页中要应用样式规则的元素。</p>
<p><strong>声明</strong>: 在英文花括号中的就是声明，属性和值之间用英文冒号分割。当有多条声明的时候，使用<code>;</code>分割。</p>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>html: <code>&lt;!-- ... --&gt;</code>;</p>
<p>css: <code>/*...*/</code></p>
<h3 id="位置"><a href="#位置" class="headerlink" title="位置"></a>位置</h3><p>内联式、嵌入式、外部式</p>
<h4 id="内联式CSS样式-直接写在现有的CSS标签中"><a href="#内联式CSS样式-直接写在现有的CSS标签中" class="headerlink" title="内联式CSS样式,直接写在现有的CSS标签中"></a>内联式CSS样式,直接写在现有的CSS标签中</h4><p><p style="color:red ; font-size: 15px">text</p>  <code>&lt;p style=&quot;color:red ;font-size: 15px&quot;&gt;text&lt;/p&gt;</code></p>
<h4 id="嵌入式CSS样式，直接写在当前的文件中"><a href="#嵌入式CSS样式，直接写在当前的文件中" class="headerlink" title="嵌入式CSS样式，直接写在当前的文件中"></a>嵌入式CSS样式，直接写在当前的文件中</h4><p>将css代码写在html文件的<code>&lt;style&gt;&lt;/style&gt;</code>标签中</p>
<p>嵌入式css样式必须写在<code>&lt;style&gt;&lt;/style&gt;</code>之间，并且一般情况下嵌入式css样式写在<code>&lt;head&gt;&lt;/head&gt;</code>之间。如右边编辑器中的代码。</p>
<h4 id="外部式CSS样式-写在单独的一个文件中"><a href="#外部式CSS样式-写在单独的一个文件中" class="headerlink" title="外部式CSS样式,写在单独的一个文件中"></a>外部式CSS样式,写在单独的一个文件中</h4><p>外部式css样式(也可称为外联式)就是把css代码写一个单独的外部文件中，这个css样式文件以“.css”为扩展名，在<code>&lt;head&gt;</code>内（不是在<code>&lt;style&gt;</code>标签内）使用<code>&lt;link&gt;</code>标签将css样式文件链接到HTML文件内，如下面代码：</p>
<p><code>&lt;link href=&quot;base.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;</code></p>
<p>注意:</p>
<ol>
<li>css样式文件名称应该以有意义的英文字母命名。</li>
<li>rel=”stylesheet” type=”text/css”是固定写法，不可以修改。</li>
<li><code>&lt;link&gt;</code>标签的位置一般写在<code>&lt;head&gt;</code>标签之内。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE HTML&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;</div><div class="line">&lt;title&gt;嵌入式css样式&lt;/title&gt;</div><div class="line">&lt;link href=&quot;style.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;p&gt;...&lt;/p&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h4 id="三种方式的优先级以及怎么选择"><a href="#三种方式的优先级以及怎么选择" class="headerlink" title="三种方式的优先级以及怎么选择"></a>三种方式的优先级以及怎么选择</h4><p>如果三个都有，那么三个都要访问到，但是如果对于同一个属性，那么按照：就近原则体现。</p>
<h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3><p><strong>语法</strong>： <code>.类选择器{css样式代码;}</code></p>
<ul>
<li>以英文原点开头</li>
<li>类选器名称可以任意起名</li>
</ul>
<p><strong>使用</strong>：</p>
<ol>
<li>设置类选择器<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2. 使用合适的标签修饰内容</div></pre></td></tr></table></figure>
</li>
</ol>
<p><span>内容</span><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">3. 为上面的标签设置一个类</div></pre></td></tr></table></figure></p>
<p><span class="name">内容</span><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### ID选择器</div><div class="line"></div><div class="line">类似类选择器</div><div class="line"></div><div class="line">1、为标签设置id=&quot;ID名称&quot;，而不是class=&quot;类名称&quot;。</div><div class="line"></div><div class="line">2、ID选择符的前面是井号（#）号，而不是英文圆点（.）。</div><div class="line"></div><div class="line">#### 类选择器和ID选择器的区别</div><div class="line"></div><div class="line">**相同点**:可以应用于任何元素</div><div class="line"></div><div class="line">**不同点**:</div><div class="line"></div><div class="line">1. ID选择器只能在文档中使用一次。与类选择器不同，在一个HTML文档中，ID选择器只能使用一次，而且仅一次。而类选择器可以使用多次。</div><div class="line">2. 可以使用类选择器词列表方法为一个元素同时设置多个样式。我们可以为一个元素同时设多个样式，但只可以用类选择器的方法实现，ID选择器是不可以的（不能使用 ID 词列表）。</div><div class="line"></div><div class="line"></div><div class="line">### 子选择器</div><div class="line"></div><div class="line">子选择器(&quot;&gt;&quot;)：用于选择指定标签元素的第一代子元素。</div></pre></td></tr></table></figure></p>
<p>.food&gt;li{border:1px solid red;}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">这行代码会使class名为food下的子元素li（水果、蔬菜）加入红色实线边框。</div><div class="line"></div><div class="line"></div><div class="line">### 包含（后代）选择器</div><div class="line"></div><div class="line">包含选择器，即加入空格,用于选择指定标签元素下的后辈元素。如右侧代码编辑器中的代码：</div></pre></td></tr></table></figure></p>
<p>.first span{color:red;}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">请注意这个选择器与子选择器的区别，子选择器（child selector）仅是指它的直接后代，或者你可以理解为作用于子元素的第一代后代。而后代选择器是作用于所有子后代元素。后代选择器通过空格来进行选择，而子选择器是通过“&gt;”进行选择。</div><div class="line"></div><div class="line">总结：&gt;作用于元素的第一代后代，空格作用于元素的所有后代。</div><div class="line"></div><div class="line">### 通用选择器</div><div class="line"></div><div class="line">通用选择器是功能最强大的选择器，它使用一个（*）号指定，它的作用是匹配html中所有标签元素，如下使用下面代码使用html中任意标签元素字体颜色全部设置为红色：</div></pre></td></tr></table></figure></p>
<p>*{color:red;}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 伪类选择符</div><div class="line"></div><div class="line">`a:hover&#123;color:red;&#125;`</div><div class="line"></div><div class="line">为a标签鼠标滑过状态设置字体颜色变红。 由于兼容问题，只有`a:hover `兼容所有浏览器</div><div class="line"></div><div class="line">### 分组选择符</div></pre></td></tr></table></figure></p>
<p>h1,span{color:red;}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure></p>
<p>h1{color:red;}<br>span{color:red;}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">以上代码等价。</div><div class="line"></div><div class="line">### 权值规则</div><div class="line"></div><div class="line">标签的权值为1，类选择符的权值为10，ID选择符的权值最高为100。</div><div class="line"></div><div class="line">权值越高，优先使用。</div><div class="line"></div><div class="line">**注意**：还有一个权值比较特殊--继承也有权值但很低，有的文献提出它只有0.1，所以可以理解为继承的权值最低。</div><div class="line"></div><div class="line"></div><div class="line">### 重要性</div><div class="line"></div><div class="line">使用！important使某些样式具有最高权重。如：</div><div class="line"></div><div class="line">`p&#123;color:red!important;&#125;`</div><div class="line"></div><div class="line">一般情况下：浏览器默认的样式 &lt; 网页制作者样式 &lt; 用户自己设置的样式</div><div class="line"></div><div class="line">但是`!important`是一个例外</div><div class="line"></div><div class="line">所以:浏览器默认的样式 &lt; 网页制作者样式 &lt; 用户自己设置的样式 &lt; `!important` 修饰的样式</div><div class="line"></div><div class="line">## 文字排版</div><div class="line"></div><div class="line">### 字体</div></pre></td></tr></table></figure></p>
<p>body{font-family:”Microsoft Yahei”;}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 字号、颜色</div></pre></td></tr></table></figure></p>
<p>font-size:12px;/<em>字号</em>/<br>color:#66;/<em>颜色</em>/<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 粗体</div></pre></td></tr></table></figure></p>
<p>font-weight:bold;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 斜体</div></pre></td></tr></table></figure></p>
<p>font-style:italic;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 下划线</div></pre></td></tr></table></figure></p>
<p>font-decoration:underline;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 删除线</div></pre></td></tr></table></figure></p>
<p>text-decoration:line-through;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 缩进</div></pre></td></tr></table></figure></p>
<p>text-indent:2em;/<em>2em表示文字的2倍大小</em>/<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 行间距(行高)</div></pre></td></tr></table></figure></p>
<p>line-height:1.5em;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 中文字间距、字母间距</div><div class="line"></div><div class="line">**中文、字母**</div></pre></td></tr></table></figure></p>
<p>letter-spacing:50px;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">**单词**</div></pre></td></tr></table></figure></p>
<p>word-spacing:50px;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 对其方式</div></pre></td></tr></table></figure></p>
<p>text-align:center;/<em>居中</em>/<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">## 元素分类</div><div class="line"></div><div class="line">常用的块状元素：</div><div class="line"></div><div class="line">`div`、`p`、`hn`、`ol`、`ul`、`dl`、`table`、`address`、`blockquote`、`form`</div><div class="line"></div><div class="line">常用的内联元素有：</div><div class="line"></div><div class="line">`&lt;a&gt;`、`&lt;span&gt;`、`&lt;br&gt;`、`&lt;i&gt;`、`&lt;em&gt;`、`&lt;strong&gt;`、`&lt;label&gt;`、`&lt;q&gt;`、`&lt;var&gt;`、`&lt;cite&gt;`、`&lt;code&gt;`</div><div class="line"></div><div class="line">常用的内联块状元素有：</div><div class="line"></div><div class="line">`&lt;img&gt;`、`&lt;input&gt;`</div><div class="line"></div><div class="line">### 块级元素</div><div class="line"></div><div class="line">如上文；</div><div class="line"></div><div class="line">可以通过`display:block`将元素显示为块级别元素。</div><div class="line"></div><div class="line">**块级元素特点**：</div><div class="line"></div><div class="line">1. 每个块级元素都从新的一行开始，并且其后的元素也另起一行。（真霸道，一个块级元素独占一行）</div><div class="line">2. 元素的高度、宽度、行高以及顶和底边距都可设置。</div><div class="line">3. 元素宽度在不设置的情况下，是它本身父容器的100%（和父元素的宽度一致），除非设定一个宽度。</div><div class="line"></div><div class="line">### 内联元素</div><div class="line"></div><div class="line">如上文；</div><div class="line"></div><div class="line">可以通过`display:inline`将元素设置为内联元素</div><div class="line"></div><div class="line">**内联元素特点**：</div><div class="line"></div><div class="line">1. 和其他元素都在一行上；</div><div class="line">2. 元素的高度、宽度及顶部和底部边距不可设置；</div><div class="line">3. 元素的宽度就是它包含的文字或图片的宽度，不可改变。</div><div class="line"></div><div class="line"></div><div class="line">### 内联块状元素</div><div class="line"></div><div class="line">内联块状元素（inline-block）就是同时具备内联元素、块状元素的特点</div><div class="line"></div><div class="line">可以通过`display:inline-block`将元素设置为内联块状元素</div><div class="line"></div><div class="line">**inline-block 元素特点**：</div><div class="line"></div><div class="line">1. 和其他元素都在一行上；</div><div class="line">2. 元素的高度、宽度、行高以及顶和底边距都可设置。</div><div class="line"></div><div class="line"></div><div class="line">## 盒子模型</div><div class="line"></div><div class="line">1. `width`: 内容</div><div class="line">2. `height`:内容</div><div class="line">3. `padding`:内填充</div><div class="line">4. `margin`:外填充</div><div class="line">5. `border`:边界</div><div class="line"></div><div class="line">### 边框 border</div><div class="line"></div><div class="line">盒子模型的边框就是围绕着内容及补白的线，这条线你可以设置它的粗细、样式和颜色(边框三个属性)。</div><div class="line"></div><div class="line">例如给div设置边框：</div></pre></td></tr></table></figure></p>
<p>div{border:2px solid red;}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">或者</div></pre></td></tr></table></figure></p>
<p>div{<br>    border-width:2px;<br>    border-style:solid;<br>    border-color:red;<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">**注意**</div><div class="line"></div><div class="line">1. border-style: `dashed`虚线、 `dotted`点线、 `solid`实线</div><div class="line">2. border-color:</div><div class="line">3. border-width（边框宽度）中的宽度也可以设置为：`thin` | `medium` | `thick`（但不是很常用），最常还是用象素（px）。</div><div class="line"></div><div class="line"></div><div class="line">`border-bottom`、`bottom-top`、`bottom-left`、`bottom-right`只给一边的边框设置。</div><div class="line"></div><div class="line"></div><div class="line">### 大小 </div><div class="line"></div><div class="line">`width` `height`</div><div class="line"></div><div class="line">### 内填充</div><div class="line"></div><div class="line">`padding`  `div&#123;padding:20px 10px 15px 30px;&#125;`  顺序为上又下左(顺时针)</div><div class="line"></div><div class="line">如果上、右、下、左的填充都为10px;可以这么写</div><div class="line"></div><div class="line">`div&#123;padding:10px;&#125;`</div><div class="line"></div><div class="line">如果上下填充一样为10px，左右一样为20px，可以这么写：</div><div class="line"></div><div class="line">`div&#123;padding:10px 20px;&#125;`</div><div class="line"></div><div class="line">### 边界(外填充)</div><div class="line"></div><div class="line">`margin`  类似`padding`</div><div class="line"></div><div class="line">## CSS布局模型</div><div class="line"></div><div class="line">网页中的元素有三种布局模型:</div><div class="line"></div><div class="line">1. 流动模型(Flow)</div><div class="line">2. 浮动模型(Float)</div><div class="line">3. 层模型(Layer)</div><div class="line"></div><div class="line">### 流动模型(Flow) </div><div class="line"></div><div class="line">流动是默认的网页布局模式。也就是说网页在默认的状态下的HTML网页元素都是根据流动模型来分布网页内容的。流动布局模型具有2个比较典型的特征:</div><div class="line"></div><div class="line">1. 块状元素都会在所处的包含元素内自上而下按顺序垂直延伸分布，因为在默认状态下，块状元素的宽度都为100%。实际上，块状元素都会以行的形式占据位置。如右侧代码编辑器中三个块状元素标签(div，h1，p)宽度显示为100%。</div><div class="line">2. 在流动模型下，内联元素都会在所处的包含元素内从左到右水平分布显示。（内联元素可不像块状元素这么霸道独占一行）</div><div class="line"></div><div class="line">### 浮动模型(Float)</div><div class="line"></div><div class="line">如上文，块状元素都是独占一行。如果要讲快中元素并排显示，那么久需要用到浮动模型了。</div><div class="line"></div><div class="line">注意: 任何元素都是默认不能浮动的，但是可以用css定义为浮动。</div></pre></td></tr></table></figure></p>
<p>div{<br>    width:200px;<br>    height:200px;<br>    border:1px red solid;<br>    float:left;<br>}</p>
<p><div id="div1"></div></p>
<p><div id="div1"></div><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 层模型(Layer)</div><div class="line"></div><div class="line">让html元素在网页中精确定位</div><div class="line"></div><div class="line">层模型有三种形式：</div><div class="line"></div><div class="line">* 绝对定位(position: absolute)</div><div class="line">* 相对定位(position: relative)</div><div class="line">* 固定定位(position: fixed)</div><div class="line"></div><div class="line">#### 绝对定位</div><div class="line"></div><div class="line">如果想为元素设置层模型中的绝对定位，需要设置position:absolute(表示绝对定位)，这条语句的作用将元素从文档流中拖出来，然后使用left、right、top、bottom属性相对于其最接近的一个具有定位属性的父包含块进行绝对定位。如果不存在这样的包含块，则相对于body元素，即相对于浏览器窗口。</div><div class="line"></div><div class="line">#### 相对定位</div><div class="line"></div><div class="line">如果想为元素设置层模型中的相对定位，需要设置position:relative（表示相对定位），它通过left、right、top、bottom属性确定元素在正常文档流中的偏移位置。相对定位完成的过程是首先按static(float)方式生成一个元素(并且元素像层一样浮动了起来)，然后相对于以前的位置移动，移动的方向和幅度由left、right、top、bottom属性确定，偏移前的位置保留不动。</div><div class="line"></div><div class="line">#### 固定定位</div><div class="line"></div><div class="line">fixed：表示固定定位，与absolute定位类型类似，但它的相对移动的坐标是视图（屏幕内的网页窗口）本身。由于视图本身是固定的，它不会随浏览器窗口的滚动条滚动而变化，除非你在屏幕中移动浏览器窗口的屏幕位置，或改变浏览器窗口的显示大小，因此固定定位的元素会始终位于浏览器窗口内视图的某个位置，不会受文档流动影响，这与background-attachment:fixed;属性功能相同。以下代码可以实现相对于浏览器视图向右移动100px，向下移动50px。并且拖动滚动条时位置固定不变。</div><div class="line"></div><div class="line">#### Relative与Absolute组合使用</div><div class="line"></div><div class="line">absolute 可以相对于浏览器设置定位。如果相对于其他元素，就需要使用`position:relative`</div><div class="line"></div><div class="line">注意:</div><div class="line"></div><div class="line">1. 参照定位的元素必须是相对定位元素的前辈元素</div><div class="line">2. 参照定位的元素必须加入position:relative;</div><div class="line">3. 定位元素加入position:absolute，便可以使用top、bottom、left、right来进行偏移定位了。</div><div class="line"></div><div class="line">### 盒子模型代码简写</div><div class="line"></div><div class="line">* top right bottom left 相同,写一个</div><div class="line">* top bottom相同，left right 相同，写两个</div><div class="line">* left right相同，写三个</div><div class="line">*</div><div class="line"></div><div class="line">### 颜色值缩写</div><div class="line"></div><div class="line">16进制的色彩值，如果每两位的值相同，可以缩写一半</div><div class="line"></div><div class="line">＃336699   ——&gt;  ＃369</div><div class="line"></div><div class="line">### 字体缩写</div></pre></td></tr></table></figure></p>
<p>body{<br>    font-style:italic;<br>    font-variant:small-caps;<br>    font-weight:bold;<br>    font-size:12px;<br>    line-height:1.5em;<br>    font-family:”宋体”,sans-serif;<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">缩写为:</div></pre></td></tr></table></figure></p>
<p>body{<br>    font:italic  small-caps  bold  12px/1.5em  “宋体”,sans-serif;<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">**注意**:</div><div class="line"></div><div class="line">1. 使用这一简写方式你至少要指定 font-size 和 font-family 属性，其他的属性(如 font-weight、font-style、font-varient、line-height)如未指定将自动使用默认值。</div><div class="line">2. 在缩写时 font-size 与 line-height 中间要加入“/”斜扛。 </div><div class="line"></div><div class="line">一般情况下因为对于中文网站，英文还是比较少的，所以下面缩写代码比较常用：</div></pre></td></tr></table></figure></p>
<p>body{<br>    font:12px/1.5em  “宋体”,sans-serif;<br>}<br>```<br>只是有字号、行间距、中文字体、英文字体设置。</p>
<h3 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h3><ol>
<li>英文命令颜色<code>p{color:red;}</code></li>
<li>RGB颜色<code>p{color:rgb(133,45,200);}</code>或者<code>p{color:rgb(20%,23%,20%);}</code></li>
<li>十六进制颜色<code>p{color:＃00ffff);}</code></li>
</ol>
<h3 id="长度值-都是相对单位"><a href="#长度值-都是相对单位" class="headerlink" title="长度值  都是相对单位"></a>长度值  都是相对单位</h3><ol>
<li>像素  px  相对于显示器</li>
<li>em 就是本元素给定字体的 font-size 值，如果元素的 font-size 为 14px ，那么 1em = 14px；如果 font-size 为 18px，那么 1em = 18px。</li>
<li>百分比</li>
</ol>
<p>注意：</p>
<p>但当给 font-size 设置单位为 em 时，此时计算的标准以 p 的父元素的 font-size 为基础。</p>
<h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><h3 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h3><ul>
<li>如果被设置元素为文本、图片等行内元素时，水平居中时通过给父类元素设置<code>text-align:center</code>来实现的</li>
<li>定宽块状元素:通过设置<code>margin</code>的<code>left</code>和<code>right</code>为<code>auto</code>实现。此时<code>width:200px</code></li>
<li>不定宽块状元素:<ul>
<li>加入label标签<ul>
<li>第一步:为需要设置居中的元素外面加入一个<code>table</code>标签(包括<code>&lt;tbody&gt;</code>、<code>&lt;tr&gt;</code>、<code>&lt;td&gt;</code>)</li>
<li>第二步:为这个<code>table</code>设置左右margin居中。</li>
</ul>
</li>
<li>设置<code>display:inline</code>:显示类型设置为行内元素，进行不定宽元素的属性设置</li>
<li>设置<code>position:relative</code>和<code>left:50%</code>:利用相对定位的方式，讲元素向左偏移50%，达到居中的目的。</li>
</ul>
</li>
</ul>
<h3 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h3><ul>
<li>父元素高度确定的单行文本: 设置 <code>height</code> 等于 <code>line-height</code> 实现。<ul>
<li>height : 该元素的高度</li>
<li>line-height:行高，指在文本中，行与行之间的基线间的距离.</li>
<li>line-height 与 font-size 的计算值之差，在CSS中成为”行间距”.</li>
</ul>
</li>
<li>父元素高度确定的多行文本(图片):<ul>
<li>方法一:使用插入table 同时设置<code>vertival-align:middle</code></li>
<li>方法二(因为兼容问题，不推荐使用):<code>display：table-cell ; vertival-align:middle</code></li>
</ul>
</li>
</ul>
<h3 id="隐性改变display类型"><a href="#隐性改变display类型" class="headerlink" title="隐性改变display类型"></a>隐性改变display类型</h3><p>有一个有趣的现象就是当为元素（不论之前是什么类型元素，<code>display:none</code> 除外）设置以下 2 个句之一：</p>
<ol>
<li><p>position : absolute </p>
</li>
<li><p>float : left 或 float:right </p>
</li>
</ol>
<p>简单来说，只要html代码中出现以上两句之一，元素的display显示类型就会自动变为以 <code>display:inline-block</code>（块状元素）的方式显示，当然就可以设置元素的 width 和 height 了，且默认宽度不占满父元素。</p>
<p>如下面的代码，小伙伴们都知道 a 标签是 行内元素 ，所以设置它的 width 是 没有效果的，但是设置为 <code>position:absolute</code> 以后，就可以了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript和Native的交互 第二弹]]></title>
      <url>http://www.CepheusSun.com/javascript%E5%92%8Cnative%E7%9A%84%E4%BA%A4%E4%BA%92_%E7%AC%AC%E4%BA%8C%E5%BC%B9.html</url>
      <content type="html"><![CDATA[<p>上次简单的写了一下js和Native交互的问题，这篇文章再稍微深入的研究一下JSBinding。作为上文的补充。</p>
<a id="more"></a>
<h2 id="JSBinding"><a href="#JSBinding" class="headerlink" title="JSBinding"></a>JSBinding</h2><h3 id="JSBinding-是什么"><a href="#JSBinding-是什么" class="headerlink" title="JSBinding 是什么?"></a>JSBinding 是什么?</h3><p>JSBinding 不是Hybrid很多人都是通过cocos2dx来了解JSbinding这个技术的。</p>
<p>JSBingding 是JSC和Native 之间的桥接。</p>
<p>JS实际上就是JS和Native之间的一个桥梁，通过JSBinding打通了JS代码和Native代码，并在其间实现二者的交流。</p>
<h3 id="JSBinding和Hybrid的区别"><a href="#JSBinding和Hybrid的区别" class="headerlink" title="JSBinding和Hybrid的区别"></a>JSBinding和Hybrid的区别</h3><p>Hybrid实际上就是通过webview。js代码实际上还是跑在web上。是web技术和Native之间的桥梁。</p>
<p>二JSBinding并不依赖于webview</p>
<p>Native (原生静态语言): 高性能、更底层、更强大、平台特性<br>JavaScript(动态脚本语言): 简单易用、免编译、热部署</p>
<h2 id="JSC-API"><a href="#JSC-API" class="headerlink" title="JSC API"></a>JSC API</h2><h3 id="JavaScriptCore-h"><a href="#JavaScriptCore-h" class="headerlink" title="JavaScriptCore.h"></a>JavaScriptCore.h</h3><p>这一部分在上一篇文章已经又过一些简单的介绍了。在这里可能会有一些新的理解。</p>
<p><code>#import &lt;JavaScriptCore/JavaScriptCore.h&gt;</code></p>
<h3 id="JSContext"><a href="#JSContext" class="headerlink" title="JSContext"></a>JSContext</h3><p>就是js的上下文，或者说是js的运行环境</p>
<h3 id="JSValue"><a href="#JSValue" class="headerlink" title="JSValue"></a>JSValue</h3><h3 id="JSExport"><a href="#JSExport" class="headerlink" title="JSExport"></a>JSExport</h3><h2 id="OC-call-Js"><a href="#OC-call-Js" class="headerlink" title="OC call Js"></a>OC call Js</h2><h3 id="1、执行js脚本"><a href="#1、执行js脚本" class="headerlink" title="1、执行js脚本"></a>1、执行js脚本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//执行js脚本</div><div class="line">    JSContext *context = [[JSContext alloc] init];</div><div class="line">    JSValue *value = [context evaluateScript:@&quot;1+2&quot;];</div><div class="line">    NSLog(@&quot;%f&quot;,[value toDouble]);</div></pre></td></tr></table></figure>
<h3 id="2、调用js函数"><a href="#2、调用js函数" class="headerlink" title="2、调用js函数"></a>2、调用js函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//调用js函数</div><div class="line">    //在js上下文中定义一个js函数</div><div class="line">    //NSString *js = @&quot;function sum(a,b) &#123;return a+b;&#125;&quot;;</div><div class="line">    //[context evaluateScript:js];</div><div class="line">    //调用这个js函数</div><div class="line">    //sumA 是js代码中的一个function</div><div class="line">    JSValue *sum = context[@&quot;sumA&quot;];</div><div class="line">    JSValue *result = [sum callWithArguments:@[@1,@1]];</div><div class="line">    NSLog(@&quot;sum(1,2) = %f&quot;,[result toDouble]);</div></pre></td></tr></table></figure>
<h3 id="3、创建一个js值"><a href="#3、创建一个js值" class="headerlink" title="3、创建一个js值"></a>3、创建一个js值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//创建js值对象</div><div class="line">    //方法1</div><div class="line">    JSValue *intVar = [JSValue valueWithInt32:231 inContext:context];</div><div class="line">    context[@&quot;bar&quot;] = intVar;</div><div class="line">    [context evaluateScript:@&quot;bar++&quot;];</div><div class="line">    //方法2</div><div class="line">    [context evaluateScript:@&quot;var bar = 231;&quot;];</div></pre></td></tr></table></figure>
<p>value对应关系，在上文中有介绍</p>
<h3 id="4、捕获错误信息"><a href="#4、捕获错误信息" class="headerlink" title="4、捕获错误信息"></a>4、捕获错误信息</h3><p>由于在js 中的错误在native中是不能自动捕捉的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//捕获JS中的异常信息</div><div class="line">	JSContext *context = [[JSContext alloc] init];</div><div class="line">	context.exceptionHandler = ^(JSContext *ctx ,JSValue *exception)&#123;</div><div class="line">		NSLog(@&quot;%@&quot;,exception)</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h2 id="Js-call-Native"><a href="#Js-call-Native" class="headerlink" title="Js call Native"></a>Js call Native</h2><h3 id="1、js-call-Native-via-block"><a href="#1、js-call-Native-via-block" class="headerlink" title="1、js call Native via block"></a>1、js call Native via block</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">context[@&quot;sum&quot;] = ^(int a, int b)&#123;</div><div class="line">     return a+b;</div><div class="line"> &#125;;</div><div class="line"> value = [context evaluateScript:@&quot;sum(1,2)&quot;];</div><div class="line"> //在js 中直接使用  “sum(1,2);”来调用</div></pre></td></tr></table></figure>
<ul>
<li>虽然在oc的代码中block是可以访问自己之外的变量的。但是当我们使用这个block和js互动的时候这个block就不能够调用外面的东西。如果要是用这个context的话，使用<code>[JSContext currentContext]</code>来获取当前的上下文。动态参数：<code>[JSContext currentArguments]</code></li>
</ul>
<h3 id="2、js-call-native-via-JSExport"><a href="#2、js-call-native-via-JSExport" class="headerlink" title="2、js call native via JSExport"></a>2、js call native via JSExport</h3><p>在上文中，介绍较多。只是没有仔细的研究具体实现原理。</p>
<p>定义并且实例化一个JSExport类,然后把这个对象放在jscontext。这样就可以通过像操作js对象那样操作这个对象。</p>
<p>但是要注意，在js中没有构造函数。</p>
<p> 即使我们通过export向js上下文中注入了一个类，但是我们在js中通过new来实例化这个类的对象是不可行的。即使我们通过<code>context[@&quot;Foo&quot;] = [Foo class]</code>向js注入这么一个类，但是也是不可以的。这可以说是jsbinding的一个缺陷吧。</p>
<h2 id="console等怎么来"><a href="#console等怎么来" class="headerlink" title="console等怎么来"></a>console等怎么来</h2><p>上一篇文章中console.log 是可用的，因为js代码实际上也是运行在webview中的，但是如果我们不通过浏览器的话，是没有console这个函数的，这个时候怎么样实现我们的日志输出功能呢？</p>
<p>这个时候如果我们通过一个叫console的类,来实现这个功能就是可以的了。</p>
<p>但是我们其实也可以单独使用一个js本身来模拟这个功能。但我没有去实现过，不敢赘述。</p>
<h2 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h2><ul>
<li>Retain cycle</li>
</ul>
<p>native 对象 和js对象循环持有，是不能通过GC或者ARC释放的。</p>
<p>这种情况下 Native必须通过JSManagedValue来持有js对象，js可以直接持有。这种情况下，js代码可以正常写，而oc里面的setter方法需要使用<code>[JSManagedValue managedValueWith:]</code>来包装一下。</p>
<h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><p>API是线程安全的；</p>
<p>锁的最小粒度是js虚拟机 JSVirtualMachine</p>
<p>如果要并行的运行两个东西，需要把它分到两个虚拟机中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">	JSVirtualMachine *jsMachineA = [[JSVirtualMachine alloc] init];</div><div class="line">    JSContext *contextA = [[JSContext alloc] initWithVirtualMachine:jsMachineA];</div><div class="line">    JSContext *contextB = [[JSContext alloc] initWithVirtualMachine:jsMachineA];</div><div class="line">//</div><div class="line">    JSVirtualMachine *jsMachineB = [[JSVirtualMachine alloc] init];</div><div class="line">    JSContext *contextC = [[JSContext alloc] initWithVirtualMachine:jsMachineB];</div></pre></td></tr></table></figure>
<p>A、B虽然是不容的上下文，但是她们是运行在同一个js虚拟机当中的，他俩在运行的时候是能够保证是一个同步的状态。虽然她们不能直接互相访问，但是她们是能够在Native上面实现一个比较好的通讯。（不需要考虑执行顺序和锁的问题）</p>
<p>A、C是在不同的线程中的，她们是不能很容易通讯的，异步执行，在他们之间的通讯比较麻烦</p>
<h3 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h3><p>这篇文章作为上一篇文章的补充，实在没有那么多的干货，但是作为自己对jsbinding的理解和更加深入的学习,本文的撰写确实帮助我对这一知识的理解更加的系统化。上一篇文章更多的是面相实现，而这篇文章增加了更多对原理的理解。路漫漫其修远兮，吾将上下而求索。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[html学习笔记--1]]></title>
      <url>http://www.CepheusSun.com/html%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0--1.html</url>
      <content type="html"><![CDATA[<p>抽空学习了一下html、css、JavaScript。</p>
<a id="more"></a>
<blockquote>
<p>这部分内容是我抽空学习的时候整理的笔记,这部分是看的前端的内容。<a href="http://www.imooc.com/learn/9"><em>学习地址</em></a>。</p>
</blockquote>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li>HTML是网页内容的载体。内容就是网页制作者放在页面上想要让用户浏览的信息，可以包含文字、图片、视频等。</li>
<li>CSS样式是表现。就像网页的外衣。比如，标题字体、颜色变化，或为标题加入背景图片、边框等。所有这些用来改变内容外观的东西称之为表现。</li>
<li>JavaScript是用来实现网页上的特效效果。如：鼠标滑过弹出下拉菜单。或鼠标滑过表格的背景颜色改变。还有焦点新闻（新闻图片）的轮换。可以这么理解，有动画的，有交互的一般都是用JavaScript来实现的。</li>
</ol>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>html代码注释  <code>&lt;!--注释内容--&gt;</code></p>
<h2 id="html文件的基本结构"><a href="#html文件的基本结构" class="headerlink" title="html文件的基本结构"></a>html文件的基本结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">	&lt;head&gt;...&lt;/head&gt;</div><div class="line">	&lt;body&gt;...&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<ol>
<li><code>&lt;html&gt;&lt;/html&gt;</code>为根标签，所有的网页标签都在<code>&lt;html&gt;&lt;/html&gt;</code>中.</li>
<li><code>&lt;head&gt;&lt;/head&gt;</code>标签用于定于文档的头部，他是所有头部元素的容器。头部元素有以下这些标签<ul>
<li><code>&lt;title&gt;</code></li>
<li><code>&lt;script&gt;</code></li>
<li><code>&lt;style&gt;</code></li>
<li><code>&lt;link&gt;</code></li>
<li><code>&lt;meta&gt;</code></li>
<li>etc</li>
</ul>
</li>
<li><code>&lt;body&gt;&lt;/body&gt;</code>标签之间的内容是网页的主要内容，如<code>&lt;h1&gt;</code>、<code>&lt;p&gt;</code>、<code>&lt;a&gt;</code>、<code>&lt;img&gt;</code>等网页内容，在这里的标签中的内容会在浏览器中显示出来。</li>
</ol>
<h3 id="head-标签"><a href="#head-标签" class="headerlink" title="head 标签"></a>head 标签</h3><p>作用:文档的头部描述了文档的各种属性和信息，包括文档的标题等，绝大多数文档头部包含的数据都不会真正作为内容显示给读者。</p>
<p>下面标签可用在head 部分</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;head&gt;</div><div class="line">	&lt;title&gt;...&lt;/title&gt;</div><div class="line">	&lt;meta&gt;</div><div class="line">	&lt;link&gt;</div><div class="line">	&lt;style&gt;...&lt;/style&gt;</div><div class="line">	&lt;script&gt;...&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div></pre></td></tr></table></figure>
<ul>
<li><code>title</code>标签: 网页的标题信息,内容显示在浏览器的标题栏目中.</li>
</ul>
<h3 id="body-标签"><a href="#body-标签" class="headerlink" title="body 标签"></a>body 标签</h3><p>作用:网页上要显示的内容必须放在body标签中。</p>
<h4 id="1、-lt-p-gt-lt-p-gt-段落文本"><a href="#1、-lt-p-gt-lt-p-gt-段落文本" class="headerlink" title="1、&lt;p&gt;&lt;/p&gt;段落文本"></a>1、<code>&lt;p&gt;&lt;/p&gt;</code>段落文本</h4><p>如果想在网页上显示文章，这时就需要<code>&lt;p&gt;</code>标签了，把文章的段落放到<code>&lt;p&gt;</code>标签中。注意一段文字一个<code>&lt;p&gt;</code>标签，如在一篇新闻文章中有3段文字，就要把这3个段落分别放到3个<code>&lt;p&gt;</code>标签中。<code>&lt;p&gt;</code>标签的默认样式是段前段后都会有空白，如果不喜欢这个空白，可以用css样式来删除或改变它。</p>
<h4 id="2、-lt-hx-gt-lt-hx-gt-标题"><a href="#2、-lt-hx-gt-lt-hx-gt-标题" class="headerlink" title="2、&lt;hx&gt;&lt;/hx&gt;标题"></a>2、<code>&lt;hx&gt;&lt;/hx&gt;</code>标题</h4><p>x: 1-6 分别为一级标题、二级标题….六级标题。<br>注意:因为<code>h1</code>标签在网页中比较重要，所以一般<code>h1</code>标签被用在网站名称上。如<code>&lt;h1&gt;腾讯网&lt;/h1&gt;</code></p>
<h4 id="3、-lt-strong-gt-lt-em-gt-强调"><a href="#3、-lt-strong-gt-lt-em-gt-强调" class="headerlink" title="3、&lt;strong&gt;&lt;em&gt;强调"></a>3、<code>&lt;strong&gt;&lt;em&gt;</code>强调</h4><p><code>&lt;strong&gt;&lt;/strong&gt;</code>:加粗</p>
<p><code>&lt;em&gt;&lt;/em&gt;</code>:斜体</p>
<h4 id="4、-lt-span-gt-行内标签"><a href="#4、-lt-span-gt-行内标签" class="headerlink" title="4、&lt;span&gt;行内标签"></a>4、<code>&lt;span&gt;</code>行内标签</h4><ol>
<li><code>&lt;em&gt;</code>和<code>&lt;strong&gt;</code>标签是为了强调一段话中的关键字时使用，它们的语义是强调;</li>
<li><code>&lt;span&gt;</code>是没有语义的，他的作用就是为了设置单独的样式;</li>
</ol>
<p>如我要对段落中某个词语改变颜色:</p>
<p>在<code>&lt;head&gt;</code>的<code>&lt;style&gt;</code>标签中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">`&lt;style&gt;</div><div class="line">	span&#123;</div><div class="line">		color : red;</div><div class="line">	&#125;</div><div class="line">&lt;/style&gt;`</div></pre></td></tr></table></figure>
<p>在文本中用<code>&lt;span&gt;&lt;/span&gt;</code>包上需要将颜色变成红色的文字;</p>
<pre><code>那么问题来了,如果我对词语`objc`红色 对 `javascript`蓝色呢？
</code></pre><p>这也很简单。同上在<code>&lt;style&gt;</code>中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">`&lt;style&gt;</div><div class="line">span.blue&#123;</div><div class="line">    color:blue;</div><div class="line">&#125;</div><div class="line">span.red&#123;</div><div class="line">    color:red;</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;`</div></pre></td></tr></table></figure>
<p>然后在文本中 <code>&lt;span class = &quot;blue&quot;&gt;javascript&lt;/span&gt;</code> 、<code>&lt;span class = &quot;red&quot;&gt;objc&lt;/span&gt;</code> </p>
<h4 id="5、-lt-q-gt-引用文本"><a href="#5、-lt-q-gt-引用文本" class="headerlink" title="5、&lt;q&gt; 引用文本"></a>5、<code>&lt;q&gt;</code> 引用文本</h4><p>效果类似于手动给文本加上双引号。但是使用<code>&lt;q&gt;&lt;/q&gt;</code>关键点在于增加语意：<strong>引用别人的话</strong></p>
<h4 id="6、-lt-blockquote-gt-长文本引用"><a href="#6、-lt-blockquote-gt-长文本引用" class="headerlink" title="6、&lt;blockquote&gt;长文本引用"></a>6、<code>&lt;blockquote&gt;</code>长文本引用</h4><p>跟<code>&lt;q&gt;&lt;/q&gt;</code>的简短文本不同，<code>&lt;blockquote&gt;&lt;／blockquote&gt;</code>表示长文本引用。比如在文中需要引用一首李白的一句诗，那么用<code>&lt;q&gt;窗前明月光&lt;/q&gt;</code>。如果是一首诗，那么用<code>&lt;blockquote&gt;。。。。。&lt;／blockquote&gt;</code></p>
<p>使用<code>&lt;blockquote&gt;</code> 并不会像<code>&lt;q&gt;&lt;/q&gt;</code>一样添加双引号。但是会被浏览器解析成添加缩进样式。</p>
<h4 id="7、-lt-br-gt-分行显示文本。"><a href="#7、-lt-br-gt-分行显示文本。" class="headerlink" title="7、 &lt;br/&gt;分行显示文本。"></a>7、 <code>&lt;br/&gt;</code>分行显示文本。</h4><p>html代码中输入空格、回车都是没有作用的。如果要换行就是在要分行的地方添加<code>&lt;br/&gt;</code>标签。</p>
<p><code>&lt;br /&gt;</code> : 换行</p>
<p><code>&lt;hr /&gt;</code> : 分段线</p>
<p><code>&lt;img&gt;</code> : 插入图片</p>
<h4 id="8、-amp-nbsp-添加空格"><a href="#8、-amp-nbsp-添加空格" class="headerlink" title="8、 &amp;nbsp;添加空格"></a>8、 <code>&amp;nbsp;</code>添加空格</h4><p>在html中如果需要输入空格，必须写入<code>&amp;nbsp;</code>；</p>
<p> 一个<code>&amp;nbsp;</code>是一个空格。</p>
<h4 id="9、-lt-address-gt-为网页加入地址信息"><a href="#9、-lt-address-gt-为网页加入地址信息" class="headerlink" title="9、 &lt;address&gt;为网页加入地址信息"></a>9、 <code>&lt;address&gt;</code>为网页加入地址信息</h4><p>默认斜体</p>
<h4 id="10、-lt-code-gt-加入一行代码"><a href="#10、-lt-code-gt-加入一行代码" class="headerlink" title="10、&lt;code&gt;加入一行代码"></a>10、<code>&lt;code&gt;</code>加入一行代码</h4><p><code>&lt;code&gt;var string = &quot;aaa&quot;;&lt;/code&gt;</code></p>
<p><code>var string = “aaa”;</code></p>
<p>如果加入多行代码使用<code>&lt;pre&gt;&lt;/pre&gt;</code>代替<code>&lt;code&gt;&lt;/code&gt;</code></p>
<h4 id="11、-无序列表、有序列表"><a href="#11、-无序列表、有序列表" class="headerlink" title="11、 无序列表、有序列表"></a>11、 无序列表、有序列表</h4><p><strong>无序列表语法：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">`&lt;ul&gt;</div><div class="line">	&lt;li&gt;a&lt;/li&gt;</div><div class="line">	&lt;li&gt;b&lt;/li&gt;</div><div class="line">	&lt;li&gt;c&lt;/li&gt;</div><div class="line">	&lt;li&gt;d&lt;/li&gt;</div><div class="line">&lt;/ul&gt;`</div></pre></td></tr></table></figure>
<p><strong>有序列表语法：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">`&lt;ol&gt;</div><div class="line">	&lt;li&gt;a&lt;/li&gt;</div><div class="line">	&lt;li&gt;b&lt;/li&gt;</div><div class="line">	&lt;li&gt;c&lt;/li&gt;</div><div class="line">	&lt;li&gt;d&lt;/li&gt;</div><div class="line">&lt;/ol&gt;`</div></pre></td></tr></table></figure>
<h4 id="12、-lt-div-gt"><a href="#12、-lt-div-gt" class="headerlink" title="12、&lt;div&gt;"></a><strong>12、<code>&lt;div&gt;</code></strong></h4><blockquote>
<p>在网页制作过程过中，可以把一些独立的逻辑部分划分出来，放在一个<code>&lt;div&gt;</code>标签中，这个<code>&lt;div&gt;</code>标签的作用就相当于一个容器。</p>
</blockquote>
<p>可以通过<code>id</code>给div命名</p>
<p>语法</p>
<p><code>&lt;div id = &quot;板块名称&quot;&gt;...&lt;/div&gt;</code></p>
<h4 id="13、-lt-table-gt-表格"><a href="#13、-lt-table-gt-表格" class="headerlink" title="13、 &lt;table&gt; 表格"></a>13、 <code>&lt;table&gt;</code> 表格</h4><p><code>&lt;table&gt;</code>、<code>&lt;tbody&gt;</code>、<code>&lt;tr&gt;</code>、<code>&lt;th&gt;</code>、<code>&lt;td&gt;</code></p>
<ol>
<li><code>&lt;table&gt;...&lt;/table&gt;</code>:整个表格以<code>&lt;table&gt;</code>标记开始，以<code>&lt;/table&gt;</code>标记结束。</li>
<li><code>&lt;tbody&gt;...&lt;/tbody&gt;</code>:当表格内容非常多的时候，表格会一边下载一边加载。加上<code>&lt;tbody&gt;...&lt;/tbody&gt;</code>之后，这个表格就要等全部下载完之后才回加载。</li>
<li><code>&lt;tr&gt;...&lt;/tr&gt;</code>:表格的一行，有几个<code>&lt;tr&gt;</code>就表示有几行。</li>
<li><code>&lt;td&gt;...&lt;/td&gt;</code>:表格的一列，一行中有几个<code>&lt;td&gt;</code>就表示这一行有几列。</li>
<li><code>&lt;th&gt;...&lt;/th&gt;</code>:表格的头部单元格,表格表头。</li>
<li>表格中列的个数，取决于一行中数据单元格的个数。</li>
</ol>
<p>注意：</p>
<ul>
<li>table表格在没有添加css样式之前，在浏览器中是没有表格线的。</li>
<li><code>&lt;th&gt;</code>中的表头，默认<strong>粗体</strong>并且<strong>居中</strong>显示。</li>
</ul>
<h4 id="14、-lt-caption-gt-为表格添加标题和摘要"><a href="#14、-lt-caption-gt-为表格添加标题和摘要" class="headerlink" title="14、&lt;caption&gt; 为表格添加标题和摘要"></a>14、<code>&lt;caption&gt;</code> 为表格添加标题和摘要</h4><p>标题:</p>
<p><strong>语法:</strong><code>&lt;caption&gt;title&lt;/caption&gt;</code></p>
<p>作用:用于描述表格内容，显示在表格上方</p>
<p>摘要:</p>
<p><strong>语法:</strong><code>&lt;table summary=&quot;表格简介文本&quot;&gt;</code></p>
<p>作用：摘要是不会在浏览器中显示出来的。作用是为了增加语义性。</p>
<h4 id="15、-lt-a-gt-链接到另外一个界面"><a href="#15、-lt-a-gt-链接到另外一个界面" class="headerlink" title="15、&lt;a&gt; 链接到另外一个界面"></a>15、<code>&lt;a&gt;</code> 链接到另外一个界面</h4><p>使用<code>&lt;a&gt;</code>标签可以实现超链接.</p>
<p><strong>语法:</strong><code>&lt;a href = &quot;目标网址&quot; title = &quot;鼠标滑过的文本&quot;&gt;链接显示的文本&lt;/a&gt;</code></p>
<p><a href = "目标网址" title = "鼠标滑过的文本">链接显的文本</a></p>
<p>这里的<code>title</code>属性的作用是: 鼠标滑过链接文字的时候，显示的内容。</p>
<p><strong>语法:</strong> <code>&lt;a href = &quot;目标网址&quot; title = &quot;鼠标滑过的文本&quot; target = &quot;_blank&quot;&gt;链接显示的文本&lt;/a&gt;</code></p>
<p>以上表示在新窗口中打开超链接</p>
<h4 id="16、-lt-mailto-gt-在网页中链接Email地址"><a href="#16、-lt-mailto-gt-在网页中链接Email地址" class="headerlink" title="16、&lt;mailto&gt; 在网页中链接Email地址"></a>16、<code>&lt;mailto&gt;</code> 在网页中链接Email地址</h4><p><code>&lt;a&gt;</code>标签还有一个作用是可以链接Email地址,使用mailto能让访问者便捷向网址管理者发生电子邮件。还可以用它做些其它事情。</p>
<p>如下：</p>
<p><table><br>    <tbody><br>        <tr><br>            <th>功能</th><br>            <th>关键字</th><br>            <th>功能详解</th><br>            <th>举例</th><br>        </tr><br>        <tr><br>            <th>邮箱地址</th><br>            <td>mailto:</td><br>            <th>浏览器自动调用默认的电子邮件程序，并在收件人中填上跳上收件人地址</th><br>            <th><code>&lt;a href=&quot;mailto: aa@163.com&quot;&gt;发送&lt;/a&gt;</code></th><br>        </tr><br>        <tr><br>            <th>抄送地址</th><br>            <td>cc=</td><br>            <th>在收件人地址后用cc=地址 ，可以填写抄送地址</th><br>            <th><code>&lt;a href=&quot;mailto: aa@163.com?cc=bb@163.com&quot;&gt;发送&lt;/a&gt;</code></th><br>        </tr><br>        <tr><br>            <th>密件抄送地址</th><br>            <td>bcc=</td><br>            <th>在收件人地址后用cc=地址 ，可以填写密件抄送地址</th><br>            <th><code>&lt;a href=&quot;mailto: aa@163.com?bcc=bb@163.com&quot;&gt;发送&lt;/a&gt;</code></th><br>        </tr><br>        <tr><br>            <th>多个收件人、抄送、密件抄送人</th><br>            <td>;</td><br>            <th>用分号隔开多个地址</th><br>            <th><code>&lt;a href=&quot;mailto: aa@163.com;bb@163.com&quot;&gt;发送&lt;/a&gt;</code></th><br>        </tr><br>        <tr><br>            <th>邮件主题</th><br>            <td>subject=</td><br>            <th>用subject= 添加邮件主题</th><br>            <th><code>&lt;a href=&quot;mailto: aa@163.com？subject＝发送电子邮件&quot;&gt;发送&lt;/a&gt;</code></th><br>        </tr><br>        <tr><br>            <th>邮件内容</th><br>            <td>body=</td><br>            <th>用body= 添加邮件内容</th><br>            <th><code>&lt;a href=&quot;mailto: aa@163.com？body= 邮件内容&quot;&gt;发送&lt;/a&gt;</code></th><br>        </tr><br>    </tbody></p>
<table>

<p>注意:如果<code>mailto</code>后面有多个参数的话，第一个参数必须以<code>？</code>开头 其它<code>&amp;</code>分开。</p>
<h4 id="17、-lt-img-gt-为网页插入图片"><a href="#17、-lt-img-gt-为网页插入图片" class="headerlink" title="17、&lt;img&gt; 为网页插入图片"></a>17、<code>&lt;img&gt;</code> 为网页插入图片</h4><p><strong>语法:</strong><code>&lt;img src&quot;图片地址&quot; alt= &quot;下载失败的替换文本&quot; title = “提示文本”&gt;</code></p>
<p>支持格式 : GIF PNG JPEG</p>
<h4 id="18、-lt-form-gt-与用户交互"><a href="#18、-lt-form-gt-与用户交互" class="headerlink" title="18、 &lt;form&gt;与用户交互"></a>18、 <code>&lt;form&gt;</code>与用户交互</h4><p><strong>语法:</strong><code>&lt;form method=&quot;传送方式&quot; action = “服务文件”&gt;</code></p>
<ol>
<li><code>&lt;form&gt;</code>: form 标签是成对出现的。</li>
<li><code>action</code>:浏览者输入的数据被传送到的地方，比如一个php页面</li>
<li><code>method</code>:数据的传输方式<code>get／post</code></li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//</div><div class="line">&lt;form method = &quot;post&quot; action = &quot;save.php&quot;&gt;</div><div class="line">	&lt;label for = &quot;username&quot;&gt;用户名:&lt;/label&gt;</div><div class="line">	&lt;input type = &quot;text&quot; name = &quot;username&quot;/&gt;</div><div class="line">	&lt;label for = &quot;pass&quot;&gt;密码:&lt;/label&gt;</div><div class="line">	&lt;input type = &quot;password&quot; name = &quot;pass&quot;/&gt;</div><div class="line">&lt;/form&gt;</div><div class="line">//</div></pre></td></tr></table></figure>
<form method = "post" action = "save.php"><br>    <label for = "username">用户名:</label><br>    <input type = "text" name = "username" value = "placeholder"/><br>    <label for = "pass">密码:</label><br>    <input type = "password" name = "pass" value = "placeholder"/><br></form>

<p>注意:</p>
<ul>
<li>所有表单控件(文本框、文本域、按钮、单选框、复选框等)都必须放在<code>&lt;form&gt;&lt;/form&gt;</code>之间。</li>
</ul>
<h5 id="文本输入框-lt-input-gt"><a href="#文本输入框-lt-input-gt" class="headerlink" title="文本输入框 &lt;input ... /&gt;"></a>文本输入框 <code>&lt;input ... /&gt;</code></h5><p><code>&lt;input type = &quot;text&quot; name = &quot;username&quot; value = &quot;placeholder&quot;/&gt;</code></p>
<p>其中type ＝ “text”时: <strong>文本输入框</strong></p>
<p>其中type ＝ “password”时: <strong>密码输入框</strong></p>
<p>name: 为文本框命名</p>
<p>value: 默认值</p>
<h5 id="文本域-lt-textarea-gt-lt-textarea-gt"><a href="#文本域-lt-textarea-gt-lt-textarea-gt" class="headerlink" title="文本域 &lt;textarea&gt;&lt;/textarea&gt;"></a>文本域 <code>&lt;textarea&gt;&lt;/textarea&gt;</code></h5><p><strong>语法:</strong><code>&lt;textarea  rows=&quot;行数&quot; cols=&quot;列数&quot;&gt;默认文本&lt;/textarea&gt;</code></p>
<p><code>cols</code>:列数</p>
<p><code>rows</code>:行数</p>
<h5 id="单选框-和-复选框"><a href="#单选框-和-复选框" class="headerlink" title="单选框 和 复选框"></a>单选框 和 复选框</h5><p><strong>语法:</strong> <code>&lt;input type=&quot;radio/checkbox&quot; value = &quot;值&quot; name = &quot;名称&quot; checked = &quot;checked&quot; /&gt;</code></p>
<ol>
<li><code>type</code> radio时，单选框 ，checkbox时，多选框。</li>
<li><code>value</code>:提交数据到服务器的值</li>
<li><code>name</code>:为控件命名</li>
<li><code>checked</code>:当设置 checked=”checked” 时，该选项被默认选中</li>
</ol>
<p>注意:<strong>同一组</strong>的单选按钮，name 取值<strong>一定要一致</strong>，比如上面例子为同一个名称“radioLove”，这样同一组的单选按钮才可以起到单选的作用。</p>
<h5 id="下拉列表框"><a href="#下拉列表框" class="headerlink" title="下拉列表框"></a>下拉列表框</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;form action=&quot;save.php&quot; method=&quot;post&quot; &gt;</div><div class="line">    &lt;label&gt;爱好:&lt;/label&gt;</div><div class="line">    &lt;select&gt;</div><div class="line">      &lt;option value=&quot;看书&quot;&gt;看书&lt;/option&gt;</div><div class="line">      &lt;option value=&quot;旅游&quot;&gt;旅游&lt;/option&gt;</div><div class="line">      &lt;option value=&quot;运动&quot;&gt;运动&lt;/option&gt;</div><div class="line">      &lt;option value=&quot;购物&quot;&gt;购物&lt;/option&gt;</div><div class="line">    &lt;/select&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
<form action="save.php" method="post" ><br>    <label>爱好:</label><br>    <select><br>      <option value="看书">看书</option><br>      <option value="旅游">旅游</option><br>      <option value="运动">运动</option><br>      <option value="购物" selected = "selected">购物</option><br>    </select><br></form>

<ol>
<li>value <code>&lt;option value = “提交值”&gt;选项&lt;／option&gt;</code>  向服务器提交的值</li>
<li>selected 默认选中</li>
</ol>
<p>下拉列表也可以进行多选操作，在<code>&lt;select&gt;</code>标签中设置<code>multiple=&quot;multiple&quot;</code>属性，就可以实现多选功能，在 widows 操作系统下，进行多选时按下<code>Ctrl</code>键同时进行单击（在 Mac下使用 <code>Command</code> +单击），可以选择多个选项。如下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;form action=&quot;save.php&quot; method=&quot;post&quot; &gt;</div><div class="line">    &lt;label&gt;爱好:&lt;/label&gt;</div><div class="line">    &lt;select multiple = &quot;multiple&quot;&gt;</div><div class="line">      &lt;option value=&quot;看书&quot;&gt;看书&lt;/option&gt;</div><div class="line">      &lt;option value=&quot;旅游&quot;&gt;旅游&lt;/option&gt;</div><div class="line">      &lt;option value=&quot;运动&quot;&gt;运动&lt;/option&gt;</div><div class="line">      &lt;option value=&quot;购物&quot; selected = &quot;selected&quot;&gt;购物&lt;/option&gt;</div><div class="line">    &lt;/select&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
<form action="save.php" method="post" ><br>    <label>爱好:</label><br>    <select multiple = "multiple"><br>      <option value="看书">看书</option><br>      <option value="旅游">旅游</option><br>      <option value="运动">运动</option><br>      <option value="购物" selected = "selected">购物</option><br>    </select><br></form>


<h5 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h5><p><strong>语法:</strong> <code>&lt;input type=&quot;submit&quot; value = &quot;按钮&quot; /&gt;</code></p>
<input type="submit" value = "按钮" name = "名称" checked = "checked" />

<h5 id="重置按钮"><a href="#重置按钮" class="headerlink" title="重置按钮"></a>重置按钮</h5><p><strong>语法:</strong> <code>&lt;input type=&quot;reset&quot; value = &quot;重置&quot; /&gt;</code></p>
<input type="reset" value = "重置" />

<h4 id="表单中的label标签"><a href="#表单中的label标签" class="headerlink" title="表单中的label标签"></a>表单中的label标签</h4><p>label标签不会向用户呈现任何特殊效果，它的作用是为鼠标用户改进了可用性。如果你在 label 标签内点击文本，就会触发此控件。就是说，当用户单击选中该label标签时，浏览器就会自动将焦点转到和标签相关的表单控件上（就自动选中和该label标签相关连的表单控件上）。</p>
<p><strong>语法:</strong> <code>&lt;label for=&quot;控件id名称&quot;&gt;</code></p>
<p>注意：标签的<code>for</code>属性中的值应当与相关控件的<code>id</code>属性一定要相同。</p>
<form><br>  <label for="male">男</label><br>  <input type="radio" name="gender" id="male" /><br>  <label for="female">女</label><br>  <input type="radio" name="gender" id="female" /><br>  <label for="email">输入你的邮箱地址</label><br>  <input type="email" id="email" placeholder="Enter email"><br></form>


<h4 id="总结input标签的type属性-资料"><a href="#总结input标签的type属性-资料" class="headerlink" title="总结input标签的type属性 资料"></a>总结input标签的<code>type</code>属性 <a href="http://www.w3school.com.cn/html5/att_input_type.asp"><em>资料</em></a></h4><ul>
<li><code>text</code>: 文本输入框</li>
<li><code>password</code>: 密码输入框</li>
<li><code>radio</code>:单选框</li>
<li><code>checkbox</code>:多选框</li>
<li><code>submit</code>:提交按钮</li>
<li><code>reset</code>:重置按钮</li>
</ul>
<p><img src="http://ocg4av0wv.bkt.clouddn.com/8A576722-8BC1-46CF-9981-5E922715E6E6.png" width = "400" height="600"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript和Native的交互]]></title>
      <url>http://www.CepheusSun.com/JavaScript%E5%92%8CNative%E7%9A%84%E4%BA%A4%E4%BA%92.html</url>
      <content type="html"><![CDATA[<p>iOS Dev难免会遇上需要和JavaScript交互的时候，我是这么做的。<br><a id="more"></a></p>
<h2 id="JavaScriptCore"><a href="#JavaScriptCore" class="headerlink" title="JavaScriptCore"></a>JavaScriptCore</h2><p>JSC是webkit的一部分，主要是对JS进行解析和提供执行环境,并且，他是开源的。<br><a href="https://github.com/phoboslab/JavaScriptCore-iOS"><em>JavaScriptCore源码</em></a><br>在iOS7推出后，JSC极大的方便了开发者对js的操作。在此之前通用的方法都是是用<code>webview</code>里面的一个函数<code>stringByEvaluatingJavaScriptFromString</code>,JS 对Native的回调都是通过拦截URL的方式进行的。</p>
<p>JSC中和我们相关的类就大概只有一下5个。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">#ifndef JavaScriptCore_h</div><div class="line">#define JavaScriptCore_h</div><div class="line"></div><div class="line">#include &lt;JavaScriptCore/JavaScript.h&gt;</div><div class="line">#include &lt;JavaScriptCore/JSStringRefCF.h&gt;</div><div class="line"></div><div class="line">#if defined(__OBJC__) &amp;&amp; JSC_OBJC_API_ENABLED</div><div class="line"></div><div class="line">#import &quot;JSContext.h&quot;</div><div class="line">#import &quot;JSValue.h&quot;</div><div class="line">#import &quot;JSManagedValue.h&quot;</div><div class="line">#import &quot;JSVirtualMachine.h&quot;</div><div class="line">#import &quot;JSExport.h&quot;</div><div class="line"></div><div class="line">#endif</div><div class="line"></div><div class="line">#endif /* JavaScriptCore_h */</div></pre></td></tr></table></figure>
<h3 id="JSContext"><a href="#JSContext" class="headerlink" title="JSContext"></a>JSContext</h3><p>JS执行的环境，同时也通过JSVirtualMachine管理着所有对象的生命周期，每个JSValue都和JSContext相关联并且强引用context。</p>
<h3 id="JSValue"><a href="#JSValue" class="headerlink" title="JSValue"></a>JSValue</h3><p>JS对象在JSVirtualMachine中的一个强引用，其实就是Hybird对象。我们对JS的操作都是通过它。并且每个JSValue都是强引用一个context。同时，OC和JS对象之间的转换也是通过它，相应的类型转换如下：</p>
<table>
<thead>
<tr>
<th>Obj-C type</th>
<th style="text-align:center">JS type</th>
</tr>
</thead>
<tbody>
<tr>
<td>nil</td>
<td style="text-align:center">undefined</td>
</tr>
<tr>
<td>NSNull</td>
<td style="text-align:center">null</td>
</tr>
<tr>
<td>NSString</td>
<td style="text-align:center">string</td>
</tr>
<tr>
<td>NSNumber</td>
<td style="text-align:center">number,boolean</td>
</tr>
<tr>
<td>NSDictionary</td>
<td style="text-align:center">Object object</td>
</tr>
<tr>
<td>NSArray</td>
<td style="text-align:center">Object object</td>
</tr>
<tr>
<td>NSDate</td>
<td style="text-align:center">Date object</td>
</tr>
<tr>
<td>NSBlock</td>
<td style="text-align:center">Function  object</td>
</tr>
<tr>
<td>id</td>
<td style="text-align:center">Wrapper object</td>
</tr>
<tr>
<td>Class</td>
<td style="text-align:center">Constructor object</td>
</tr>
</tbody>
</table>
<h3 id="JSManagedValue"><a href="#JSManagedValue" class="headerlink" title="JSManagedValue"></a>JSManagedValue</h3><p>JS和OC对象的内存管理辅助对象。由于JS内存管理是垃圾回收，并且JS中的对象都是强引用，而OC是引用计数。如果双方相互引用，势必会造成循环引用，而导致内存泄露。我们可以用JSManagedValue保存JSValue来避免。</p>
<h3 id="JSVirtualMachine"><a href="#JSVirtualMachine" class="headerlink" title="JSVirtualMachine"></a>JSVirtualMachine</h3><p>JS运行的虚拟机，有独立的堆空间和垃圾回收机制。</p>
<h3 id="JSExport"><a href="#JSExport" class="headerlink" title="JSExport"></a>JSExport</h3><p>一个协议，如果JS对象想直接调用OC对象里面的方法和属性，那么这个OC对象只要实现这个JSExport协议就可以了。</p>
<h2 id="交互过程"><a href="#交互过程" class="headerlink" title="交互过程"></a>交互过程</h2><p>分别是OC -&gt; JS 、 JS -&gt; OC</p>
<p>首先在工程中引入JSC。</p>
<p><img src= "http://ocg4av0wv.bkt.clouddn.com/E203DAC8-DCB9-4E98-95E0-FA250258283C.png" width = 500 height = 400/></p>
<h3 id="JS-gt-OC"><a href="#JS-gt-OC" class="headerlink" title="JS -&gt; OC"></a>JS -&gt; OC</h3><p>这种情况的使用的应该是最多的, 可能你在一个H5页面中要跳转到native页面等等。</p>
<p>我写了一个Demo,并写了一个相关的html代码。</p>
<p>步骤：</p>
<h4 id="1、定义一个协议PsJsObjcDelegate"><a href="#1、定义一个协议PsJsObjcDelegate" class="headerlink" title="1、定义一个协议PsJsObjcDelegate"></a>1、定义一个协议<code>PsJsObjcDelegate</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@protocol PsJsObjcDelegate &lt;JSExport&gt;</div><div class="line">@end</div></pre></td></tr></table></figure>
<h4 id="2、定义一个遵守这个协议的Object-JsObjcBridge"><a href="#2、定义一个遵守这个协议的Object-JsObjcBridge" class="headerlink" title="2、定义一个遵守这个协议的Object JsObjcBridge"></a>2、定义一个遵守这个协议的Object <code>JsObjcBridge</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@interface JsObjcBridge : NSObject &lt;PsJsObjcDelegate&gt;</div><div class="line">@property (nonatomic, weak) JSContext *jsContext;</div><div class="line">@property (nonatomic, weak) UIWebView *webView;</div><div class="line">@property (nonatomic, copy) void (^pSJsObjcModelBlock)(NSInteger type , NSArray *param);</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>因为我选择了通过block来进行这个class 和 vc之间的调用,所以我定义了一个block<code>property</code>来进行这个对象和vc之间的调用。</p>
<h4 id="3、协议方法-注意这里的方法名要和js中的一致"><a href="#3、协议方法-注意这里的方法名要和js中的一致" class="headerlink" title="3、协议方法 (注意这里的方法名要和js中的一致)"></a>3、协议方法 (注意这里的方法名要和js中的一致)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- (void)jsCallNativeWithParam:(NSDictionary *)param;//无返回值</div><div class="line">- (NSString *)jsCallNativeWithParamWithReturn:(NSDictionary *)param;//有返回值</div></pre></td></tr></table></figure>
<h4 id="4、在-JsObjcBridge中实现这个方法"><a href="#4、在-JsObjcBridge中实现这个方法" class="headerlink" title="4、在 JsObjcBridge中实现这个方法"></a>4、在 <code>JsObjcBridge</code>中实现这个方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- (void)jsCallNativeWithParam:(NSDictionary *)param&#123;</div><div class="line">    self.pSJsObjcBridgeBlock(param);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="5、把那个｀-html｀文件导入工程"><a href="#5、把那个｀-html｀文件导入工程" class="headerlink" title="5、把那个｀.html｀文件导入工程"></a>5、把那个｀.html｀文件导入工程</h4><p><img src= "http://ocg4av0wv.bkt.clouddn.com/03FD2A40-D380-46A7-8221-12FC1247B8F0.png" width = 300 height = 400/></p>
<h4 id="6、在Controller中编码"><a href="#6、在Controller中编码" class="headerlink" title="6、在Controller中编码"></a>6、在Controller中编码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">#pragma mark - UIWebViewDelegate</div><div class="line">- (void)webViewDidFinishLoad:(UIWebView *)webView &#123;</div><div class="line">    self.jsContext = [webView valueForKeyPath:@&quot;documentView.webView.mainFrame.javaScriptContext&quot;];</div><div class="line">    JsObjcBridge *model              = [[JsObjcBridge alloc] init];</div><div class="line">    self.jsContext[@&quot;JSInteractive&quot;] = model;</div><div class="line">    model.jsContext                  = self.jsContext;</div><div class="line">    model.webView                    = self.webView;</div><div class="line">    </div><div class="line">    model.pSJsObjcBridgeBlock = ^(NSDictionary *param) &#123;</div><div class="line">        NSLog(@&quot;%@&quot;, param[@&quot;vc&quot;]);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    model.pSJsObjcBridgeBlockWithReturn = ^(NSDictionary *param) &#123;</div><div class="line">        return param[@&quot;vc&quot;];</div><div class="line">    &#125;;</div><div class="line">    self.jsContext.exceptionHandler = ^(JSContext *context, JSValue *exceptionValue) &#123;</div><div class="line">        context.exception = exceptionValue;</div><div class="line">        NSLog(@&quot;异常信息：%@&quot;, exceptionValue);</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="OC-gt-JS"><a href="#OC-gt-JS" class="headerlink" title="OC -&gt; JS"></a>OC -&gt; JS</h3><p>一种是向js 中注入新的js代码、一种是调用js中已有方法。</p>
<p>由于我实在想不到好的应用场景，所以就只能在一个导航栏中左右分别放两个item</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">self.navigationItem.rightBarButtonItem = [[UIBarButtonItem alloc] initWithTitle:@&quot;callJS&quot; style:UIBarButtonItemStylePlain target:self action:@selector(objcCallJsFunction)];</div><div class="line">self.navigationItem.leftBarButtonItem = [[UIBarButtonItem alloc] initWithTitle:@&quot;injectJS&quot; style:UIBarButtonItemStylePlain target:self action:@selector(objcInjectJsFunction)];</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (void)objcCallJsFunction&#123;</div><div class="line">    [self.jsContext[@&quot;jsFunc&quot;] callWithArguments:nil];</div><div class="line">&#125;</div><div class="line">- (void)objcInjectJsFunction&#123;</div><div class="line">    NSString *js = @&quot;function add(a,b) &#123;alert(a+b)&#125;&quot;;</div><div class="line">    [self.jsContext evaluateScript:js];</div><div class="line">    [self.jsContext[@&quot;add&quot;] callWithArguments:@[@2,@3]];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当然你要调用或者注入的js function 是有返回值的那么上面的一句话就应该改成这样了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">JSValue *n = [self.jsContext[@&quot;add&quot;] callWithArguments:@[@2,@3]];</div></pre></td></tr></table></figure></p>
<h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><p>写博文的时候查阅相关资料发现这里还是可能会出现一些循环引用的问题。然后简单整理了一下。</p>
<ol>
<li>OC 的 <code>ARC</code> 和 JS的 <code>GC</code></li>
<li>正常情况下<code>GC</code>都会打破循环引用</li>
</ol>
<p>特殊情况：</p>
<ul>
<li>不要在block里面直接使用context，或者使用外部的<code>JSValue</code>对象。</li>
<li>OC对象不要用属性直接保存<code>JSValue</code>对象，因为这样太容易循环引用了。</li>
<li>不要在不同的 <code>JSVirtualMachine</code> 之间进行传递JS对象。</li>
</ul>
<h2 id="结束的话"><a href="#结束的话" class="headerlink" title="结束的话"></a>结束的话</h2><p>不多说了,只是简单的实现了一下,肯定还是有很多的东西没有考虑到,以后遇到了再完善吧。<a href="https://github.com/ProgramerSunny/jsCallObjc"><em>demo地址</em></a>。在写这个博客的过程中思考了许多,其实在具体场景中还是有很多东西没有想到。而且在代码中调用的方法什么的卸写在一个<code>plist</code>里面，把各种规则放进去,这样更利于维护,和与<code>sever</code>的交互。这些可能都需要去思考的问题。原谅我比较low，并没有在项目中有过这样的应用。吾将上下而求索…</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[我是这样格式化我的代码]]></title>
      <url>http://www.CepheusSun.com/%E6%88%91%E6%98%AF%E8%BF%99%E6%A0%B7%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%88%91%E7%9A%84%E4%BB%A3%E7%A0%81.html</url>
      <content type="html"><![CDATA[<p>这篇文章是我整理的一份代码格式化的东西, 和一份我正在用的clang-format的配置文件。</p>
<p>clang-format 之类的插件在 Xcode8 上已经不能用了,所以… 呵呵</p>
<a id="more"></a>
<h3 id="一、前面的话"><a href="#一、前面的话" class="headerlink" title="一、前面的话"></a>一、前面的话</h3><p>前段时间整理一系列公司的文档,写到代码编写规范和CodeReview规范中都提到代码格式化的问题。很多人都说能都自动化的步骤都应该通过自动化来解决,所以这个时候想到了以前一直舍不得用的clang-format。想起来还是有点惭愧，自从看了sunnyxx的《招聘一个靠谱的iOS》之后就仿佛也有了代码洁癖，但是一直也没有去整理自己的代码编写规范这些东西。后来看到了google的规范文档,感觉越来越想弄一下这个东西。</p>
<p><img src="http://i2.buimg.com/567571/33caa8485b3664b5.png" alt=""></p>
<h3 id="二、clang-format"><a href="#二、clang-format" class="headerlink" title="二、clang-format"></a>二、clang-format</h3><p><a href="https://github.com/travisjeffery/ClangFormat-Xcode"><em>clang-format</em></a><br>是一款Xcode的一个非常好用的插件。具体安装可以去GitHub查看官方的readme。</p>
<h3 id="三、-install-clang-format"><a href="#三、-install-clang-format" class="headerlink" title="三、 install clang-format"></a>三、 install clang-format</h3><p>官方的readme是英文的,由于我用上它和写这篇文章已经有一段时间了，我就简单的看着官方文档整理一下步骤吧！<br><a href="https://github.com/travisjeffery/ClangFormat-Xcode"><em>原文地址</em></a></p>
<ol>
<li>下载或者克隆这个文件<br><img src="http://i4.buimg.com/567571/f6fde5feb67252db.png" alt=""></li>
<li>像运行普通项目一样运行一下</li>
<li>cmd + q 完全退出一下Xcode</li>
<li>重新打开你的项目,应该会让你选择是否load这个插件。不要选skip。</li>
<li>没有第五,你已经装上这个插件了</li>
</ol>
<h3 id="四、How-to-init"><a href="#四、How-to-init" class="headerlink" title="四、How to init"></a>四、How to init</h3><p>在工程目录或者workspace目录下创建一个<code>.clang-format</code>文件<br><img src="http://i4.buimg.com/567571/1da53f4cd1bc9633.png" alt=""><br><img src="http://i4.buimg.com/567571/b5f72a18bea10286.png" alt=""><br><img src="http://i4.buimg.com/567571/20151db030f769c4.png" alt=""><br><img src="http://i4.buimg.com/567571/1214171b519c680c.png" alt=""></p>
<p>完成之后你会发现这个文件在你工程文件中是没有的。如果你在桌面上将任意文件改成.clang-format之后就会出现这个。<br><img src="http://i1.buimg.com/567571/12c3424371497a27.png" alt=""><br>其实还好，只需要打开终端</p>
<p>显示隐藏文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">defaults write com.apple.finder AppleShowAllFiles -bool true &amp;&amp; killall Finder</div></pre></td></tr></table></figure></p>
<p>不显示隐藏文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">defaults write com.apple.finder AppleShowAllFiles -bool false &amp;&amp; killall Finder</div></pre></td></tr></table></figure></p>
<p>通过两句命令就可以打开了。这个时候你可以通过vim打开并且编辑,或者在刚刚在Xcode中创建的时候编辑,不过我通常都是通过sublime来编辑这些东西的。</p>
<p>这个只是一个配置文件,这个文件是可以随意拖动的。</p>
<p>由于公司目前的规范是我写的,所以我也直接把这个文件放在了根目录中</p>
<ol>
<li>打开Finder</li>
<li>cmd＋shift＋g<br><img src="http://i1.buimg.com/567571/65f27507e6dc1145.png" alt=""></li>
<li>前往,前题是你刚过显示了隐藏文件,不然你看到的是很boring的内容</li>
<li>找到<code>.clang-format</code>文件,右键,，选择sublime text<br><img src="http://i4.buimg.com/567571/f2de4faccb5c7098.jpg" alt=""></li>
</ol>
<h3 id="五、How-to-config"><a href="#五、How-to-config" class="headerlink" title="五、How to config"></a>五、How to config</h3><p>这个就简单了,也没什么好说的,我的大概就是这个样子。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"># Custom options in the special build of clang-format (these are not standard options)</div><div class="line"># IndentNestedBlocks: false</div><div class="line"># AllowNewlineBeforeBlockParameter: false</div><div class="line">Language:        Cpp</div><div class="line"># BasedOnStyle:  Google</div><div class="line">AccessModifierOffset: -1</div><div class="line">ConstructorInitializerIndentWidth: 4</div><div class="line">SortIncludes: false</div><div class="line"></div><div class="line">AlignConsecutiveAssignments: true</div><div class="line">AlignAfterOpenBracket: true</div><div class="line">AlignEscapedNewlinesLeft: true</div><div class="line">AlignOperands: false</div><div class="line">AlignTrailingComments: true</div><div class="line"></div><div class="line">AllowAllParametersOfDeclarationOnNextLine: false</div><div class="line">AllowShortBlocksOnASingleLine: false</div><div class="line">AllowShortCaseLabelsOnASingleLine: false</div><div class="line">AllowShortFunctionsOnASingleLine: true</div><div class="line">AllowShortIfStatementsOnASingleLine: true</div><div class="line">AllowShortFunctionsOnASingleLine: All</div><div class="line">AllowShortLoopsOnASingleLine: true</div><div class="line"></div><div class="line">AlwaysBreakAfterDefinitionReturnType: false</div><div class="line">AlwaysBreakTemplateDeclarations: false</div><div class="line">AlwaysBreakBeforeMultilineStrings: false</div><div class="line"></div><div class="line">BreakBeforeBinaryOperators: None</div><div class="line">BreakBeforeTernaryOperators: false</div><div class="line">BreakConstructorInitializersBeforeComma: false</div><div class="line"></div><div class="line">BinPackArguments: true</div><div class="line">BinPackParameters: true</div><div class="line">ColumnLimit: 0</div><div class="line">ConstructorInitializerAllOnOneLineOrOnePerLine: true</div><div class="line">DerivePointerAlignment: false</div><div class="line">ExperimentalAutoDetectBinPacking: false</div><div class="line">IndentCaseLabels: true</div><div class="line">IndentWrappedFunctionNames: false</div><div class="line">IndentFunctionDeclarationAfterType: false</div><div class="line">MaxEmptyLinesToKeep: 2</div><div class="line">KeepEmptyLinesAtTheStartOfBlocks: false</div><div class="line">NamespaceIndentation: Inner</div><div class="line">ObjCBlockIndentWidth: 4</div><div class="line">ObjCSpaceAfterProperty: true</div><div class="line">ObjCSpaceBeforeProtocolList: true</div><div class="line">PenaltyBreakBeforeFirstCallParameter: 10000</div><div class="line">PenaltyBreakComment: 300</div><div class="line">PenaltyBreakString: 1000</div><div class="line">PenaltyBreakFirstLessLess: 120</div><div class="line">PenaltyExcessCharacter: 1000000</div><div class="line">PenaltyReturnTypeOnItsOwnLine: 200</div><div class="line">PointerAlignment: Right</div><div class="line">SpacesBeforeTrailingComments: 1</div><div class="line">Cpp11BracedListStyle: true</div><div class="line">Standard:        Auto</div><div class="line">IndentWidth:     4</div><div class="line">TabWidth:        8</div><div class="line">UseTab:          Never</div><div class="line">BreakBeforeBraces: Custom</div><div class="line">BraceWrapping: </div><div class="line">    AfterClass: true</div><div class="line">    AfterControlStatement: false</div><div class="line">    AfterEnum: false</div><div class="line">    AfterFunction: false</div><div class="line">    AfterNamespace: true</div><div class="line">    AfterObjCDeclaration: true</div><div class="line">    AfterStruct: false</div><div class="line">    AfterUnion: false</div><div class="line">    BeforeCatch: false</div><div class="line">    BeforeElse: false</div><div class="line">    IndentBraces: false</div><div class="line"></div><div class="line">SpacesInParentheses: false</div><div class="line">SpacesInSquareBrackets: false</div><div class="line">SpacesInAngles:  false</div><div class="line">SpaceInEmptyParentheses: false</div><div class="line">SpacesInCStyleCastParentheses: false</div><div class="line">SpaceAfterCStyleCast: false</div><div class="line">SpacesInContainerLiterals: true</div><div class="line">SpaceBeforeAssignmentOperators: true</div><div class="line"></div><div class="line">ContinuationIndentWidth: 4</div><div class="line">CommentPragmas:  &apos;^ IWYU pragma:&apos;</div><div class="line">ForEachMacros:   [ foreach, Q_FOREACH, BOOST_FOREACH ]</div><div class="line">SpaceBeforeParens: ControlStatements</div><div class="line">DisableFormat:   false</div></pre></td></tr></table></figure>
<p><a href="http://clang.llvm.org/docs/ClangFormatStyleOptions.html"><em>英文版 Clang-Format Style Options</em></a> 自己定制的话，看看这个吧！<br><a href="http://www.jianshu.com/p/542e535117eb"><em>ClangFormat语法1.0</em></a> 简书上有一个中文版的,好像不是特别完整,一般自己玩玩也是够了.</p>
<h3 id="六、How-to-use"><a href="#六、How-to-use" class="headerlink" title="六、How to use"></a>六、How to use</h3><ol>
<li>Xcode-Edit-ClangFormat-File选项</li>
<li>选择你想要格式化的代码，然后Edit-ClangFormat-确认File为勾选状态-Format Selected Text</li>
</ol>
<p>设置快捷键</p>
<p>系统偏好设置－键盘－快捷键－应用快捷键- +<br><img src="http://i2.buimg.com/567571/586f472600761b93.jpg" alt=""><br>我自己设置的是<code>option</code>＋<code>,</code> </p>
<h3 id="七、Ending"><a href="#七、Ending" class="headerlink" title="七、Ending"></a>七、Ending</h3><p>作为代码编写者，编写让自己舒服，让reviewer舒服的代码是我们的责任, 在编码过程中难免会出现时间紧任务重的情况，作为软件开发人员，耗费大量的精力去调整自己的代码格式是非常不值得的事情。况且在团队协同开发的时候如果自己编写的代码不符合团队规范，即使能够很好的完成工作，那也是不道德的事情。通过一个简单的工作一劳永逸的解决这个问题，又何乐而不为呢？</p>
<h3 id="八、The-next"><a href="#八、The-next" class="headerlink" title="八、The next"></a>八、The next</h3><p>最近在看《重构》这本书，虽然是java写的，希望自己能在学习之后能够更快速更科学的重构项目，重构代码。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[简单对比了一下Delegate和Block的效率]]></title>
      <url>http://www.CepheusSun.com/%E7%AE%80%E5%8D%95%E5%AF%B9%E6%AF%94%E4%BA%86%E4%B8%80%E4%B8%8BDelegate%E5%92%8CBlock%E7%9A%84%E6%95%88%E7%8E%87.html</url>
      <content type="html"><![CDATA[<p>最近公司的项目完成了，简单的写了个小demo来验证一下block和delegate的效率问题。</p>
<a id="more"></a>
<h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><blockquote>
<p>开始之前还是麻烦直接先看一些结论吧！</p>
</blockquote>
<p>终于，公司的项目给运营进行验证测试了，忙了那么久都没有时间学点新的东西。又倒腾了点新的东西出来，python啊，Go啊，然后感觉需要学习的东西还有很多，自己的能力也不够。买了几本书《Objective—C 高级编程 iOS与OS X多线程和内存管理》、 《重构》、《编程珠玑》….也没有时间看，刚刚才把OC的内存管理看了一遍。</p>
<p>一直在水各种qq群，然后有人在问<code>block</code>怎么用什么什么的，然后在群里就在讨论<code>block</code>和<code>delegate</code>，然后说为什么很多第三方库都是用的<code>delegate</code>，apple自带的控件也全都是用的<code>delegate</code>。</p>
<p>刚刚开始学<code>block</code>的时候，感觉<code>block</code>特别的难，什么鬼都不知道是怎么回事，代码索引也没有。所以我给出的第一个答案就是实用delegate至少在代码可读性上会好很多。</p>
<p>然后在简书看到一篇文章<a href="http://www.jianshu.com/p/bbccac805641"><em>block和delegate傻傻分不清楚</em></a></p>
<blockquote>
<p>由此我们可以看到delegate运行成本低，block成本很高。block出栈需要将使用的数据从栈内存拷贝到堆内存，当然对象的话就是加计数，使用完或者block置nil后才消除；delegate只是保存了一个对象指针，直接回调，没有额外消耗。相对C的函数指针，只多做了一个查表动作 。</p>
</blockquote>
<p>自己想了一下确实是这样的。</p>
<p>后来突然想到了自己一起踩过的坑，由于一直都有使用instrument或者MLeaksFinder来检查内存泄漏的习惯，所以在发现MJRefresh的时候发现内存泄漏，这个时候才发现之前使用block的时候并没有使用<code>weakSelf</code> 和 <code>strongSelf</code> 所以…<br>这就能够很好的解释为什么很多第三方库都会使用<code>delegate</code>而不是<code>block</code>了，毕竟对于目前的iOS市场，充斥着大量新手iOSer，如果使用block的话，第一会增加小白的使用成本，第二虽然不会立马造成crash，但如果不使用<code>weakSelf</code> 和 <code>strongSelf</code>的话，内存无法释放，对于那些写库的大神来说，应该是很难容忍的吧。</p>
<p>所以虽然我在项目中也会大量的使用<code>block</code>（主要是开发效率的提升，毕竟用<code>delegate</code>比较麻烦），但是对比<code>delegate</code>和<code>block</code>，<code>delegate</code>至少在以下三点比<code>block</code>好:</p>
<ol>
<li>代码的可读性。</li>
<li>运行效率。</li>
<li>使用<code>block</code>需要时刻预防循环引用。</li>
</ol>
<p>对于第四点,我想delegate作为一个很经典的设计模式，相比较于block出现的比较早。</p>
<p>作为iOS4的新特性，block最开始，现在可能也最常见的出现在<code>UIView animateWithDuration</code> 和 数组的<code>enumeratedObjectsUsingBlock</code> 方法中。</p>
<p>1</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[UIView animateWithDuration:2.0f animations:^&#123;</div><div class="line">   //do somethings </div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>2</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[self.dataSource enumerateObjectsUsingBlock:^(id  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) &#123;</div><div class="line">    NSLog(@&quot;%@,%@&quot;,obj,@(idx));</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>第二种作为枚举遍历法，被广泛的使用，用以替换之前或者现在都用的 <code>for</code> <code>forin</code>两个循环办法，而这个方法查阅文档之后发现是遵循了<code>NSFastEnumeration</code>这个协议。而这个协议直有下面一个方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(id __unsafe_unretained [])buffer count:(NSUInteger)len;</div></pre></td></tr></table></figure>
<p>这里面的实现原理，并不是本文的讨论范围,这里的block虽然能够代码巨大的效率提升，但也没办法跟delegate进行比较，而且这个应该也是算法的提升吧。如果对这个东西敢兴趣，也可以去看看巧大的文章，我记得他对这个有过深入的研究。</p>
<p>刚刚提到的三点，第一点可能没有办法去验证，第三点可以自己写一个block然后在这个block里面使用<code>self</code>然后再调用这个block，在看这个对象能不能<code>dealloc</code></p>
<p>对于第二点，我大胆的写了一个demo，这也是我最常使用block的场景：通过tableviewcell上的button回调点击时间到controller中。</p>
<p>我在controller中添加一个tableview实现了一些基本的代码之后，为了验证这个问题，我有自定义了一个<code>UITableViewCell</code> </p>
<p><img src="http://i1.piimg.com/567571/1196bd9c84116dd0.png" alt=""></p>
<p>通过拖线</p>
<p><img src="http://i1.piimg.com/567571/70c46c66aad2fecf.png" alt=""></p>
<p>实现了一下两个方法，分别通过block 和delegate 回调了10000次。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- (IBAction)blockAction:(id)sender &#123;</div><div class="line">    for (int i = 0; i &lt; 10000; i++) &#123;</div><div class="line">        self.blk();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">- (IBAction)delegateAction:(id)sender &#123;</div><div class="line">    for (int i = 0; i &lt; 10000; i++) &#123;</div><div class="line">        [self.delegate foocellDelegateButtonClicked];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在自定义cell的<code>.h</code>中声明了一个<code>protocol</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@protocol FooCellDelegate &lt;NSObject&gt;</div><div class="line">@required</div><div class="line">- (void)foocellDelegateButtonClicked;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>和一个<code>block</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">typedef void (^blk_t)(void);</div></pre></td></tr></table></figure>
<p>我们看一下整个<code>.h</code>文件中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">#import &lt;UIKit/UIKit.h&gt;</div><div class="line"></div><div class="line">typedef void (^blk_t)(void);</div><div class="line"></div><div class="line">@protocol FooCellDelegate &lt;NSObject&gt;</div><div class="line"></div><div class="line">@required</div><div class="line"></div><div class="line">- (void)foocellDelegateButtonClicked;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@interface FooCell : UITableViewCell</div><div class="line"></div><div class="line">@property (nonatomic, copy) blk_t blk;</div><div class="line"></div><div class="line">@property (nonatomic, weak) id&lt;FooCellDelegate&gt; delegate;</div><div class="line"></div><div class="line">+ (instancetype)cellWithTableView:(UITableView *)tableView;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>然后在controller中分别接受回调</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath &#123;</div><div class="line">    return (&#123;</div><div class="line">        FooCell *cell = [FooCell cellWithTableView:tableView];</div><div class="line">        cell.delegate = self;</div><div class="line">        cell.blk = ^&#123;</div><div class="line">            NSLog(@&quot;block&quot;);</div><div class="line">        &#125;;</div><div class="line">        cell;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)foocellDelegateButtonClicked &#123;</div><div class="line">    NSLog(@&quot;delegate&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码部分写完了,然后简单的运行了一下,结果分别是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">2016-08-10 14:53:00.466 IB[4649:179409] block</div><div class="line">.</div><div class="line">.</div><div class="line">.</div><div class="line">2016-08-10 14:53:02.926 IB[4649:179409] block</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">2016-08-10 14:53:50.639 IB[4649:179409] delegate</div><div class="line">.</div><div class="line">.</div><div class="line">.</div><div class="line">2016-08-10 14:53:54.325 IB[4649:179409] delegate</div></pre></td></tr></table></figure>
<p>结果还是很直观的<code>2.926</code> - <code>0.466</code>  对比 <code>54.325</code> - <code>50.639</code><br>我发现delegate的效率是要比block高些的。</p>
<p>接下来我又决定在block中使用一下外部变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath &#123;</div><div class="line">    return (&#123;</div><div class="line">        FooCell *cell = [FooCell cellWithTableView:tableView];</div><div class="line">        cell.delegate = self;</div><div class="line">        NSString *str = @&quot;delegate&quot;;</div><div class="line">        cell.blk = ^&#123;</div><div class="line">            NSLog(@&quot;%@&quot;,str);</div><div class="line">        &#125;;</div><div class="line">        cell;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line">- (void)foocellDelegateButtonClicked &#123;</div><div class="line">    NSString *str = @&quot;delegate&quot;;</div><div class="line">    NSLog(@&quot;%@&quot;,str);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于没有对str进行更改，所以我并没有使用<code>__block</code>修饰<code>str</code>;</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">2016-08-10 15:38:41.340 IB[4717:198573] block</div><div class="line">.</div><div class="line">.</div><div class="line">.</div><div class="line">2016-08-10 15:38:44.136 IB[4717:198573] block</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">2016-08-10 15:39:20.837 IB[4717:198573] delegate</div><div class="line">.</div><div class="line">.</div><div class="line">.</div><div class="line">2016-08-10 15:39:23.883 IB[4717:198573] delegate</div></pre></td></tr></table></figure>
<p><code>44.136</code> - <code>41.340</code>  对比 <code>23.883</code> - <code>20.837</code>  2.796  vs  3.046<br>依然是block效率高于delegate</p>
<p>我再用<code>__block</code>修饰了一下,然后</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath &#123;</div><div class="line">    return (&#123;</div><div class="line">        FooCell *cell = [FooCell cellWithTableView:tableView];</div><div class="line">        cell.delegate = self;</div><div class="line">        __weak typeof(self) weakself = self;</div><div class="line">        cell.blk = ^&#123;</div><div class="line">            __strong typeof(weakself) strongself = weakself;</div><div class="line">            NSLog(@&quot;%ld&quot;,strongself-&gt;idx_);</div><div class="line">            strongself-&gt; idx_++;</div><div class="line">        &#125;;</div><div class="line">        cell;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line">- (void)foocellDelegateButtonClicked &#123;</div><div class="line">    NSLog(@&quot;%ld&quot;,idx_);</div><div class="line">    idx_ ++;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">2016-08-10 15:58:19.665 IB[4827:213165] 0</div><div class="line">.</div><div class="line">.</div><div class="line">.</div><div class="line">2016-08-10 15:58:22.866 IB[4827:213165] 9999</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">2016-08-10 15:58:42.689 IB[4827:213165] 0</div><div class="line">.</div><div class="line">.</div><div class="line">.</div><div class="line">2016-08-10 15:58:45.192 IB[4827:213165] 9999</div></pre></td></tr></table></figure>
<p><code>22.866</code> - <code>19.665</code>  对比 <code>45.192</code> - <code>42.689</code>  3.201  vs  2.503   delegate更高</p>
<p><em>对比了大半天才发现文中所谓的效率比较其实是几乎没有的，毕竟是回调了10000次才出现了那么微弱的差距。<br>所以前文对比的所谓的区别也是没有什么道理的。</em></p>
<p>但是可能考虑到运行顺序和可能出现的缓存等等其他可能出现的因素,我也不能下十分完整的定论，但是block作为一个在很多语言都具有的语法,其优越性对比delegate也不会差。</p>
<table>
<thead>
<tr>
<th>程序语言</th>
<th style="text-align:center">Block的名称</th>
</tr>
</thead>
<tbody>
<tr>
<td>C ＋blocks</td>
<td style="text-align:center">block</td>
</tr>
<tr>
<td>SmallTalk</td>
<td style="text-align:center">block</td>
</tr>
<tr>
<td>Ruby</td>
<td style="text-align:center">block</td>
</tr>
<tr>
<td>LISP</td>
<td style="text-align:center">Lambda</td>
</tr>
<tr>
<td>Python</td>
<td style="text-align:center">Lambda</td>
</tr>
<tr>
<td>C++ 11</td>
<td style="text-align:center">Lambda</td>
</tr>
<tr>
<td>Javascript</td>
<td style="text-align:center">Anonymous function</td>
</tr>
</tbody>
</table>
<p>写到这了，其实我也是比较方的，因为到现在也是刚刚才认可这个事情。</p>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>所以到最后，无论block还是delegate 其实都是要看具体的应用场景的，如果脱离的具体的应用场景这样的最求所谓的性能优化其实也是没有什么意义的。所以一味的强行的去对比二者的区别也是没有多大的意义的。毕竟，如此微弱的差距，在排除了其他的因素之后，可能就完全的忽略不计了，在手机端，也不可能有生命回调什么的能够进行10000次。</p>
<p>所以除了可读性和需要预防循环引用。block带来开发效率的提升还是特别的快的。对于第三方库使用delegate的原因，我猜想还是因为使用delegate更贴近于原生的OC代码,毕竟是写出来给别人使用的，更原生，可能更友好。而我们更熟悉的<code>AFNetworking</code> 也是用的block回调网络请求的啊。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如果一个页面需要发送4个网络请求，如何监听到所有的请求都已经回调之后再刷新UI？]]></title>
      <url>http://www.CepheusSun.com/%E5%A6%82%E6%9E%9C%E4%B8%80%E4%B8%AA%E9%A1%B5%E9%9D%A2%E9%9C%80%E8%A6%81%E5%8F%91%E9%80%814%E4%B8%AA%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%EF%BC%8C%E5%A6%82%E4%BD%95%E7%9B%91%E5%90%AC%E5%88%B0%E6%89%80%E6%9C%89%E7%9A%84%E8%AF%B7%E6%B1%82%E9%83%BD%E5%B7%B2%E7%BB%8F%E5%9B%9E%E8%B0%83%E4%B9%8B%E5%90%8E%E5%86%8D%E5%88%B7%E6%96%B0UI%EF%BC%9F.html</url>
      <content type="html"><![CDATA[<p>Model里面有ABCD四个属性，这4个属性每个都不能直接用，都需要去调一个Block返回回来才能用，然后界面上的textview的值需要这4个属性来拼接，每个属性都有可能为空，最后拼出来的东西还不能打乱顺序。</p>
<a id="more"></a>
<p>看了一天的JavaScript基础语法，然后水了一下群，发现一个朋友在问这样的问题:</p>
<p><img src="http://i2.piimg.com/567571/423e50e7a0263f42.png" width=600 height=120 /></p>
<p>简单分析了一下,跟iOS一道面试题一样一样的</p>
<blockquote>
<p>如果一个页面需要发送4个网络请求，如何监听到所有的请求都已经回调之后再刷新UI？</p>
</blockquote>
<p>自己也曾经被问到过两次，当时都是说的声明一个全局变量在收到回调的时候+1，当这个变量等于4的时候再刷新UI。</p>
<p>现在看起来，这样的答案确实low得可怜。其实我是知道有dispatch group 这个东西的，但是，考虑到网络请求都是异步请求并且通过block回调的，那么block里面的内容无论有没有执行完毕，group notify 总是能够在真正受到回调才会刷新数据。</p>
<p>看到了朋友这样的问题，在群里简单的提了我用group的解决方案之后，主动提出了我写一个demo出来的建议，然后我就开始了</p>
<h3 id="temp-one"><a href="#temp-one" class="headerlink" title="temp one"></a>temp one</h3><p>首先我模拟了4个任务分别延时了0.3 0.5 0.1 和马上返回; 然后是通过block回调通知接下来的操作</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">//任务A</div><div class="line">- (void)requestA:(void (^)(NSString* ss))block &#123;</div><div class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.3 * NSEC_PER_SEC)), dispatch_queue_create(0, 0), ^&#123;</div><div class="line">        NSLog(@&quot;aa&quot;);</div><div class="line">        block();</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line">//任务B</div><div class="line">- (void)requestB:(void (^)(NSString* ss))block &#123;</div><div class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.5 * NSEC_PER_SEC)), dispatch_queue_create(0, 0), ^&#123;</div><div class="line">        NSLog(@&quot;bb&quot;);</div><div class="line">        block();</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line">//任务C</div><div class="line">- (void)requestC:(void (^)(NSString* ss))block &#123;</div><div class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.1 * NSEC_PER_SEC)), dispatch_queue_create(0, 0), ^&#123;</div><div class="line">        NSLog(@&quot;cc&quot;);</div><div class="line">        block();</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line">//任务D</div><div class="line">- (void)requestD:(void (^)())block &#123;</div><div class="line">    NSLog(@&quot;dd&quot;);</div><div class="line">    block();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于我要模拟的是在后台的情况下执行请求任务，所以我果断的讲dispatch中的<code>dispatch_get_main_queue</code> 改成了 <code>dispatch_queue_create(0, 0)</code></p>
<p>然后我写了这样的代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">- (void)sendRequestA &#123;</div><div class="line">    dispatch_group_t group = dispatch_group_create();</div><div class="line">    dispatch_queue_t queue = dispatch_get_global_queue(0, 0);</div><div class="line">    </div><div class="line">    </div><div class="line">    dispatch_group_async(group, queue, ^&#123;</div><div class="line">        [self requestA:^(NSString* ss)&#123;</div><div class="line">            NSLog(@&quot;%@&quot;,ss);</div><div class="line">        &#125;];</div><div class="line">    &#125;);</div><div class="line">    dispatch_group_async(group, queue, ^&#123;</div><div class="line">        [self requestB:^(NSString* ss)&#123;</div><div class="line">            NSLog(@&quot;%@&quot;,ss);</div><div class="line">        &#125;];</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    dispatch_group_async(group, queue, ^&#123;</div><div class="line">        [self requestC:^(NSString* ss)&#123;</div><div class="line">            NSLog(@&quot;%@&quot;,ss);</div><div class="line">        &#125;];</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    dispatch_group_async(group, queue, ^&#123;</div><div class="line">        [self requestD:^(NSString* ss)&#123;</div><div class="line">            NSLog(@&quot;%@&quot;,ss);</div><div class="line">        &#125;];</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    dispatch_group_notify(group, dispatch_get_main_queue(), ^&#123;</div><div class="line">        NSLog(@&quot;over&quot;);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我以为这个问题就解决了，然后我很自信的运行了一下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">2016-07-27 16:00:51.268 IB[1944:308855] dd</div><div class="line">2016-07-27 16:00:51.268 IB[1944:308823] over</div><div class="line">2016-07-27 16:00:51.372 IB[1944:308823] cc</div><div class="line">2016-07-27 16:00:51.602 IB[1944:308823] aa</div><div class="line">2016-07-27 16:00:51.796 IB[1944:308823] bb</div></pre></td></tr></table></figure>
<p>很显然我弄错了;</p>
<p>仔细阅读了一下代码和输出的值之后我意识到了，block回调是在notify之后执行的</p>
<h3 id="temp-two"><a href="#temp-two" class="headerlink" title="temp two"></a>temp two</h3><p>然后我看了下意思的输入了disoatch_group。</p>
<p><img src="http://i1.piimg.com/567571/81a097ba5898ac7f.png" width=600 height=120 /></p>
<p>等等<code>disoatch_group_enter</code> <code>disoatch_group_wait</code>  <code>disoatch_group_leave</code> 这三个东西是什么鬼？<br>然后简单百度了一下,然后我就改了一下代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">- (void)sendRequest &#123;</div><div class="line">    dispatch_group_t group = dispatch_group_create();</div><div class="line"></div><div class="line">    dispatch_group_enter(group);</div><div class="line">    dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</div><div class="line">        [self requestA:^(NSString* ss) &#123;</div><div class="line">            dispatch_group_leave(group);</div><div class="line">        &#125;];</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    dispatch_group_enter(group);</div><div class="line">    dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</div><div class="line">        [self requestB:^(NSString* ss) &#123;</div><div class="line">            dispatch_group_leave(group);</div><div class="line">        &#125;];</div><div class="line">    &#125;);</div><div class="line">    dispatch_group_enter(group);</div><div class="line">    dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</div><div class="line">        [self requestC:^(NSString* ss) &#123;</div><div class="line">            dispatch_group_leave(group);</div><div class="line">        &#125;];</div><div class="line">    &#125;);</div><div class="line">    dispatch_group_enter(group);</div><div class="line">    dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</div><div class="line">        [self requestD:^(NSString* ss) &#123;</div><div class="line">            dispatch_group_leave(group);</div><div class="line">        &#125;];</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    dispatch_group_wait(group, DISPATCH_TIME_FOREVER);</div><div class="line"></div><div class="line">    dispatch_async(dispatch_get_main_queue(), ^&#123;</div><div class="line">        NSLog(@&quot;刷新UI&quot;);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再运行一下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">2016-07-27 16:21:25.110 IB[2048:328327] ddd</div><div class="line">2016-07-27 16:21:25.219 IB[2048:328327] ccc</div><div class="line">2016-07-27 16:21:25.431 IB[2048:328327] aaa</div><div class="line">2016-07-27 16:21:25.658 IB[2048:328327] bbb</div><div class="line">2016-07-27 16:21:25.658 IB[2048:328295] 刷新UI</div></pre></td></tr></table></figure>
<p>搞定！</p>
<h3 id="temp-three"><a href="#temp-three" class="headerlink" title="temp three"></a>temp three</h3><p>最开始我在四个任务方法里面的<code>dispatch_after</code>都是Xcode 代码自动补全出来的,参数都是<code>dispatch_get_main_queue()</code> ,在第一次尝试的时候输出并没有什么不一样。</p>
<p>但是在第二次尝试的时候输出变成了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2016-07-27 16:23:29.547 IB[2062:330077] ddd</div></pre></td></tr></table></figure>
<p>我想到了这应该是死锁造成的，因为在四个模拟任务中出了第四个<code>dispatch_after</code>都将回调放到主线程去了，而</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dispatch_group_wait(group, DISPATCH_TIME_FOREVER);</div></pre></td></tr></table></figure>
<p>也是在主线程wait的,考虑到UI的任务都是在主线程中执行的所以我在demo中引入了一个tableview，果然，wait的时候tableview也是卡死的，所以，呵呵。折腾了半天，还是没有找到合适的办法，我决定再深入的看一下文档;</p>
<p>然后我看了一下</p>
<p><img src="http://i4.piimg.com/567571/b6e3b6ef4164d064.png" width=150 height=200 /></p>
<p>这本书<br>看到了这句话<br><img src="http://i4.piimg.com/567571/af4266a02564281b.png" width=600 height=80 /></p>
<p>所以我将调用request的方法改了一下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">- (void)sendRequest &#123;</div><div class="line">    dispatch_group_t group = dispatch_group_create();</div><div class="line"></div><div class="line">    dispatch_group_enter(group);</div><div class="line">    dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</div><div class="line">        [self requestA:^(NSString* ss) &#123;</div><div class="line">            NSLog(@&quot;%@&quot;,ss);</div><div class="line">            dispatch_group_leave(group);</div><div class="line">        &#125;];</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    dispatch_group_enter(group);</div><div class="line">    dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</div><div class="line">        [self requestB:^(NSString* ss) &#123;</div><div class="line">            NSLog(@&quot;%@&quot;,ss);</div><div class="line">            dispatch_group_leave(group);</div><div class="line">        &#125;];</div><div class="line">    &#125;);</div><div class="line">    dispatch_group_enter(group);</div><div class="line">    dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</div><div class="line">        [self requestC:^(NSString* ss) &#123;</div><div class="line">            NSLog(@&quot;%@&quot;,ss);</div><div class="line">            dispatch_group_leave(group);</div><div class="line">        &#125;];</div><div class="line">    &#125;);</div><div class="line">    dispatch_group_enter(group);</div><div class="line">    dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</div><div class="line">        [self requestD:^(NSString* ss) &#123;</div><div class="line">            NSLog(@&quot;%@&quot;,ss);</div><div class="line">            dispatch_group_leave(group);</div><div class="line">        &#125;];</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    dispatch_async(dispatch_queue_create(0, 0), ^&#123;</div><div class="line">        dispatch_group_wait(group, DISPATCH_TIME_FOREVER);</div><div class="line">        dispatch_async(dispatch_get_main_queue(), ^&#123;</div><div class="line">            NSLog(@&quot;刷新UI&quot;);</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>问题完美解决。</p>
<h3 id="temp-four"><a href="#temp-four" class="headerlink" title="temp four"></a>temp four</h3><p>后来我又想了一下，查了一下相关资料,写下了一下代码，然后发现这样也是可以的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">- (void)sendRequestB &#123;</div><div class="line">    dispatch_group_t group = dispatch_group_create();</div><div class="line">    </div><div class="line">    dispatch_group_enter(group);</div><div class="line">    dispatch_group_async(group, dispatch_get_global_queue(0, 0), ^&#123;</div><div class="line">        [self requestA:^(NSString *ss) &#123;</div><div class="line">            NSLog(@&quot;%@&quot;,ss);</div><div class="line">            dispatch_group_leave(group);</div><div class="line">        &#125;];</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    dispatch_group_enter(group);</div><div class="line">    dispatch_group_async(group, dispatch_get_global_queue(0, 0), ^&#123;</div><div class="line">        [self requestB:^(NSString *ss) &#123;</div><div class="line">            NSLog(@&quot;%@&quot;,ss);</div><div class="line">            dispatch_group_leave(group);</div><div class="line">        &#125;];</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    dispatch_group_enter(group);</div><div class="line">    dispatch_group_async(group, dispatch_get_global_queue(0, 0), ^&#123;</div><div class="line">        [self requestC:^(NSString *ss) &#123;</div><div class="line">            NSLog(@&quot;%@&quot;,ss);</div><div class="line">            dispatch_group_leave(group);</div><div class="line">        &#125;];</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    dispatch_group_enter(group);</div><div class="line">    dispatch_group_async(group, dispatch_get_global_queue(0, 0), ^&#123;</div><div class="line">        [self requestD:^(NSString *ss) &#123;</div><div class="line">            NSLog(@&quot;%@&quot;,ss);</div><div class="line">            dispatch_group_leave(group);</div><div class="line">        &#125;];</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    dispatch_group_notify(group, dispatch_get_main_queue(), ^&#123;</div><div class="line">        NSLog(@&quot;over&quot;);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所以我大胆的得出了如果在block情况下使用<code>dispatch_grop</code>是需要在开始人物的时候<code>enter</code> 并且在结束任务的时候<code>leave</code> 这样的话使用<code>dispatch_notify</code>也是能够达到同样的效果的。</p>
<h3 id="temp-five"><a href="#temp-five" class="headerlink" title="temp five"></a>temp five</h3><p>查阅了猿题库YTKNetwork相关代码之后，看到了<code>YTKBatchRequest</code>这个类,他的<code>init</code>方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">- (id)initWithRequestArray:(NSArray *)requestArray &#123;</div><div class="line">    self = [super init];</div><div class="line">    if (self) &#123;</div><div class="line">        _requestArray = [requestArray copy];</div><div class="line">        _finishedCount = 0;</div><div class="line">        for (YTKRequest * req in _requestArray) &#123;</div><div class="line">            if (![req isKindOfClass:[YTKRequest class]]) &#123;</div><div class="line">                YTKLog(@&quot;Error, request item must be YTKRequest instance.&quot;);</div><div class="line">                return nil;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return self;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>并且这个类有一个property <code>finishedCount</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@property (nonatomic) NSInteger finishedCount;</div></pre></td></tr></table></figure>
<p>而且这个property出了在<code>initWithRequestArray</code>中进行了原始赋值以外只在<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (void)requestFinished:(YTKRequest *)request;</div></pre></td></tr></table></figure></p>
<p>这个方法里面使用到了。</p>
<p>大概猜到了YTKNetwork在处理批量网络请求的时候，应该是先调用<code>initWithRequestArray</code>这个初始化方法，把所有网络请求的实例放进去，然后再调用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- (void)startWithCompletionBlockWithSuccess:(void (^)(YTKBatchRequest *batchRequest))success</div><div class="line">                                    failure:(void (^)(YTKBatchRequest *batchRequest))failure &#123;</div><div class="line">    [self setCompletionBlockWithSuccess:success failure:failure];</div><div class="line">    [self start];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个方法开始举行网络请求，最后通过<code>finishedCount</code>这个熟悉来进行回调，如果有某一个失败了，那最后就返回失败巴拉巴拉…<br>这段写的有点水，主要是没有十分仔细的去阅读YTKNetwork的源码。大概看了一下，YTKNetwork的处理思路跟我之前的思路有些不谋而合，也是通过添加一个flag值来判断回调是否全部收到。不过经过猿题库团队的封装之后,这种问题的处理方式就变得更加的优雅了。</p>
<p>由于我demo只是写了几个简单的方法来模拟这种应用场景，所以我也简单的用YTK的思路来进行一下模拟</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">- (void)sendRequestC &#123;</div><div class="line">    _requesrCount_ = 0;</div><div class="line">    // 模拟的数组</div><div class="line">//    NSArray *requestArray = @[@&quot;A&quot;,@&quot;B&quot;,@&quot;C&quot;,@&quot;D&quot;];</div><div class="line">    dispatch_queue_t queue = dispatch_queue_create(0, 0);</div><div class="line">    dispatch_async(queue, ^&#123;</div><div class="line">        [self requestA:^(NSString *ss) &#123;</div><div class="line">            NSLog(@&quot;%@&quot;,ss);</div><div class="line">            [self finishRequest];</div><div class="line">        &#125;];</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    dispatch_async(queue, ^&#123;</div><div class="line">        [self requestB:^(NSString *ss) &#123;</div><div class="line">            NSLog(@&quot;%@&quot;,ss);</div><div class="line">            [self finishRequest];</div><div class="line">        &#125;];</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    dispatch_async(queue, ^&#123;</div><div class="line">        [self requestC:^(NSString *ss) &#123;</div><div class="line">            NSLog(@&quot;%@&quot;,ss);</div><div class="line">            [self finishRequest];</div><div class="line">        &#125;];</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    dispatch_async(queue, ^&#123;</div><div class="line">        [self requestD:^(NSString *ss) &#123;</div><div class="line">            NSLog(@&quot;%@&quot;,ss);</div><div class="line">            [self finishRequest];</div><div class="line">        &#125;];</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">&#125;</div><div class="line">- (void)finishRequest &#123;</div><div class="line">    _requesrCount_ ++;</div><div class="line">    //由于没有模拟,所以没有使用array.count来判断</div><div class="line">    if (_requesrCount_ == 4) &#123;</div><div class="line">        dispatch_async(dispatch_get_main_queue(), ^&#123;</div><div class="line">            NSLog(@&quot;over&quot;);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果是:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">2016-07-29 14:58:23.068 IB[3403:280129] ddd</div><div class="line">2016-07-29 14:58:23.169 IB[3403:280164] ccc</div><div class="line">2016-07-29 14:58:23.390 IB[3403:280164] aa</div><div class="line">2016-07-29 14:58:29.091 IB[3403:280164] bbb</div><div class="line">2016-07-29 14:58:29.091 IB[3403:280129] over</div></pre></td></tr></table></figure>
<p>好了第三种思路完成。</p>
<h3 id="temp-six"><a href="#temp-six" class="headerlink" title="temp six"></a>temp six</h3><p>然后我又看到资料说GCD的信号量也能实现这种需求，看了一下相关资料，然后我是这写了这段代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">- (void)sendRequestD&#123;</div><div class="line">    dispatch_group_t group =  dispatch_group_create();</div><div class="line">    dispatch_group_enter(group);</div><div class="line">    dispatch_group_async(group, dispatch_get_global_queue(0, 0), ^&#123;</div><div class="line">        dispatch_semaphore_t semapore = dispatch_semaphore_create(0);</div><div class="line">        dispatch_async(dispatch_queue_create(0, 0), ^&#123;</div><div class="line">            [self requestA:^(NSString *ss) &#123;</div><div class="line">                NSLog(@&quot;%@&quot;,ss);</div><div class="line">                dispatch_semaphore_signal(semapore);</div><div class="line">            &#125;];</div><div class="line">        &#125;);</div><div class="line">        dispatch_semaphore_wait(semapore, DISPATCH_TIME_FOREVER);</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    </div><div class="line">    dispatch_group_async(group, dispatch_get_global_queue(0, 0), ^&#123;</div><div class="line">        dispatch_semaphore_t semapore = dispatch_semaphore_create(0);</div><div class="line">        dispatch_async(dispatch_queue_create(0, 0), ^&#123;</div><div class="line">            [self requestB:^(NSString *ss) &#123;</div><div class="line">                NSLog(@&quot;%@&quot;,ss);</div><div class="line">                dispatch_semaphore_signal(semapore);</div><div class="line">            &#125;];</div><div class="line">        &#125;);</div><div class="line">        dispatch_semaphore_wait(semapore, DISPATCH_TIME_FOREVER);</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    dispatch_group_async(group, dispatch_get_global_queue(0, 0), ^&#123;</div><div class="line">        dispatch_semaphore_t semapore = dispatch_semaphore_create(0);</div><div class="line">        dispatch_async(dispatch_queue_create(0, 0), ^&#123;</div><div class="line">            [self requestC:^(NSString *ss) &#123;</div><div class="line">                NSLog(@&quot;%@&quot;,ss);</div><div class="line">                dispatch_semaphore_signal(semapore);</div><div class="line">            &#125;];</div><div class="line">        &#125;);</div><div class="line">        dispatch_semaphore_wait(semapore, DISPATCH_TIME_FOREVER);</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    </div><div class="line">    dispatch_group_async(group, dispatch_get_global_queue(0, 0), ^&#123;</div><div class="line">        dispatch_semaphore_t semapore = dispatch_semaphore_create(0);</div><div class="line">        dispatch_async(dispatch_queue_create(0, 0), ^&#123;</div><div class="line">            [self requestD:^(NSString *ss) &#123;</div><div class="line">                NSLog(@&quot;%@&quot;,ss);</div><div class="line">                dispatch_semaphore_signal(semapore);</div><div class="line">            &#125;];</div><div class="line">        &#125;);</div><div class="line">        dispatch_semaphore_wait(semapore, DISPATCH_TIME_FOREVER);</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    dispatch_group_notify(group, dispatch_get_main_queue(), ^&#123;</div><div class="line">        NSLog(@&quot;over&quot;);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>很不幸:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">2016-07-29 15:44:21.322 IB[3553:314160] ddd</div><div class="line">2016-07-29 15:44:21.424 IB[3553:314355] ccc</div><div class="line">2016-07-29 15:44:21.639 IB[3553:314355] aa</div><div class="line">2016-07-29 15:44:21.842 IB[3553:314355] bbb</div></pre></td></tr></table></figure>
<p>over是没有打印出来的，具体原因，我等我再仔细查找查找吧！</p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>没有结语,不知道具体实践中有没有其他更好的办法。如果有，也可以给我留言，我们一起讨论。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS中的预编译指令]]></title>
      <url>http://www.CepheusSun.com/iOS%E4%B8%AD%E7%9A%84%E9%A2%84%E7%BC%96%E8%AF%91%E6%8C%87%E4%BB%A4%E7%9A%84%E5%88%9D%E6%AD%A5%E6%8E%A2%E7%A9%B6-%E8%BD%AC.html</url>
      <content type="html"><![CDATA[<p>iOS中的一些预编译指令。<br><a id="more"></a></p>
<h2 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h2><p>举一个简单的的例子，老婆说了句“你给我滚出去睡沙发”。这句话的处理流程事这样的</p>
<p><img src="http://i4.piimg.com/567571/5d9de7ecac719da4.png" width=600 height=400 /></p>
<p>程序的编译其实就是计算机在执行过程之前，把老婆的命令转换成电信号的过程。在计算机世界中，这个玩意儿叫过编译器（compiler），什么GCC啊clang啊什么什么的都是说的这个东西。看起来很高大上，其实就是一个翻译的东西。人把老婆的指令翻译成电波，编译器把各种语言翻译成01010101….</p>
<pre><code>ps : 这篇文章是我在阅读了戴伟来的文章之后,根据原文整理的一个笔记。所以文中会有很多地方都摘录了文中的句子。感谢@戴伟来。如果你想直接看一下原文的话，最后有链接。
</code></pre><blockquote>
<p>编译器的工作原理基本上都是三段式的，前端、优化器、后端。</p>
<blockquote>
<p>前端负责解析源码，检查语法错误，并将其翻译成抽象的语法树; </p>
<p>优化器对这一中间代码进行优化，使代码更佳高效。</p>
<p>后端负责将优化过的代码转化成对应机器的代码。</p>
</blockquote>
</blockquote>
<p><img src="http://i4.piimg.com/567571/68513aafd1af8015.png" width=650 height=180 /></p>
<p>LLVC编译器实际上是用C++写的，那C++的编译器呢？当然是汇编了，所以编译器和计算机语言的进步就是这样迭代发展的，再之后就是用高级语言写更高级的编译器，更高级的编译器就能编译更加高级的语言….那么问题来了，世界上计算机语言那么多，各种不同的架构，Intel ARM，怎么让编译语言分别产生不同的架构的执行码呢，这个时候就应该想到刚刚的三段式模型了，当我们要支持多种语言的时候，只需要添加多个前端就可以了。当我们要支持多种目标机器的时候，只需要添加多个后端就可以了。对于中间的优化器，我们可以使用通用的中间代码。gcc可以支持c、cpp、java….等语言的编译。</p>
<p><img src="http://i2.piimg.com/567571/fbcad0c8c26e0977.png" width=650 height=180 /></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>由于文中作者使用的是Xcode6，但是现在我已经用到了Xcode7.3，而Xcode8页已经beta了。所以我讲使用我目前正在使用的Xcode7.3来进行本文。由于APPLE已经不在Xcode中内置GCC了，所以我就只能研究研究LLVM了。</p>
<p>如果对各种编译器的区别感兴趣的话可以看看下面两篇文章</p>
<ul>
<li><a href="http://www.cnblogs.com/zuopeng/p/4141467.html"><em>《LLVM和GCC的区别》</em></a></li>
<li><a href="http://www.programmer.com.cn/9436/"><em>《《三好学生Chris Lattner的LLVM编译工具链》》</em></a></li>
</ul>
<p>如果阅读过优秀的源码，你一定会看到很多的<code>#define</code> <code>#if</code> <code>#error</code>之类的代码,预编译对程序之后的编译提供了很多方便以及优化，对于错误处理，包引用、跨平台等都有着极大的帮助。</p>
<h3 id="包含文件"><a href="#包含文件" class="headerlink" title="包含文件"></a>包含文件</h3><h4 id="include"><a href="#include" class="headerlink" title="#include"></a>#include</h4><p><code>#include&quot; &quot;</code> 、<code>#include&lt; &gt;</code>的区别:<code>#include“”</code>包含和使用<code>#include &lt; &gt;</code>包含的不同之处就是使用&lt;&gt;包含时，预处理器会搜索C函数库头文件路径下的文件，而使用“”包含时首先搜索程序所在目录，其次搜索系统Path定义目录，如果还是找不到才会搜索C函数库头文件所在目录。</p>
<blockquote>
<p>使用#include的时候包含文件的时候是不能递归包含的，例如a.h文件包含b.h，而b.h就不<br>能再包含a.h了；还有就是重复包含(比如a.h包含了b.h,然后main.c中又包含了a.h和b.h)虽然是允许的但是这会降低编译性能。那该怎么办呢？</p>
<blockquote>
<ol>
<li>使用#import替代include</li>
<li>使用宏判断(宏判断下面会详解)，xcode很聪明，只要新建一个头文件a.h 里面就自动就生成了</li>
</ol>
</blockquote>
</blockquote>
<h4 id="include-next"><a href="#include-next" class="headerlink" title="#include_next"></a>#include_next</h4><p>这个是非C标准库里面的预处理指令,我没有用过。</p>
<h4 id="import"><a href="#import" class="headerlink" title="#import"></a>#import</h4><p>OC特有的，智能的<code>＃include</code>,解决了<code>＃include</code>的重复包含问题。</p>
<h3 id="宏定义"><a href="#宏定义" class="headerlink" title="宏定义"></a>宏定义</h3><h4 id="define"><a href="#define" class="headerlink" title="#define"></a>#define</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//this defines PI</div><div class="line">#define M_PI 3.141592</div></pre></td></tr></table></figure>
<p><code>#define</code> 关键字表面即将开始定义一个宏，M_PI是宏的名字，空格过后是宏的内容。类似这样的宏编译器会在语义分析之后讲M_PI替换为3.14159，这是宏的最基本用法。</p>
<p>还有一种是函数宏函数宏顾名思义，就是行为类似函数，可以接受参数的宏。具体来说，在定义的时候，如果我们在宏名字后面跟上一对括号的话，这个宏就变成了函数宏。从最简单的例子开始，比如我在开发中最常用的两个宏</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#define WS(weakSelf) __weak __typeof(&amp;*self)weakSelf = self;</div><div class="line">#define SS(strongSelf) __strong typeof(&amp;*weakSelf) strongSelf = weakSelf;</div></pre></td></tr></table></figure>
<p>这两个宏的意思应该不用我说了吧，如果你没看懂而且你又喜欢用block的话，那建议你用instrument 的leaks看看是不是一串红点。</p>
<p>原文中还有一个MIN宏定义的正确用法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#define MIN(A,B)    (&#123; __typeof__(A) __a = (A); __typeof__(B) __b = (B); __a &lt; __b ? __a : __b; &#125;)</div></pre></td></tr></table></figure>
<p>接下来再把我使用的log宏放出来</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#ifdef DEBUG</div><div class="line">#   define PSLog(fmt, ...) NSLog((@&quot;%s [%d 行] &quot; fmt), __PRETTY_FUNCTION__, __LINE__, ##__VA_ARGS__);</div><div class="line">#else</div><div class="line">#   define PSLog(...)</div><div class="line">#endif</div></pre></td></tr></table></figure>
<p>这个宏的意思请分别在release 和 debug下测试</p>
<h4 id="＃undef"><a href="#＃undef" class="headerlink" title="＃undef"></a>＃undef</h4><p>当你使用了<code>#define</code>宏定义后，则在整个程序的运行周期内这个宏都是有效的，但有时候我们在某个逻辑里希望这个宏失效不想使用，则会使用</p>
<h3 id="条件编译"><a href="#条件编译" class="headerlink" title="条件编译"></a>条件编译</h3><h4 id="if-else-endif"><a href="#if-else-endif" class="headerlink" title="#if #else #endif"></a>#if #else #endif</h4><p>如果<code>＃if 之后的条件语句成立的话</code>编译<code>＃else</code>里面的代码 反之编译 <code>＃else</code> 之后的代码 <code>#endif</code> 结束语句<br>接下来是一些预定的宏</p>
<ul>
<li><code>DEBUG</code> DEBUG环境下返回YES</li>
<li><code>__has_feature(objc_arc)</code> 开启ARC时返回YES</li>
<li><code>__IPHONE_OS_VERSION_MIN_REQUIRED &lt; __IPHONE_7_0</code> 如果手机系统小于7.0 返回YES,版本策略</li>
</ul>
<h4 id="if-defined-ifdef-ifndef-elif"><a href="#if-defined-ifdef-ifndef-elif" class="headerlink" title="#if defined #ifdef #ifndef #elif"></a>#if defined #ifdef #ifndef #elif</h4><ul>
<li><code>#if defined (AAA)</code> : 如果已经定义了AAA这个宏,返回YES，可用于复杂条件<code>#if defined (AAA) &amp;&amp; defined (BBB)</code>或者<code>#if defined (AAA) || VERSION &gt; 12</code></li>
<li><code>#iddef （AAA）</code>: 如果已经定义了AAA这个宏,返回YES，单个条件</li>
<li><code>#ifndef</code> : if not defined 的缩写</li>
<li><code>#elif</code> : 跟<code>#if</code>一起使用，else if的缩写</li>
</ul>
<h3 id="错误、警告处理"><a href="#错误、警告处理" class="headerlink" title="错误、警告处理"></a>错误、警告处理</h3><p>####　#error</p>
<p>如果编译器遇到这货，马上就会罢工。</p>
<p>如果你在开发一些arc only的库，那么一下代码就有了作用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#if !__has_feature(objc_arc)</div><div class="line">#error &quot;我的低调不是你装逼的资本！这个库需要开启ARC，不然你别用！&quot;</div><div class="line">#endif</div></pre></td></tr></table></figure>
<h4 id="warning"><a href="#warning" class="headerlink" title="#warning"></a>#warning</h4><p>这个用法很简单，只要后面跟上你想警告的话就OK了，这样你就可以让编译器提醒这个警告。这个我经常用。但是还有一个更好用的<code>TODO</code>脚本,一会而我会放出来。</p>
<h3 id="编译器控制"><a href="#编译器控制" class="headerlink" title="编译器控制"></a>编译器控制</h3><h4 id="pragma"><a href="#pragma" class="headerlink" title="#pragma"></a>#pragma</h4><p>这个应该算是使用的非常多的指令了吧，应该所有的程序员都应该知道代码<code>＃pragma mark</code>的作用。</p>
<h5 id="pragma-mark"><a href="#pragma-mark" class="headerlink" title="#pragma mark"></a>#pragma mark</h5><p>这个真没有什么好说的了，记得<code>＃pragma mark</code> 和<code>＃pragma mark －</code>的区别就好了</p>
<blockquote>
<p><code>#pragma</code>非常复杂需要你对编译器底层非常的了解，只有当你开发一些比较底层的framework的时候才可能比较多用的。 <a href="http://clang.llvm.org/get_started.html"><em>Clang使用手册</em></a></p>
</blockquote>
<h5 id="pragma-message-“”"><a href="#pragma-message-“”" class="headerlink" title="#pragma message(“”)"></a>#pragma message(“”)</h5><p>可以输出调试信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#pragma clang disgnostic push</div><div class="line">#pragma clang disgnostic ignored &quot;clang的参数&quot;  //屏蔽某类警告</div><div class="line">#pragma clang disgnostic pop</div></pre></td></tr></table></figure>
<p>如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#pragma clang disgnostic push</div><div class="line">#pragma clang disgnostic ignored &quot;-Wunused-variable&quot;</div><div class="line"> </div><div class="line">int i = 1;</div><div class="line">#pragma clang disgnostic pop</div></pre></td></tr></table></figure>
<p>如果没有被使用的时候不会报出警告</p>
<p>关于警告一类的文章可以看看<a href="https://onevcat.com/#blog"><em>喵神王巍</em></a>的博客。</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>#####line<br>这个就没什么好说的，如果你自定义过NSLog 或者看到其他自定义的log并且点进去看过的话应该会看得到<code>__line__</code>这个东西吧，这表示本行语句在源文件中的位置信息。而<code>＃line</code>就是可以改变当前行的行号在编译器中的表示。并且之后的行号也会相应的改变。比如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#include&lt;stdio.h&gt;</div><div class="line">main()&#123;</div><div class="line">	printf(&quot;%d\n&quot;,__line__);</div><div class="line">#line 100 // 指定下一行的__line__为100</div><div class="line">	printf(&quot;%d\n&quot;,__line__);</div><div class="line">	printf(&quot;%d\n&quot;,__line__);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出为,如果第一个printf在第三行的话</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">3</div><div class="line">100</div><div class="line">101</div></pre></td></tr></table></figure>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>刚刚开始写博客，这是我水的第二篇博文了,依然是那么的水，主要还是为了想要测试一下HEXO的玩法。以后希望自己能够在javascript 、python 、 React Native 这三个方向进步。写这个博客也是为了学习一下javescript，结果几乎没有用到js的知识。以后写一些有关于这三个方向的学习心得或者说是学习笔记吧。这篇文章发出来之后，博客的基本用法也就学的七七八八了，期待自己的进阶之旅，也期待自己在iOS的进阶之旅，也期待自己在is py rn这三个方向的入门之旅。</p>
<p><a href="http://www.cnblogs.com/daiweilai/p/4234336.html"><em>戴伟来地址</em></a></p>
<p>哦, 对了那个TODO是这样设置的：</p>
<p><img src="http://i4.piimg.com/567571/397d615e3cafdbcf.png" width=650 height=400 /></p>
<p>第四步中的脚本为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">KEYWORDS=&quot;TODO:|FIXME:|\?\?\?:|\!\!\!:&quot;</div><div class="line">find &quot;$&#123;SRCROOT&#125;&quot; \( -name &quot;*.h&quot; -or -name &quot;*.m&quot; \) -print0 | xargs -0 egrep --with-filename --line-number --only-matching &quot;($KEYWORDS).*\$&quot; | perl -p -e &quot;s/($KEYWORDS)/ warning: \$1/&quot;</div></pre></td></tr></table></figure>
<p>原理是根据正则表达式去判断。</p>
<p>用起来是这样的:</p>
<p><img src="http://i4.piimg.com/567571/e3ab0fb1840550e3.png" width=650 height=50 /></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[我是这样搭建我的博客的]]></title>
      <url>http://www.CepheusSun.com/%E6%88%91%E6%98%AF%E8%BF%99%E6%A0%B7%E6%90%AD%E5%BB%BA%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%9A%84.html</url>
      <content type="html"><![CDATA[<p>通过GitHub pages &amp; Hexo 搭建我的个人博客。<br><a id="more"></a></p>
<h3 id="说在前面的话"><a href="#说在前面的话" class="headerlink" title="说在前面的话"></a>说在前面的话</h3><p>转眼，已经做了那么久的开发了。相信跟我一样，很多的iOSer都是在<a href="http://blog.devtang.com/"><em>唐巧的技术博客</em></a>、<a href="https://onevcat.com/#blog"><em>oneV’s Den</em></a>、<a href="http://blog.ibireme.com/archive/"><em>ibireme</em></a>等等大神的技术博客里面汲取营养，每次看到那么漂亮的技术博客，总会想自己也弄一个来玩玩，在看了群里@bestswifter的介绍之后，结合另一个群里的<a href="http://www.jianshu.com/p/834d7cc0668d"><em>锤神 水瓶座_iOSer</em></a>的文章，我也完成了我的技术博客的搭建。</p>
<p>最开始也想快速搭建的，结果弄了一半公司的项目突然要拆分，所以搁置了一段时间，终于闲下来了，公司老大强烈建议我从现在开始写技术博客。想想也是，坚持总结和梳理，5年10年以后，终会是会又一些收获的，所以我也大胆的搭建了这个博客。并且按照国际案例，第一篇博文总是要说说这个博客是怎么出生的。</p>
<h3 id="简单的说一下这个博客的搭建过程"><a href="#简单的说一下这个博客的搭建过程" class="headerlink" title="简单的说一下这个博客的搭建过程"></a>简单的说一下这个博客的搭建过程</h3><blockquote>
<p>首先，这个博客是在Mac环境下进行搭建的。</p>
</blockquote>
<ol>
<li>注册Github帐号。</li>
<li>在Github上创建以第一步创建的Github用户名(name)为头的仓库name.github.io</li>
<li>在你的Mac上配置你的Hexo环境，这个嘛，看是看Hexo的官方文档比较好。<a href="https://hexo.io/zh-cn/docs/"><em>这里是传送门</em></a>;<br> ‘这一步比较复杂，坑也大多数在这里所以一定要好好的看Hexo的官方文档’</li>
<li>第三步使用命令<br> hexo clean<br> hexo g<br> hexo d   这一步如果出现not found 错误 使用npm install hexo-deployer-git –save命令解决然后再用hexo d 尝试部署</li>
<li>选择一个你喜欢的主题，这个就可以用<a href="https://www.google.com/"><em>google</em></a>、或者<a href="https://baidu.com"><em>baidu</em></a>去找了。<blockquote>
<p>我因为个人比较懒，所以用了锤神博客推荐的主题Next了，可能你们比我还懒，所以<a href="https://github.com/iissnan/hexo-theme-next"><em>传送门</em></a>去看文档吧。</p>
</blockquote>
</li>
<li>根据第5步的传送门，再去定制你自己的blog吧。由于我自己前端知识薄弱，所以现在暂时还不能深入的了解详细的细节。不过还好，公司前端就在我旁边，一些问题还能够直接请教。</li>
<li>(可选)最后一步就没什么好说的了，我不是土豪，所以没有买域名，也没有办法尝试下一步的域名绑定了。如果有朋友完成过，那么请你教我好吗？</li>
</ol>
]]></content>
    </entry>
    
  
  
</search>
